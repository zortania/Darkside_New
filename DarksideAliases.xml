<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage />
	<TimerPackage />
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Darkside 5.0</name>
			<script></script>
			<command></command>
			<packageName>Sunder v4.12</packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Darkside</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Core</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Vitals</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>setup</name>
							<script>snd.send("config wrapwidth 0")
snd.send("config separator ##")
snd.send("config auto_outc on")
snd.send("config tellsprefix on")
snd.send("config curemsgs default")
snd.send("config fishnumbers on")
send("config affliction_view on", false)
send("config simple_diag on", false)
send("config pagelength 250", false)
send("config grabcorpses on", false)
send("config viewtitles off", false)
send("config combatmessages on", false)
send("config autodoors on", false)
send("Config Ansi ON", false)
send("Config mxp on", false)
send("config simpletargeting on", false)
send("config dialogue highlight", false)
send("Config prettynumbers off", false)</script>
							<command></command>
							<packageName></packageName>
							<regex>^\?setup$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>toggles</name>
							<script>cecho("&lt;white&gt;Toggles:")
for tog in pairs(snd.toggles) do
 if snd.toggles[tog] then
  cecho("&lt;green&gt;\n"..string.title(tog))
 else
  cecho("&lt;red&gt;\n"..string.title(tog))
 end
end
send(" ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^togs$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Toggles</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>lighting</name>
							<script>snd.toggle("lighting")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(lgt|toggle lightning|toggle pipes)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>on</name>
							<script>snd.toggles.active = true
snd.channeling = false
cecho("&lt;green&gt;Darkside is ON!")
send(" ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndon$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>off</name>
							<script>snd.toggles.active = false
snd.channeling = true
cecho("&lt;red&gt;Darkside is OFF!")
send(" ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndoff$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>calling</name>
							<script>snd.clearTargetList()
snd.toggle("calling")
</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tcl|toggle calling)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>affcalling</name>
							<script>snd.toggle("affcalling")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(acl|toggle affcalling)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>gallop</name>
							<script>snd.toggle("gallop")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tgl|toggle gallop)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>newb basher</name>
							<script>snd.toggle("newbie")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tnewb|toggle newbie)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>parry</name>
							<script>snd.toggle("parrying")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tpry|toggle parry)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>attack echoes</name>
							<script>snd.toggle("atkecho")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tatk|toggle attack echo)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>listening</name>
							<script>if matches[2] == "off" then
  if snd.toggles.listening then
    snd.toggle("listening")
    snd.callers = {}
  end
else
  if not snd.toggles.listening then
    snd.toggle("listening")
  end
  snd.toggles.listening = true
  if snd.offense_loaded then
    snd.callers = {}
    for name in string.gmatch(matches[2], '([^ ]+)') do
      table.insert(snd.callers, string.title(name))
    end
    cecho("&lt;white&gt;Listening to: &lt;green&gt;"..table.concat(snd.callers, "&lt;white&gt;, &lt;green&gt;").."&lt;white&gt;!")
    send(" ")
  else
    cecho("&lt;white&gt;Listening &lt;green&gt;ON&lt;white&gt;!")
    send(" ")
  end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^ls (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>scepter bashing</name>
							<script>snd.toggle("scepter")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tscp$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>rockharvest</name>
							<script>snd.toggle("rockharvest")
</script>
							<command></command>
							<packageName></packageName>
							<regex>^trh$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>lightning</name>
							<script>snd.toggle("lightning")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tlgt|toggle lightning)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>dash</name>
							<script>snd.toggle("dash")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tds$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>roe</name>
							<script>snd.toggle("roe")</script>
							<command></command>
							<packageName></packageName>
							<regex>^troe$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Purge/Purify/Scour</name>
							<script>if snd.class == "Praenomen" then
	snd.toggle("purify")
elseif snd.class == "Carnifex" then
	snd.toggle("purge")
elseif snd.class == "Warden" then
	snd.toggle("purge")
elseif snd.class == "Teradrim" then
	snd.toggle("scour")
elseif snd.class == "Shaman" then
	snd.toggle("panacea")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^pon$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Disperse</name>
							<script>if matches[2] ~= "none" and matches[2]~= "callers" and matches[2]~="all" then 
	send(" ")
	cecho("\n&lt;red&gt;Not a viable choice! &lt;white&gt;Enter either: &lt;red&gt;none &lt;white&gt;| &lt;yellow&gt;callers &lt;white&gt;| &lt;green&gt;all")
	snd.toggles.dispersing = false
else
	snd.disperse = matches[2]
	if snd.disperse == "none" then
		snd.toggles.dispersing = false
		send(" ")
		cecho("\n&lt;red&gt;Dispersing is now off.")
	else
		snd.toggles.dispersing = true
		send(" ")
		cecho("\n&lt;red&gt;Dispersing: &lt;green&gt;"..snd.disperse)
	end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle disperse (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Chameleon</name>
							<script>snd.toggle("chameleon")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tcm|toggle chameleon)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Auto Chameleon</name>
							<script>snd.toggle("cham")
local cham = math.random(#snd.shadow)
if snd.toggles.cham then
  snd.set_queue("chameleon " ..snd.shadow[cham], false)
end

</script>
							<command></command>
							<packageName></packageName>
							<regex>^rcham$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Support</name>
							<script>snd.toggle("support")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle support$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Questing</name>
							<script>snd.toggle("questing")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle questing$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Torc</name>
							<script>snd.toggle("torc")</script>
							<command></command>
							<packageName></packageName>
							<regex>^torcon$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Farming</name>
							<script>snd.toggle("farm")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle farming$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>auto reject lust</name>
							<script>snd.toggle("auto_reject")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle reject$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Gag non target curing</name>
							<script>snd.toggle("nontargetgags")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle non target gagging$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Aegis auto use</name>
							<script>snd.toggle("aegis")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle aegis$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Goggle level</name>
							<script>if matches[3] then
  cecho("&lt;red&gt;You have set your ylem goggles level to:&lt;orange_red&gt; "..matches[3].."&lt;red&gt;.")
  snd.toggles.goggle_level = matches[3]
  snd.goggle_update()
else
  cecho("&lt;red&gt;You have set your ylem goggles level to:&lt;orange_red&gt; "..snd.toggles.goggle_level.."&lt;red&gt;.")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(mygoggles|mygoggles (\d+))$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Ylem Goggles</name>
							<script>snd.toggle("goggles")
snd.goggle_update()
  
</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle goggles$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Gag Things</name>
							<script>snd.toggle("nontargetgags")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle non target gagging$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>rock city</name>
							<script>if snd.toggles.rockharvest then
  snd.rock_on = true
  if snd.city == "Spinesreach" then
		snd.send("path track 11687")
		snd.which_path = "verminspines"
	elseif snd.city == "Bloodloch" then
		snd.send("path track 9193")
		snd.which_path = "verminbloodloch"
	elseif snd.city == "Duiran" then
		snd.send("path track 44060")
		snd.which_path = "verminduiran"	
	elseif snd.city == "Enorian" then
		snd.send("path track 56484")
		snd.which_path = "verminenorian"	
	end
	enableTimer("moveroom")
	
	if snd.which_path ~= "" then
  	bot.going = true
		bot.path =  sndpathpick()
	end
else
  snd.rock_on = false
  bot.going = false
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^trc$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Misc</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>mount</name>
							<script>if gmcp.Char.Status.name == "Rihrin" then
  snd.mount = "93217" -- your horse's ID number
elseif gmcp.Char.Status.name == "Beivu" then
  snd.mount = "218570" -- your horse's ID number
end
snd.send("qeb recall "..snd.mount..snd.sep.."recall mount"..snd.sep.."quickmount "..snd.mount)
</script>
							<command></command>
							<packageName></packageName>
							<regex>^mnt$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>dismount</name>
							<script>if gmcp.Char.Status.name == "Rihrin" then
  snd.mount = "93217" -- your horse's ID number
elseif gmcp.Char.Status.name == "Beivu" then
  snd.mount = "218570" -- your horse's ID number
end
snd.send("qeb qdmount"..snd.sep.."order "..snd.mount.." follow me")</script>
							<command></command>
							<packageName></packageName>
							<regex>^dm$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>shield tattoo</name>
							<script>snd.toggles.attacking = false
snd.toggles.bashing = false
snd.toggles.fasthunt = false
if snd.toggles.attacking then
 snd.send("undefend")
end
if snd.have_aff("paresis") then
 snd.send("firstaid elevate paresis")
end
if snd.class == "Carnifex" then
 snd.send("qeb soul shield")
elseif snd.class == "Warden" then
 snd.send("qeb soul shield")
else
 snd.send("qeb touch shield tattoo")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^ts$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>wield none</name>
							<script>if (snd.wielded.left.name or snd.wielded.right.name) == "a Master Gulleye's Rod" then
	snd.send("unwield pole")	
else
	snd.send("wipe left"..snd.sep.."wipe right"..snd.sep.."secure left"..snd.sep.."secure right"..snd.sep.."wear tower"..snd.sep.."wear buckler"..snd.sep.."wear shield")
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^wnon$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>directions</name>
							<script>if snd.toggles.calling then
 snd.send("qeb get monolith"..snd.sep..matches[2]..snd.sep.."drop monolith")
else
 snd.send("qeb "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(n|e|s|w|ne|nw|se|sw|in|up?|out|o|d|down)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Landmarks w/descriptions</name>
							<script>snd.landmarks_descs = {
["eno"] = "enorian",
["dui"] = "duiran",
["sp"] = "spinesreach",
["bl"] = "bloodloch",
["es"] = "esterport",
["crack"] = "Bloodloch meeting place",
["ty"] = "templar training room",
["rd"] = "Rising dawn - hidden room in enorian",
["milk"] = "Enorian milking room",
["bp"] = "boiling point, bloodloch training room",
["im"] = "ironmaw, spinesreach training room",
["dir"] = "directory",
["tear"] = "tear of lleis for reviving folks instantly",
["tw"] = "three widows",
["tw1"] = "three widows mine (quest)",
["tw2"] = "three widows cows (quest)",
["tw3"] = "jinjin (quest)",
["tw4"] = "turn in alpacas (quest)",
["tw5"] = "turn in kestrels (quest)",
["stp"] = "spinesreach stipend",
["hlb"] = "radek in helba (quest)",
["hlbp"] = "helba pickaxes for sale (quest)",
["hlbm"] = "helba mine (quest)",
["ag"] = "agrasha (quest)",
["put"] = "putoran (quest)",
["gre"] = "grecht with the garden (quest)",
["oy"] = "oysters for bruce (quest)",
["bruce"] = "turn in sapphires (quest)",
["ann"] = "annaria (quest)",
["tue"] = "tuera (quest)",
["tlm"] = "near tellimerius, so darkies don't die (quest)",
["tlmt"] = "turn in tellimerius (quest)",
["vn"] = "venicus (quest)",
["vn1"] = "venicus turnin (quest)",
["sr"] = "siroccian mountains",
["sr1"] = "turn in ores, nuggets, and coal (quest)",
["sr2"] = "if you found the chest with the axe (quest)",
["ms1"] = "24493 (quest)",
["ms2"] = "65216 (quest)",
["ms3"] = "59970 (quest)",
["ms4"] = "60126 (quest)",
["ms5"] = "59967 (quest)",
["ms6"] = "59955 (quest)",
["or"] = "orrery",
["hg"] = "4746",
["nighteye"] = "9342",
["claw"] = "9341",
["shade"] = "6090",
["staghelm"] = "9348",
["silence"] = "4614",
["rose"] = "9341",
["ivory"] = "6842",
["rowan"] = "6842",
["hgshrine"] = "23489",
}

display(snd.landmarks_descs)</script>
							<command></command>
							<packageName></packageName>
							<regex>^landmarkst$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>landmarks</name>
							<script>if snd.landmarks[matches[2]] then
 --snd.send("path track "..snd.landmarks[matches[2]])
 snd.moving_to = snd.landmarks[matches[2]]
else
 --snd.send("path track "..matches[2])
 snd.moving_to = matches[2]
end
snd.core()</script>
							<command></command>
							<packageName></packageName>
							<regex>^pth (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Auto Harvest Rocks</name>
							<script>if snd.toggles.rockharvest then
  snd.which_path = ""
  
  if matches[3] then
    if matches[3] == "bloodwood" or matches[3] == "vortex" or matches[3] == "lair" or matches[3] == "endgame" or matches[3] == "high" or matches[3] == "medium" or matches[3] == "low" then 
      snd.which_path = matches[3]
    else
		  cecho("\n&lt;red&gt;Not a viable choice! Enter a viable choice or only enter 'gogo'!")
		  cecho("\n&lt;green&gt;bloodwood (99+ and separate), vortex (99+ and separate), luziths lair (99+ and separate), endgame (93+), high (61-93), medium (31-60), and low (1-30)")
    end
  else
    local level = ""
    for check in string.gmatch(gmcp.Char.Status.level, '[%d]+') do
      if level == "" then
			   level = tonumber(check)
  		end
    end
    if level &gt; 93 then
		  snd.which_path = "endgame"
    elseif (level &lt; 93 and level &gt; 60) then
		  snd.which_path = "high"
    elseif (level &lt; 60 and level &gt; 31) then
		  snd.which.path = "medium"
	  else
  		snd.which_path = "low"
  	end
  end
  
  if snd.rock_on then
	  snd.rock_on = false
	  bot.going = false
	  echo("ROCK HARVEST OFF")
  else
	  snd.rock_on = true
	  echo("ROCK HARVEST ON")
	end

  
	if snd.which_path ~= "" then
  	bot.going = true
		bot.path =  sndpathpick()
	end
	
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^rockgo( (\w+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>group</name>
							<script>snd.group = {}
if matches[2] ~= "none" then
 for name in string.gmatch(matches[2], '([^ ]+)') do
  table.insert(snd.group, string.title(name))
 end
end
display(snd.group)</script>
							<command></command>
							<packageName></packageName>
							<regex>^grp (.*)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Whois Person</name>
							<script>local name = matches[2]:title()
local x, c
if not sndNDB_Exists(name) then
	snd.message(name.." isn't tracked by database.")
else
	x = sndNDB.players[name]
	c = sndNDB_getColour(name)

	cecho("\n&lt;blue&gt;- &lt;NavajoWhite&gt;"..x.title.." &lt;blue&gt;"..string.rep("-", 70-(string.len(x.title)+3)).."\n")
	cecho("\n&lt;DimGrey&gt; City :   &lt;"..c.."&gt;"..x.city..string.rep(" ", 31-string.len(x.city)).."  &lt;DimGrey&gt; Level:   &lt;white&gt;"..x.level)
	cecho("\n&lt;DimGrey&gt; Guild:   &lt;white&gt;"..x.guild..string.rep(" ", 31-string.len(x.guild)).."  &lt;DimGrey&gt; Rank :   &lt;white&gt;"..x.xp_rank)
	cecho("\n&lt;DimGrey&gt; Class:   &lt;white&gt;"..x.class..string.rep(" ", 31-string.len(x.class)).."  &lt;DimGrey&gt; Race :   &lt;white&gt;"..x.race.."\n")
	cecho("\n&lt;blue&gt;"..string.rep("-", 70))
	cecho("\n ")
	send(" ",false)
end	</script>
							<command></command>
							<packageName></packageName>
							<regex>^whois (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>walkarea</name>
							<script>-- Used to quickly walk through an area without touching the mobs, use triggers to define ways to stop as in the Orrery Globe method
snd.toggles.fastwalk = true
snd_walkArea()
expandAlias("move")</script>
							<command></command>
							<packageName></packageName>
							<regex>^walkarea$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>target</name>
						<script>snd.target = string.title(matches[2])
if snd.toggles.calling then
 snd.send("wt Target: "..snd.target)
end
echo("Target: "..snd.target)
send(" ")
if snd.target_trigger_id then killTrigger(snd.target_trigger_id) end
snd.target_trigger_id = tempTrigger(snd.target, [[selectString("]] .. snd.target .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.target_trigger_idlow then killTrigger(snd.target_trigger_idlow) end
snd.target_trigger_idlow = tempTrigger(string.lower(snd.target), [[selectString("]] .. string.lower(snd.target) .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.offense_loaded then
 snd.reset_target()
 snd.target_gone = false
end
if snd.gui.enabled then
 enemy:echo("&lt;center&gt;Target:"..snd.target.."&lt;/center&gt;")
 if #snd.target_has &gt; 1 then
 	eaffs:echo(table.concat(snd.target_has, "&lt;br&gt;"))
 else
 	eaffs:echo("&lt;center&gt;enemy affs&lt;/center&gt;")
 end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^t (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>stop attacking</name>
						<script>snd.toggles.attacking = false
snd.send("queue clear")
snd.send("path stop")
if snd.bashing_loaded then
 if snd.toggles.fasthunt then
  expandAlias("ff", false)
 end
 bot.going = false
 snd.toggles.bashing = false
 snd.defenses.def_vigor.needit = false
 snd.which_path = ""
end
if snd.offense_loaded then
 snd.send("target nothing"..snd.sep.."target nothing with right")
 snd.hound_queue = {}
end
if mmp ~= nil then
 expandAlias("mstop", false)
end
if snd.ylem_loaded then
 ylm.active = false
end
snd.pathing = false
disableTimer("Bashtotaltime")</script>
						<command></command>
						<packageName></packageName>
						<regex>^stap$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>target call over web - individual targets</name>
						<script>send("wt Target: "..matches[2])
snd.target = string.title(matches[2])
echo("Target: "..snd.target)
send(" ")
if snd.gui.enabled then
 enemy:echo("&lt;center&gt;Target:"..snd.target.."&lt;/center&gt;")
 if #snd.target_has &gt; 1 then
 	eaffs:echo(table.concat(snd.target_has, "&lt;br&gt;"))
 else
 	eaffs:echo("enemy affs")
 end
end

if snd.target_trigger_id then killTrigger(snd.target_trigger_id) end
snd.target_trigger_id = tempTrigger(snd.target, [[selectString("]] .. snd.target .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.target_trigger_idlow then killTrigger(snd.target_trigger_idlow) end
snd.target_trigger_idlow = tempTrigger(string.lower(snd.target), [[selectString("]] .. string.lower(snd.target) .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.offense_loaded then
 snd.reset_target()
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^tc (\w+)$</regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Help System</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Main Index</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Main index</name>
								<script>cecho("\n&lt;CadetBlue&gt;Sunder Helpfile")
cecho("\n&lt;MediumSeaGreen&gt;---------------")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Welcome to &lt;green&gt;Sunder&lt;ForestGreen&gt;! This helpfile is meant to give you an introduction to different things that &lt;green&gt;Sunder &lt;ForestGreen&gt;can do. It will not cover every option entirely, but it will provide the most often used or asked about items a bit more light to show how or when to use them.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;The first thing you should know is the &lt;DeepSkyBlue&gt;stap &lt;ForestGreen&gt;command. You type &lt;DeepSkyBlue&gt;stap &lt;ForestGreen&gt;and &lt;green&gt;Sunder &lt;ForestGreen&gt;will cease whatever it is currently attempting to do, for the most part. Some items may need to be toggled manually depending on the situation, but by and large &lt;DeepSkyBlue&gt;stap &lt;ForestGreen&gt;will keep you from hitting someone or something, or any other number of items.")
cecho("\n")
cecho("\n&lt;MediumTurquoise&gt;The index for the rest of the helpfiles is as such:")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;Bashing               &lt;ForestGreen&gt;Do you want to go bashing? &lt;green&gt;Sunder&lt;ForestGreen&gt; has you covered!")
cecho("\n&lt;DeepSkyBlue&gt;PK                    &lt;ForestGreen&gt;Playerkilling and you. Please practice safe PvP.")
cecho("\n&lt;DeepSkyBlue&gt;Defenses              &lt;ForestGreen&gt;How to upkeep, turn on/off and customize defenses.")
cecho("\n&lt;DeepSkyBlue&gt;Ylem                  &lt;ForestGreen&gt;Finding minors and other ylem based information.")
cecho("\n&lt;DeepSkyBlue&gt;Utilities             &lt;ForestGreen&gt;Vermin, fishing, shops, questing and more.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Each above entry will point you toward more specific items in each section as needed.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Use &lt;DeepSkyBlue&gt;sunder help &lt;subject&gt; &lt;ForestGreen&gt;to navigate through everything else.")
cecho("\n")
snd.set_vitals()</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Ylem helpfile</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;YLEM &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;Hunting after those elusive minors and lessers has never been easier! This will walk you through how to do that with a few easy steps. To start, you will need to make sure you have learned &lt;DeepSkyBlue&gt;LEYLINES &lt;ForestGreen&gt;in &lt;MediumTurquoise&gt;Vision &lt;ForestGreen&gt;(289 lessons) and &lt;DeepSkyBlue&gt;SHACKLING &lt;ForestGreen&gt;in &lt;MediumTurquoise&gt;Refining &lt;ForestGreen&gt;(239 lessons). While &lt;DeepSkyBlue&gt;shackling &lt;ForestGreen&gt;is not necessarily needed for this to work, it will benefit you in the long run and keep you from having to deal with multiple eld at once. In the process of learning &lt;DeepSkyBlue&gt;leylines&lt;ForestGreen&gt;, you will also learn &lt;DeepSkyBlue&gt;DETECTION&lt;ForestGreen&gt;, which will assist you in finding focal points. This is only needed if you do not have any reserves to use &lt;MediumTurquoise&gt;MANIPULATE PYLON FOR NODESENSE&lt;ForestGreen&gt;, which allows you to PATH TRACK MINOR directly to the focal point. For this, you will also need to purchase ylem goggles from the vendor at your pylon. Just PATH TRACK PYLON and ASK &lt;vendor&gt; WARES to BUY GOGGLES FROM &lt;vendor&gt;.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;The &lt;green&gt;Sunder &lt;ForestGreen&gt;ylem finder is simple to use! To start, just type in &lt;DeepSkyBlue&gt;goylem start &lt;ForestGreen&gt;and watch as it does all the work of walking around for you. It has a set path that it follows and is easy to change if you wish to do so or if new areas are added before &lt;green&gt;Sunder &lt;ForestGreen&gt;is updated again. It will continually run until it finds either a minor or a lesser. If it finds a minor, you can either DETECTION ON and walk around to find the focal point (it is highlighted in &lt;green&gt;Sunder&lt;ForestGreen&gt; already, so you won't miss it!) or you can PATH TRACK MINOR if you have ylem goggles and have used MANIPULATE PYLON FOR NODESENSE. The nodesense defense will only last for one hour or ten uses. Once you find the minor and extract it (EXTRACTION is the syntax) fully, you can &lt;DeepSkyBlue&gt;goylem next &lt;ForestGreen&gt;to have &lt;green&gt;Sunder &lt;ForestGreen&gt;continue the set path. If you need to stop at any point, you can &lt;DeepSkyBlue&gt;goylem stop &lt;ForestGreen&gt;and it will take you back to your city and reset the variables to start over if you decide to pick it up again. If you need to stop temporarily, you can just &lt;DeepSkyBlue&gt;stap&lt;ForestGreen&gt; and then &lt;DeepSkyBlue&gt;goylem &lt;ForestGreen&gt;to start back up again where you left off!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;goylem start          &lt;ForestGreen&gt;Start finding foci")
cecho("\n&lt;DeepSkyBlue&gt;goylem next           &lt;ForestGreen&gt;Move to the next area")
cecho("\n&lt;DeepSkyBlue&gt;goylem stop           &lt;ForestGreen&gt;Stop and return to your city")
cecho("\n&lt;DeepSkyBlue&gt;goylem                &lt;ForestGreen&gt;Continue if you had to stop")
cecho("\n&lt;DeepSkyBlue&gt;sh                    &lt;ForestGreen&gt;Shackle an eld in the room to stop it from hitting you!")
cecho("\n")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (Y|y)lem$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Toggles help</name>
								<script>cecho("\n&lt;MediumSeaGreen&gt;*------------------------------------------------------------------------------------------------*")
cecho("\n&lt;MediumSeaGreen&gt;|                                           &lt;CadetBlue&gt;SUNDER TOGGLES                                       &lt;MediumSeaGreen&gt;|")                                                    
cecho("\n&lt;MediumSeaGreen&gt;*------------------------------------------------------------------------------------------------*")
cecho("\n&lt;MediumSeaGreen&gt;| &lt;ansiCyan&gt;TOGGLE NAME &lt;MediumSeaGreen&gt; |                 &lt;ansiCyan&gt;INFOMATION                  &lt;MediumSeaGreen&gt;|             &lt;ansiCyan&gt;TOGGLES               &lt;MediumSeaGreen&gt;|")
cecho("\n&lt;MediumSeaGreen&gt;|------------------------------------------------------------------------------------------------|\n")

local togglecolor = ""

for k, v in pairs(snd.toggle_info) do

if snd.toggles[k] then togglecolor = "DeepSkyBlue" else togglecolor = "SlateGray" end

  cecho("&lt;MediumSeaGreen&gt;|&lt;"..togglecolor.."&gt; "..padRight(k, 13).. "&lt;MediumSeaGreen&gt;|&lt;ForestGreen&gt; "..padRight(tostring(v.info), 44).."&lt;MediumSeaGreen&gt;|&lt;MediumTurquoise&gt; "..padRight(tostring(v.command), 34).."&lt;MediumSeaGreen&gt;|\n")
end

cecho("&lt;MediumSeaGreen&gt;*------------------------------------------------------------------------------------------------*\n")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (T|t)oggles$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Bashing helpfiles</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder bashing</name>
								<script>cecho("&lt;CadetBlue&gt;Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;bashing&lt;CadetBlue&gt; help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;green&gt;Sunder &lt;ForestGreen&gt;has several methods of helping you bash, from hitting things in your room to helping you navigate the landscape of Aetolia and its many areas. You can easily know if &lt;green&gt;Sunder&lt;ForestGreen&gt; recognizes your area by doing a check with the &lt;red&gt;SURVEY&lt;ForestGreen&gt; command. As long as you see mob names, &lt;green&gt;Sunder&lt;ForestGreen&gt; will be able to hit things for you.")
cecho("\n")
cecho("\n&lt;red&gt;Consider this your warning: &lt;ForestGreen&gt;The folks who upkeep Sunder do not, by any means, condone or suggest using Sunder to do things while you are AFK or otherwise unable to attend to your character. From HELP AUTOMATION -&gt; FULLY automating quests and hunting - with movement and all actions included in the triggers - are allowed so long as one is present at the computer, as well as gambling automation. Please do not abuse what is being given to you without regard for the admin stance.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;DeepSkyBlue&gt;aa                    &lt;ForestGreen&gt;Make &lt;green&gt;Sunder &lt;ForestGreen&gt;try to hit everything in the room!")
cecho("\n                     &lt;ForestGreen&gt; If there is nothing left in the room, this will turn off.")
cecho("\n&lt;DeepSkyBlue&gt;ff                    &lt;ForestGreen&gt;Want to walk around manually and have Sunder hit things? Use this.")
cecho("\n                     &lt;ForestGreen&gt; It automatically turns on hitting when it finds a valid target.")
cecho("\n&lt;DeepSkyBlue&gt;grp &lt;person&gt;          &lt;ForestGreen&gt;Inform &lt;green&gt;Sunder&lt;ForestGreen&gt; of your bashing party.")
cecho("\n&lt;DeepSkyBlue&gt;grp queen rook pawn   &lt;ForestGreen&gt;Example of adding more than one person.")
cecho("\n&lt;DeepSkyBlue&gt;orbs                  &lt;ForestGreen&gt;Activate your ylem orbs with one alias!")
cecho("\n&lt;DeepSkyBlue&gt;sunder toggle generic &lt;ForestGreen&gt;Use generic mob type instead of number to bash.")
cecho("\n&lt;DeepSkyBlue&gt;sch                   &lt;ForestGreen&gt;Alias you can use to hit your current 't' target with your bashing attacks, and will shield/etc like normal bashing when low in health.")
cecho("\n")
cecho("\n")
cecho("\n&lt;green&gt;Sunder&lt;ForestGreen&gt; has some more advanced features listed in &lt;DeepSkyBlue&gt;sunder help autobashing&lt;ForestGreen&gt;.")


cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (B|b)ashing$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder auto bashing</name>
								<script>cecho("&lt;CadetBlue&gt;Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;autobashing&lt;CadetBlue&gt; help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;green&gt;Sunder &lt;ForestGreen&gt;recognizes a good majority of the areas in the game, including the main bashing areas and most of the ones you might use while gaining levels. The following methods will help you bash these areas, either singular or multiple at a time.")
cecho("\n")
cecho("\n&lt;red&gt;Consider this your warning: &lt;ForestGreen&gt;The folks who upkeep Sunder do not, by any means, condone or suggest using Sunder to do things while you are AFK or otherwise unable to attend to your character. From &lt;red&gt;HELP AUTOMATION -&gt;&lt;ForestGreen&gt; 'FULLY automating quests and hunting - with movement and all actions included in the triggers - are allowed so long as one is present at the computer, as well as gambling automation.' &lt;red&gt;Please do not abuse what is being given to you without regard for the admin stance.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;DeepSkyBlue&gt;goarea               &lt;ForestGreen&gt;Bash the current area you're in and then walk back to your city.")
cecho("\n                     &lt;ForestGreen&gt;Use this for bashing just one area. No need to use the below command.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;bashpath &lt;areas&gt;     &lt;ForestGreen&gt;Define your custom bashing route from valid areas.")
cecho("\n                     &lt;ForestGreen&gt;It will automatically walk you from the last room of area 1 to area 2, etc.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;bashpath tiyen, xaanhal, mamashi &lt;ForestGreen&gt;- for example, would bash those areas and then head home.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;There are some more functions in the scripts for use in your code for creating paths, doing new areas, etc.")
--You would want to look into SND Autopaths-&gt;Creating-&gt;start/add/compile.


cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (A|a)utobashing$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Utility helpfiles</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Questing Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;QUESTING &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;-------------------------------------------")
cecho("\n&lt;ForestGreen&gt;Always ending up with odds and ends in your inventory or kestrels following you around EVERYWHERE because you dared to walk through Three Widows? Well no more! You will now be able to toggle quests on and off so that you only whistle or pick up items when you want!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;------------")
cecho("\n&lt;ForestGreen&gt;As of right now, there is only one toggle to turn it on/off. More may be added in the future! It will not auto-walk areas for you, you will still need to walk around and while you do so &lt;green&gt;Sunder&lt;ForestGreen&gt; will pick up items and turn them in as appropriate. ")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;toggle questing       &lt;ForestGreen&gt;Toggles questing on/off")
cecho("\n&lt;MediumSeaGreen&gt;-------------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (q|Q)uesting$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Who Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;WHO &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------")
cecho("\n&lt;ForestGreen&gt;Tired of looking through the who list trying to figure out who is where and who they are with when looking for that pesky lesser that was just tapped? Well, thanks to &lt;green&gt;Czcibor&lt;ForestGreen&gt;, &lt;green&gt;Sunder &lt;ForestGreen&gt;has built in group checking via the who list!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;Using the alias &lt;DeepSkyBlue&gt;WHO GROUPS &lt;green&gt;Sunder &lt;ForestGreen&gt;will now sift through the who list and capture room locations. Once it is done with that, it will show you the names of the rooms that have more than one person in that location, how many people are there, and then who all is in that location! Note that those with the &lt;red&gt;cloaking&lt;ForestGreen&gt; artifact or in hidden rooms are unable to be tracked in this manner.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;who groups            &lt;ForestGreen&gt;Shows the full WHO list and then the grouped rooms with more than one person")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (w|W)ho$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Vermin Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;VERMIN &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;-----------------------------------------")
cecho("\n&lt;ForestGreen&gt;We get it! Every time you see that daily/weekly/monthly(especially the monthly) milestone for vermin, you just want to run head first into a team of mages collapsing singularities and calamaties! So hopefully these will make your life easier from here on out and save you from death by mages! No guarantees :(")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;First, you will want to make sure you are wielding whatever you need to kill the vermin. After you are ready to start your quest of ridding a city of its vermin, you just &lt;DeepSkyBlue&gt;PATH TRACK &lt;ForestGreen&gt;to any city &lt;LimeGreen&gt;(make sure you are not an enemy!) &lt;ForestGreen&gt;and then type &lt;DeepSkyBlue&gt;toggle vermin &lt;ForestGreen&gt;to start! This will work similar to &lt;DeepSkyBlue&gt;gogo &lt;ForestGreen&gt;in that it will just begin bashing from where you are currently. No matter which city you begin your vermin bashing in, it will end at the vermin mob and will automatically sell your vermin! So no more accidental offerings of vermin to your gods! Should you need to finish early, just type &lt;DeepSkyBlue&gt;toggle vermin &lt;ForestGreen&gt;again and an echo will pop up to remind you to go sell your vermin!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;toggle vermin         &lt;ForestGreen&gt;Toggles the vermin autobasher on/off")
cecho("\n&lt;MediumSeaGreen&gt;-----------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (v|V)ermin$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Fluidcache Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;FLUIDCACHE &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------------")
cecho("\n&lt;ForestGreen&gt;Ever log in and notice you lost a bunch of refills because your vials, bandages, or (gods forbid) rags decayed? Well NO MORE! Or at least, LESS LIKELY! &lt;green&gt;Sunder &lt;ForestGreen&gt;is now equipped with a few more aliases to help alleviate this problem!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;Simply input the alias you want to use and then either let &lt;green&gt;Sunder &lt;ForestGreen&gt;fill your empty vials, bandages, or rags or consume them into your fluidcache. If you are new to Aetolia, make sure you read &lt;green&gt;HELP FLUIDCACHE &lt;ForestGreen&gt;if you have not already!")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Keep in mind that these aliases will not buy anything for you. Please refer to &lt;DeepSkyBlue&gt;sunder help shops &lt;ForestGreen&gt;to see the aliases that will purchase bulk items for you!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;venoms                &lt;ForestGreen&gt;First buy the rags you need for combat and type &lt;DeepSkyBlue&gt;venoms")
cecho("\n                      &lt;ForestGreen&gt;to have &lt;green&gt;Sunder &lt;ForestGreen&gt;fill your rags for you. You can search this")
cecho("\n                      &lt;ForestGreen&gt;alias in your scripts to change which venoms you want it to fill!")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;unvenom               &lt;ForestGreen&gt;Just what it says! Typing &lt;DeepSkyBlue&gt;unvenom &lt;ForestGreen&gt;will fluidcache consume")
cecho("\n                      &lt;ForestGreen&gt;all the venoms from your rags!")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;fillvials             &lt;ForestGreen&gt;This alias will fill the vials in your inventory from your fluidcache.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;unfillvials           &lt;ForestGreen&gt;Like &lt;DeepSkyBlue&gt;unvenom&lt;ForestGreen&gt;, this alias will consume the elixirs")
cecho("\n                      &lt;ForestGreen&gt;in your vials back into your fluidcache.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;fillbandages          &lt;ForestGreen&gt;This will fill the clean bandages in your inventory with the poultices")
cecho("\n                      &lt;ForestGreen&gt;from your fluidcache.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;unfillbandages        &lt;ForestGreen&gt;Again... same as the other 'un' aliases, but for poultices.")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (F|f)luidcache$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Shop Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;SHOPS &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;Purchasing necessary items from shops can be a bit mundane, but NO MORE! Often you will find yourself buying many refills or masses of pills - to help combat this, &lt;green&gt;Sunder &lt;ForestGreen&gt;includes a few aliases to help make that less painful!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;The first thing you need to do is find a shop. You can do this by going to any city (including Esterport!) and using &lt;DeepSkyBlue&gt;PATH TRACK DIRECTORY&lt;ForestGreen&gt;. This will take you to the directory where you can peruse all the shops in that city (think of it like a search engine). From there you can &lt;DeepSkyBlue&gt;DIRECTORY &lt;ForestGreen&gt;'&lt;DeepSkyBlue&gt;item&lt;ForestGreen&gt;' to see which shop is carrying the item(s) you need. If you have MXP turned on, you can click on the vnum for the shop you want or &lt;DeepSkyBlue&gt;PATH TRACK vnum &lt;ForestGreen&gt;to get there.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Once you are in a shop, you will simply need to put in the alias for the items you wish to purchase and let &lt;green&gt;Sunder &lt;ForestGreen&gt;do the rest!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;buypills #            &lt;ForestGreen&gt;Pills! Typing &lt;DeepSkyBlue&gt;buypills &lt;ForestGreen&gt;followed by an amount will buy that amount")
cecho("\n                      &lt;ForestGreen&gt;of every type of pill! EXAMPLE: &lt;DeepSkyBlue&gt;buypills 500 &lt;ForestGreen&gt;will buy &lt;LimeGreen&gt;500 &lt;ForestGreen&gt;of each pill.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;fillcache # type      &lt;ForestGreen&gt;Fluidcache! Just use &lt;DeepSkyBlue&gt;fillcache &lt;ForestGreen&gt;followed by the number of times")
cecho("\n                      &lt;ForestGreen&gt;you want to buy a refill and what type of refill you want to buy.")
cecho("\n                      &lt;ForestGreen&gt;The types are: &lt;DeepSkyBlue&gt;venoms&lt;ForestGreen&gt;, &lt;DeepSkyBlue&gt;poultices&lt;ForestGreen&gt;, and &lt;DeepSkyBlue&gt;elixirs&lt;ForestGreen&gt;. EXAMPLE: &lt;DeepSkyBlue&gt;fillcache") 
cecho("\n                      &lt;DeepSkyBlue&gt;10 elixirs &lt;ForestGreen&gt;will purchase &lt;LimeGreen&gt;10 &lt;ForestGreen&gt;refills of each type of elixir. The purchase")
cecho("\n                      &lt;ForestGreen&gt;line may be gagged, so just check your FC before and after purchasing!")
cecho("\n                      &lt;LimeGreen&gt;**NOTE** &lt;ForestGreen&gt;This will buy the amount of refills, so to fill your cache(&lt;LimeGreen&gt;1500&lt;ForestGreen&gt;)")
cecho("\n                      &lt;ForestGreen&gt;you will only need to purchase &lt;LimeGreen&gt;30 &lt;ForestGreen&gt;refills!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (S|s)hops$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Fishing Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;FISHING &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;ForestGreen&gt;Our &lt;green&gt;Sunder &lt;ForestGreen&gt;fishing system has been put together from several different systems, and will help you with your fishing milestones or just when you want to kick back and relax to earn some gold.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;1. Put up your wielded items manually and wield your pole.\n")
cecho("&lt;ForestGreen&gt;2. Go to a fishing hole.\n")
cecho("&lt;ForestGreen&gt;3. Do '&lt;DeepSkyBlue&gt;FISHING DISCERN&lt;ForestGreen&gt;' to make sure you see fish. This will\n")
cecho("&lt;ForestGreen&gt;   track the hole type, vnum, and what fish you see automatically\n")
cecho("&lt;ForestGreen&gt;   in a database it creates on the first time you use it.\n")
cecho("&lt;ForestGreen&gt;4. If you can fish there and there are fish, type in '&lt;DeepSkyBlue&gt;afish&lt;ForestGreen&gt;'\n") 
cecho("&lt;ForestGreen&gt;   to turn on the auto-fisher.\n")
cecho("&lt;ForestGreen&gt;5. If you run out of fish in this hole, it will turn off fishing on\n")
cecho("&lt;ForestGreen&gt;   its own. You can also type in '&lt;DeepSkyBlue&gt;afish&lt;ForestGreen&gt;' to turn it off.\n")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;afish                 &lt;ForestGreen&gt; Turns the auto-fisher off/on")
cecho("\n&lt;DeepSkyBlue&gt;fishing search ??  &lt;ForestGreen&gt;    You can search for a water hole type, or fish, from holes you've discerned.")
cecho("\n&lt;DeepSkyBlue&gt;fishing search full ?? &lt;ForestGreen&gt;If you prepend &lt;DeepSkyBlue&gt;info&lt;ForestGreen&gt; or &lt;DeepSkyBlue&gt;full&lt;ForestGreen&gt; it displays complete info instead of abridged.")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (F|f)ishing$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Name database help file</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;Name Database &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;-------------------------------------------")
cecho("\n&lt;ForestGreen&gt;Deprecated. No longer used.")
</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (N|n)amedb$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder Utilities Index</name>
								<script>cecho("&lt;CadetBlue&gt;Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;UTILITIES &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;green&gt;Sunder &lt;ForestGreen&gt;has several different utilities that are quite useful! Below is a summarized list that will direct you to the correct files so that you can become familiar with them and reference back to them at any time!")
cecho("\n")
cecho("\n&lt;MediumTurquoise&gt;To view the following &lt;green&gt;Sunder &lt;MediumTurquoise&gt;help files, use &lt;DeepSkyBlue&gt;sunder help &lt;MediumTurquoise&gt;&lt;filename&gt;!")
cecho("\n&lt;DeepSkyBlue&gt;Vermin               &lt;ForestGreen&gt;Explantion on &lt;green&gt;Sunder's &lt;ForestGreen&gt;vermin autobasher!")
cecho("\n&lt;DeepSkyBlue&gt;Fishing              &lt;ForestGreen&gt;Explantion on how to use &lt;green&gt;Sunder's &lt;ForestGreen&gt;fishing utilities!")
cecho("\n&lt;DeepSkyBlue&gt;Shops                &lt;ForestGreen&gt;Quick aliases to make purchasing easier!")
cecho("\n&lt;DeepSkyBlue&gt;Fluidcache           &lt;ForestGreen&gt;Aliases to consume and fill vials/rags/bandages!")
cecho("\n&lt;DeepSkyBlue&gt;Who                  &lt;green&gt;Sunder's &lt;ForestGreen&gt;WHO parsing system and how it works!")
cecho("\n&lt;DeepSkyBlue&gt;Questing             &lt;ForestGreen&gt;Helpful questing aliases (no more pesky kestrels following you around!)")
cecho("\n&lt;DeepSkyBlue&gt;Namedb               &lt;ForestGreen&gt;All the commands for the databse.")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (U|u)tilities$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Offense/defense helpfiles</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder PK helpfile</name>
								<script>cecho("&lt;white&gt;Welcome to &lt;green&gt;Darkside PK&lt;white&gt;!")
cecho("\n&lt;red&gt;PK commands to know:")
cecho("\n &lt;green&gt;loc&lt;white&gt;                Call out your place in the world.")
cecho("\n &lt;green&gt;acl&lt;white&gt;                Short for affliction calling - toggle on/off.")
cecho("\n &lt;green&gt;tcl&lt;white&gt;                Short for target calling     - toggle on/off.")
cecho("\n &lt;green&gt;ls &lt;leader&gt;&lt;white&gt;        Declare the name of someone so you can follow targets.")
cecho("\n ")
cecho("\n&lt;firebrick&gt;When you get into PK, you want to make sure the first thing you do is '&lt;green&gt;ls &lt;leader name&gt;'.")
cecho("\n&lt;firebrick&gt;This will make sure you're following targets. &lt;red&gt;Look in web or ask who is calling targets.")
cecho("\n&lt;firebrick&gt;Next is to make sure you have &lt;green&gt;ACL&lt;firebrick&gt; toggled ON. You want to let your friends know what you're doing!")
cecho("\n ")
cecho("\n&lt;firebrick&gt;After that, listen to your leader to see what advice they may have. Perhaps they ask you to block")
cecho("\n&lt;firebrick&gt;a certain direction, if you can. Perhaps they ask you to drop a certain class effect. If you're")
cecho("\n&lt;firebrick&gt;not sure what they mean, that's okay! Just tell them over web that you can't at the moment. Once")
cecho("\n&lt;firebrick&gt;all of the fighting is over, feel free to bring up your questions. If you can't get a great answer")
cecho("\n&lt;firebrick&gt;or you're not sure what it means, please feel encouraged to ask further!")
cecho("\n ")
cecho("\n&lt;firebrick&gt;Below, you will find a few different aliases that you will type in, hit enter and start to attack.")
cecho("\n&lt;firebrick&gt;It is encouraged to try these in a training room environment to get a feel for how they work.")
cecho("\n&lt;firebrick&gt;If at any time you need to stop, just type &lt;green&gt;stap&lt;firebrick&gt;.")
cecho("\n&lt;firebrick&gt;")
cecho("\n ")
cecho("\n&lt;red&gt;Your class can use the following aliases:")
if snd.class == "Monk" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Will use mind batter to hit with affs, if enemy prone then wrench.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;head &lt;white&gt;              - Used for damage, does not deviate unless target is proned.")
cecho("\n&lt;goldenrod&gt;Limbs:")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Used to hit different limbs, will change combo depending on parry.")
elseif snd.class == "Shapeshifter" then
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Goes for the head. Each time. Big damage/bleeding if not parried.")
cecho("\n&lt;goldenrod&gt;Limb:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Straight limb breaks into jawlocks.")
cecho("\n &lt;green&gt;kll &lt;white&gt;               - Slow, but effective, devour route (1v1).")
cecho("\n &lt;green&gt;quart &lt;white&gt;             - Skiva's quarter route.")
cecho("\n &lt;green&gt;insta&lt;white&gt;              - Goes for quarter kills. Check AB QUARTER for more information.")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Utilizes slash to delay limb breaks, good for pushing level 2 breaks.")
elseif snd.class == "Syssin" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Basic dstab w/venoms. No hypnosis.")
cecho("\n &lt;green&gt;magic&lt;white&gt;              - More advanced, geared towards magic, uses hypnosis.")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - More advanced, geared towards physical, uses hypnosis.")
cecho("\n &lt;green&gt;kl&lt;white&gt;                 - 1v1 offense. Does not snap for you as that requires timing.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Straight damage - will backstab when hidden or phased.")
elseif snd.class == "Wayfarer" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;legs &lt;white&gt;              - Uses lob to pressure leg breaks, will try to dropstrike if able.")
cecho("\n &lt;green&gt;lock&lt;white&gt;               - Experimental skirmish route to seal locks w/slaughter and muddled.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Sensitivity/sight to support transfix. Boosted halt to keep people in room.")
cecho("\n &lt;green&gt;gaff&lt;white&gt;               - Group affs w/preference toward venom lock. Slaughter if prone w/sensitivity.")
elseif (snd.class == "Templar" or snd.class == "Revenant") then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ret &lt;white&gt;               - The 1v1 standard. Lock into retribution.")
cecho("\n &lt;green&gt;newb&lt;white&gt;               - Basic venoms, no bladefire empowerments, no vorpal.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Use a 2h weapon to zeal/dsw someone and do physical damage.")
cecho("\n &lt;green&gt;gimp&lt;white&gt;               - Affs into either impale or dsw w/sensitivity.")
cecho("\n &lt;green&gt;bleed&lt;white&gt;              - Bleed focused affs into hemorrhage.")
cecho("\n&lt;goldenrod&gt;Limb:")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Two small bludgeon weapons to deal bruising and limb damage.")
elseif snd.class == "Shaman" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Straight vinelash w/venoms.")
cecho("\n &lt;green&gt;storm&lt;white&gt;              - Works toward stormtouched, then goes for lightning damage.")
cecho("\n &lt;green&gt;supp&lt;white&gt;               - Aff-lock support.")
elseif snd.class == "Sentinel" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;salve&lt;white&gt;              - Works towards frozen w/limb breaks. Need raloth/icewyrm.")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Venom lock into spinecut death sequence.")
cecho("\n &lt;green&gt;lumi&lt;white&gt;               - T-fix + sensitivity support.")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Just venoms, no dhuriv attacks, perfect for starters.")
elseif snd.class == "Luminary" or snd.class == "Earthcaller" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill with aff stacking and overwhelm.")
cecho("\n &lt;green&gt;mana&lt;white&gt;               - Straight mana sap.")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build mental affs into disrupt to help root/disrupt.")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Sight into tfix/overwhelm.")
elseif snd.class == "Ascendril" then
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;damage&lt;white&gt;             - Damage kill")
cecho("\n &lt;green&gt;fire&lt;white&gt;               - Set them ablaze and watch them burn.")
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;affs&lt;white&gt;               - Build affs!")
cecho("\n &lt;green&gt;solo&lt;white&gt;               - Push limb damage/frozen for a shatter!")
elseif snd.class == "Archivist" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill.")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build mental affs and go for unravel.")
cecho("\n &lt;green&gt;kll&lt;white&gt;                - Advanced 1v1 script.")
elseif snd.class == "Carnifex" or snd.class == "Warden" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Overall limb route")
cecho("\n &lt;green&gt;legs&lt;white&gt;               - Specifically for legs!")
cecho("\n&lt;goldenrod&gt;Other:")
cecho("\n &lt;green&gt;pon&lt;white&gt;                - If you want to turn on active purge curing")
elseif snd.class == "Indorani" or snd.class == "Oneiromancer" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs! Mostly for unravel support.")
elseif snd.class == "Praenomen" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;mez&lt;white&gt;                - Work on siphoning mana for annihilate and mesmerize!")
cecho("\n &lt;green&gt;feast&lt;white&gt;              - Feast kill route for groups.")
cecho("\n&lt;goldenrod&gt;Other:")
cecho("\n &lt;green&gt;pon&lt;white&gt;                - If you want to turn on active purify curing")
elseif snd.class == "Teradrim" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n&lt;goldenrod&gt;Limb:")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Basic group limb route!")
cecho("\n&lt;goldenrod&gt;Other:")
cecho("\n &lt;green&gt;pon&lt;white&gt;                - If you want to turn on active scour curing")
elseif snd.class == "Sciomancer" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n&lt;goldenrod&gt;Limb:")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Overall limb route via grip and erupt")
end
cecho("\n ")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (p|P)(K|k)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder defenses helpfile</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;Defenses &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;Upkeep of defenses can be a tedious task, especially those stripped after a certain amount of time or if you just don't want to worry about it. To that end, Sunder is equipped to be able to help you upkeep defenses in a mildly intelligent manner via checking what skills you have access. The system uses GMCP to automatically check your skills, as well as checking your tattoos and raceskills, to accurately and easily keep track.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;defup                 &lt;ForestGreen&gt;Turn on automatic defense upkeep of defenses.")
cecho("\n&lt;DeepSkyBlue&gt;kd &lt;defname&gt;          &lt;ForestGreen&gt;Toggle a specific defense upkeep on/off.")
cecho("\n")
cecho("\n&lt;green&gt;Sunder&lt;ForestGreen&gt; also has the built in capability to utilize the antiquated artifact goggles, making a number of defs instantaneous and without cost.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;toggle goggles        &lt;ForestGreen&gt;Toggle Sunder using goggles or not.")
cecho("\n&lt;DeepSkyBlue&gt;mygoggles #           &lt;ForestGreen&gt;Tell Sunder what level your goggles are set to.")
cecho("\n")
cecho("\n")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (D|d)efenses$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder calling helpfile</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;Calling &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;In previous iterations of Sunder, we used static calling lists that were susceptible to failure due to not having new people updated, people switching tethers, needing different orders, etc. To that end, we have updated our methodology and you may find all of the ways to manipulate targets below.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;tcl                   &lt;ForestGreen&gt;Turn on automatic target calling.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;atl [name]&lt;ForestGreen&gt;            Add targets in the priority you specify.")
cecho("\n              &lt;white&gt;        Example &gt; &lt;red&gt;atl ezreal nazeebo meepo")
cecho("\n&lt;DeepSkyBlue&gt;atp [name] [position]&lt;ForestGreen&gt; Add target with/without a # value for priority.")
cecho("\n              &lt;white&gt;        Example &gt; &lt;red&gt;atp tryndamere 1")
cecho("\n&lt;DeepSkyBlue&gt;tlist&lt;ForestGreen&gt;                 List your targets in web for others.")
cecho("\n&lt;DeepSkyBlue&gt;atlc&lt;ForestGreen&gt;                  Clears your targets out to start over.")
cecho("\n&lt;DeepSkyBlue&gt;atr&lt;ForestGreen&gt;                   Remove a singular target from your list.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;nt&lt;ForestGreen&gt;                    Manually skip to the next target in line.")
cecho("\n")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (C|c)alling$</regex>
							</Alias>
						</AliasGroup>
						<Alias isActive="yes" isFolder="no">
							<name>^sunder help directory$</name>
							<script>cecho("\n&lt;MediumSeaGreen&gt;Found: &lt;white&gt;"..getMudletHomeDir())</script>
							<command></command>
							<packageName></packageName>
							<regex>^sunder help find my profile$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>Version</name>
						<script>echo(snd.version)</script>
						<command></command>
						<packageName></packageName>
						<regex>^version$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Bashing</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>start bashing</name>
						<script>snd.toggles.bashing = true
cecho("&lt;green&gt;Bashing ON!")
send(" ")
snd.room_clear = true
--snd.defenses.def_vigor.needit = true
snd.send("leading on")</script>
						<command></command>
						<packageName></packageName>
						<regex>^aa$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>stop bashing</name>
						<script>snd.toggles.bashing = false
snd.defenses.def_vigor.needit = false
cecho("&lt;green&gt;Bashing OFF!")
if snd.toggles.fasthunt then
 snd.toggles.fasthunt = false
 echo("\nFasthunt OFF!")
end
snd.send("queue clear")
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^ast$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>fasthunt</name>
						<script>snd.toggle("fasthunt")</script>
						<command></command>
						<packageName></packageName>
						<regex>^ff$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>generics</name>
						<script>snd.toggle("generics")
if snd.toggles.generics then
  cecho("\n&lt;red&gt;The use of a generic word (ie 'kelki' instead of 'kelki1234' or just '1234') brings with it a certain amount of risk. You risk hitting an NPC that you may not mean to, including quest mobs with the same short name, or boss mobs in the same vein. This is your warning. Please use it when appropriate.")
else
end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle generic$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>orbs</name>
						<script>snd.send("activate amberorb"..snd.sep.."activate greenorb"..snd.sep.."activate whiteorb"..snd.sep.."activate crimsonorb"..snd.sep.."activate ceruleanorb")
</script>
						<command></command>
						<packageName></packageName>
						<regex>^orbs$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>chocolates</name>
						<script>snd.send("eat mint;eat hazelnut;eat caramel;eat strawberry;drink chalice;touch book")</script>
						<command></command>
						<packageName></packageName>
						<regex>^choc$</regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Autobashing</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>move</name>
							<script>x = bot.info.room
x = "v"..x
if bot.going then
  if bot.path[x] ~= nil then
    if string.find(bot.path[x], "pth") then
      y = string.sub(bot.path[x], 4)
      snd.moving_to = y
      send(" ")
    elseif mmp ~= nil then
      expandAlias("goto "..bot.path[x], false)
    else
      snd.moving_to = bot.path[x]
      send(" ")
    end
  else
    echo("where r we")
  end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^move$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>initiate</name>
							<script>snd.which_path = ""

--Set the correct path, whether that is by checking level or using input from the user.
if matches[3] then
	if matches[3] == "arbothia" or matches[3] == "bloodwood" or matches[3] == "tcanna" or matches[3] == "vortex" or matches[3] == "lair" or matches[3] == "endgame" or matches[3] == "high" or matches[3] == "medium" or matches[3] == "low" then 
		snd.which_path = matches[3]
	else
		cecho("\n&lt;red&gt;Not a viable choice! Enter a viable choice or only enter 'gogo'!")
		cecho("\n&lt;green&gt;arbothia, tcanna, bloodwood (99+ and separate), vortex (99+ and separate), luziths lair (99+ and separate), endgame (93+), high (61-93), medium (31-60), and low (1-30)")
	end
else
	local level = ""
	for check in string.gmatch(gmcp.Char.Status.level, '[%d]+') do
		if level == "" then
			level = tonumber(check)
		end
	end
	if level &gt; 93 then
		snd.which_path = "endgame"
	elseif (level &lt; 93 and level &gt; 60) then
		snd.which_path = "high"
	elseif (level &lt; 60 and level &gt; 31) then
		snd.which.path = "medium"
	else
		snd.which_path = "low"
	end
end

if snd.which_path ~= "" then
  bot.going = true
	bot.path =  sndpathpick()
  if not snd.toggles.fasthunt then
  	expandAlias("ff")
  end
  
  expandAlias("aa")
  enableTimer("Bashtotaltime")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^gogo( (\w+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Vermin Basher</name>
							<script>if snd.toggles.vermin then
  snd.toggles.vermin = false
  bot.going = false
  disableTimer("moveroom")
  cecho("&lt;red&gt;----------------\n   &lt;red&gt;VERMIN OFF\n&lt;red&gt;----------------")
  snd.send("vermin")
else
  snd.toggles.vermin = true
  if snd.city == "Spinesreach" then
    snd.send("vermin"..snd.sep.."path track 11687")
    snd.which_path = "verminspines"
  elseif snd.city == "Bloodloch" then
    snd.send("vermin"..snd.sep.."path track 9193")
    snd.which_path = "verminbloodloch"
  elseif snd.city == "Duiran" then
    snd.send("vermin"..snd.sep.."path track 44060")
    snd.which_path = "verminduiran"	
  elseif snd.city == "Enorian" then
    snd.send("vermin"..snd.sep.."path track 56484")
    snd.which_path = "verminenorian"	
  end
  
  cecho("\n&lt;green&gt;----------------\n   &lt;green&gt;VERMIN ON\n&lt;green&gt;----------------")
  enableTimer("moveroom")
  
  if snd.which_path ~= "" then
    bot.going = true
    bot.path =  sndpathpick()
  end
  
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle vermin$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>See if Sunder has path</name>
						<script>if sunder_areaPaths[gmcp.Room.Info.area] then 
  snd.message("We've got a path here")
else
  snd.message("No path here.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^check this area$</regex>
					</Alias>
					<Alias isActive="no" isFolder="no">
						<name>single attack</name>
						<script>if snd.bashing.target ~= snd.target then snd.bashing.target = snd.target end
for k,v in pairs(snd.class_list) do
  if snd.class_list[k].class == snd.class then
  v.func()
  snd.send("qeb stand"..snd.sep..battack)
  end
end

</script>
						<command></command>
						<packageName></packageName>
						<regex>^f$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Attack</name>
						<script>hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
if snd.class == "Templar" then
  if snd.toggles.zeal then
    snd.send("bladefire empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."zeal "..snd.target)
  elseif snd.toggles.newbie then
    snd.send("strikebash "..snd.target)
  else
    if hp &gt;= 65 then
	    snd.send("dsk "..snd.target.." sacrifice sacrifice")
	  else
      snd.send("cleanse left"..snd.sep.."cleanse right"..snd.sep.."dsk "..snd.target)
	  end
  end

elseif snd.class == "Luminary" then
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;= 60 then
  	snd.send("angel aura me")
	elseif snd.counterattack_active then
		if snd.punisher then
      snd.send("jig")
    else
      snd.send("angel aura me")
    end
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	elseif snd.toggles.lightning then
  	snd.send("evoke lightning "..snd.target)
 	else
  	snd.send("smite "..snd.target)
 	end

elseif snd.class == "Earthcaller" then
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;= 60 then
  	snd.send("OSSO RIBCAGE me")
	elseif snd.counterattack_active then
		if snd.punisher then
      snd.send("jig")
    else
      snd.send("OSSO RIBCAGE me")
    end
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	elseif snd.toggles.lightning then
  	snd.send("TECTONIC ASHFALL "..snd.target)
 	else
  	snd.send("quash "..snd.target)
 	end

elseif snd.class == "Monk" then
  if snd.stance ~= "scorpion" and not snd.toggles.cobra then
    snd.send("scs")
 	elseif hp &lt; 75 and not snd.numbness_used then
  	snd.send("transmute mana 1000"..snd.sep.. "numb")
 	elseif snd.have_aff("blackout") then
		snd.send("touch shield")
	elseif snd.counterattack_active then
			snd.send("touch shield")
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	elseif snd.toggles.cobra then
    if snd.stance ~= "cobra" then
      snd.send("cbs")
    else
  	  snd.send("combo "..snd.target.." sdk sdk")
    end
	else 
		snd.send("combo "..snd.target.." sdk ucp ucp")
	end

elseif snd.class == "Shaman" then
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  if snd.familiar then
	  if hp &lt;= 60 then
      if snd.balance.morph then
        if snd.shamanpet == "wyvern" then
          snd.send("familiar morph spider"..snd.sep.."touch shield")
        elseif snd.shamanpet == "spider" then
      	 snd.send("familiar morph wyvern"..snd.sep.."touch shield")
        elseif snd.shamanpet ~= "wyvern" or snd.shamanpet ~= "spider" then
      	 snd.send("familiar morph wyvern"..snd.sep.."touch shield")
        end
      else
        snd.send("touch shield")
      end
	  else
      if snd.balance.morph then
        if snd.shamanpet == "wyvern" then
          if wp&gt;=45 and tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
		        snd.send("familiar morph spider"..snd.sep.."order spirit follow me"..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.target)
          else
            snd.send("familiar morph spider"..snd.sep.."order spirit follow me"..snd.sep.."commune lightning "..snd.target)
          end
        elseif snd.shamanpet == "spider" then
        if wp&gt;=45 and tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
		        snd.send("familiar morph wyvern"..snd.sep.."order spirit follow me"..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.target)
          else
            snd.send("familiar morph wyvern"..snd.sep.."order spirit follow me"..snd.sep.."commune lightning "..snd.target)
          end
        elseif snd.shamanpet ~= "wyvern" or snd.shamanpet ~= "spider" then
          if wp&gt;=45 and tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
		        snd.send("familiar morph wyvern"..snd.sep.."order spirit follow me"..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.target)
          else
            snd.send("familiar morph wyvern"..snd.sep.."order spirit follow me"..snd.sep.."commune lightning "..snd.target)
          end
        end
      else
        if wp&gt;=45 and tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
		      snd.send("order spirit follow me"..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.target)
        else
          snd.send("commune lightning "..snd.target)
        end
      end
	  end   
  else
    snd.send("familiar recall##order spirit follow me")
  end

elseif snd.class == "Sentinel" then
	if hp &lt;= 60 then
  	snd.send("touch shield")
	elseif snd.counterattack_active then
		snd.send("touch shield")
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	elseif snd.toggles.newbie then
  	snd.send("dhuriv combo "..snd.target.." slash stab")
 	else
  	snd.send("dhuriv combo "..snd.target.." crosscut thrust")
 	end

elseif snd.class == "Wayfarer" then
	if hp &lt;= 60 then
  	snd.send("touch shield")
	elseif snd.counterattack_active then
			snd.send("touch shield")
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	else
    snd.send("axe chop "..snd.target)
	end

elseif snd.class == "Syssin" then
	if hp &lt;= 60 then
  	snd.send("touch shield")
	elseif snd.counterattack_active then
			snd.send("touch shield")
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	elseif not snd.toggles.newbie then
 		if snd.defenses.def_hiding.state == "deffed" then
	 		snd.send("backstab "..snd.target)
		else
   		snd.send("bite "..snd.target.." camus")
		end
 	else
  	if snd.defenses.def_hiding.state == "deffed" then
	 		if snd.wielding("dirk") or snd.wielding("stilleto") then
	  		snd.send("backstab "..snd.target)
	 		else
	  		snd.send("quickwield left dirk"..snd.sep.."backstab "..snd.target)
	 		end
		else
	 		if snd.wielding("whip") then
	  		snd.send("garrote "..snd.target)
	 		else
    		snd.send("quickwield left whip"..snd.sep.."garrote "..snd.target)
	 		end
		end
 	end

elseif snd.class == "Shapeshifter" then
	if hp &lt;= 60 then
  	snd.send("touch shield")
	elseif snd.counterattack_active then
			snd.send("touch shield")
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	else
    snd.send("combo "..snd.target.." slash slash")
	end

elseif snd.class == "Indorani" then
	if hp &lt;= 60 then
  	snd.send("touch shield")
	elseif snd.counterattack_active then
			snd.send("touch shield")
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	else
    snd.send("flick bonedagger at "..snd.target)
	end

elseif snd.class == "Carnifex" then
	if hp &lt;= 60 then
  	snd.send("touch shield")
	elseif snd.counterattack_active then
			snd.send("touch shield")
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	else
    snd.send("hammer doublebash "..snd.target)
	end

elseif snd.class == "Archivist" then

  bioessence = tonumber(gmcp.Char.Vitals.bio) 
  if hp &lt;= 70 and not snd.knit and bioessence &gt; 0 then 
    snd.send("bio knitting")
	elseif hp &lt;= 60 and bioessence &gt; 1 then
		if snd.defenses.def_ethereal.state ~= "deffed" then
			snd.send("bio ethereal")
		end
	elseif hp &lt;= 60 then
  	snd.send("touch shield")
	elseif snd.counterattack_active then
		snd.send("touch shield")
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	else
    snd.send("incite crux "..snd.target)
	end

elseif snd.class == "Zealot" then
	if hp &lt;= 70 then
    snd.send("touch shield")
	elseif snd.counterattack_active then
		snd.send("touch shield")
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	else
		snd.send("flow "..snd.target.." pummel pummel")
	end

elseif snd.class == "Praenomen" then
	if hp &lt;= 70 then
		if snd.balance.mend and hasSkill("Mend") then 
			snd.send("mend")
    else
      snd.send("touch shield")
		end
	elseif hp &lt;= 60 then
    snd.send("touch shield")
	elseif snd.counterattack_active then
			snd.send("touch shield")
	elseif snd.pushattack then
		snd.send("push "..snd.target)
		snd.pushattack = false
	else
		snd.send("frenzy "..snd.target)
	end

elseif snd.class == "Teradrim" then
endur = 100*(gmcp.Char.Vitals.ep/gmcp.Char.Vitals.maxep)
    if hp &lt;= 60 then
    	snd.send("sand shield me")
    elseif snd.counterattack_active then
      snd.send("sand shield me")
	  elseif snd.pushattack then
		  snd.send("push "..snd.target)
		  snd.pushattack = false
    elseif snd.balance.momentum and endur&lt;=45 then
      snd.send("earth momentum "..snd.sep.."earth batter "..snd.target..snd.sep.."golem recover")
    else 
      snd.send("earth batter "..snd.target..snd.sep.."golem recover")
    end

elseif snd.class == "Ascendril" then
	if hp &lt;=40 then
	 	snd.send("touch shield")
	elseif hp &lt;= 60 then
		if snd.reflection_charge &gt; 0 then
      snd.send("cast reflection")
		else
			snd.send("touch shield")
		end
  else
    if gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "" or gmcp.Char.Vitals.resonance == "air"  then
   		snd.send("cast frostblade "..snd.target)
    elseif gmcp.Char.Vitals.resonance == "water" then
   		snd.send("cast firelash "..snd.target)
    elseif gmcp.Char.Vitals.resonance == "fire" then
    	snd.send("cast windlance "..snd.target)
    end
	end

elseif snd.class == "Sciomancer" then
	if hp &lt;= 40 then
    snd.send("touch shield")
  elseif hp &lt;= 60 then
		if snd.reflection_charge &gt; 0 then
			snd.send("cast reflection")
		else
    	snd.send("touch shield")
		end
	elseif snd.counterattack_active then
			snd.send("touch shield")
	elseif snd.pushattack then
		  snd.send("push "..snd.target)
		  snd.pushattack = false
	elseif snd.toggles.newbie then
  	  snd.send("cast ruin "..snd.target)
 	else
		if table.contains(gmcp.Char.Defences.List, "shadow_mantle") then
      if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
        snd.send("shadowprice gloom " ..snd.target..snd.sep.."cast fever "..snd.target)
      else
        snd.send("cast fever " ..snd.target)
      end
    else
      if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 2 then
        snd.send("shadowprice gloom " ..snd.target..snd.sep.."cast fever "..snd.target..snd.sep.."absorb ylem")
      else
        snd.send("cast fever " ..snd.target..snd.sep.."absorb ylem")
      end
    end
  end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^sch$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Move to next area</name>
						<script>if snd.toggles.fasthunt then

  local area = sunder_areaPaths[gmcp.Room.Info.area]
  local last_room_of_this_area = ""

  for k, v in pairs(area) do
    if v == "pthcity" then
      last_room_of_this_area =  k
    end
  end

  expandAlias("goto "..bot.path[last_room_of_this_area])

end</script>
						<command></command>
						<packageName></packageName>
						<regex>^move to next area$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>GUI</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Chat</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Shared</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Reset chasing</name>
								<script>demonnic.chaser:reset()</script>
								<command></command>
								<packageName></packageName>
								<regex>^chaseres$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Debug</name>
								<script>if matches[2] then
  demonnic:listCategories()
else
  demonnic:toggleDebug()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^debug(?: (list))?$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>debug categories</name>
								<script>if matches[2] then
  demonnic:watchCategory( matches[2] )
else
  demonnic:listCategories()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^debugc(?: (.*))?$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Tabbed Chat</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Toggle blinking (temporary change)</name>
								<script>if demonnic.chat.config.blink then
  demonnic.chat.config.blink = false
  demonnic.chat.tabsToBlink = {}
  demonnic:echo("Blinking temporarily turned &lt;red&gt;off&lt;grey&gt;. It will reset if you edit your tabbed chat configuration, or close and reopen mudlet. To make it permanent, change demonnic.chat.config.blink to false in \"Demonnic-&gt;Tabbed Chat-&gt;Configuration options\" under scripts\n")
else
  demonnic.chat.config.blink = true
  demonnic.chat:blink()
  demonnic:echo("Blinking temporarily turned &lt;red&gt;on&lt;grey&gt;. It will reset if you edit your tabbed chat configuration, or close and reopen mudlet. To make it permanent, change demonnic.chat.config.blink to true in \"Demonnic-&gt;Tabbed Chat-&gt;Configuration options\" under scripts\n")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dblink$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>fixChat</name>
								<script>local currentsetting = demonnic.chat.config.location
local newsetting = ""
if currentsetting == "topright" then 
  newsetting = "bottomleft" 
elseif currentsetting == "topleft" then
  newsetting = "bottomright"
elseif currentsetting == "bottomleft" then
  newsetting = "topright"
elseif currentsetting == "bottomright" then
  newsetting = "topleft"
end

demonnic.chat.config.location = newsetting
demonnic.chat:create()
demonnic.chat.config.location = currentsetting
demonnic.chat:create()</script>
								<command></command>
								<packageName></packageName>
								<regex>^fixchat$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Healing</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>defense toggle</name>
						<script>if not string.find(matches[2], "def_") then
 matches[2] = "def_"..matches[2]
end
for i in pairs(snd.defenses) do
 if string.find(i, matches[2]) then
  if snd.defenses[i].needit then
   snd.defenses[i].needit = false
   snd.message("No longer keeping &lt;red&gt;"..i.."&lt;white&gt;.", "echo")
   send(" ")
  else
   snd.defenses[i].needit = true
   snd.message("Now keeping &lt;green&gt;"..i.."&lt;white&gt;.", "echo")
   send(" ")
  end
  return
 end
end
snd.message("No such defense as &lt;red&gt;"..matches[2].."&lt;white&gt;!", "echo")
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^kd (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>defense options</name>
						<script>local selection = ""
if matches[3] then 
  selection = matches[3] 
else 
  selection = snd.class:lower() 
end

if snd.class == "Ascendril" then send("simultaneity") end
--if snd.class == "Archivist" then snd.send("incite lens") end
if snd.class == "Sciomancer" then snd.send("channel shadow") end
if snd.class == "Teradrim" then snd.send("golem call") end
send("def", false)

snd.load_def(selection)

</script>
						<command></command>
						<packageName></packageName>
						<regex>^(ldd (.*)|defup)$</regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Toggles</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="no" isFolder="no">
							<name>healing</name>
							<script>snd.toggle("healing")</script>
							<command></command>
							<packageName></packageName>
							<regex>^hl$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>defenses</name>
							<script>snd.toggle("defenses")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tdf$</regex>
						</Alias>
						<Alias isActive="no" isFolder="no">
							<name>clotting</name>
							<script>snd.toggle("clotting")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tclt$</regex>
						</Alias>
						<Alias isActive="no" isFolder="no">
							<name>standing</name>
							<script>snd.toggle("standing")</script>
							<command></command>
							<packageName></packageName>
							<regex>^ss$</regex>
						</Alias>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Offense</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>template</name>
						<script>--[[ This is a blank attack template, just the most basic outline of what an offense
 alias should look like. ]]--
if snd.class == "MyClass" then -- set this to the class this alias is for
snd.starting_attack() -- always run this first, it does some important resets
function snd.attack_function() -- defining this function is how we tell Darkside what to do
	if not snd.waiting.queue then -- don't want to spam, this will prevent that
		-- declare some important variables, you can add more here if you need
		local string = ""
		local call = ""

		-- attack logic goes here, you need to set string = whatever you want to send
		string = "punch "..snd.target
		call = "wt Afflicting "..snd.target..": DEATH"

		-- check if we need to prepend an affliction call
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Generic</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>my location</name>
							<script>snd.send("wt I'm at ("..gmcp.Room.Info.num..") '"..gmcp.Room.Info.name.."' in "..gmcp.Room.Info.area)</script>
							<command></command>
							<packageName></packageName>
							<regex>^loc$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>eye sigil</name>
							<script>snd.set_queue("quickwield right eyesigil"..snd.sep.."relax grip"..snd.sep.."throw eyesigil at ground")
snd.eyewait = true
eyewait_timer = tempTimer(5.0,[[snd.eyewait = false]])	</script>
							<command></command>
							<packageName></packageName>
							<regex>^eye$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>web tattoo</name>
							<script>snd.toggles.attacking = false
if matches[2] == nil then
 snd.send("qeb touch web "..snd.target)
else
 snd.send("qeb touch web "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^tw(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>brazier</name>
							<script>if matches[2] == nil then
 snd.attack("touch brazier "..snd.target)
else
 snd.attack("touch brazier "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^brz(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>tentacle</name>
							<script>if matches[2] == nil then
 snd.attack("touch tentacle "..snd.target)
else
 snd.attack("touch tentacle "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^tnt(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>orrery</name>
							<script>snd.send("infuse orrery with "..snd.faction)</script>
							<command></command>
							<packageName></packageName>
							<regex>^or$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>breathe fire</name>
							<script>snd.send("qeb breathe fire at icewall")</script>
							<command></command>
							<packageName></packageName>
							<regex>^bf$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>prism</name>
							<script>if matches[2] == nil then
 snd.attack("touch prism "..snd.target)
else
 snd.attack("touch prism "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^prm(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>shackle</name>
							<script>snd.send("qeb refining shackle eld")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sh$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>tumble</name>
							<script>snd.send("qeb tumble "..matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^tm (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>dummy mode</name>
							<script>snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = "punch "..snd.target
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
</script>
							<command></command>
							<packageName></packageName>
							<regex>^dummy$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>swing up</name>
							<script>snd.toggles.attacking = false
snd.send("qeb swing up")</script>
							<command></command>
							<packageName></packageName>
							<regex>^su$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>swing down</name>
							<script>snd.toggles.attacking = false
snd.send("qeb swing down")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sd$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>use translocator</name>
							<script>snd.toggles.attacking = false
snd.toggles.bashing = false
snd.toggles.fasthunt = false
snd.send("qeb use translocator")</script>
							<command></command>
							<packageName></packageName>
							<regex>^ut$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Wielding</name>
							<script>if snd.class == "Archivist" then
	if (snd.wielded.left.name or snd.wielded.right.name) == "rod" then
		snd.send("qeb unwield pole")
		tempTimer(3, [[expandAlias("wbsh")]])
	else
		snd.send("qeb wield codex"..snd.sep.."wield shield")
	end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^wbsh$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Neutral</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Monk</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>afflictions</name>
									<script>if snd.class == "Monk" then
  snd.starting_attack()

  snd.giving = {"paresis", "stupidity", "anorexia", "recklessness", "dizziness", "confusion", "epilepsy", "hallucinations"}
  mymental_aff_count = 0
  for aff in pairs(snd.mental_affs) do
    if table.contains(snd.have_aff, snd.mental_affs[aff]) then
      mymental_aff_count = mymental_aff_count + 1
    end
  end
  local kai = tonumber(gmcp.Char.Vitals.kai) 
    
  function snd.attack_function()
    local mental_aff_count = snd.aff_count_mental()

    if not snd.waiting.queue then
      if snd.used.shield then
        string = "sck "..snd.target
      elseif snd.checkAff("blackout") and not snd.checkAff("disrupted") and mental_aff_count &gt; 2 then
        string = "mind disrupt"
      elseif not snd.checkAff("turmoil") then
        string = "blp "..snd.target
      elseif snd.checkAff("turmoil") and kai &gt;= 40 then
        string = "kai ripple "..snd.target
      elseif snd.proned and not snd.target_impaled then
        if snd.parried_limb == "left leg" then
          string = "combo "..snd.target.." wrt right leg hfp right hfp right"
        elseif snd.parried_limb == "right leg" then
          string = "combo "..snd.target.." wrt left leg hfp left hfp left"
        else
          if (snd.limb_dmg["head"] &gt;= 56) and snd.no_parry() and snd.stance == "tiger" then
            string = "combo "..snd.target.." axk ucp ucp"
          else
            string = "tgs"
          end
        end
      elseif snd.target_impaled then
        string = "combo "..snd.target.." axk ucp ucp"
      elseif snd.aff_tally() &gt; 4 and (snd.have_aff("paresis") or snd.have_aff("asthma") or snd.have_aff("slickness") or snd.have_aff("aeon") or snd.have_aff("ablaze") or snd.have_aff("heatspear")) and snd.balance.mindpush then
        string = "mind push "..snd.target
      elseif mymental_aff_count &gt;= 2 and not snd.balance.mindcleanse then 
        string = "mind cleanse me"
      else
        one = "none"
        two = "none"
        three = "none"
        for i in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[i]) then
            if one == "none" then
              one = snd.giving[i]
            elseif two == "none" then
              two = snd.giving[i]
            elseif three == "none" then
              three = snd.giving[i]
            end
          end
        end
        if three ~= "none" then
          string = "mind batter "..snd.target.." "..one.." "..two.." "..three
        else
          if snd.parried_limb == "head" then
            string = "combo "..snd.target.." sdk hkp hkp"
          else
            string = "combo "..snd.target.." wwk ucp ucp"
          end
        end
      end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end
end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Monk" then
  snd.starting_attack()
  function snd.attack_function()
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "sck "..snd.target
      elseif snd.proned() and not snd.checkAff("writhe_impaled") then
        if snd.parried_limb == "left leg" then
          string = "combo "..snd.target.." wrt right leg hfp right hfp right"
        else
          string = "combo "..snd.target.." wrt left leg hfp left hfp left"
        end
      elseif snd.parried_limb == "head" or not snd.no_parry() then
        string = "combo "..snd.target.." sdk hkp hkp"
      else
        string = "combo "..snd.target.." wwk ucp ucp"
      end
      
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>head</name>
									<script>if snd.class == "Monk" then
  snd.starting_attack()
  function snd.attack_function()
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "sck "..snd.target
      elseif snd.proned() and not snd.checkAff("writhe_impaled") then
        string = "bbt "..snd.target
      else
        string = "combo "..snd.target.." wwk ucp ucp"
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^head$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limbs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs</name>
									<script>if snd.class == "Monk" then

  snd.starting_attack()
  function snd.attack_function()

    local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
    local kai = tonumber(gmcp.Char.Vitals.kai) 
    local string = "" -- this will populate with our attack
    local call = "" -- this will be for affliction calling

    if not snd.waiting.queue then

      limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
      
      if snd.limb_dmg["head"] &gt; 33.33 and not snd.checkAff("stupidity") then mindAffliction = "stupidity"
	     elseif snd.limb_dmg["left leg"] &gt; 33.33 and not snd.proned() and not snd.checkAff("stupidity") then mindAffliction = "stupidity"
	     elseif snd.limb_dmg["right leg"] &gt; 33.33 and not snd.proned() and not snd.checkAff("stupidity") then mindAffliction = "stupidity"
	     elseif not snd.checkAff("confusion") and snd.checkAff("blackout") then mindAffliction = "confuse"
	     elseif not snd.checkAff("anorexia") then mindAffliction = "anorexia"
	     elseif not snd.checkAff("paresis") and not snd.checkAff("paralysis") then mindAffliction = "paralyse"
	     elseif not snd.checkAff("confusion") then mindAffliction = "confuse"
	     elseif not snd.checkAff("stupidity") then mindAffliction = "stupidity"
	     elseif not snd.checkAff("epilepsy") then mindAffliction = "epilepsy"
	     elseif not snd.checkAff("deadening") then mindAffliction = "deadening"
      end

      if snd.used.shield then
	        tekuraKick = "sck"
      elseif snd.limb_dmg["head"] &gt;= 66.66 and snd.proned() and snd.resto_limb ~= "head" then
		      tekuraKick = "axk"
	    elseif snd.checkAff("head_mangled") and snd.proned() and snd.resto_limb ~= "head" then
		      tekuraKick = "axk"
	    elseif snd.stance ~= "bear" and snd.have_aff("left_arm_damaged") and snd.have_aff("right_arm_damaged") and not snd.proned() then
		      tekuraKick = "brs"
	    elseif snd.stance ~= "dragon" and snd.stance ~= "scorpion" and not snd.have_aff("left_arm_damaged") and not snd.have_aff("right_arm_damaged") then
		      tekuraKick = "drs"
	    elseif not snd.proned() and snd.limb_dmg["left leg"] &gt;= 33.33 and snd.cureset ~= "sentinel" then
		      tekuraKick = "swk"
	    elseif not snd.proned() and snd.limb_dmg["right leg"] &gt;= 33.33 and snd.cureset ~= "sentinel" then
		      tekuraKick = "swk"
	    elseif not snd.proned() and snd.checkAff("left_leg_damaged") and snd.cureset ~= "sentinel" then
		      tekuraKick = "swk"	
	    elseif not snd.proned() and snd.checkAff("right_leg_damaged") and snd.cureset ~= "sentinel" then
		      tekuraKick = "swk"
	    elseif (snd.have_aff("left_arm_broken") and snd.have_aff("right_arm_broken")) and not snd.checkAff("collapsed_lung") then
		      tekuraKick = "cmk"
	    elseif snd.proned() and snd.limb_dmg["left leg"] &lt; 33.33 and cantBeParried() and snd.resto_limb ~= "left leg" then
		      tekuraKick = "wrt left leg"
	    elseif snd.proned() and snd.limb_dmg["right leg"] &lt; 33.33 and cantBeParried() and snd.resto_limb ~= "right leg" then
		      tekuraKick = "wrt right leg"
	     elseif snd.proned() and snd.limb_dmg["left arm"] &lt; 33.33 and cantBeParried() and snd.resto_limb ~= "left arm" then
		      tekuraKick = "wrt left arm"
	     elseif snd.proned() and snd.limb_dmg["right arm"] &lt; 33.33 and cantBeParried() and snd.resto_limb ~= "right arm" then
		      tekuraKick = "wrt right arm"
	    elseif snd.proned() and not snd.checkAff("left_leg_broken") and cantBeParried() and snd.resto_limb ~= "left leg" then
		      tekuraKick = "wrt left leg"
	     elseif snd.proned() and not snd.checkAff("right_leg_broken") and cantBeParried() and snd.resto_limb ~= "right leg" then
		      tekuraKick = "wrt right leg"
	     elseif snd.proned() and not snd.checkAff("left_arm_broken") and cantBeParried() and snd.resto_limb ~= "left arm" then
		      tekuraKick = "wrt left arm"
	     elseif snd.proned() and not snd.checkAff("right_arm_broken") and cantBeParried() and snd.resto_limb ~= "right arm" then
		      tekuraKick = "wrt right arm"		
			elseif snd.resto_limb ~= "head" and snd.resto_limb ~= "none" and snd.parried_limb ~= "head" and not cantBeParried() then
      		tekuraKick = "wwk"
	     elseif snd.limb_dmg["left leg"] &lt; 33.33 and (cantBeParried() or snd.parried_limb ~= "left leg") and snd.resto_limb ~= "left leg" then
		      tekuraKick = "snk left"
	     elseif snd.limb_dmg["right arm"] &lt; 33.33 and (cantBeParried() or snd.parried_limb ~= "right arm") and snd.resto_limb ~= "right arm" then
		      tekuraKick = "mnk right"			
	     elseif snd.limb_dmg["left arm"] &lt; 33.33 and (cantBeParried() or snd.parried_limb ~= "left arm") and snd.resto_limb ~= "left arm" then
		      tekuraKick = "mnk left"
	     elseif snd.limb_dmg["right leg"] &lt; 33.33 and (cantBeParried() or snd.parried_limb ~= "right leg") and snd.resto_limb ~= "right leg" then
		      tekuraKick = "snk right"
	     elseif (cantBeParried() or snd.parried_limb ~= "left leg") and snd.resto_limb ~= "left leg" and snd.limb_dmg["left leg"] &lt; 66.66 then
		      tekuraKick = "snk left"
	     elseif (cantBeParried() or snd.parried_limb ~= "right arm") and snd.resto_limb ~= "left arm" and snd.limb_dmg["right arm"] &lt; 66.66 then
		      tekuraKick = "mnk right"		
	     elseif (cantBeParried() or snd.parried_limb ~= "left arm") and snd.resto_limb ~= "right arm" and snd.limb_dmg["left arm"] &lt; 66.66 then
		      tekuraKick = "mnk left"
	     elseif (cantBeParried() or snd.parried_limb ~= "right leg") and snd.resto_limb ~= "right leg" and snd.limb_dmg["right leg"] &lt; 66.66 then
		      tekuraKick = "snk right"
	     else 
		      tekuraKick = "wwk"
       end

      if snd.checkAff("numb_arms") and snd.limb_dmg["left leg"] &lt; 33.33 and snd.resto_limb ~= "left leg" then
		    firstPunch = "hfp left"
	    elseif snd.proned() and snd.parried_limb ~= "left leg" and snd.limb_dmg["left leg"] &lt; 33.33 and snd.resto_limb ~= "left leg" then
		    firstPunch = "hfp left"
	    elseif snd.checkAff("numb_arms") and snd.limb_dmg["right leg"] &lt; 33.33 and snd.resto_limb ~= "right leg" then
		    firstPunch = "hfp right"
	    elseif snd.proned() and snd.parried_limb ~= "right leg" and snd.limb_dmg["right leg"] &lt; 33.33 and snd.resto_limb ~= "right leg" then
		    firstPunch = "hfp right"
	    elseif snd.checkAff("numb_arms") and snd.resto_limb ~= "head" then
		    firstPunch = "ucp"
	    elseif (cureset == "shifter" or cureset == "praenomen") and not snd.checkAff("crippled_throat") and restoreFresh then
		    firstPunch = "tsp"
		  elseif mindAffliction == "stupidity" and not snd.checkAff("dizziness") then
		    firstPunch = "pmp"
	    elseif (cantBeParried() or snd.parried_limb ~= "left arm") and not snd.resto_limb ~= "left arm" and snd.limb_dmg["left arm"] &lt; 66.66 and tekuraKick ~= "mnk left" then
		    firstPunch = "spp left"
	    elseif (cantBeParried() or snd.parried_limb ~= "left leg") and not snd.checkAff("left_leg_damaged") and snd.resto_limb ~= "left leg" and snd.limb_dmg["left leg"] &lt; 66.66 and tekuraKick ~= "snk left" then
		    firstPunch = "hfp left"
	    elseif (cantBeParried() or snd.parried_limb ~= "right leg") and not snd.checkAff("right_leg_damaged") and snd.resto_limb ~= "right leg" and snd.limb_dmg["right leg"] &lt; 66.66 and tekuraKick ~= "snk right" then
		    firstPunch = "hfp right"
	    elseif (cantBeParried() or snd.parried_limb ~= "right arm") and not snd.checkAff("right_arm_damaged") and snd.resto_limb ~= "right arm" and snd.limb_dmg["right arm"] &lt; 66.66 and tekuraKick ~= "mnk right" then
		    firstPunch = "spp right"
	    elseif (cantBeParried() or snd.parried_limb ~= "head") and not snd.checkAff("head_damaged") and snd.resto_limb ~= "head" then
		    firstPunch = "ucp"
	    else
		    firstPunch = "hkp"
      end

     if snd.checkAff("numb_arms") and not snd.limb_dmg["left leg"] &lt; 33.33 and snd.resto_limb ~= "left leg" then
		    secondPunch = "hfp left"
	   elseif snd.proned() and snd.parried_limb ~= "left leg" and snd.limb_dmg["left leg"] &lt; 33.33 and snd.resto_limb ~= "left leg" then
		    secondPunch = "hfp left"
	   elseif snd.checkAff("numb_arms") and not snd.limb_dmg["right leg"] &lt; 33.33 and snd.resto_limb ~= "right leg" then
    		secondPunch = "hfp right"
	   elseif snd.proned() and snd.parried_limb ~= "right leg" and snd.limb_dmg["right leg"] &lt; 33.33 and snd.resto_limb ~= "right leg" then
		    secondPunch = "hfp right"
	   elseif snd.checkAff("numb_arms") and snd.resto_limb ~= "head" then
		    secondPunch = "ucp"
	   elseif (cantBeParried() or snd.parried_limb ~= "right leg") and snd.limb_dmg["right leg"] &lt; 33.33 and snd.resto_limb ~= "right leg" and snd.limb_dmg["right leg"] &lt; 66.66 then
		    secondPunch = "hfp right"
	   elseif (cantBeParried() or snd.parried_limb ~= "right arm") and snd.limb_dmg["right arm"] &lt; 33.33 and snd.resto_limb ~= "right arm" and snd.limb_dmg["right arm"] &lt; 66.66 then
		    secondPunch = "spp right"
	   elseif (cantBeParried() or snd.parried_limb ~= "left arm") and snd.limb_dmg["left arm"] &lt; 33.33 and snd.resto_limb ~= "left arm" and snd.limb_dmg["left arm"] &lt; 66.66 then
		    secondPunch = "spp left"
	   elseif (cantBeParried() or snd.parried_limb ~= "left leg") and snd.limb_dmg["left leg"] &lt; 33.33 and snd.resto_limb ~= "left leg" and snd.limb_dmg["left leg"] &lt; 66.66 then
		    secondPunch = "hfp left"
	   elseif (cantBeParried() or snd.parried_limb ~= "head") and snd.resto_limb ~= "head" then
		    secondPunch = "ucp"
	   else
		    secondPunch = "hkp"
     end

    if not snd.proned() then
	    if snd.used.shield then
		      string = "combo "..snd.target.. tekuraKick ..firstPunch.." "..secondPunch..snd.sep.."mind "..mindAffliction.." "..snd.target
		  elseif (snd.limb_dmg["head"] &gt;= 56 or snd.checkAff("head_mangled")) and snd.proned() and cantBeParried() then
    			string = "combo "..snd.target.." axk ucp ucp"
		  elseif snd.target_impaled then
			    string = "combo "..snd.target.." axk ucp ucp"
		  elseif hp &lt;= 40 and kai &gt;= 21 then 
			    string = "kai heal"
		  elseif snd.proned() and (snd.limb_dmg["left leg"] &gt;= 66.66 and snd.limb_dmg["right leg"] &gt;= 66.66 and snd.limb_dmg["left arm"] &gt;= 33.33 and snd.limb_dmg["right arm"] &gt;= 33.33) then
			    string = "bbt "..snd.target
		  elseif not snd.checkAff("turmoil") then
			    string = "blp "..snd.target
			--elseif snd.limb_dmg["left leg"] &gt;= 33.33 and snd.limb_dmg["right leg"] &gt;= 33.33 and snd.limb_dmg["left arm"] &gt;= 33.33 and snd.limb_dmg["right arm"] &gt;= 33.33 and snd.limb_dmg["head"] &lt; 66.66 then 
			  --  string = "combo "..snd.target.." wrt left leg ucp ucp "..snd.sep.."mind "..mindAffliction.." "..snd.target
		  elseif snd.checkAff("head_mangled") and snd.proned() then
			    string = "combo "..snd.target.." axk ucp ucp"
		  elseif snd.limb_dmg["head"] &gt;= 66.66 and snd.proned() then
			    string = "combo "..snd.target.." axk ucp ucp"
		  elseif ((snd.limb_dmg["left arm"] &gt;= 26 and snd.limb_dmg["left arm"] &lt;= 33.33 and snd.resto_limb ~= "left arm") or (snd.limb_dmg["right arm"] &gt;= 26 and snd.limb_dmg["right arm"] &lt;= 33.33 and snd.resto_limb ~= "right arm") or (snd.limb_dmg["left leg"] &gt;= 26 and snd.limb_dmg["left leg"] &lt;= 33.33 and snd.resto_limb ~= "left leg") or (snd.limb_dmg["right leg"] &gt;= 26 and snd.limb_dmg["right leg"] &lt;= 33.33 and snd.resto_limb ~= "right leg")) and snd.balance.blackout and snd.checkAff("mind_lock") then
			    string = "mind blackout"
		  elseif kai &gt;= 70 and snd.stance == "scorpion" then
			    string = "kai enfeeble "..snd.target
		  elseif kai &gt;= 40 and snd.stance ~= "scorpion" and not snd.proned() and not snd.checkAff("left_arm_broken") and not snd.checkAff("right_arm_broken") and not snd.checkAff("right_leg_broken") and not snd.checkAff("left_leg_broken") and ((snd.checkAff("blackout") and snd.resto_limb ~= "none") or restoreFresh) and cureset ~= "shifter" then
			    string = "kai cripple "..snd.target
		  else
			    string = "combo "..snd.target.." "..tekuraKick.." "..firstPunch.." "..secondPunch..snd.sep.." mind "..mindAffliction.." "..snd.target
		  end
		elseif hp &lt;= 35 and kai &gt;= 21 then 
			string = "kai heal"
		elseif (hp &lt;= 60 or snd.have_aff("omen")) and not numbness then 
			string = "numb"
		elseif snd.checkAff("blackout") and not snd.checkAff("disrupted") then
			string = "mind disrupt "..snd.target
		elseif (snd.have_aff("left_leg_broken") or snd.have_aff("right_leg_broken")) and snd.proned() then 
			if snd.balance.blackout and snd.mindlocked then
				string = "mind blackout"
			else
				string = ("mind batter "..snd.target.." epilepsy dizziness stupidity")
			end
		end
    
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end

if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Syssin</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Syssin" then
snd.send("quickwield left whip"..snd.sep.."quickwield right shield")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Syssin" then
snd.send("quickwield left dirk"..snd.sep.."quickwield right shield")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Assassination</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>yank</name>
									<script>if snd.class == "Syssin" then
if matches[2] == "" then
 snd.send("qeb quickwield left whip"..snd.sep.."yank "..snd.target)
else
 snd.send("qeb quickwield left whip"..snd.sep.."yank "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bk(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>backstab</name>
									<script>if snd.class == "Syssin" then
if matches[2] == "" then
 snd.send("qeb quickwield left dirk"..snd.sep.."backstab "..snd.target.." curare")
else
 snd.send("qeb quickwield left dirk"..snd.sep.."backstab "..matches[2].." curare")
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bs(.*)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Subterfuge</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>darkflood</name>
									<script>if snd.class == "Syssin" then
snd.send("qeb conjure darkflood")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^df$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>abduct</name>
									<script>if snd.class == "Syssin" then
if matches[2] == nil then
 snd.send("qeb abduct "..snd.target)
else
 snd.send("qeb abduct "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^at(?: (.*))?$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Hypnosis</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>hypnotise</name>
									<script>if snd.class == "Syssin" then
snd.send("qeb hypnotise "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^hyp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>suggest</name>
									<script>if snd.class == "Syssin" then
local shorthand = {
["clu"] = "clumsiness",
["imp"] = "impatience"
}
if shorthand[matches[2]] then
 snd.send("qeb suggest "..snd.target.." "..shorthand[matches[2]])
else
 cecho("&lt;red&gt;No such affliction!")
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^sg (\w+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>shadow mark</name>
									<script>if snd.class == "Syssin" then
snd.send("qeb shadow mark numbness "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^sm$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>hypnotise stack</name>
									<script>if snd.class == "Syssin" then
snd.hypno_stack = {
 "hypochondria",
 "clumsiness",
 "impatience",
 "lethargy",
 "hypochondria",
 "impatience",
 "clumsiness",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy",
 "claustrophobia",
 "impatience",
 "agoraphobia"
}
snd.hyp = 0
snd.last_hypno = 0
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.hypno == "open" or snd.hypno == "none" then
   if snd.hypno == "none" then
    string = "hypnotise "..snd.target..snd.sep
   end
   if #snd.hypno_stack &gt; snd.last_hypno + 1 then
    snd.hyp = snd.last_hypno+1
    string = string.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
   else
    string = "seal "..snd.target.." 3"
   end
  else
   snd.message("Good to go! KILL THEM NOW!")
  end
 end
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^hypno$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>hypnotise magic stack</name>
									<script>if snd.class == "Syssin" then
snd.hypno_stack = {
 "hypochondria",
 "clumsiness",
 "impatience",
 "confusion",
 "hypochondria",
 "impatience",
 "clumsiness",
 "confusion",
 "impatience",
 "loneliness",
 "confusion",
 "claustrophobia",
 "impatience",
 "agoraphobia"
}
snd.hyp = 0
snd.last_hypno = 0
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.hypno == "open" or snd.hypno == "none" then
   if snd.hypno == "none" then
    string = "hypnotise "..snd.target..snd.sep
   end
   if #snd.hypno_stack &gt; snd.last_hypno + 1 then
    snd.hyp = snd.last_hypno+1
    string = string.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
   else
    string = "seal "..snd.target.." 3"
   end
  else
   snd.message("Good to go! KILL THEM NOW!")
  end
 end
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^hypm$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Syssin" then
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"left_leg_broken",
		"right_leg_broken",
		"hearing",
		"sensitivity",
		"voyria"
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"clumsiness",
		"asthma",
		"paresis",
		"slickness",
		"stupidity",
		"anorexia",
		"hearing",
		"sensitivity",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		-- let's move on
		elseif snd.checksomeAffs({"anorexia", "allergies", "vomiting", "mental disruption"},1) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if (snd.defenses.def_hiding.state == "deffed" or snd.defenses.def_phase.state == "deffed") and not snd.used.shield then
				string = "quickwield left dirk"..snd.sep.."backstab "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			elseif snd.used.shield then
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." shield"
			elseif snd.used.rebounding then
          -- we can use a venom with flay if we're flaying shield or rebounding
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." rebounding"
        call = "wt Afflicting "..snd.target..": "..tohit[1]
      else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>magic</name>
									<script>if snd.class == "Syssin" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "confusion",
 "hypochondria",
 "impatience",
 "vertigo",
 "confusion",
 "impatience",
 "loneliness",
 "confusion"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"left_leg_broken",
		"right_leg_broken",
		"hearing",
		"sensitivity",
		"voyria"
		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"weariness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"stupidity", -- not as important, since we're running impatience
		--"vomiting",
		"allergies",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"clumsiness",
		--"dizziness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"weariness",
		"asthma",
		"paresis",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"clumsiness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		elseif not snd.checkAff("numbed_skin") then
			-- they don't have numbness yet
			if snd.used.paste then -- but they have fangbarrier, so we can't give it
				-- we need to flay first
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else -- they don't have fangbarrier - go for it!
				string = "shadow mark numbness "..snd.target
			end
		-- they already have numbness, let's move on
		elseif snd.checksomeAffs({"anorexia", "allergies", "vomiting", "mental disruption"},1) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield then
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." shield"
			elseif snd.used.rebounding then
          -- we can use a venom with flay if we're flaying shield or rebounding
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." rebounding"
        call = "wt Afflicting "..snd.target..": "..tohit[1]
      else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" and table.contains(snd.target_has, "numbed_skin") then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>kill</name>
									<script>if snd.class == "Syssin" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "lethargy",
 "hypochondria",
 "impatience",
 "vertigo",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"left_leg_broken",
		"right_leg_broken",
		"hearing",
		"sensitivity",
		"voyria"
		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"clumsiness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"stupidity", -- not as important, since we're running impatience
		--"vomiting",
		"allergies",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"clumsiness",
		"asthma",
		"paresis",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		elseif not snd.checkAff("numbed_skin") then
			-- they don't have numbness yet
			if snd.used.paste then -- but they have fangbarrier, so we can't give it
				-- we need to flay first
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else -- they don't have fangbarrier - go for it!
				string = "shadow mark numbness "..snd.target
			end
		-- they already have numbness, let's move on
		elseif snd.checksomeAffs({"anorexia", "allergies", "vomiting", "mental disruption"},1) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield then
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." shield"
			elseif snd.used.rebounding then
          -- we can use a venom with flay if we're flaying shield or rebounding
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." rebounding"
        call = "wt Afflicting "..snd.target..": "..tohit[1]
      else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" and table.contains(snd.target_has, "numbed_skin") then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^kl$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>1v1</name>
									<script>if snd.class == "Syssin" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "lethargy",
 "hypochondria",
 "impatience",
 "vertigo",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"voyria",
		"left_leg_broken",
		"right_leg_broken",
		"sensitivity",
		"asleep",

		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"clumsiness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it,
		"vomiting",
		"allergies",
		"stupidity", -- not as important, since we're running impatience
		"dizziness",
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"sensitivity",
		"haemophilia",
		"recklessness",
		"weariness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		"paresis",
		"clumsiness",
		"asthma",
				--"sight",
		--"squelched",
		"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"stupidity",
		"dizziness",
		--"shyness", -- to bury impatience once hypno fires
		"slickness",
		"anorexia",
		"sensitivity",
		"haemophilia",
		"recklessness",
		"weariness",
		"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		elseif (snd.defenses.def_hiding.state == "deffed" or snd.defenses.def_phase.state == "deffed") and not snd.used.shield then
	 		string = "quickwield left dirk"..snd.sep.."quickwield right shield"..snd.sep.."backstab "..snd.target
		elseif snd.checksomeAffs({"anorexia", "allergies", "vomiting", "mental disruption"},1) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield then
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." shield"
			elseif snd.used.rebounding then
          -- we can use a venom with flay if we're flaying shield or rebounding
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." rebounding"
        call = "wt Afflicting "..snd.target..": "..tohit[1]
      else -- otherwise, we don't need to flay - go full ham!
        string = "quickwield left dirk"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
        call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
      end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
			elseif snd.hypno == "ready" then --They're sealed so snap em!
			  string = string..snd.sep.."snap "..snd.target
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	 
	
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Syssin" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if (snd.defenses.def_hiding.state == "deffed" or snd.defenses.def_phase.state == "deffed") and not snd.used.shield then
	 string = "quickwield left dirk"..snd.sep.."backstab "..snd.target
  elseif snd.proned() and not snd.used.shield then
   string = "quickwield left whip"..snd.sep.."garrote "..snd.target
  else
	 if snd.used.paste then
	  string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
	 else
    string = "bite "..snd.target.." camus"
	 end
  end
 if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
	-- we do have shadow balance
  string = string..snd.sep.."shadow sleight pall "..snd.target
 end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Wayfarer</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Salve affs priority</name>
									<script>if snd.class == "Wayfarer" then -- Requires dropstrike
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local touse = {}
		local tohit = {}
		local extraaff = ""
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local shatter = false
		local indoors = table.contains(gmcp.Room.Info.details, "indoors")
		local enrage = false
		local preatk = "qa "..snd.target..snd.sep
		
		if tonumber(gmcp.Char.Vitals.fury) &gt;=40 then
			shatter = true -- spam it
		else
			shatter = false
		end

		if tonumber(gmcp.Char.Vitals.fury) &gt;=50 then
			enrage = true
		else
			enrage = false
		end
		
		snd.giving = {
			"left_leg_broken",
			"right_leg_broken",
			"sensitivity",
			"left_arm_broken",
			"right_arm_broken",
			"stupidity",
			"anorexia",
			"asthma",
			"slickness",
			"paresis",
			"clumsiness",
    }
		if #missing == 2 and not snd.used.shield and not snd.used.rebounding then
			venom = snd.effects[missing[1]]
		elseif #missing == 1 and not snd.used.shield then
			venom = snd.effects[missing[1]]
		end
		
  	for i in pairs(snd.giving) do
  		if not snd.checkAff(snd.giving[i]) then
				if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
  		end
  	end
		
		for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
		end
		
		while #tohit &lt; 3 do
			table.insert(tohit, extraaff)
		end
		
		if snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		elseif snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		end
		
		if snd.health_percent &lt;= 35 and not indoors then
			if not snd.used_rebounding and not snd.highjumped then
			string = "highjump"
			elseif snd.highjumped == true then
				string = "axe dropstrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif snd.used_rebounding then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			end
		end

    if snd.health_percent &gt; 35 and not indoors and snd.checkAff("sensitivity") and snd.proned() and (snd.checkAff("right_leg_broken") or snd.checkAff("left_leg_broken")) then
			string = preatk.."axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if indoors and snd.checkAff("sensitivity") and snd.proned() and (snd.checkAff("right_leg_broken") or snd.checkAff("left_leg_broken")) then
			string = preatk.."axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if shatter and not snd.checkAff("sensitivity") and not snd.checkAff("weariness") and not snd.enraged then
			string = "fury shatter "..snd.target..snd.sep..string
		end
		
		if enrage == true and not snd.enraged and snd.checkAff("sensitivity") then
			string = "fury enrage "..snd.sep..string
		end
		

		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
		
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wayfarer aff support</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = ""
		local call = "" 
		local touse = {}
		local tohit = {}
		local preatk = "qa "..snd.target..snd.sep
		
		local fury_amount = tonumber(gmcp.Char.Vitals.fury)
		local fury = ""

		snd.giving = {
		"asthma",
		"paresis",
		"clumsiness",
		"slickness",
		"left_leg_broken",
		"left_arm_broken",
		"anorexia",
		"stupidity",
		"right_leg_broken",
		"right_arm_broken",
		"haemophilia",
		"allergies",
		"vomiting",
		"recklessness",
		"sensitivity",
		"sight",
		"shyness",
		"dizziness",
    }
		
--This is a special case to use slaughter to quickly lock someone, with the additional chance 
--of using muddled to seal it long enough for next round. Affs are checked backwards so we can
--use the most necessary first, as they'll be put on top of the stack first.
		
		if snd.checksomeAffs({"slickness","clumsiness", "hypochondria", "weariness", "paresis"}, 2) and snd.checkAff("asthma") then
			if not snd.checkAff("stupidity") then
				if fury_amount &gt;= 60 and tonumber(gmcp.Char.Vitals.ability_bal) then
					fury = "fury shatter "..snd.target.." boost"
				else
					table.insert(snd.giving, 1, "stupidity")
				end
			end

			if not snd.checkAff("anorexia") then
				table.insert(snd.giving, 1, "anorexia")
			end

			if not snd.checkAff("slickness") then
				table.insert(snd.giving, 1, "slickness")
			end
			string = "we gon slaughter this bruh"
		end
-----	
		for i in pairs(snd.giving) do
  		if not snd.checkAff(snd.giving[i]) then
				if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
  		end
  	end
		
		for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
		end
-----
		if snd.used.shield then
			if snd.used.rebounding then
				string = "axe devastate "..snd.target
				call = nil
			else
				string = "axe devastate "..snd.target.." "..tohit[1]
			end
			
		elseif string:find("slaughter") or snd.target_locked() then
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
		
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			
		end
		
		if fury_amount &gt;= 83 and tonumber(gmcp.Char.Vitals.ability_bal) and not snd.checkAff("lethargy") then
			fury = "fury halt "..snd.target
		end

		if fury~= "" then string = fury..snd.sep..string end

-----
		if snd.toggles.affcalling and not snd.target_gone and call ~= nil then
			if string:find("slaughter") then
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			else
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			end
			string = call..string
		end

		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
		
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lock$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs w/excute</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local touse = {}
    local tohit = {}
		local limb_tohit = ""
		local extraaff = ""
    local fury = tonumber(gmcp.Char.Vitals.fury)
    local execute_check = false
	
		-- set the limb order we want to hit
		snd.giving_limbs = {"right leg", "left leg", "head", "left arm", "right arm", }
    for k, v in pairs(snd.giving_limbs) do
  		if snd.limb_status[v] == "healed" and (snd.parried_limb ~= v or snd.no_parry() or fury &gt; 20) then
				limb_tohit = v
  		end
  	end
     
    snd.giving = {
    "left_leg_broken",
		"right_leg_broken",
		"anorexia",
    "slickness",
    "stupidity",
		"asthma",
		"sensitivity",
    "weariness",
    "clumsiness",
    "left_arm_broken",
    "right_arm_broken",}
		for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) then
        if not table.contains(touse, snd.giving[i]) then 
          table.insert(touse, snd.giving[i])
        end
      end
		end
    
    for k, v in pairs(snd.limb_dmg) do
      if k ~= "torso" and k ~= "head" and snd.limb_status[k] ~= "healed" and snd.limb_status["head"] ~= "healed" then
        execute_check = true
      end
    end
    
    for i in pairs(touse) do
			table.insert(tohit, snd.effects[touse[i]])
		end		

		if snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		elseif snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target  
    elseif execute_check then
      string = "axe execute "..snd.target
		else
			string = "fury distract "..snd.target..snd.sep.."axe chop "..snd.target.." "..limb_tohit .." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		end
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>sensi + tfix support</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
	
	if not snd.waiting.queue then
	
		local string = ""
		local call = ""
		local touse = {}
		local tohit = {}
		local extraaff = ""
		local boosthalt = false
		if tonumber(gmcp.Char.Vitals.fury) &gt;=50 then
			boosthalt = true -- spam it
		else
			boosthalt = false
		end
		
		snd.giving = {
		"hearing",
		"sensitivity",
		"sight",
		"paresis",
		"asthma",
		"vomiting",
		"allergies",
		"slickness",
		"left_leg_broken",
		"right_leg_broken",
		"anorexia",
		"stupidity",
    }
		
		for i in pairs(snd.giving) do
			if not snd.checkAff(snd.giving[i]) then
			if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
 			end
		end
		
		for i in pairs(touse) do
			table.insert(tohit, snd.effects[touse[i]])
		end
		
		while #tohit &lt; 3 do
			table.insert(tohit, extraaff)
		end
		
		if snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		elseif snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		else
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if boosthalt and not snd.enraged then
			string = "fury halt "..snd.target.." boost"..snd.sep..string
		end
		
		if snd.proned() and boosthalt and not snd.enraged and snd.checkAff("sensitivity") and (snd.checkAff("right_leg_broken") or snd.checkAff("left_leg_broken")) then
			string = "fury enrage"..snd.sep..string
		end

		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>lock into slaughter</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local touse = {}
		local tohit = {}
		local extraaff = ""
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local shatter = false
		local boostshatter = false
		local indoors = table.contains(gmcp.Room.Info.details, "indoors")
		local enrage = false
		local preatk = "qa "..snd.target..snd.sep
		
		if tonumber(gmcp.Char.Vitals.fury) &gt;=40 then
			shatter = true -- spam it
		else
			shatter = false
		end

		if tonumber(gmcp.Char.Vitals.fury) &gt;=60 then
			boostshatter = true -- spam it
		else
			boostshatter = false
		end

		if tonumber(gmcp.Char.Vitals.fury) &gt;=50 then
			enrage = true
		else
			enrage = false
		end
		
		-- set the affs we want to use
		snd.giving = {
		"paresis",
		"asthma",
		"weariness",
		"sight",
		"sensitivity",
		"slickness",
		"anorexia",
		"stupidity",
		"left_leg_broken",
		"right_leg_broken",
		"clumsiness",
		"haemophilia",
		"allergies",
		"vomiting",
		"recklessness",
		"dizziness",
    }
		if #missing == 2 and not snd.used.shield and not snd.used.rebounding then
			venom = snd.effects[missing[1]]
		elseif #missing == 1 and not snd.used.shield then
			venom = snd.effects[missing[1]]
		end
		
		-- pick affs from the list above
  	for i in pairs(snd.giving) do
  		-- make sure not to double up paresis and paralysis
  		if not snd.checkAff(snd.giving[i]) then
  			-- and don't add an aff we've already got one higher in the list!
				if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
  		end
  	end
		
		for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
		end
		
		while #tohit &lt; 3 do
			table.insert(tohit, extraaff)
		end
		
		-- now to decide what attack to use!
		if snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		elseif snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		end
		
    if snd.proned() and snd.checkAff("sensitivity") and (snd.checkAff("right_leg_broken") or snd.checkAff("left_leg_broken")) then
			string = preatk.."axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if shatter and #missing &gt; 2 and not snd.checkAff("sensitivity") and not snd.enraged then
			string = "fury shatter "..snd.target..snd.sep..string
		end
		
		if boostshatter and #missing &lt;= 2 and not snd.checkAff("sensitivity") and not snd.enraged then
			string = "fury shatter "..snd.target.." boost"..snd.sep..string
		end
		
		if enrage == true and not snd.enraged and snd.checkAff("sensitivity") then
			string = "fury enrage "..snd.sep..string
		end
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Lacerate (Bleed) focused</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local touse = {}
		local tohit = {}
    local fury = ""
    local current_fury = tonumber(gmcp.Char.Vitals.fury)
		local indoors = table.contains(gmcp.Room.Info.details, "indoors")		

		if current_fury &gt;=20 and not snd.checkAff("hearing") and not snd.checksomeAffs({"ringing_ears", "sensitivity"},2) then
      fury = "fury warcry " .. snd.target
        if current_fury &gt;= 40 and not snd.checksomeAffs({"ringing_ears", "hearing"},2) then
          fury = fury .. " boost"
        end
		elseif current_fury &gt;= 30 and not snd.checkAff("exhausted") then
      fury = "fury exhaust " .. snd.target    
    end
    
		-- set the affs we want to use
		snd.giving = {
    "sensitivity",
		"clumsiness",
		"allergies",
		"vomiting",
		"recklessness",
		"paresis",
		"asthma",
    "weariness",
    }
    
		-- pick affs from the list above
  	for i in pairs(snd.giving) do
  		-- make sure not to double up paresis and paralysis
  		if not snd.checkAff(snd.giving[i]) then
  			-- and don't add an aff we've already got one higher in the list!
				if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
  		end
  	end
		
		for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
		end
		
		while #tohit &lt; 3 do
			table.insert(tohit, "delphinium")
		end
		
		-- now to decide what attack to use!
    if snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		
    elseif snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]
      
    elseif not snd.checkAff("haemophilia") and not snd.used.rebounding then
      string = "axe lacerate " .. snd.target
      
    elseif snd.proned() and snd.checkAff("sensitivity") and (snd.checkAff("right_leg_broken") or snd.checkAff("left_leg_broken")) then
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
      
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]
		end
				
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call .. snd.sep .. string
		end
    
    if fury ~= "" then string = string..snd.sep..fury end
		
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bleed$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Shapeshifter</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not table.contains(snd.target_has, "writhe_thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not table.contains(snd.target_has, "writhe_necklock") then
		 mangled = limbs[limb]
		elseif not table.contains(snd.target_has, "writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 end
	end
	if snd.used.shield then
	 string = "touch hammer "..snd.target
	-- check if we can jawlock now!
  elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then
	 if string.find(mangled, "leg") then
	  string = "jawlock thigh of "..snd.target
	 elseif mangled == "head" then
	  string = "jawlock neck of "..snd.target
	 elseif mangled == "torso" or string.find(mangled, "arm") then
	  string = "jawlock armpit of "..snd.target
	 end
	elseif broken ~= "nothing" and not snd.jawlocked then
	 string = "destroy "..broken.." of "..snd.target
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>group quarter</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
 
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not table.contains(snd.target_has, "writhe_thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not table.contains(snd.target_has, "writhe_necklock") then
		 mangled = limbs[limb]
		elseif not table.contains(snd.target_has, "writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 end
	end
		if snd.used.shield then
	 string = "touch hammer "..snd.target
	-- check if we can jawlock now!
	elseif theyran then
		string = "neckdrag "..snd.target..snd.neckdragdir
	elseif (table.contains(snd.target_has, "writhe_thighlock") or table.contains(snd.target_has, "writhe_necklock") or table.contains(snd.target_has, "writhe_armpitlock")) and not snd.jawlocked then
	 string = "quarter "..snd.target
	elseif broken ~= "nothing" and not snd.jawlocked then
	 string = "destroy "..broken.." of "..snd.target
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^insta$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	crippled = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not table.contains(snd.target_has, "writhe_thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not table.contains(snd.target_has, "writhe_necklock") then
		 mangled = limbs[limb]
		elseif not table.contains(snd.target_has, "writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 elseif table.contains(snd.target_has, "limbs[limb]".."_broken") and snd.limb_dmg[limbs[limb]] &lt; 33.33 and crippled == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
		 crippled = limbs[limb]
		end
	 end
	end
	if snd.used.shield then
	 string = "touch hammer "..snd.target
	
	elseif theyran then
		string = "neckdrag "..snd.target..snd.neckdragdir
	elseif snd.jawlocked then
	 string = "rupture "..snd.target
	-- check if we can jawlock now!
  elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then
	 if string.find(mangled, "leg") then
	  string = "jawlock thigh of "..snd.target
	 elseif mangled == "head" then
	  string = "jawlock neck of "..snd.target
	 elseif mangled == "torso" or string.find(mangled, "arm") then
	  string = "jawlock armpit of "..snd.target
	 end
	elseif broken ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then
	 string = "destroy "..broken.." of "..snd.target
	elseif crippled ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then
	 string = "mangle "..crippled.." of "..snd.target
	elseif snd.resto_limb ~= "none" and snd.defenses.def_fury.state ~= "deffed" then
	 string = "combo "..snd.target.." hamstring left hamstring right"
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	 if snd.defenses.def_fury.state == "deffed" then
	  string = "pounce "..snd.target..snd.sep..string
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Skiva</name>
									<script>--making the converter to ferality attacks refrences later.
if snd.class == "Shapeshifter" then    
	snd.starting_attack()
		
	function snd.attack_function()        
 		if not snd.waiting.queue then                    
  		local function feralityConvert(limb)            
    		if string.find(limb, "leg") then              
    		  return "hamstring "..limb:gsub(" leg", "")
    		elseif string.find(limb, "arm") then
      		return "rend "..limb:gsub(" arm", "")
    		elseif limb == "torso" then
      		return "bodypunch"         
    		elseif limb == "head" then
      		return "skullwhack"
    		else
      		return "slash "..limb
    		end
  		end
	
-- Making the table of limbs and damage
  		limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
			mangled = "nothing"
			broken = "nothing"
			crippled = "nothing"
			
			for limb in pairs(limbs) do
	 			if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then -- checking for mangle opertunities
		  		if string.find(limbs[limb], "leg") and not snd.checksomeAffs({"groinrip","writhe_thighlock"},1) then	
				 		mangled = limbs[limb]
					elseif limbs[limb] == "head" and not snd.checksomeAffs({"throatrip","writhe_necklock"},1) then
				 		mangled = limbs[limb]
					elseif not snd.checksomeAffs({"spleenrip","writhe_armpitlock"},1) and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
				 		mangled = limbs[limb]
					end
			 	elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then -- Updating the table with current breaks
			  	if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   				broken = limbs[limb]
					end
	 			elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 33.33 and crippled == "nothing" then -- Updating the table with current cripples
	  			if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
				 		crippled = limbs[limb]
					end
	 			end
			end  --end of for loop       
	
	 		if snd.used.shield then           
		 		string = "pounce "..snd.target
			elseif snd.checksomeAffs({"groinrip", "throatrip", "spleenrip"},2) then --nom nom nom
				string = "devour "..snd.target            
			elseif snd.checkAff("writhe_necklock") and not snd.checkAff("throatrip") then-- Checking for Rip opertunities
				string = "throatrip "..snd.target          
			elseif snd.checkAff("writhe_armpitlock") and not snd.checkAff("spleenrip") then-- Checking for Rip opertunities
				string = "spleenrip "..snd.target
			elseif snd.checkAff("writhe_thighlock") and not snd.checkAff("groinrip") then-- Checking for Rip opertunities
				string = "groinrip "..snd.target
			elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then -- Checking for Jawlock opertunities
				if string.find(mangled, "leg") and not snd.checkAff("writhe_thighlock")then
	  			string = "jawlock thigh of "..snd.target
	 			elseif mangled == "head" and not snd.checkAff("writhe_necklock") then
	  			string = "jawlock neck of "..snd.target
	 			elseif mangled == "torso" or string.find(mangled, "arm") and not snd.checkAff("writhe_armpitlock") then
	  			string = "jawlock armpit of "..snd.target
				end
			elseif broken ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then  -- Limb escalation
		 		string = "destroy "..broken.." of "..snd.target   
			elseif crippled ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then -- Limb escalation
	 			string = "mangle "..crippled.." of "..snd.target

			else -- build the limb breaks if nothing else major going on
	 			left = "nothing"       
	 			right = "nothing"          
	 			for limb in pairs(limbs) do
	  			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and not table.contains(snd.target_has, limb.."_broken") then  
		 				if right == "nothing" then  
		  				right = limbs[limb]
		 				elseif left == "nothing" then  
		  				left = limbs[limb]
		 				end
					end
	 			end
	 
--Doubling up the same attack if only one is found
	 			if left == "nothing" then 
	  			left = right 
	 			end
	 
-- using the feraility convert with what we've made so far
	 			string = "combo "..snd.target.." "..feralityConvert(left).." "..feralityConvert(right)  
			end -- end of primary attacking function setup
	
--queuing it so we can keep the attack rolling
  	if string ~= snd.last_attack and not snd.waiting.queue then   
   		snd.last_attack = string 
   		snd.send("qeb "..snd.last_attack)
   		snd.waiting.queue = true
   		tempTimer(snd.delay(), [[snd.waiting.queue = false]])  
  	end--end the actual attack rolling
 	end --end the main code
end --end the function
--and sending it to the mud
snd.attack_function()   
end -- end the class if
</script>
									<command></command>
									<packageName></packageName>
									<regex>^kll$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Skiva quartering</name>
									<script>if snd.class == "Shapeshifter" then
	snd.starting_attack()
	function snd.attack_function()
 		if not snd.waiting.queue then
  		local function feralityConvert(limb)
    		if string.find(limb, "leg") then
      		return "hamstring "..limb:gsub(" leg", "")
    		elseif string.find(limb, "arm") then
      		return "rend "..limb:gsub(" arm", "")
    		elseif limb == "torso" then
      		return "bodypunch"
    		elseif limb == "head" then
      		return "skullwhack"
    		else
      		return "slash "..limb
    		end
  		end
  -- list what limbs to hit
  		limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
			mangled = "nothing"
      damaged = "nothing"
			broken = "nothing"
  		for limb in pairs(limbs) do
	 			if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  			if string.find(limbs[limb], "leg") and not table.contains(snd.target_has, "writhe_thighlock") then
	   				mangled = limbs[limb]
					elseif limbs[limb] == "head" and not table.contains(snd.target_has, "writhe_necklock") then
		 				mangled = limbs[limb]
					elseif not table.contains(snd.target_has, "writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 				mangled = limbs[limb]
					end
	 			elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  			if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") and snd.parried_limb ~= limbs[limb] then
	   				broken = limbs[limb]
					end
	 			end
  		end  --end of for loop  
  		for _, aff in pairs(snd.target_has) do
      	if string.find(aff, "_broken") and snd.limb_status[aff:gsub("_broken ", "")] ~= "broken" and snd.limb_status[aff:gsub("_broken", "")] ~= "mangled" and snd.parried_limb ~= aff:gsub("_broken", "") then
        	damaged = aff:gsub("_broken", "")
          if damaged == "left_leg" then
            damaged = "left leg"
          elseif damaged == "right_leg" then
            damaged = "right leg"
          elseif damaged == "left_arm" then
            damaged = "left arm"
          elseif damaged == "right_arm" then
            damaged = "right arm"
          end
          break
        end
      end  --end of for loop  
			display(damaged)
			if snd.used.shield then
	 			string = "pounce "..snd.target
				
			elseif snd.checksomeAffs({"writhe_thighlock", "writhe_necklock", "writhe_armpitlock"},3) and not snd.jawlocked then -- check if we can jawlock now!
	 			string = "quarter "..snd.target
  		elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then -- Checking for Jawlock opertunities
				if string.find(mangled, "leg") and not snd.checkAff("groinrip")then
	  			string = "jawlock thigh of "..snd.target
	 			elseif mangled == "head" and not snd.checkAff("throatrip") then
	  			string = "jawlock neck of "..snd.target
	 			elseif mangled == "torso" or string.find(mangled, "arm") and not snd.checkAff("spleenrip") then
	  			string = "jawlock armpit of "..snd.target
				end --end of attempts to get a lock in
	 
			elseif broken ~= "nothing" and not snd.jawlocked then
	 			string = "destroy "..broken.." of "..snd.target
			elseif damaged ~= "nothing" and not snd.jawlocked then
        string = "mangle "..damaged.." of "..snd.target
      else
	 			left = "nothing"
	 			right = "nothing"
	 			for limb in pairs(limbs) do
	  			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 				if right == "nothing" then
		  				right = feralityConvert(limbs[limb])
		 				elseif left == "nothing" then
		  				left = feralityConvert(limbs[limb])
		 				end
					end
	 			end
	 			if left == "nothing" then -- we only found one limb to hit
	  			left = right -- double up!
	 			end
	 			string = "combo "..snd.target.." "..left.." "..right
			end -- end of primary attacking function setup
				
  		if string ~= snd.last_attack and not snd.waiting.queue then
   			snd.last_attack = string
   			snd.send("qeb "..snd.last_attack)
   			snd.waiting.queue = true
   			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  	end--end the actual attack rolling
 	end --end the main code
end --end the function
--and sending it to the mud
snd.attack_function()   
end -- end the class </script>
									<command></command>
									<packageName></packageName>
									<regex>^quart$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>raw damage</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 	if not snd.waiting.queue then
  	if snd.used.shield then
   		string = "pounce "..snd.target
		elseif theyran then
			string = "neckdrag "..snd.target..snd.neckdragdir
		elseif snd.defenses.def_fury.state == "deffed" then
	 		string = "pounce "..snd.target..snd.sep.."combo "..snd.target.." jugular jugular"
		elseif not snd.no_parry() then
	 		string = "combo "..snd.target.." bodypunch jugular"
		else
	 		string = "combo "..snd.target.." jugular jugular"
		end
  	if string ~= snd.last_attack and not snd.waiting.queue then
   		snd.last_attack = string
   		snd.attack(snd.last_attack)
   		snd.waiting.queue = true
   		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  	end
 	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Spirit</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Ascendril</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offense</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Manually reset glimpse</name>
									<script>if matches[2] == "none" then
  snd.glimpse = "none"
  snd.glimpsing = false
else
  snd.glimpse = matches[2]
  snd.glimpsing = true
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^glimpse (\w+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>order loyals aggro</name>
									<script>send("order efreeti kill "..snd.target)</script>
									<command></command>
									<packageName></packageName>
									<regex>^olk$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>order loyals stop aggro</name>
									<script>send("order loyals passive")</script>
									<command></command>
									<packageName></packageName>
									<regex>^olp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>frozen</name>
									<script>if snd.class == "Ascendril" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      -- next, the afflictions we want to give
      local touse = {}
      local tohit = {}
      local stalled = false
      if snd.defenses.def_stalled.state == "deffed" then
        stalled = true
      end
      -- and in case we don't find enough of them
      local total_aff_count = 0
      for aff in pairs(snd.all_affs) do
        if table.contains(snd.target_has, snd.all_affs[aff]) then
          total_aff_count = total_aff_count + 1
        end
      end
      local extraaff = ""
      snd.giving = {"anorexia"}
      for i in pairs(snd.giving) do
        -- make sure not to double up paresis and paralysis
        if not snd.checkAff(snd.giving[i]) then
          -- and don't add an aff we've already got in the list!
          if not table.contains(touse, snd.giving[i]) then
            table.insert(touse, snd.giving[i])
          end
        end
      end
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end
      -- if we didn't find enough stuff to hit with, stick in our filler
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("frostbrand") then
        string = "fulcrum glimpse water"
      elseif snd.glimpse == "none" and snd.checkAff("frostbrand") then
        string = "fulcrum catalyst " .. snd.target .. " frost"
      elseif snd.used.shield == true or 
			((snd.checksomeAffs({"left_leg_broken", "right_leg_broken"},1) or snd.limb_status["left leg"] ~= "healed" or snd.limb_status["right leg"] ~= "healed") and not snd.proned()) then
				string = "cast windlance " .. snd.target
      elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "fulcrum flare " .. snd.target
        end
        if gmcp.Char.Vitals.resonance == "water" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "fulcrum stall 3 mistral " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast mistral " .. snd.target
						end
          end
        elseif gmcp.Char.Vitals.resonance == "fire" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "fulcrum stall 3 coldsnap " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "cast gorge " .. snd.target .. " euphoriant"
						else
							string = string .. snd.sep .. "cast hailstorm " .. snd.target
            end
          end
        elseif gmcp.Char.Vitals.resonance == "air" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 hailstorm " .. snd.target
            end
          elseif stalled then
           if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "cast gorge " .. snd.target .. " euphoriant"
						elseif not snd.checkAff("masochism") then
							string = string .. snd.sep .. "cast coldsnap " ..snd.target
						else
							string = string .. snd.sep .. "cast hailstorm " ..snd.target
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^freeze$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
			
	if snd.glimpse == "none" and snd.checkAff("stormtouched") and not snd.glimpsing then
		string = "fulcrum glimpse air"
	elseif snd.glimpse == "none" and not snd.checkAff("stormtouched") then
		string = "fulcrum glimpse fire"
	end

	if snd.checkAff("stormtouched") and not snd.used.shield then
		string = string..snd.sep.."cast lightning "..snd.target
  elseif snd.used.shield == true or 
			((snd.checksomeAffs({"left_leg_broken", "right_leg_broken"},1) or snd.limb_status["left leg"] ~= "healed" or snd.limb_status["right leg"] ~= "healed") and not snd.proned()) then
				string = "cast windlance " .. snd.target
	else
  	if snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
  	
  		if gmcp.Char.Vitals.ability_bal == "1" then
  			string = "fulcrum flare "..snd.target
  		end
  		
  		if gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "water" then
  			string = string..snd.sep.."fulcrum enrich fire"
  		end
  
  		if gmcp.Char.Vitals.resonance == "fire" then
  			string = string..snd.sep.."cast windlance "..snd.target
  		end
  
  		if gmcp.Char.Vitals.resonance == "air" then
  			string = string..snd.sep.."cast fireball "..snd.target
  		end
	end
end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^damage$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>solo shatter</name>
									<script>if snd.class == "Ascendril" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      local limbs = {"left leg", "right leg", "left arm", "right arm"}
      local targ = "nothing"
      local stalled = false
      if snd.defenses.def_stalled.state == "deffed" then
        stalled = true
      end
      for limb in pairs(limbs) do
        -- ignore last parried, last hit, and any limbs being resto'd
        if
          limbs[limb] ~= snd.parried_limb and
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == "nothing" then
            targ = limbs[limb]
          end
        end
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("frostbrand") then
        string = "fulcrum glimpse water"
      elseif snd.glimpse == "none" and snd.checkAff("frostbrand") then
        string = "fulcrum catalyst " .. snd.target .. " frost"
      elseif snd.used.shield == true then
        string = "cast windlance " .. snd.target
      elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "fulcrum flare " .. snd.target
        end
        if gmcp.Char.Vitals.resonance == "water" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.resonance == "fire" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.resonance == "air" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            --not snd.direfrost and not snd.checkAff("frostbrand") then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^solo$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>affs</name>
									<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local total_aff_count = 0
    for aff in pairs(snd.all_affs) do
        if table.contains(snd.target_has, snd.all_affs[aff]) then
            total_aff_count = total_aff_count + 1
        end
    end
		local extraaff = ""
		
			snd.giving = {
			"clumsiness",
			"paresis",
			"haemophilia",
			"asthma",
			"slickness",
			"anorexia",
			"stupidity",
			}
			
	for i in pairs(snd.giving) do
		-- make sure not to double up paresis and paralysis
		if not snd.checkAff(snd.giving[i]) then
			-- and don't add an aff we've already got in the list!
			if not table.contains(touse, snd.giving[i]) then
				table.insert(touse, snd.giving[i])
			end
		end
	end
	-- now let's convert affs to venoms/empowerments
	for aff in pairs(touse) do
		table.insert(tohit, snd.effects[touse[aff]])
	end
	-- if we didn't find enough stuff to hit with, stick in our filler
	while #tohit &lt; 3 do
		table.insert(tohit, extraaff)
	end
			
	if snd.glimpse == "none" and not snd.checkAff("thunderbrand") and not snd.glimpsing then
		string = "fulcrum glimpse air"
	elseif snd.glimpse == "none" and snd.checkAff("thunderbrand") then
		string = "fulcrum catalyst "..snd.target.." air"
	end

	if snd.checkAff("stormtouched") then
		string = string..snd.sep.."cast lightning "..snd.target
	elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
	
		if snd.checkAff("vertigo") then
			string = "fulcrum flare"
		end
		
		if gmcp.Char.Vitals.resonance == "" or gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "fire" then
			string = "fulcrum enrich air"
		end

		if gmcp.Char.Vitals.resonance == "water" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				string = string..snd.sep.."fulcrum stall 3 pressurize "..snd.target
			elseif snd.defenses.def_stalled.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."cast windlance "..snd.target
				else
					if snd.checksomeAffs({"dizziness", "stupidity"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast lightning "..snd.target
					end
				end
			end

		elseif gmcp.Char.Vitals.resonance == "air" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				if snd.checksomeAffs({"dizziness", "stupidity"},2) and not snd.proned then
					string = string..snd.sep.."fulcrum stall 3 frostblade "..snd.target.." "..tohit[2]
				else
					string = string..snd.sep.."fulcrum stall 3 thunder "..snd.target
				end
			elseif snd.defenses.def_stalled.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."cast windlance "..snd.target
				elseif snd.proned then
					if snd.checksomeAffs({"lethargy", "confusion"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast hailstorm "..snd.target
					end
				elseif not snd.proned then
					if snd.checksomeAffs({"masochism", "stupidity"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast coldsnap "..snd.target
					end
				end
			end
		end

end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^affs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>ablaze</name>
									<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local limbs = {"head", "left leg", "torso", "right leg", "left arm", "right arm"}
		local targ = "nothing"
		
		for limb in pairs(limbs) do
			-- ignore last parried, last hit, and any limbs being resto'd
			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and limbs[limb] ~= snd.resto_limb then
				if targ == "nothing" then
					targ = limbs[limb]
				end
			end
		end
			
	if snd.used.shield then
		string = string..snd.sep.."cast windlance "..snd.target
	end
			
	if snd.glimpse == "none" and not snd.glimpsing then
		string = "fulcrum glimpse fire"
	end

	if snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
	
		if gmcp.Char.Vitals.ability_bal == "1" then
			string = "fulcrum flare "..snd.target
		end
		
		if gmcp.Char.Vitals.resonance ~= "fire" then
			string = string..snd.sep.."fulcrum enrich fire"
		end
		
		if gmcp.Char.Vitals.resonance == "fire" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				string = string..snd.sep.."fulcrum stall 3 firelash "..snd.target.." "..targ
			else
				string = string..snd.sep.."cast firelash "..snd.target.." "..targ
			end
		end

	end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
	
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fire$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Luminary</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Luminary" then
  snd.send("quickwield both tower mace")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Luminary" then
snd.send("quickwield both buckler mace")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Spirituality</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>beckon</name>
									<script>if snd.class == "Luminary" then
if matches[2] == "" then
 snd.send("qeb angel beckon "..snd.target)
elseif matches[2] == "all" then
 snd.send("qeb angel beckon")
else
 snd.send("qeb angel beckon "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bk(.*)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Devotion</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>force stop</name>
									<script>if snd.class == "Luminary" then
 snd.toggles.attacking = false
 if matches[2] == "" then
  snd.send("qeb perform force "..snd.target.." stop")
 else
  snd.send("qeb perform force "..matches[2].." stop")
 end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fs(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>resurrection</name>
									<script>if snd.class == "Luminary" then
snd.toggles.attacking = false
snd.send("qeb perform resurrection "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Luminary" then
snd.giving_shield = {
"sight",
"paresis",
"weariness",
"asthma",
}
snd.giving_battle = {
"impatience",
"sensitivity",
"stupidity",
"vertigo",
"self_pity",
"migraine",
}
snd.giving_chasten = {
"loneliness",
"hypochondria",
"stupidity",
"lethargy",
"dementia",
"recklessness",
"masochism",
"paranoia"
}
snd.starting_attack()
function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
 local shield = "none"
 local battle = "none"
 local chasten = "none"
 if snd.mana_percent &lt; 40 and not snd.used.shield then
  string = "angel absolve "..snd.target
 elseif snd.proned() then
  string = "shield overwhelm "..snd.target
 elseif table.contains(snd.target_has, "sight") then
  string = "evoke transfixion "..snd.target
 else
  if snd.balance.battle then
   for i in pairs(snd.giving_battle) do
	  if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
	   battle = snd.giving_battle[i]
	  end
	 end
  end
  if snd.used.shield then
   shield = "shield raze"
  else
   for i in pairs(snd.giving_shield) do
    if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
	   shield = snd.spirituality_attacks[snd.giving_shield[i]]
	  end
   end
  end
  if shield == "none" then
   shield = "shield strike"
  end
  if snd.used.rebounding and shield ~= "facesmash" then
   shield = "shield raze"
  end
  for i in pairs(snd.giving_chasten) do
   if not snd.checkAff(snd.giving_chasten[i]) and chasten == "none" and snd.giving_chasten[i] ~= battle then
	  chasten = snd.giving_chasten[i]
	 end
  end
  if battle ~= "none" then
   if snd.toggles.affcalling and not snd.target_gone then
	  string = "wt Battle "..snd.target..": "..battle..snd.sep
	 end
   string = string.."angel battle "..battle.." "..snd.target..snd.sep
  end
  string = string..shield.." "..snd.target..snd.sep
  if shield ~= "slam" and shield ~= "overwhelm" then
   if chasten == "none" then
    string = string.."chasten "..snd.target
   else
	  if snd.toggles.affcalling and not snd.target_gone then
	   string = string.."wt Chasten "..snd.target..": "..chasten..snd.sep
	  end
    string = string.."chasten "..snd.target.." "..chasten
	 end
  end
 end
 
 if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then 
 	string = string..snd.sep.."quickwield left tower"
 end

 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Affs - Used to lock someone in place</name>
									<script>-- The purpose of this is to lock someone down with disrupt so they cannot use lock-breakers to escape.
if snd.class == "Luminary" then
  snd.giving_shield = {"sight", "paresis", "weariness", "confusion", "writhe_transfix", "asthma", "berserking"}
  snd.giving_battle = {"impatience", "stupidity", "sensitivity", "self_pity", "vertigo"}
  snd.giving_chasten = {"hypochondria", "stupidity", "recklessness", "lethargy", "masochism", "dementia", "paranoia", "anorexia",}
  snd.starting_attack()

  function snd.attack_function()
    local total_aff_count = snd.aff_count_all()
    local mental_aff_count = snd.aff_count_mental()
  
    local string = "contemplate " .. snd.target .. snd.sep
    if not string.find(gmcp.Char.Vitals.wield_right, "mace") then
      string = string .. "quickwield right mace" .. snd.sep
    end
    if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then
      string = string .. "quickwield left buckler" .. snd.sep
    end
    local shield = "none"
    local battle = "none"
    local chasten = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
    else
      --battle aff pick
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end
      --If they have shield we can do nothing
      if snd.used.shield then
        shield = "shield raze"
        --If they are prone/psuedo prone and have 5 affs, smack them
      elseif total_aff_count &gt;= 5 and snd.proned() then
        shield = "shield overwhelm " .. snd.target
        --We need to build up disrupt/affs.
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.spirituality_attacks[snd.giving_shield[i]]
          end
        end
        --If they have 2 mental affs and confusion is one of them, disrupt ASAP to lock them in place.
        if
          mental_aff_count &gt;= 2 and
          snd.checkAff("confusion") and
          not snd.checkAff("disrupted") and
          total_aff_count &lt; 7
        then
          shield = "shield crash"
        end
      end
      --Dazzle can hit through rebounding, check if they have confusion first and a few affs
      if snd.used.rebounding then
        if snd.checkAff("confusion") or total_aff_count &lt; 3 then
          shield = "shield raze"
        else
          shield = "perform dazzle"
        end
      end
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      --Start building our attack - battle first
      if battle ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep
        end
        string = string .. "angel battle " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/evoke/perform attacks
      string = string .. shield .. " " .. snd.target .. snd.sep
      --Add chasten choice
      if not shield:find("slam") or shield:find("transfix") or shield:find("dazzle") or shield:find("crash") then
        if chasten == "none" then
          string = string .. "chasten " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .. "chasten " .. snd.target .. " " .. chasten
        end
      end
    end
    --Are we gonna smack them with overwhelm? Let's make it hurt.
    if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then
      string = string..snd.sep.."quickwield left tower"
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mana drain</name>
									<script>if snd.class == "Luminary" then
  snd.giving_battle = {"stupidity", "vertigo", "self_pity", "migraine", "sensitivity", "impatience"}
  snd.giving_chasten =
    {
      "lethargy",
      "loneliness",
      "stupidity",
      "hypochondria",
      "dementia",
      "recklessness",
      "masochism",
      "paranoia",
    }
  snd.starting_attack()

  function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local battle = "none"
    local chasten = "none"
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
    elseif snd.mana_percent &lt; 40 and snd.used.shield then
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      string = "shield raze " .. snd.target .. snd.sep
      if snd.toggles.affcalling and not snd.target_gone then
        string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
      end
      string = string .. "chasten " .. snd.target .. " " .. chasten
    else
      string = string.."angel sap " .. snd.target
    end
		
    if snd.balance.battle then
      for i in pairs(snd.giving_battle) do
        if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
          battle = snd.giving_battle[i]
        end
      end
    end
    string = "angel battle " .. battle .. " " .. snd.target .. snd.sep .. string
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep .. string
    end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mana$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Damage - Best used with an impale</name>
									<script>--This is for quick kills with sensitivity/transfix/impale/overwhelm/disembowel.
--May have tougher time on hardier opponents.
--May vary in usefulness depending on damage output.
if snd.class == "Luminary" then
  snd.giving_shield = {"paresis", "weariness", "sight", "asthma"}
  snd.giving_battle = {"impatience", "sensitivity", "self_pity", "stupidity", "vertigo"}
  snd.giving_chasten =
    {
      "hypochondria",
      "loneliness",
      "recklessness",
      "stupidity",
      "lethargy",
      "masochism",
      "dementia",
      "paranoia",
      "anorexia",
    }
  snd.starting_attack()

  function snd.attack_function()
    local total_aff_count = snd.aff_count_all()
    local mental_aff_count = snd.aff_count_mental()
  
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local shield = "none"
    local battle = "none"
    local chasten = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
      --They've hit our aff count limit, let's lock them down/kill them.
    elseif total_aff_count &gt;= 4 and snd.checkAff("sight") and not snd.used.shield then
      if not snd.checkAff("writhe_transfix") then
        string = "evoke transfixion " .. snd.target
      else
        string = "shield overwhelm " .. snd.target
        if snd.checkAff("hearing") and not snd.checkAff("sensitivity") then
          string = "angel battle " .. snd.target .. " sensitivity" .. snd.sep .. string
        end
      end
      --Need to pile a few affs on still. Aiming for at least 4 before overwhelm so by the time
      --we get to overwhelm, they're in the overwhelm aff/damage scaling range.	
    else
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end
      if snd.used.shield then
        shield = "shield raze"
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.spirituality_attacks[snd.giving_shield[i]]
          end
        end
      end
      if shield == "none" then
        shield = "shield strike"
      end
      if snd.used.rebounding and shield ~= "facesmash" then
        shield = "shield raze"
      end
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      --Start building our attack - battle first
      if battle ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep
        end
        string = string .. "angel battle " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/evoke/perform attacks
      string = string .. shield .. " " .. snd.target .. snd.sep
      --Add chasten choice
      if shield ~= "slam" then
        if chasten == "none" then
          string = string .. "chasten " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .. "chasten " .. snd.target .. " " .. chasten
        end
      end
    end
    --Are we gonna smack them with overwhelm? Let's make it hurt.
    if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then
      string = string..snd.sep.."quickwield left tower"
    end
    --We have an instakill at 40% mana, let's make sure we keep track of mana.

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^git$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Smite - Straight damage</name>
									<script>if snd.class == "Luminary" then
  snd.giving_battle = {"sensitivity", "stupidity", "vertigo", "self_pity", "migraine", "impatience"}
  snd.giving_chasten =
    {
      "dementia",
      "loneliness",
      "stupidity",
      "hypochondria",
      "recklessness",
      "masochism",
      "paranoia",
      "lethargy",
    }
  snd.starting_attack()

  function snd.attack_function()
  local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
  
  local battle = "none"
  local chasten = "none"
    
  if snd.balance.battle then
    for i in pairs(snd.giving_battle) do
      if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
        battle = snd.giving_battle[i]
      end
    end
  end
  
  for i in pairs(snd.giving_chasten) do
    if
      not snd.checkAff(snd.giving_chasten[i]) and chasten == "none" and
      snd.giving_chasten[i] ~= battle
    then
      chasten = snd.giving_chasten[i]
    end
  end  
  
  for aff in pairs(snd.entangleaffs) do
    if snd.checkAff(aff) then
      overwhelm = true
    end
  end
  
  if snd.balance.battle then
    string = string..snd.sep.."angel battle "..battle.." "..snd.target..snd.sep
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep .. string
    end
  end


  if snd.mana_percent &lt; 40 and not snd.used.shield then
    string = "angel absolve " .. snd.target
  elseif snd.mana_percent &lt; 40 and snd.used.shield then
    string = "shield raze " .. snd.target .. snd.sep
  elseif overwhelm then
    string = "overwhelm "..snd.target..snd.sep
  else
    string = string.."smite " .. snd.target ..snd.sep
  end
  
  if snd.toggles.affcalling and not snd.target_gone then
    string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
  end
  string = string .. " chasten " .. snd.target .. " " .. chasten
		
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Sentinel</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Sentinel" then
snd.giving = {
"sight",
"paresis",
"clumsiness",
"asthma",
"sensitivity",
"vomiting",
"allergies",
"haemophilia",
"slickness",
--"anorexia",
--"stupidity",
--"recklessness",
--"weariness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  call = ""
  left = "none"
  right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
	 if snd.giving[i] ~= "paresis" or not table.contains(snd.target_has, "paralysis") then
     if right == "none" then
      right = snd.effects[snd.giving[i]]
     elseif left == "none" then
      left = snd.effects[snd.giving[i]]
		end
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
  if snd.used.rebounding and snd.used.shield then
   string = "dhuriv dualraze "..snd.target
  elseif snd.used.shield or snd.used.rebounding then
	 string = "dhuriv combo "..snd.target.." reave stab "..right
	if snd.toggles.affcalling and not snd.target_gone then
	 call = "wt Afflicting "..snd.target..": "..right..snd.sep
	end
  else
   string = "dhuriv combo "..snd.target.." slash stab "..left.." "..right
	if snd.toggles.affcalling and not snd.target_gone then
	 call = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	end
  end
	string = call..string
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Venom Lock</name>
									<script>if snd.class == "Sentinel" then
snd.current_offense = "SentVLock"

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then
    snd.giving = {
		  "clumsiness",
			"asthma",
			"slickness",
			"confusion",
      "slickness",
      "anorexia",
			"left_leg_broken",
			"right_leg_broken",
      "heartflutter",
			"vomiting",
			"dizziness",
			"sight",
			"hearing",
			"sensitivity",}

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "dhuriv combo "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_broken", "right_leg_broken", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = "wipe dhurive"..snd.sep..call..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	--snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Transfix + Sensitivity</name>
									<script>if snd.class == "Sentinel" then
snd.current_offense = "SentLumiSupport"
if snd.target_locked() then
			snd.giving = {
			"left_leg_broken",
			"right_leg_broken",
      "confusion",
      "impairment",
			"weariness",
			"dizziness",
			"hearing",
			"sensitivity",}
		else
      snd.giving = {
      "clumsiness",
      "hearing",
      "sight",
      "asthma",
      "slickness",
      "anorexia",
			"left_leg_broken",
			"right_leg_broken",
      "confusion",
      "weariness",
      "vomiting",
      "shyness",
      "dizziness",
      }
		end

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_broken", "right_leg_broken", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end

		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..snd.sep.."order loyals attack "..snd.target..snd.sep..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lumi$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Mentals</name>
									<script>if snd.class == "Sentinel" then
snd.current_offense = "SentMental"
local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

snd.giving = {

"impatience",
"stupidity",
"agoraphobia",
"claustrophobia",
"weariness",
"clumsiness",
"asthma",
"slickness",
"confusion",
"left_leg_broken",
"right_leg_broken",
"anorexia",
"heartflutter",
"sight",
"hearing",
"sensitivity",
}

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_broken", "right_leg_broken", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
			
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ment$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Salves</name>
									<script>if snd.class == "Sentinel" then -- Requires Raloth and Icewyrm
snd.current_offense = "SentSalve"

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

    if snd.checkAff("destroyed_throat") then
    snd.giving = {
    "slickness",
    "asthma",
    "left_leg_broken",
    "right_leg_broken",
    "paresis",
    "confusion",
    "vomiting",
    "dizziness",
    "sight",
    "hearing",
    "sensitivity",
    }
    else
    snd.giving = {
    
    "frozen",
    "left_leg_broken",
    "right_leg_broken",
    "left_arm_broken",
    "right_arm_broken",
    "anorexia",
    "stupidity",
    "asthma",
    "slickness",
    "paresis",
    "confusion",
    "vomiting",
    "dizziness",
    "sight",
    "hearing",
    "sensitivity",
    }
    end	

	string = ""
	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target

		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("left_leg_broken") 
			and snd.limb_status["left leg"] == "healed" and (snd.parried_limb ~= "left leg" or snd.no_parry()) and snd.limb_status["right leg"] == "healed" then
				string = "dhuriv pierce "..snd.target.." left"
		
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("right_leg_broken") 
			and snd.limb_status["right leg"] == "healed" and (snd.parried_limb ~= "right leg" or snd.no_parry()) and snd.limb_status["left leg"] == "healed" then
				string = "dhuriv pierce "..snd.target.." right"

		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		elseif snd.proned() and not snd.checksomeAffs({"left_leg_broken", "left_arm_broken", "right_arm_broken", "right_leg_broken"}, 2) then
			string = "qdmount"..snd.sep.."qmount "..snd.my_raloth..snd.sep.."order "..snd.my_raloth.." trample "..snd.target

		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end
		
		if snd.checksomeAffs({"confusion", "left_leg_broken", "right_leg_broken", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") or string:find("pierce") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^salve$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Impale/Frozen</name>
									<script>if snd.class == "Sentinel" then -- Requires Raloth and Icewyrm
snd.current_offense = "SentImpale"
snd.giving = {

"frozen",
"left_leg_broken",
"right_leg_broken",
"left_arm_broken",
"right_arm_broken",
"asthma",
"slickness",
"paresis",
"confusion",
"vomiting",
"dizziness",
"sight",
"hearing",
"sensitivity",
}

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

	string = ""
	call = ""
	left = "none"
	right = "none"

	left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.target_impaled then
			string = "dhuriv gorge "..snd.target
			
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("left_leg_broken") and snd.limb_status["left leg"] == "healed" and (snd.parried_limb ~= "left leg" or snd.no_parry()) then
			string = "dhuriv pierce "..snd.target.." left"
		
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("right_leg_broken") and snd.limb_status["right leg"] == "healed" and (snd.parried_limb ~= "right leg" or snd.no_parry()) then
			string = "dhuriv pierce "..snd.target.." right"

  	elseif snd.proned() then         
      if not snd.checkAff("writhe_impaled") then
      	string = "dhuriv impale "..snd.target
       else
        string = "qdmount"..snd.sep.."qmount "..snd.my_raloth..snd.sep.."order "..snd.my_raloth.." trample "..snd.target
      end	
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
						
		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_broken", "right_leg_broken", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") or string:find("pierce") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gimp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Bleeding</name>
									<script>if snd.class == "Sentinel" then
snd.current_offense = "bleed"

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then
		if snd.target_locked() then
			snd.giving = {
			"impairment",
			"confusion",
			"left_leg_broken",
			"right_leg_broken",
			"weariness",
			"dizziness",
      }
		else
			snd.giving = {
			"paresis",
		  "clumsiness",
			"haemophilia",
			"hearing",
			"sensitivity",
      "asthma",
      "weariness",
      "slickness",

      }
		end

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
    local second_attack = "slice"

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		else
			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "dhuriv combo "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_broken", "right_leg_broken", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..snd.sep.."order loyals attack "..snd.target..snd.sep..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bleed$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group spinecut</name>
									<script>if snd.class == "Sentinel" then
snd.current_offense = "SentGroup"
 
local second_attack = ""
 
snd.starting_attack()
function snd.attack_function()
 
        if not snd.waiting.queue then
        if snd.checksomeAffs({"asthma", "clumsiness", "hypochondria", "weariness", "impatience", "slickness"}, 2) then
            snd.giving = {
            "asthma",
            "slickness",
            "confusion",
            "left_leg_broken",
            "right_leg_broken",
            "heartflutter",
            "weariness",
            "dizziness",
            "hearing",
            "sensitivity",}
        else
            snd.giving = {
            "paresis",
            "clumsiness",
            "asthma",
            "slickness",
            "anorexia",
            "confusion",
            "heartflutter",
            "left_leg_broken",
            "right_leg_broken",
            "stupidity",
            "vomiting",
            "dizziness",
            "sight",
            "hearing",
            "sensitivity",}
        end
 
    call = ""
    left = "none"
    right = "none"
 
     left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.
 
        if left  == "none" then left  = "epseth" end
        if right == "none" then right = "epseth" end
   
        if snd.no_parry() then
            second_attack = "thrust"
        else
            second_attack = "stab"
        end
 
        if snd.used.rebounding and snd.used.shield then
            string = "dhuriv dualraze "..snd.target
           
        elseif left == "destroyed_throat" then
            string = "dhuriv throatcrush "..snd.target
           
        elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
            left = snd.daunt_animals[left]
            string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
           
        else
            if table.contains(snd.dhuriv_affs, left) then
                if not table.contains(snd.effects, right) then
                    string = snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
                else
                    string = snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
                end
            elseif table.contains(snd.dhuriv_affs, right) then
                string = "slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
            else
                string = "slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
            end
           
            string = "dhuriv combo "..snd.target.." "..string
        end
       
        if snd.toggles.affcalling and not snd.target_gone then
            if table.contains(snd.effects, left) then
                call = "wt Afflicting "..snd.target..": "..snd.effects[left]
                if table.contains(snd.effects, right) then
                    call = call..", "..snd.effects[right]
                end
                call = call..snd.sep
            elseif table.contains(snd.effects, right) then
                call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
            end
        end
 
        if snd.checksomeAffs({"confusion", "left_leg_broken", "right_leg_broken", "fallen", "heartflutter"}, 5) then
            string = "dhuriv spinecut "..snd.target
        end
       
        if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
            call = ""
        end
 
        string = call..string
   
        if string ~= snd.last_attack and not snd.waiting.queue then
            snd.last_attack = string
            snd.attack(snd.last_attack)
            snd.waiting.queue = true
            tempTimer(snd.delay(), [[snd.waiting.queue = false]])
        end
    end
end
 
    snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gsc$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Shaman</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Shaman" then
snd.giving = {
"sight",
"sensitivity",
"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()

function snd.attack_function()
 if not snd.waiting.queue then
  local venom = "none"
  string =""
  
    for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) and venom == "none" then
        venom = snd.effects[snd.giving[i]]
      end
    end
    if venom == "none" then
      venom = "epseth"
    end   
  
    if snd.shamanpet ~= "wyvern" and snd.balance.morph then
      string = "familiar morph wyvern"..snd.sep.."order familiar follow me"..snd.sep
    end
    
    if not snd.fetishattuned then
      string = string..snd.sep.."fetish attune "..snd.target..snd.sep 
    end
    
    if not snd.loyalsattacking then
      string = string..snd.sep.."order loyals kill "..snd.target..snd.sep 
    end
    
  if snd.used.shield then
   string = string.."commune leafstorm "..snd.target
  elseif tonumber(gmcp.Char.Vitals.energy) then
   string = string.."commune boost"..snd.sep.."commune vinelash "..snd.target.." "..venom
  else
   string = string.."commune vinelash "..snd.target.." "..venom
  end
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Stormtouched</name>
									<script>if snd.class == "Shaman" then
snd.giving = {

"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()

  call = ""
  string = ""
	
 if not snd.waiting.queue then
    local venom = "none"
  
    for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) and venom == "none" then
        venom = snd.effects[snd.giving[i]]
      end
    end
    if venom == "none" then
      venom = "epseth"
    end 
  
    if snd.shamanpet ~= "wyvern" and snd.balance.morph then
      string = "familiar morph wyvern"..snd.sep.."order familiar follow me"..snd.sep
    end
    
    if not snd.fetishattuned then
      string = string..snd.sep.."fetish attune "..snd.target..snd.sep 
    end
    
    if not snd.loyalsattacking then
      string = string..snd.sep.."order loyals kill "..snd.target..snd.sep 
    end
    
  if snd.used.shield then
    string = string.."commune leafstorm "..snd.target
  elseif snd.checkAff("stormtouched") then
    if tonumber(gmcp.Char.Vitals.energy) &gt;= 4 then
      string = string.."commune boost"..snd.sep.."commune lightning "..snd.target
    else
      string = string.."commune lightning "..snd.target
    end
  else
    if tonumber(gmcp.Char.Vitals.energy) &gt;= 4 then
      string = string.."commune boost "..snd.sep.."commune vinelash "..snd.target.." "..venom 
      call = "wt Vinelash "..snd.target..": "..venom..snd.sep 
    else
      string = string.."commune vinelash "..snd.target.." "..venom
      call = "wt Vinelash "..snd.target..": "..venom..snd.sep
    end
		
	end
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Blender</name>
									<script>if snd.class == "Shaman" then
snd.starting_attack()
function snd.attack_function()

  call = ""
  string =""

  if not snd.waiting.queue then
  
    if snd.shamanpet ~= "wyvern" and snd.balance.morph then
      string = "familiar morph wyvern"..snd.sep.."order familiar follow me"..snd.sep
    end
    
    if not snd.fetishattuned then
      string = string..snd.sep.."fetish attune "..snd.target..snd.sep 
    end
    
    if not snd.loyalsattacking then
      string = string..snd.sep.."order loyals kill "..snd.target..snd.sep 
    end
  
    if snd.used.shield then
      string = string.."commune leafstorm "..snd.target
    elseif tonumber(gmcp.Char.Vitals.energy) &gt;= 4 then
      string = string.."commune boost"..snd.sep.."COMMUNE CHAINLIGHTNING "..snd.target
    elseif tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
      string = string.."COMMUNE CHAINLIGHTNING "..snd.target
    else
      string = string.."commune vinelash "..snd.target.." epteth"
    end
  
  end
  string = call..string

  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^blend$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Naturalism Utility</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Surge</name>
									<script>if snd.class == "Shaman" then
	if matches[2] == "" then
		snd.attack("nature surge "..snd.target)
	else
 		snd.attack("nature surge "..matches[2])
	end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ns (.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Pull</name>
									<script>if snd.class == "Shaman" then
if matches[2] == "" then
 snd.attack("nature pull "..snd.target)
else
 snd.attack("nature pull "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^np(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Displacement</name>
									<script>if snd.class == "Shaman" then
if matches[2] == "" then
 snd.attack("nature displacement "..snd.target)
else
 snd.attack("nature displacement "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dp(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Canopy</name>
									<script>if snd.class == "Shaman" then
 snd.attack("nature canopy")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^can$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Screen</name>
									<script>if snd.class == "Shaman" then
 snd.attack("nature screen")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^scr$</regex>
								</Alias>
								<Alias isActive="no" isFolder="no">
									<name>Flow</name>
									<script>if snd.class == "Shaman" then
if matches[2] == "" then
 snd.attack("nature flow "..snd.target)
else
 snd.attack("nature flow "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fl(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Thorncoat</name>
									<script>if snd.class == "Shaman" then
if matches[2] == "" then
 snd.attack("nature thorncoat me")
else
 snd.attack("nature thorncoat "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^tco(.*)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Aff Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Aff support</name>
									<script>if snd.class == "Shaman" then
  snd.giving = {

  "clumsiness",
  "asthma",
  "slickness",
  "anorexia",
  "stupidity",
  "weariness",
  "allergies",
  "vomiting",
  "haemophilia",
  "sensitivity",
  "recklessness",
  "dizziness",
  }
  
  snd.giving_prem = {

  "fear",
  "agoraphobia",
  "claustrophobia",
  "vertigo",
  "loneliness",
  "shyness",
  "paranoia",
  "superstition",
  
  }
  

snd.starting_attack()
function snd.attack_function()

      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end

  call = ""
  string =""

  if not snd.waiting.queue then
    local venom = "none"
    local prem = "none"
  
    for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) and venom == "none" then
        venom = snd.effects[snd.giving[i]]
      end
    end
    if venom == "none" then
      venom = "epseth"
    end 
  
    for i in pairs(snd.giving_prem) do
      if not snd.checkAff(snd.giving_prem[i]) and prem == "none" then
        prem = snd.giving_prem[i]
      end
    end
  
    if snd.shamanpet ~= "serpent" and snd.balance.morph then
      string = "familiar morph serpent"..snd.sep.."order familiar follow me"..snd.sep
    else
      string = ""
    end
    
    if not snd.fetishattuned then
      string = string..snd.sep.."fetish attune "..snd.target..snd.sep 
    else
      string = ""
    end
    
    if not snd.loyalsattacking then
      string = string..snd.sep.."order loyals kill "..snd.target..snd.sep 
    else
      string = ""
    end
  
    if snd.used.shield then
      string = string.."commune leafstorm "..snd.target
    elseif theyran then
      string = string.."nature pull "..snd.target    
    elseif tonumber(gmcp.Char.Vitals.energy) &lt; 3 then
      string = string.."commune vinelash "..snd.target.." "..venom
    else
      if mentcount &gt; 3 then
        string = string.."shaman divulgence "..snd.target.." "..prem
        call = "wt Afflicting "..snd.target..": "..prem..snd.sep
      else
        if tonumber(gmcp.Char.Vitals.energy) &gt; 2 then
          if not (snd.checkAff("impatience") or snd.checkAff("confusion")) then
            string = string.."commune sporulation "..snd.target
          elseif not snd.checkAff("stupidity") then
            string = string.."commune overload "..snd.target
          else
            string = string.."commune staticburst "..snd.target
          end
        end
      end
    end
    
    cecho("\n&lt;yellow&gt;You have reached "..mentcount.." mental affs")
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Aff 2</name>
									<script>if snd.class == "Shaman" then
  snd.giving = {

  "clumsiness",
  "asthma",
  "slickness",
  "anorexia",
  "stupidity",
  "weariness",
  "allergies",
  "vomiting",
  "haemophilia",
  "sensitivity",
  "recklessness",
  "dizziness",
  }
  
  snd.giving_prem = {

  "fear",
  "agoraphobia",
  "claustrophobia",
  "vertigo",
  "loneliness",
  "shyness",
  "paranoia",
  "superstition",
  
  }
  

snd.starting_attack()
function snd.attack_function()

      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end

  call = ""
  string =""

  if not snd.waiting.queue then
    local venom = "none"
    local prem = "none"
  
    for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) and venom == "none" then
        venom = snd.effects[snd.giving[i]]
      end
    end
    if venom == "none" then
      venom = "epseth"
    end 
  
    for i in pairs(snd.giving_prem) do
      if not snd.checkAff(snd.giving_prem[i]) and prem == "none" then
        prem = snd.giving_prem[i]
      end
    end
  
    if snd.shamanpet ~= "serpent" and snd.balance.morph then
      string = "familiar morph serpent"..snd.sep.."order familiar follow me"..snd.sep
    else
      string = ""
    end
    
    if not snd.fetishattuned then
      string = string..snd.sep.."fetish attune "..snd.target..snd.sep 
    else
      string = ""
    end
    
    if not snd.loyalsattacking then
      string = string..snd.sep.."order loyals kill "..snd.target..snd.sep 
    else
      string = ""
    end
  
    if snd.used.shield then
      string = string.."commune leafstorm "..snd.target
    elseif theyran then
      string = string.."nature pull "..snd.target    
    elseif not snd.checkAff("premonition") then
      if not snd.their_premonition then
        string = string.."shaman premonition " ..snd.target
      end
    elseif tonumber(gmcp.Char.Vitals.energy) &lt; 3 then
      string = string.."commune vinelash "..snd.target.." "..venom
    elseif snd.checksomeAffs({"fear, agoraphobia, claustrophobia, vertigo, loneliness, shyness, paranoia, superstition"}, 5) and snd.my_premonition then
      string = string.."commune reclamation " ..snd.target
    else
      if mentcount &gt; 3 then
        string = string.."shaman divulgence "..snd.target.." "..prem
        call = "wt Afflicting "..snd.target..": "..prem..snd.sep
      else
        if tonumber(gmcp.Char.Vitals.energy) &gt; 2 then
          if not (snd.checkAff("impatience") or snd.checkAff("confusion")) then
            string = string.."commune sporulation "..snd.target
          elseif not snd.checkAff("stupidity") then
            string = string.."commune overload "..snd.target
          else
            string = string.."commune staticburst "..snd.target
          end
        end
      end
    end
    
    cecho("\n&lt;yellow&gt;You have reached "..mentcount.." mental affs")
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff2$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Iesid Route</name>
									<script>if snd.class == "Shaman" then
snd.giving = {

"clumsiness",
"asthma",
"slickness",
"anorexia",
"stupidity",
"weariness",
"allergies",
"vomiting",
"haemophilia",
"sensitivity",
"recklessness",
"dizziness",
--"voyria",
}

snd.starting_attack()
function snd.attack_function()

  call = ""
  string =""
  
  local boosting = false -- this is like templar vorpal
  if tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then boosting = true -- yesss
  end

  if not snd.waiting.queue then
    local venom = "none"
    for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) and venom == "none" then
        venom = snd.effects[snd.giving[i]]
      end
    end
    if venom == "none" then
      venom = "epseth"
    end
  
    if snd.shamanpet ~= "wyvern" and snd.balance.morph then
      string = "familiar morph wyvern"..snd.sep.."order familiar follow me"..snd.sep
    end
    
    if not snd.fetishattuned then
      string = string..snd.sep.."fetish attune "..snd.target..snd.sep 
    end
    
    if not snd.loyalsattacking then
      string = string..snd.sep.."order loyals kill "..snd.target..snd.sep 
    end
 
    if snd.used.shield then
      string = string.."commune leafstorm "..snd.target
    elseif snd.checksomeAffs({"blighted", "infested", "stormtouched", "spiritbane"}, 3) and snd.incomingomen == false then
      string = string.."shaman omen "..snd.target.." in 6"
    elseif snd.incomingomen then
      if not snd.checksomeAffs({"hearing", "sensitivity"}, 1) then
        string = string.."commune boost"..snd.sep.."commune effusion "..snd.target
      elseif not snd.checkAff("sensitivity") then
        string = string.."commune boost"..snd.sep.."commune vinelash "..snd.target.." prefarar"
      elseif snd.checkAff("stormtouched") then
        string = string.."commune boost"..snd.sep.."commune lightning "..snd.target
      else
        string = string.."commune boost"..snd.sep.."commune vinelash "..snd.target
      end

    elseif snd.checksomeAffs({"sadness", "confusion", "dementia", "hallucinations", "paranoia", "hatred", "addiction", "hypersomnia", "blood curse", "blighted", "self-pity", "stupidity", "dizziness", "faintness", "shyness", "epilepsy", "impatience", "dissonance", "infested"}, 2) then
      if not snd.checkAff("infested") then
        string = string.."commune infest "..snd.target
      elseif not snd.checkAff("blighted") then
        string = string.."commune spines "..snd.target
      elseif not snd.checkAff("premonition") then
        string = string.."shaman premonition "..snd.target
      elseif not snd.checkAff("vitalbane") and tonumber(gmcp.Char.Vitals.energy) &gt;= 2 then
        string = string.."commune scourge "..snd.target
      elseif not snd.checkAff("paresis") and not snd.checkAff("stupidity") and tonumber(gmcp.Char.Vitals.energy) &gt;= 4 then
        string = string.."commune boost"..snd.sep.."commune overload "..snd.target
      elseif not snd.checkAff("impatience") and not snd.checkAff("confusion") and tonumber(gmcp.Char.Vitals.energy) &gt;= 4 then
        string = string.."commune boost"..snd.sep.."commune sporulation "..snd.target
      elseif not snd.stormcloud and tonumber(gmcp.Char.Vitals.energy) &gt;= 4 then
        string = string.."commune boost"..snd.sep.."commune stormbolt "..snd.target
      else
        string = string.."commune boost"..snd.sep.."commune lightning "..snd.target
      end

    elseif tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
      if not snd.checkAff("infested") then
        string = string.."commune infest "..snd.target
      elseif not snd.checkAff("blighted") then
        string = string.."commune spines "..snd.target
      elseif not snd.checkAff("vitalbane") then
        string = string.."commune scourge "..snd.target
      else
        string = string.."commune vinelash "..snd.target
    end
  else
    string = string.."commune vinelash "..snd.target
  end
  

  string = call..string

  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^kll$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs</name>
									<script>if snd.class == "Shaman" then

snd.starting_attack()
function snd.attack_function()

  call = ""
  string =""
	
 if not snd.waiting.queue then
  if snd.shamanpet ~= "bear" and snd.balance.morph then
    string = "familiar morph bear"..snd.sep.."order familiar follow me"..snd.sep
  end 
    
    if not snd.fetishattuned then
      string = string..snd.sep.."fetish attune "..snd.target..snd.sep 
    end
    
    if not snd.loyalsattacking then
      string = string..snd.sep.."order loyals kill "..snd.target..snd.sep 
    end
  
  if snd.used.shield then
    string = string.."commune leafstorm "..snd.target
  elseif theyran then
    string = string.."nature pull "..snd.target
  elseif snd.proned() then
    string = string.."commune strangle "..snd.target
  elseif not snd.proned() and tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
    string = string.."commune boost"..snd.sep.."commune slam "..snd.target
  elseif not snd.checksomeAffs({"left_leg_broken", "right_leg_broken"},2) then
    string = string.."commune vinelash "..snd.target.." epseth"
    call = "wt Vinelash "..snd.target..": epseth"..snd.sep
  elseif not snd.checksomeAffs({"left_arm_broken", "right_arm_broken"},2) then
    string = string.."commune vinelash "..snd.target.." epteth"
    call = "wt Vinelash "..snd.target..": epteth"..snd.sep
  else
    string = string.."commune vinelash "..snd.target.." ouabain"
  call = "wt Vinelash "..snd.target..": ouabain"
  end
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Thorns</name>
									<script>if snd.class == "Shaman" then

snd.starting_attack()
function snd.attack_function()

  call = ""
  string =""
  
 if not snd.waiting.queue then
  if snd.shamanpet ~= "cougar" and snd.balance.morph then
    string = "familiar morph cougar"..snd.sep.."order familiar follow me"..snd.sep
  end  
    
  if not snd.fetishattuned then
    string = string..snd.sep.."fetish attune "..snd.target..snd.sep 
  end
    
    if not snd.loyalsattacking then
      string = string..snd.sep.."order loyals kill "..snd.target..snd.sep 
    end
  
  
  if snd.used.shield then
    string = string.."commune leafstorm "..snd.target
  elseif theyran then
    string = string.."nature pull "..snd.target
  elseif snd.proned() then
    string = string.."commune strangle "..snd.target
  elseif not snd.proned() and tonumber(gmcp.Char.Vitals.energy) &gt;= 3 and snd.thorncount == 3 then
    string = string.."commune boost"..snd.sep.."commune slam "..snd.target
  elseif tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
    if not snd.checkAff("haemophilia") then
      string = string.."commune boost"..snd.sep.."commune vinelash "..snd.target.." hepafarin"
    else
      string = string.."commune boost"..snd.sep.."commune vinelash "..snd.target.." prefarar"
    end
  else
    if not snd.checkAff("haemophilia") then
      string = string.."commune vinelash "..snd.target.." hepafarin"
    else
      string = string.."commune vinelash "..snd.target.." prefarar"
    end
  end
  
  string = call..string
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^thorn$</regex>
								</Alias>
							</AliasGroup>
							<Alias isActive="yes" isFolder="no">
								<name>Wield bashing</name>
								<script>if snd.class == "Shaman" then
  snd.send("quickwield staff")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wbsh$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Templar</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Templar" then
  snd.send("quickwield both longsword shield")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield zeal</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both warhammer")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wzl$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Templar" then
	snd.send("quickwield both shortsword shortsword.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield limbs</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both mace mace.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wlb$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield longswords</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both longsword longsword.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wls$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield damage</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both bastard")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wdmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Battlefury</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>strike</name>
									<script>if snd.class == "Templar" then
snd.attack("strikebash "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^stk$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>duality</name>
									<script>if snd.class == "Templar" then
snd.attack("dsk "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dsk$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>impale</name>
									<script>if snd.class == "Templar" then
if matches[2] == "" then
 snd.attack("impale "..snd.target)
else
 snd.attack("impale "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^imp (.+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>disembowel</name>
									<script>if snd.class == "Templar" then
if matches[2] == "" then
 snd.attack("disembowel "..snd.target)
else
 snd.attack("disembowel "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^db(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>cleave</name>
									<script>if snd.class == "Templar" then
if matches[2] == "" then
 snd.attack("cleave "..snd.target)
else
 snd.attack("cleave "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^clv(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>lunge</name>
									<script>if snd.class == "Templar" then
  if matches[2] == "" then
    snd.attack("lunge "..snd.target)
  else
    snd.attack("lunge "..matches[2])
  end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ln(.*)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Righteousness</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>deliver</name>
									<script>if snd.class == "Templar" then
snd.send("qeb get monolith"..snd.sep.."aura deliverance "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^del (.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>resurrection</name>
									<script>if snd.class == "Templar" then
snd.toggles.attacking = false
snd.send("qeb aura resurrection "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>pilgrimage</name>
									<script>if snd.class == "Templar" then
snd.toggles.attacking = false
snd.toggles.bashing = false
snd.toggles.fasthunt = false
if snd.have_aff("paresis") then
 snd.send("firstaid elevate paresis")
end
snd.send("undefend")
snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."aura pilgrimage")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^pilg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>latency</name>
									<script>if snd.class == "Templar" then
snd.toggles.attacking = false
snd.toggles.bashing = false
snd.toggles.fasthunt = false
if snd.have_aff("paresis") then
 snd.send("firstaid elevate paresis")
end
snd.send("undefend")
snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."aura pilgrimage aura")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ltn$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>straight retri</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
			"conviction",
			"crippled",
			"paresis",
			"mental disruption",
			"physical disruption",
			"crippled body",
			--deathblow!
			}
		-- first and foremost, check if we can retri!
		
		if snd.checksomeAffs({"paralysis", "crippled body", "mental disruption","physical disruption" },4) then
			string = "retribution "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dsk "..snd.target.." blaze "..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": blaze, "..tohit[1]..snd.sep
			elseif vorpal then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^raw$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>retribution stack</name>
									<script>--Meat and potatoes for 1v1, this is a classic vlock followed by
--retri finisher. Good for whales.
if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- let's determine how many affs we are away from locking
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- we're going to use a different affliction stack if the target is locked
		if snd.target_locked() then
			snd.giving = {
			"left_leg_broken",
			"right_leg_broken",
			"crippled",
			"mental disruption",
			"physical disruption",
			"crippled body",
			"sensitivity",
			"clumsiness",
			"weariness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"conviction",
			"asthma",
			"clumsiness",
			"paresis",
			"crippled",
			"slickness",
			"stupidity",
			"anorexia",
			"mental disruption",
			"physical disruption",
			"crippled body",
			--deathblow!
			"weariness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled body", "mental disruption","physical disruption" },4) then
			string = "retribution "..snd.target
		else -- if not...
			-- see if we can lock this round, in any of three possible ways
			if vorpal and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dsk "..snd.target.." blaze "..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": blaze, "..tohit[1]..snd.sep
			elseif vorpal and not snd.target_locked() and #missing &gt; 2 then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ret$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>magic</name>
									<script>--Meat and potatoes for 1v1, this is a classic vlock followed by
--retri finisher. Good for whales.
if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- let's determine how many affs we are away from locking
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- we're going to use a different affliction stack if the target is locked
		if snd.target_locked() then
			snd.giving = {
			"left_leg_broken",
			"right_leg_broken",
			"crippled",
			"mental disruption",
			"physical disruption",
			"crippled body",
			"sensitivity",
			"weariness",
			"clumsiness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"conviction",
			"asthma",
			"weariness",
			"paresis",
			"crippled",
			"slickness",
			"stupidity",
			"anorexia",
			"mental disruption",
			"physical disruption",
			"crippled body",
			--deathblow!
			"clumsiness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled body", "mental disruption","physical disruption" },4) then
			string = "retribution "..snd.target
		else -- if not...
			-- see if we can lock this round, in any of three possible ways
			if vorpal and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dsk "..snd.target.." blaze "..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": blaze, "..tohit[1]..snd.sep
			elseif vorpal and not snd.target_locked() and #missing &gt; 2 then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "hemorrhage"
		local iceblast = false
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 100 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 100 then
			iceblast = true
		end
		-- set the affs we want to use
			snd.giving = {
			"right_leg_broken",
			"left_leg_broken",
			"right_arm_broken",
			"left_arm_broken",
			"stupidity",
			"mental disruption",
			"anorexia",
			"slickness",
			"asthma",
			"paresis",
			"crippled",
			"physical disruption",
			}
			
		-- pick affs from the list above
		for i in pairs(snd.giving) do
			-- make sure not to double up paresis and paralysis
			if not snd.checkAff(snd.giving[i]) then
				-- and don't add an aff we've already got in the list!
				if not table.contains(touse, snd.giving[i]) then
					table.insert(touse, snd.giving[i])
				end
			end
		end
			
		-- first and foremost, check if we can retri!
		if snd.checkAff("paralysis") and snd.checkAff("crippled body") and snd.checkAff("mental disruption") and snd.checkAff("physical disruption") then
			string = "retribution "..snd.target
		elseif snd.target_impaled then
			string = "disembowel "..snd.target
		elseif snd.proned() and not snd.checkAff("writhe_impaled") then
			string = "penance "..snd.target..snd.sep.."impale "..snd.target
			if iceblast then
				string = "blade release left iceblast "..snd.target..snd.sep.."blade release right iceblast "..snd.target..snd.sep..string
			end
		else 
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "razestrike "..snd.target.."blaze"..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": Blaze, "..tohit[1]..snd.sep
			elseif iceblast then
				string = "blade release right iceblast "..snd.target..snd.sep.."blade release left iceblast "..snd.target..snd.sep.."dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lgs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
      "sight",
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and not snd.checkAff("writhe_thighlock") and not snd.checkAff("writhe_armpitlock") and not snd.checkAff("writhe_necklock") then
			if vorpal then
				string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep.."penance "..snd.target..snd.sep.."impale "..snd.target
			else
				string = "penance "..snd.target..snd.sep.."impale "..snd.target
			end
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dsk "..snd.target.." blaze "..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": blaze, "..tohit[1]..snd.sep
			elseif vorpal then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>impale mode</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local physcount = 0
		for aff in pairs(snd.physical_affs) do
			if table.contains(snd.target_has, snd.physical_affs[aff]) then
				physcount = physcount + 1
			end
		end
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      "left_leg_broken",
      "right_leg_broken",
      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and physcount &gt;= 4 and vorpal then
			string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep.."penance "..snd.target..snd.sep.."impale "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dsk "..snd.target.." blaze "..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": blaze, "..tohit[1]..snd.sep
			elseif vorpal then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^im$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>newbie mode</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- set the affs we want to use
			snd.giving = {
      "sight",
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and not snd.checkAff("writhe_thighlock") and not snd.checkAff("writhe_armpitlock") and not snd.checkAff("writhe_necklock") then
			string = "impale "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^newb$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>retri but its legit only retri lmao</name>
									<script>--Meat and potatoes for 1v1, this is a classic vlock followed by
--retri finisher. Good for whales.
if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- let's determine how many affs we are away from locking
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- we're going to use a different affliction stack if the target is locked
		if snd.target_locked() then
			snd.giving = {
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			"sensitivity",
			"clumsiness",
			"weariness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"conviction",
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			--deathblow!
			"weariness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled_body", "mental_disruption","physical_disruption" },4) then
			string = "retribution "..snd.target
		else -- if not...
			-- see if we can lock this round, in any of three possible ways
			if vorpal and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dsk "..snd.target.." blaze "..tohit[1]
				call = "wt Afflicting "..snd.target..": blaze, "..tohit[1]..snd.sep
			elseif vorpal and not snd.target_locked() and #missing &gt; 2 then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^cheese$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>senti mode</name>
									<script>if snd.class == "Templar" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      local call = ""
      local touse = {}
      local tohit = {}
      local extraaff = "sacrifice"
      if snd.checksomeAffs({"asthma", "slickness"}, 2) and snd.checksomeAffs({"weariness", "clumsiness", "hypochondria", "baldness"}, 1) then
        snd.giving = {            
            "left_leg_broken",
			      "right_leg_broken",
            "asthma",
            "weariness",
            "clumsiness",
            "stupidity",
            "recklessness",
            "vomiting",
            "allergies",
            "haemophilia",
            "dizziness",} 
      else
        snd.giving =
          {
            "asthma",
            "weariness",
            "clumsiness",
            "slickness",
            "left_leg_broken",
			      "right_leg_broken",
            "stupidity",
            "recklessness",
            "vomiting",
            "allergies",
          }
      end
      for i in pairs(snd.giving) do
        if not snd.checkAff(snd.giving[i]) then
          if not table.contains(touse, snd.giving[i]) then
            table.insert(touse, snd.giving[i])
          end
        end
      end

      for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end

      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end
      if snd.used.shield then
        string = "raze " .. snd.target
      elseif snd.used.rebounding then
        string = "razestrike " .. snd.target .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[1] .. snd.sep
      else
        string = "dsk " .. snd.target .. " " .. tohit[2] .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[2] .. ", " .. tohit[1] .. snd.sep
      end

      if snd.toggles.affcalling and not snd.target_gone then
        string = call .. string
      end

      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^sent$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = ""
		if snd.used.rebounding or snd.used.shield then
			string = "raze "..snd.target
		elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 then
			string = "blade release left crescent "..snd.target
    end
			string = string..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."zeal "..snd.target
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Impale</name>
									<script>-- Hello. This route requires a warhammer, as well as you setting up what type of weapon you're using.
-- There is a variable in the script 'PvP variables', which you need to change to be whatever weapon you use.
-- We need this so we can switch to a warhammer/switch back at will without having to put in lots of
-- weird checks to see what kind of weapon you use. Templar has many!

if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal? set to false until we check
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end

    local wield = ""
		if not string.find(gmcp.Char.Vitals.wield_left, snd.templar_weapon_one) then 
      wield = "quickwield left "..snd.templar_weapon_one
      if not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
        wield = wield..snd.sep.."quickwield right "..snd.templar_weapon_two..snd.sep 
      end
    elseif not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
      wield = "quickwield right "..snd.templar_weapon_two..snd.sep 
    end

    
		-- set the affs we want to use
     snd.giving = {
      "sight",
		  "paresis",
	    "sensitivity",
			"asthma",
      "vomiting",
      "allergies",
      "slickness",
			"left_leg_broken",
			"right_leg_broken",
      "anorexia",
      "stupidity",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") then
				string = "penance "..snd.target..snd.sep.."impale "..snd.target
		elseif snd.checkAff("writhe_impaled") and snd.checkAff("sensitivity") then
				string = "penance "..snd.target..snd.sep.."relax grip"..snd.sep.."quickwield both warhammer"..snd.sep.."grip"..snd.sep.."dsw "..snd.target.." sacrifice sacrifice"		
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			if string.find(string, "impale") or string.find(string, "dsw") and vorpal then -- Do we have vorpal and are we finishing someone off?
					string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep..string
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "rsk "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		
		--check if we need to re-wield our speed weps
		if wield ~= "" then string = wield..snd.sep..string end
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gimp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Aff - Requires 1 Luminary</name>
									<script>-- Hello. This route requires a warhammer, as well as you setting up what type of weapon you're using.
-- There is a variable in the script 'PvP variables', which you need to change to be whatever weapon you use.
-- We need this so we can switch to a warhammer/switch back at will without having to put in lots of
-- weird checks to see what kind of weapon you use. Templar has many!

if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal? set to false until we check
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
   
    local wield = ""
		if not string.find(gmcp.Char.Vitals.wield_left, snd.templar_weapon_one) then 
      wield = "quickwield left "..snd.templar_weapon_one
      if not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
        wield = wield..snd.sep.."quickwield right "..snd.templar_weapon_two..snd.sep 
      end
    elseif not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
      wield = "quickwield right "..snd.templar_weapon_two..snd.sep 
    end
    
    -- set the affs we want to use
		snd.giving = {
			"paresis",
			"asthma",
			"weariness",
			"sight",
			"sensitivity",
			"slickness",
			"anorexia",
			"stupidity",
			"left_leg_broken",
			"right_leg_broken",
			"clumsiness",
			"haemophilia",
			"allergies",
			"vomiting",
			"recklessness",
			"dizziness"
      }
		-- Since we're with a Luminary, we're banking on them using the Penance proc on overwhelm to instantly kill someone. Deleted!
		if snd.checkAff("transfix") and snd.checkAff("sensitivity") then
			if  snd.health_percent &lt;= 75 then
				string = "penance "..snd.target
			else -- Okay, their health isn't low enough to kill them straight out. Let's just make sure we hit them some more.
				string = "penance "..snd.target..snd.sep.."relax grip"..snd.sep.."quickwield both warhammer"..snd.sep.."grip"..snd.sep.."dsw "..snd.target.." sacrifice sacrifice"		
				if vorpal then
					string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep..string
				end
			end
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "rsk "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		
		string = "qa "..snd.target..snd.sep..string 
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Bleed/Hemm</name>
									<script>if snd.class == "Templar" then
  snd.starting_attack()

  function snd.attack_function()
    local string = ""-- we'll load this with our attack string
    local call = ""  -- and this with our affliction call
    
                     -- next, the afflictions we want to give
    local touse = {}
    local tohit = {}
    local extraaff = "hemorrhage" -- and in case we don't find enough of them
    
    local left_crescent = ""
    if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 85 then left_crescent = "blade release left crescent "..snd.target end
    
    local right_crescent = "" 
    if tonumber(gmcp.Char.Vitals.charge_right) &gt;= 85 then right_crescent = "blade release right crescent "..snd.target end

    
    if not snd.waiting.queue then
      
      snd.giving = {   -- set the affs we want to use
      "hearing", 
      --"haemophilia", 
      "clumsiness",
      "sensitivity"}
       
      -- We really only care about the sensitivity/haemophilia
      -- If they have both, go straight into damage
      if snd.checksomeAffs({"haemophilia", "sensitivity"}, 2) then
        table.insert(touse, "hemorrhage")
        table.insert(touse, "hemorrhage")
        
      else
        -- If that condition isn't met, pick affs from the list above
        for i in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[i]) then
            -- Don't add an aff we've already got in the list!
            if not table.contains(touse, snd.giving[i]) then
              table.insert(touse, snd.giving[i])
            end
          end
        end
      end
      
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.empower_attacks[touse[aff]])
        end
			end
      
      -- if we didn't find enough stuff to hit with, stick in hemorrhage.
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end

      if (snd.used.shield and snd.used.rebounding) then -- Double barrier, try to break through both with rsk/blaze.
        string = "razestrike " .. snd.target .. " blaze"
        
      elseif (snd.used.shield or snd.used.rebounding) then -- One layer of barrier, rsk w/venom.
        string = "razestrike " .. snd.target .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[1]
        
      else -- Send 2 hits with venoms/empowerments
        string = "dsk " .. snd.target .. " " .. tohit[2] .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[2] .. ", " .. tohit[1]
        
        if left_crescent ~= "" and snd.checkAff("sensitivity") then string = left_crescent..snd.sep..string end
        if right_crescent ~= "" and snd.checkAff("sensitivity") then string = right_crescent..snd.sep..string end 
      end
      
    end
    
    -- prepend our affliction call, if we need one
    if snd.toggles.affcalling and not snd.target_gone then
      string = call .. snd.sep .. string
    end
    
    -- handle anti-spam and the actual attacking now
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bleed$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  -- list what limbs to hit
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can rupture now!
  local rupture = "none"
	local vorpal = false
	local call = ""
  for limb in ipairs(limbs) do
   if snd.limb_bruising[limbs[limb]] &gt;= 3 then
    rupture = limbs[limb]
   end
  end
  if rupture ~= "none" and not snd.used.shield then -- if rupture is go
   string = "penance "..snd.target..snd.sep.."rupture "..snd.target.." "..rupture
  else -- can't rupture, needs logic
   -- but can we vorpal tho!
   if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
    vorpal = true
	 else
	  vorpal = false
	 end
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 else -- target not prone
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- if we have vorpal and can use it with impunity
			 if vorpal and not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
			  if right == "nothing" then
			   right = limbs[limb]
			  elseif left == "nothing" then
			   left = limbs[limb]
			  end
				-- otherwise leave the prepped leg alone!
		   end
			 -- if it's not a leg about to break, go for it
		  elseif right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 -- end limb picking logic
	 -- on to attacking logic!
	 if snd.used.shield and snd.used.rebounding then -- baddie is turtling
    string = "raze "..snd.target -- raze has static balance cost
	 elseif snd.used.shield or snd.used.rebounding then
    string = "target nothing with left"..snd.sep.."target "..right.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
	 -- here's the tricky part, we're checking for optimal conditions
	 -- we need vorpal ready, a leg about to break, and resto poultice off balance
	 elseif vorpal and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
	  if left == "left leg" then right = "right leg" end
	  if left == "right leg" then right = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." trauma numbing"
	 -- we could also meet the same conditions, but on the other limb we picked
	 elseif vorpal and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
	  if right == "left leg" then left = "right leg" end
	  if right == "right leg" then left = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." numbing trauma"
	 else -- we can't do a Big Bad Break, run normal logic
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dsk "..snd.target.." trauma trauma"
   end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
snd.send("engage "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>ice blast limbs</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
  local left = "nothing"
  local right = "nothing"
	local vorpal = false
	local rupture = "none"
	if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
	 vorpal = true
	else
	 vorpal = false
	end
	if table.contains(snd.target_has, "frozen") then
	 if snd.limb_dmg["left leg"] &gt;= snd.limb_dmg["right leg"] then
	  left = "left leg"
		right = "left leg"
	 else
	  left = "right leg"
		right = "right leg"
	 end
	else
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb then
	   if right == "nothing" then
	    right = limbs[limb]
	   elseif left == "nothing" and limbs[limb] ~= right and limbs[limb] ~= snd.last_hit_limb then
	    left = limbs[limb]
		 end
	  end
	 end
	end
  for limb in ipairs(limbs) do
	 if snd.limb_bruising[limbs[limb]] &gt;= 3 then
	  rupture = limbs[limb]
	 end
  end
  if snd.used.shield and snd.used.rebounding then
   string = "raze "..snd.target
	elseif snd.used.shield then
	 string = "target nothing with left"..snd.sep.."target "..left.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
  elseif rupture ~= "none" then
	 string = "penance "..snd.target..snd.sep.."rupture "..snd.target.." "..rupture
	elseif snd.used.rebounding then
   string = "target nothing with left"..snd.sep.."target "..left.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
	elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and not table.contains(snd.target_has, "frozen") then
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."blade release left iceblast "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	elseif tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 and not table.contains(snd.target_has, "frozen") then
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."blade release right iceblast "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	elseif vorpal then
	 string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	else
   string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dsk "..snd.target.." trauma trauma"
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
snd.send("engage "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lb$</regex>
								</Alias>
							</AliasGroup>
							<Alias isActive="yes" isFolder="no">
								<name>charge</name>
								<script>if snd.class == "Templar" then
echo(gmcp.Char.Vitals.charge_right)
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^bc$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Zealot</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Immolation support</name>
									<script>if snd.class == "Zealot" then
  snd.starting_attack()

  function snd.attack_function()
    -- This checks for a present Firefist defense. This is used later during a Firefist check.
    
    -- This checks for a present snd.zenith defense. It is used later in snd.zenith/Flow Handling.
    
    
    if not snd.loyalsattacking then
      string = "order loyals kill "..snd.target..snd.sep 
    end
    
    -- This is a failsafe to take crispy off of a target that has cured ablaze.
    if snd.checkAff("crispy") then
      if not snd.checkaff("ablaze") then
        snd.target_cured("crispy")
      end
    end
    -- This uses crispy to check if they're at the right flame level.
    if snd.checkAff("crispy") or snd.flamestack == 12 then
        snd.immolation_ready = true
    end
    -- In this mode, we're going to only rely on Purification. It's built to support a quick Immolate.
    if not snd.waiting.queue then
      if theytumbling then
        string = string.."psi tether "..snd.target
      elseif snd.used.shield then
        string = string.."touch hammer "..snd.target
        -- OK, so if immolation is ready... we should cast it!
      elseif snd.immolation_ready then
        string = string.."enact immolation " .. snd.target
        -- OK, so if immolation isn't ready, what next? Heatspear!
      elseif not snd.checkAff("heatspear") and snd.checkAff("ablaze") and snd.limb_dmg["torso"] &lt;= 66.66 then
        string = string.."enact heatspear " ..snd.target..snd.sep
        -- OK, what if they have heatspear? Are they ablaze?! Quicken!
      elseif snd.checkAff("ablaze") then
        string = string.."enact quicken "..snd.target..snd.sep
        -- OK, so we've done all of this, but they don't have ablaze! Ez fix..
      else
        string = string.."enact scorch " .. snd.target
      end
      -- Flow Handling/snd.zenith Handling
      -- In this mode, we only Flow when we have snd.zenith, otherwise we are casting.
      -- This means our Flow handling IS our snd.zenith handling.
      -- Our Flow attacks should always be punches to take advantage of Firefist.
      if snd.zenith then
        if snd.used.shield then
          string = string.."touch hammer " .. snd.target
        elseif snd.parried_limb ~= "torso" then
          string = string.."flow " .. snd.target .. " clawtwist clawtwist" .. snd.sep .. string
        elseif snd.parried_limb ~= "left arm" then
          string = string.."flow " .. snd.target .. " pummel left pummel left" .. snd.sep .. string
        else
          string = string.."flow " .. snd.target .. " pummel right pummel right" .. snd.sep .. string
        end
      end
      -- Hackles handling
      -- In this mode, we really just hackles whipburst.
      -- We will Whipburst even in lieu of a Flow combo.
      -- First, we should check if we have hackles balance.
      if gmcp.Char.Vitals.ability_bal == "1" then
        string = "hackles " .. snd.target .. " whipburst " .. snd.sep .. string
      end
    end
    -- We want to turn on firefist if we have snd.zenith up, because that's the only time we're punching and it needs to count.
    if not snd.firefist then
      if snd.checksomeAffs({"ablaze", "heatspear"}, 2) then
        if snd.firefist_cooldown then
          if snd.zenith or snd.zenith_coming then
            string = "enact firefist"..snd.sep .. string
          else
            string = "enact zenith" .. snd.sep .. string
          end
        end
      end
    end
    -- I am leaving this failsafe in... below checks if we're g2g with the immolate button.
    if snd.immolation_ready then
      string = "enact immolation " .. snd.target
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fire$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs</name>
									<script>if snd.class == "Zealot" then
snd.starting_attack()
function snd.attack_function()
 -- This is a list of limbs we'll be hitting.
 
-- This checks for a present Firefist defense. This is used later during a Firefist check.
 
-- This checks for a present snd.zenith defense. It is used later in snd.zenith Handling.
   
-- Zeal Attacks Table
local zeal_attacks = {
["left arm"] = "pummel left ",
["right arm"] = "pummel right ",
["left leg"] = "wanekick left ",
["right leg"] = "wanekick right ",
torso = "clawtwist",
head = "sunkick" }


-- This uses crispy to check if they're at the right flame level.
if snd.checkAff("crispy") or snd.flamestack == 12 then
        snd.immolation_ready = true
    end
       
 
 -- This is a list of limbs we'll be hitting.
local limbs = {"torso", "left leg", "right leg", "left arm", "right arm"}
 -- This will pick two limbs to hit - they will be used to write a flow attack with left being ATK1 and right being ATK2.
local left = "nothing"
local right = "nothing"
local string = ""
    if snd.proned() then -- Go for legs on a prone.
        if snd.parried_limb == "right leg" then
            right = "left leg"
        elseif snd.parried_limb == "left leg" then
            right = "right leg"
        else
            right = "right leg"
            left = "left leg"
        end
    else -- Target isn't prone...
      for limb in pairs(limbs) do
         -- Ignore last parried, last hit, and any limbs being resto'd
       if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
          -- If it's a leg that's about to break
        if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
           -- If we have snd.zenith up, lets get in there.
             if snd.snd.zenith and not snd.used.shield and snd.resto_limb ~= "none" then
              if right == "nothing" then
               right = limbs[limb]
              elseif left == "nothing" then
               left = limbs[limb]
              end
                -- Otherwise, no snd.zenith? Leave the prepped leg alone!
           end
             -- But, if it's not a leg about to break, go for it!
          elseif right == "nothing" then
           right = limbs[limb]
        elseif left == "nothing" and limbs[limb] ~= right then
         left = limbs[limb]
          end
       end
      end
     end
     if left == "nothing" then -- We only found one limb to hit!
      left = right -- double up!
     end
     -- This is the end of the limb picking logic.

-- Flow Handling - I will need to update this to use the ATK1/ATK2 lineup.
-- Consider writing a check for different combos on firefist?
 
if not snd.waiting.queue then
-- Alright, first we need to be sure we can hit them. Is shield up?
  if snd.used.shield then
    string = "touch hammer "..snd.target
-- We're checking for optimal conditions...
-- We need them off resto balance..
-- We need snd.zenith up, a torso about to break, a left leg about to break, and resto poultice off balance..
  --elseif not snd.checkAff("indifference") and not snd.used.shield and tonumber(gmcp.Char.Vitals.psi) &gt; 50 then
   -- string = "psi dull "..snd.target
  elseif snd.zenith and snd.resto_limb ~="none" and (snd.limb_dmg["torso"]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg["torso"] &lt;= 33.33 and string.find(left, "torso") and snd.resto_limb ~= "left leg" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt;= 33.33 and string.find(left, "leg") then
    string = "flow "..snd.target.." wanekick left direblow"
-- No? How about all of that, but a right leg?!
  elseif snd.zenith and snd.resto_limb ~="none" and (snd.limb_dmg["torso"]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg["torso"] &lt; 33.33 and string.find(left, "torso") and snd.resto_limb ~= "right leg" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
    string = "flow "..snd.target.." wanekick right direblow"
-- We need snd.zenith up, a leg about to break, and resto poultice off balance
  elseif snd.zenith and not snd.checkAff("heatspear") and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
    string = "flow "..snd.target.." wanekick left twinpress"
-- Could we also meet the same conditions, but on the other limb we picked?
  elseif snd.zenith and not snd.checkAff("heatspear") and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
    string = "flow "..snd.target.." wanekick right twinpress"
  elseif snd.zenith and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
    string = "flow "..snd.target.." wanekick left dislocate left leg"
-- Could we also meet the same conditions, but on the other limb we picked?
  elseif snd.zenith and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
    string = "flow "..snd.target.." wanekick right dislocate right leg"
  else
    string = "flow "..snd.target.." "..zeal_attacks[left].." "..zeal_attacks[right]
  end
 
-- Hackles handling
-- Jawcrack &gt; Whipburst ... considering changing to rive to maximize the bleeding.
-- Prioritize Whipburst during firefist?
-- First, we should check if we have hackles balance.    
    if gmcp.Char.Vitals.ability_bal == "1" and not snd.used.shield then
-- Cool! What are we doing with it? Let's figure that out and put it before our flow string!
-- First, let's see if there's a welt and we have snd.zenith...
        if snd.zenith and string.find(snd.welt_ready, "arm") and (snd.limb_dmg[snd.welt_ready]+6.5 &gt;= 33.3) and snd.limb_dmg[snd.welt_ready] &lt;= 33.33 and not snd.checkAff("sore wrist") then
            string = "hackles "..snd.target.." wristlash "..snd.sep..string
        elseif snd.zenith and string.find(snd.welt_ready, "leg") and (snd.limb_dmg[snd.welt_ready]+6.5 &gt;= 33.3) and snd.limb_dmg[snd.welt_ready] &lt;= 33.33 and not snd.checkAff("sore ankle") then    
            string = "hackles "..snd.target.." anklepin "..snd.sep..string
--There isn't? OK...
        elseif not snd.checkAff("blurry vision") then
            string = "hackles "..snd.target.." jawcrack "..snd.sep..string
        elseif snd.checkAff("heatspear") then
            string = "hackles "..snd.target.." whipburst "..snd.sep..string
        elseif not snd.checkAff("sore ankle") then
            string = "hackles "..snd.target.." anklepin "..snd.sep..string
        elseif not snd.checkAff("sore wrist") then
            string = "hackles "..snd.target.." wristlash "..snd.sep..string
        else
            string = "hackles "..snd.target.." whipburst "..snd.sep..string
        end
    end
 
   
-- Firefist handling
   if not snd.firefist then
      if snd.firefist_cooldown then
        if snd.zenith then
          string = "enact firefist"..snd.sep..string
        end
      end
    end
   
-- snd.zenith handling
-- Immolation &gt; Pyromania &gt; Infernal &gt; Heatspear &gt; Quicken &gt; Scorch
-- handle pyromania with a variable?
-- use the limb state checker from templar limbs script for infernal check?
-- handle heatspear as an aff..
-- check if immolate not possible ... if not, quicken or scorch
 
 
if snd.zenith then
  if snd.checkAff("heatspear") then
    string = string..snd.sep.."enact quicken "..snd.target
    elseif not snd.checkAff("heatspear") and not snd.checkAff("ablaze") and snd.firefist then
        string = string..snd.sep.."enact heatspear "..snd.target
    elseif not snd.checkAff("heatspear") and snd.checkAff("ablaze") then
        string = string..snd.sep.."enact heatspear "..snd.target
    elseif snd.limb_status["torso"] ~= "healed" and snd.checkAff("ablaze") then
        string = string..snd.sep.."enact quicken "..snd.target
    else
        string = string..snd.sep.."enact scorch "..snd.target
    end
end
 
--if not snd.checkAff("indifference") and not snd.zenith and not snd.checkAff("heatspear") and not snd.used.shield then
  --  string = "psi dull "..snd.target
--end
 
if not snd.zenith then
    if not rising_sun then
      if not snd.zenith_coming then
        string = "enact zenith"
      end
    end
end
 
if snd.immolation_ready then
    string = "enact immolation "..snd.target
end
 
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end


 
</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Bleed/Damage</name>
									<script>if snd.class == "Zealot" then
  snd.starting_attack()

  function snd.attack_function()
    
    if snd.checkAff("crispy") or snd.flamestack == 12 then
        snd.immolation_ready = true
    end
    
    -- Flow Handling
    -- Consider writing a check for different combos on firefist?
    if not snd.waiting.queue then
      if theytumbling then
        string = "order loyals kill "..snd.target..snd.sep .. "psi tether "..snd.target
      elseif snd.used.shield then
        string = "order loyals kill "..snd.target..snd.sep .. "touch hammer " .. snd.target
--      elseif not snd.checkAff("indifference") and not snd.used.shield and tonumber(gmcp.Char.Vitals.psi) &gt; 50 then
  --      string = "order loyals kill "..snd.target..snd.sep .. "psi dull "..snd.target
      elseif snd.parried_limb ~= "torso" then
        string = "order loyals kill "..snd.target..snd.sep .. "flow " .. snd.target .. " clawtwist clawtwist"
      elseif snd.parried_limb ~= "head" then
        if not snd.checkAff("crippled_throat") then
          string = "order loyals kill "..snd.target..snd.sep .. "flow " .. snd.target .. " edgekick heelrush head"
        else
          string = "order loyals kill "..snd.target..snd.sep .. "flow " .. snd.target .. " sunkick heelrush head"
        end
      elseif snd.parried_limb ~= "left leg" or snd.parried_limb ~= "right leg" then
        string = "order loyals kill "..snd.target..snd.sep .. "flow " .. snd.target .. " wanekick left wanekick right"
      elseif snd.parried_limb ~= "left leg" and snd.parried_limb == "right leg" then
        string = "order loyals kill "..snd.target..snd.sep .. "flow " .. snd.target .. " wanekick left wanekick left"
      elseif snd.parried_limb ~= "right leg" and snd.parried_limb == "left leg" then
        string = "order loyals kill "..snd.target..snd.sep .. "flow " .. snd.target .. " wanekick right wanekick right"
      else
        if snd.parried_limb ~= "left arm" then
          string = "order loyals kill "..snd.target..snd.sep .. "flow " .. snd.target .. " pummel left pummel left"
        end
      end
      -- Hackles handling
      -- Jawcrack &gt; Rive ...  rive to maximize the bleeding.
      -- Prioritize Whipburst during firefist?
      -- First, we should check if we have hackles balance.	
      if gmcp.Char.Vitals.ability_bal == "1" then
        -- Cool! What are we doing with it? Let's figure that out and put it before our flow string!
        if snd.parried_limb ~= "head" and not snd.checkAff("blurry vision") then
          string = "hackles " .. snd.target .. " jawcrack " .. snd.sep .. string
        else
          string = "hackles " .. snd.target .. " rive " .. snd.sep .. string
        end
      end
      -- Zenith handling
      -- Immolation &gt; Pyromania &gt; Infernal &gt; Heatspear &gt; Quicken &gt; Scorch
      -- handle pyromania with a variable?
      -- use the limb state checker from templar limbs script for infernal check?
      -- handle heatspear as an aff..
      -- check if immolate not possible ... if not, quicken or scorch
      if snd.zenith then
        if not snd.checkAff("heatspear") and snd.checkAff("ablaze") then
          string = string .. snd.sep .. "order loyals kill "..snd.target..snd.sep .. "enact heatspear " .. snd.target
        elseif snd.checkAff("ablaze") then
          string = string .. snd.sep .. "order loyals kill "..snd.target..snd.sep .. "enact quicken " .. snd.target
        else
          string = string .. snd.sep .. "order loyals kill "..snd.target..snd.sep .. "enact scorch " .. snd.target
        end
      end
      if not snd.zenith then
        if not rising_sun then
          if not snd.zenith_coming then
            string = "enact zenith"
          end
        end
      end
      if not snd.firefist then
        if snd.checksomeAffs({"ablaze", "heatspear"}, 2) then
          if snd.firefist_cooldown then
            if snd.zenith or snd.zenith_coming then
              string = "enact firefist"
            else
              string = "enact zenith" .. snd.sep .. string
            end
          end
        end
      end
      if snd.immolation_ready then
        string = "enact immolation " .. snd.target
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>1v1</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Combo Attack</name>
									<script>---snd.enemy_restoration_balance = false
---snd.resto_limb
---snd.balance.pendulum

if snd.class == "Zealot" then
  snd.starting_attack()

  function snd.attack_function()
  
      
    
    if not snd.loyalsattacking then
      string = "order loyals kill "..snd.target..snd.sep 
    end

   
-- Zeal Attacks Table
    local zeal_attacks = {
    ["left arm"] = "pummel left ",
    ["right arm"] = "pummel right ",
    ["left leg"] = "wanekick left ",
    ["right leg"] = "wanekick right ",
    torso = "clawtwist",
    head = "sunkick" }

  if snd.checkAff("crispy") or snd.flamestack == 12 then
        snd.immolation_ready = true
    end
 
    local limbs = {"torso", "left leg", "right leg", "left arm", "right arm"}
    local left = "nothing"
    local right = "nothing"
    local string = ""
    if snd.proned() then -- Go for legs on a prone.
      if snd.parried_limb == "right leg" then
        right = "left leg"
      elseif snd.parried_limb == "left leg" then
        right = "right leg"
      else
        right = "right leg"
        left = "left leg"
      end
    else -- Target isn't prone...
      for limb in pairs(limbs) do
        if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
          if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
            if snd.snd.zenith and not snd.used.shield and snd.resto_limb ~= "none" then
              if right == "nothing" then
                right = limbs[limb]
              elseif left == "nothing" then
                left = limbs[limb]
              end
            end
          elseif right == "nothing" then
            right = limbs[limb]
          elseif left == "nothing" and limbs[limb] ~= right then
            left = limbs[limb]
          end
        end
      end
    end
    
    if left == "nothing" then -- We only found one limb to hit!
      left = right -- double up!
    end
 
    if not snd.waiting.queue then
      if theytumbling then
        string = string.."psi tether "..snd.target
      elseif snd.used.shield then
        string = string.."touch hammer "..snd.target
      elseif not snd.enemy_restoration_balance and snd.balance.pendulum then
        string = string.."enact pendulum "..snd.target..snd.sep..string
      elseif snd.zenith and snd.resto_limb ~="none" and (snd.limb_dmg["torso"]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg["torso"] &lt;= 33.33 and string.find(left, "torso") and snd.resto_limb ~= "left leg" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt;= 33.33 and string.find(left, "leg") then
        string = string.."flow "..snd.target.." wanekick left direblow"
      elseif snd.zenith and snd.resto_limb ~="none" and (snd.limb_dmg["torso"]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg["torso"] &lt; 33.33 and string.find(left, "torso") and snd.resto_limb ~= "right leg" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
        string = string.."flow "..snd.target.." wanekick right direblow"
      elseif snd.zenith and not snd.checkAff("heatspear") and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
        string = string.."flow "..snd.target.." wanekick left twinpress"
      elseif snd.zenith and not snd.checkAff("heatspear") and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
        string = string.."flow "..snd.target.." wanekick right twinpress"
      elseif snd.zenith and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
        string = string.."flow "..snd.target.." wanekick left dislocate left leg"
      elseif snd.zenith and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
        string = string.."flow "..snd.target.." wanekick right dislocate right leg"
      else
        string = string.."flow "..snd.target.." "..zeal_attacks[left].." "..zeal_attacks[right]
      end
 
      if gmcp.Char.Vitals.ability_bal == "1" and not snd.used.shield then
        if snd.zenith and string.find(snd.welt_ready, "arm") and (snd.limb_dmg[snd.welt_ready]+6.5 &gt;= 33.3) and snd.limb_dmg[snd.welt_ready] &lt;= 33.33 and not snd.checkAff("sore wrist") then
          string = string.."hackles "..snd.target.." wristlash "..snd.sep..string
        elseif snd.zenith and string.find(snd.welt_ready, "leg") and (snd.limb_dmg[snd.welt_ready]+6.5 &gt;= 33.3) and snd.limb_dmg[snd.welt_ready] &lt;= 33.33 and not snd.checkAff("sore ankle") then    
          string = string.."hackles "..snd.target.." anklepin "..snd.sep..string
        elseif not snd.checkAff("blurry vision") then
          string = string.."hackles "..snd.target.." jawcrack "..snd.sep..string
        elseif snd.checkAff("heatspear") then
          string = string.."hackles "..snd.target.." whipburst "..snd.sep..string
        elseif not snd.checkAff("sore ankle") then
          string = string.."hackles "..snd.target.." anklepin "..snd.sep..string
        elseif not snd.checkAff("sore wrist") then
          string = string.."hackles "..snd.target.." wristlash "..snd.sep..string
        else
          string = string.."hackles "..snd.target.." whipburst "..snd.sep..string
        end
      end
 
      if not snd.zenith then
        if not rising_sun then
          if not snd.zenith_coming then
            string = "enact zenith"
          end
        end
      end
      
      if not snd.firefist then
        if snd.checksomeAffs({"ablaze", "heatspear"}, 2) then
          if snd.firefist_cooldown then
            if snd.zenith or snd.zenith_coming then
              string = "enact firefist"..snd.sep..string
            else
              string = "enact zenith" .. snd.sep .. string
            end
          end
        elseif snd.balance.pendulum and not snd.enemy_restoration_balance then
          string = string.."enact pendulum " ..snd.target..snd.sep..string
        end
      end
      
      if snd.immolation_ready then
        string = string.."enact immolation " .. snd.target..snd.sep..string
      end 
 
      if snd.zenith then
        if snd.checkAff("heatspear") then
          string = string.."enact quicken "..snd.target..snd.sep..string
        elseif not snd.checkAff("heatspear") and not snd.checkAff("ablaze") and snd.firefist then
          string = string.."enact heatspear "..snd.target..snd.sep..string
        elseif not snd.checkAff("heatspear") and snd.checkAff("ablaze") then
          string = string.."enact heatspear "..snd.target..snd.sep..string
        elseif snd.limb_status["torso"] ~= "healed" and snd.checkAff("ablaze") then
          string = string.."enact quicken "..snd.target..snd.sep..string
        else
          string = string.."enact scorch "..snd.target..snd.sep..string
        end
      end
       
  --    if not snd.checkAff("indifference") and not snd.zenith and not snd.checkAff("heatspear") and not snd.used.shield then
 --       string = "psi dull "..snd.target
  --    end
    
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^kll$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Warden</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>venoms only</name>
									<script>if snd.class == "Warden" then
snd.giving = {
"paresis",
"clumsiness",
"asthma",
"slickness",
"stupidity",
"anorexia",
"allergies",
--"weariness",
--"haemophilia",
--"sensitivity",
--"vomiting",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local left = "none"
  local right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then left = "epteth" end
  if right == "none" then right = "epseth" end
  
	x = ""
  
  if snd.used.rebounding and snd.used.shield then
   string = "warden raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "warden bypass "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
   string = "warden lacerate "..snd.target.." "..left.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	 end
	end
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end

</script>
									<command></command>
									<packageName></packageName>
									<regex>^vn$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>affs</name>
									<script>if snd.class == "Warden" then
  snd.giving = {
  "paresis",
  "asthma",
  "clumsiness",
  "slickness",
  "stupidity",
  "anorexia",
  "dizziness",
  --"weariness",
  --"sensitivity",
  --"haemophilia",
  --"vomiting",
  --"allergies",
  --"recklessness",
  --"voyria",
  }
  snd.hound_queue = {
  "mark",
  "dizziness",
  "berserking",
  "weariness",
  "impairment",
  }
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    local string = ""
    local left = "none"
    local right = "none"
  
    for i in pairs(snd.giving) do
     if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
      if right == "none" then
       right = snd.effects[snd.giving[i]]
      elseif left == "none" then
       left = snd.effects[snd.giving[i]]
      end
     end
    end
    
    if left == "none" then left = "epseth" end
    if right == "none" then right = "epseth" end
  	x = ""
    
    if snd.used.rebounding and snd.used.shield then
     string = "warden raze "..snd.target
    elseif snd.used.rebounding or snd.used.shield then
     string = "warden bypass "..snd.target.." "..right
  	 if snd.toggles.affcalling and not snd.target_gone then
  	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
  	 end
    else
  	 if snd.checkAff("fallen") and snd.target_locked() then
  	  if table.contains(snd.target_has, "crushed_chest") then
  		 string = "warden decimate "..snd.target
  		else
  	   string = "warden pummel "..snd.target.." chest"
  		end
  	 else
      string = "warden lacerate "..snd.target.." "..left.." "..right
  	  if snd.toggles.affcalling and not snd.target_gone then
  	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
  	  end
  	 end
  	end
    
  	if snd.soul &lt;= 80 and not table.contains(snd.target_has, "ancestral_portent") then
  	 string = string..snd.sep.."ancest portent "..snd.target
  	elseif snd.soul &lt;= 90 and not table.contains(snd.target_has, "inhibited") then
  	 string = string..snd.sep.."ancest inhibit "..snd.target
  	elseif #snd.target_has &gt;= 12 and snd.balance.soulpoison then
  	 string = string..snd.sep.."ancest ambush "..snd.target
  	elseif snd.soul &lt;= 75 and snd.balance.implant and not table.contains(snd.target_has, "soul_implant") then
  	 if snd.target_locked() then
  	  string = string..snd.sep.."ancest attune "..snd.target.." aconite slike"
  	 end
  	end
    
  	string = "wipe left"..snd.sep..x..string..snd.sep.."warden release "..snd.target
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Warden" then
  snd.giving = {
	"left_arm_broken",
	"right_arm_broken",    
	"left_leg_broken",
	"right_leg_broken",
  "stupidity",
	"anorexia",
	"slickness",
	"asthma",
  "recklessness",
  "dizziness",
  "weariness",
  "sensitivity",
  }
  snd.hound_queue = {
  "frozen",
  }
  
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    local string = ""
    local left = "none"
    local right = "none"
  
    for i in pairs(snd.giving) do
     if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
      if right == "none" then
       right = snd.effects[snd.giving[i]]
      elseif left == "none" then
       left = snd.effects[snd.giving[i]]
      end
     end
    end
    
    if left == "none" then left = "epseth" end
    if right == "none" then right = "epseth" end
  	local x = ""
    
    if snd.used.rebounding and snd.used.shield then
     string = "warden raze "..snd.target
    elseif snd.used.rebounding or snd.used.shield then
     string = "warden bypass "..snd.target.." "..right
  	 if snd.toggles.affcalling and not snd.target_gone then
  	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
  	 end
    else
  	 if snd.checkAff("fallen") then
  	  if table.contains(snd.target_has, "crushed_chest") then
  		 string = "warden decimate "..snd.target
  		else
  	   string = "warden pummel "..snd.target.." chest"
  		end
  	 else
      string = "warden lacerate "..snd.target.." "..left.." "..right
  	  if snd.toggles.affcalling and not snd.target_gone then
  	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
  	  end
  	 end
  	end

    
  	string = "wipe left"..snd.sep..x..string..snd.sep.."warden release "..snd.target
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>stuff</name>
									<script>if snd.class == "Warden" then
  snd.giving = {
  --push recklnessness/focus balance to try and make locks easier for others
  "recklessness",
  "slickness",
  "stupidity",
  "anorexia",
  "dizziness",
  "weariness",
  "sensitivity",
  "haemophilia",
  "vomiting",
  "allergies",
  --"voyria",
  }
  snd.hound_queue = {
  "dizziness",
  "berserking",
  "weariness",
  "impairment",
  }
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    local string = ""
    local left = "none"
    local right = "none"
  
    for i in pairs(snd.giving) do
     if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
      if right == "none" then
       right = snd.effects[snd.giving[i]]
      elseif left == "none" then
       left = snd.effects[snd.giving[i]]
      end
     end
    end
    
    if left == "none" then left = "epseth" end
    if right == "none" then right = "epseth" end
  	x = ""
    
    if snd.used.rebounding and snd.used.shield then
     string = "warden raze "..snd.target
    elseif snd.used.rebounding or snd.used.shield then
     string = "warden bypass "..snd.target.." "..right
  	 if snd.toggles.affcalling and not snd.target_gone then
  	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
  	 end
    else
  	 if snd.checkAff("fallen") then
  	  if table.contains(snd.target_has, "crushed_chest") then
  		 string = "warden decimate "..snd.target
  		else
  	   string = "warden pummel "..snd.target.." chest"
  		end
  	 else
      
      string = "warden lacerate "..snd.target.." "..left.." "..right
  	  if snd.toggles.affcalling and not snd.target_gone then
        x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
  	  end
  	 end
  	end
    
  	string = "wipe left"..snd.sep..x..string..snd.sep.."warden release "..snd.target
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^support$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Warden" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "ancest carve "..snd.target
  else
   	string = "warden maul "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Warden" then
  snd.hound_queue = {
  "frozen",
  }
snd.current_offense = "WardenLimbs"
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    -- list what limbs to hit
    limbs = {"left leg", "right leg", "left arm", "right arm"}
  
    if table.contains(snd.target_has, "crushed_chest") and snd.proned() then	-- check if we can pulverize now!
     string = "warden decimate "..snd.target
  
  	elseif snd.proned() and snd.resto_limb ~= "none" then	-- or if we should set up pulverize...
  	 string = "warden pummel "..snd.target.." chest"
    else -- can't pulverize, needs logic 	 -- pick what limbs to hit
  
  	 left = "nothing"
  	 right = "nothing"
     
  	 if snd.proned() then -- focus legs hard on prone
  	  if snd.parried_limb == "right leg" then
  	   right = "left leg"
  	  elseif snd.parried_limb == "left leg" then
  	   right = "right leg"
  	  else
  	   right = "right leg"
  		 left = "left leg"
  	  end
      
  	 -- are the legs prepped?
  	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
  		 string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."warden maul "..snd.target
       
  	 else -- target not prone, legs not prepped
  	  for limb in pairs(limbs) do
  		 -- ignore last parried, last hit, and any limbs being resto'd
  	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
  		  -- if it's a leg that's about to break
  	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
  		   -- don't do anything!
  			 -- if it's not a leg about to break, go for it
  		  elseif right == "nothing" then
  		   right = limbs[limb]
  	    elseif left == "nothing" and limbs[limb] ~= right then
  	     left = limbs[limb]
  		  end
  	   end
  	  end
      
  	  if left == "nothing" then -- we only found one limb to hit
  	   left = right -- double up!
  	  end
      
  	  -- end limb picking logic
  	  -- on to attacking logic!
      
  	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
       string = "warden raze "..snd.target -- raze has static balance cost
  	  else
  	   string = "warden maul "..snd.target.." "..left.." "..right
  		 if snd.soul &lt;= 80 and not table.contains(snd.target_has, "debilitated") then
  		  string = string..snd.sep.."ancest debilitate "..snd.target
  		 end
      end
  	 end
  	end
    
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legsz</name>
									<script>if snd.class == "Warden" then
  snd.hound_queue = {
  "frozen",
  }
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    -- list what limbs to hit
    limbs = {"left leg", "right leg", "left arm", "right arm"}
  
    if snd.checkAff("crushed_chest") and snd.proned() then	-- check if we can pulverize now!
     string = "warden decimate "..snd.target
  
  	elseif snd.proned() and ((snd.limb_dmg["left leg"] &gt;= 33.33 and snd.limb_dmg["right leg"] &gt;= 33.33)  	-- or if they're prone and staying that way
    or snd.limb_dmg["left leg"] &gt;= 66.66 or snd.limb_dmg["right leg"] &gt;= 66.66) then
  
  	 if table.contains(snd.target_has, "distortion") and snd.soul &lt;= 70 then 	 -- are they distorted?
  	  string = "warden pummel "..snd.target.." chest"	 
  	 elseif snd.used.shield or snd.used.rebounding then -- do we need to raze?
  	  string = "warden raze "..snd.target
  	
  	 else 
  	  string = "warden pummel "..snd.target.." chest"
  	 end
  	elseif snd.proned() then -- at least they're prone
  	 if (snd.used.shield or snd.used.rebounding) and not table.contains(snd.target_has, "distortion") then -- bleh!
  	  string = "warden raze "..snd.target
  	 else -- make sure they stay down
  	  if table.contains(snd.target_has, "frozen") or table.contains(snd.target_has, "distortion") then
  		 string = "warden maul "..snd.target.." left leg right leg"
  	  elseif snd.parried_limb == "left leg" then
  		 string = "warden maul "..snd.target.."right leg right leg"
  		elseif snd.parried_limb == "right leg" then
  		 string = "warden maul "..snd.target.."left leg left leg"
  		else
  	   string = "warden maul "..snd.target.." left leg right leg"
  		end
  	 end
  	-- did they apply resto?
  	--elseif not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
  	-- string = "target nothing with left"..snd.sep.."target nothing with right"..snd.sep.."warden lacerate "..snd.target.." epseth epseth"
    else -- can't pulverize, needs logic
  	 -- pick what limbs to hit
  	 left = "nothing"
  	 right = "nothing"
  	 if snd.proned() then -- focus legs hard on prone
  	  if snd.parried_limb == "right leg" then
  	   right = "left leg"
  	  elseif snd.parried_limb == "left leg" then
  	   right = "right leg"
  	  else
  	   right = "right leg"
  		 left = "left leg"
  	  end
  	 -- are the legs prepped?
  	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
      string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."warden maul "..snd.target
  	 else -- target not prone, legs not prepped
  	  for limb in pairs(limbs) do
  		 -- ignore last parried, last hit, and any limbs being resto'd
  	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
  		  if right == "nothing" then
  		   right = limbs[limb]
  	    elseif left == "nothing" and limbs[limb] ~= right then
  	     left = limbs[limb]
  		  end
  	   end
  	  end
  	  if left == "nothing" then -- we only found one limb to hit
  	   left = right -- double up!
  	  end
  	  -- end limb picking logic
  	  -- on to attacking logic!
  	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
       string = "warden raze "..snd.target -- raze has static balance cost
  	  else
  	   string = "warden maul "..snd.target.." "..left.." "..right
      end
  	 end
  	end
  	if snd.soul &lt;= 90 and not snd.checkAff("inhibited") then
  	 string = string..snd.sep.."ancest inhibit "..snd.target
  	elseif snd.soul &lt;= 90 and not snd.checkAff("eluded") then
  	 string = string..snd.sep.."ancest elude "..snd.target
    elseif snd.soul &lt;= 80 and not snd.checkAff("debilitated") then
     string = string..snd.sep.."ancest debilitate "..snd.target
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Oneiromancer</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Oneiromancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "touch hammer "..snd.target
  else
   	string = "starlight "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Affliction</name>
									<script>if snd.class == "Oneiromancer" then

  snd.giving = {
  "asthma",
  "aeon",
  "paresis",
  "impatience",
  "clumsiness",
  "weariness",
  "stupidity",
  "anorexia",
  "epilepsy",
  "sensitivity",
  "vomiting",
  "lethargy",
  "confusion",
  "recklessness",	
  "superstition",
  "hypersomnia",
}
  
  snd.starting_attack()
  
  function snd.attack_function() 
   local string = ""
   local raw_affs_to_fling = {}
   local cards = {one = {affliction = "", card = ""}, two = {affliction = "", card = ""}}
   
   if not snd.waiting.queue then -- all instakill conditions(deform/vivi) or other add ons should go here as elseif.
   
    if snd.used.shield then
  		string = "touch hammer "..snd.target
    -- vivi/deform checks would prolly go here
    
    elseif snd.aff_count_all() &gt; 10 then
      string = "starlight "..snd.target
    
  	else -- No special attacks, time to run through our aff list defined above and see what we want to give most.
  		for i in pairs(snd.giving) do
  			if not snd.checkAff(snd.giving[i]) then
          if snd.giving[i] == "aeon" then
            if snd.balance.aeon then
              table.insert(raw_affs_to_fling, snd.giving[i])
            end
  				elseif not table.contains(raw_affs_to_fling, snd.giving[i]) then
  					table.insert(raw_affs_to_fling, snd.giving[i]) -- insert into a raw aff list that they don't have, based on priority chosen above
  				end
  			end
  		end
      
      for k, v in ipairs(raw_affs_to_fling) do -- run through the raw affs
        if cards.one.affliction == "" then -- fill in card one, could start with card two if you want to work around dodge CD
          if snd.cardshapes.oneiromancer[v].card == "diamond" then
            if not snd.adder_attached then-- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.oneiromancer[v].card
            end
          else
            cards.one.affliction = v
            cards.one.card = snd.cardshapes.oneiromancer[v].card
          end
        elseif cards.one.card ~= snd.cardshapes.oneiromancer[v].card and cards.two.affliction == "" then -- if card types are different and haven't already set card two
          if snd.cardshapes.oneiromancer[v].card == "diamond" then
            if not snd.adder_attached then -- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.oneiromancer[v].card
            end
          else
            cards.two.affliction = v
            cards.two.card = snd.cardshapes.oneiromancer[v].card
          end
        end
      end

      -- If the card is an adder venom affliction, convert the affliction to the venom.
      if cards.one.card == "diamond" then cards.one.affliction = snd.effects[cards.one.affliction] end
      if cards.two.card == "diamond" then cards.two.affliction = snd.effects[cards.two.affliction] end
      
      if snd.need_leech_aura then
  	    string = "unspool "..snd.target
      end
      
      if snd.adder_ready then
        string = string..snd.sep.."activate diamond "..snd.target
      end
      
      -- Syntax should be the same unless you have arti deck/regular deck, change next line as necessary
      -- Similarly, if you're using config auto_outc, feel free to remove outcping paper
  		string = string..snd.sep.."outc sheet as "..cards.one.card..snd.sep.."outc sheet as "..cards.two.card
      string = string..snd.sep.."unfurl "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
  
    	if snd.toggles.affcalling and not snd.target_gone then
    	 call = "wt Afflicting "..snd.target..": "..cards.one.affliction..", "..cards.two.affliction..snd.sep
       string = call..string
    	end
  	end
  
  
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Oneiromancer" then

  snd.giving = {"left_leg_broken", "right_leg_broken","left_arm_broken", "right_arm_broken",}
  
  snd.starting_attack()
  
  function snd.attack_function()
    local string = ""
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer "..snd.target
      elseif snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken", "leeched_aura"}, 5) then
        string = "vanquish "..snd.target
      elseif not snd.checksomeAffs(snd.giving, 4) then
        for v in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[v])  then
            string = "misfortune "..snd.target.." "..snd.giving[v]:gsub("_", " "):gsub("broken", "")
            break
          end
        end
      else
        string = "starlight "..snd.target
      end
      
      if snd.need_leech_aura then
        string = "unspool "..snd.target..snd.sep..string
      end 

      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
  
    end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limb$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Vivi 2.0</name>
									<script>if snd.class == "Oneiromancer" then



  snd.giving = {"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken",}
  
  snd.starting_attack()
  
  function snd.attack_function()
  
   local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
    local string = ""
    if not snd.waiting.queue then
  if hp &lt;= 40 and snd.balance.crystal then
    string = "touch crystal"
  elseif hp &lt;= 75 then
   string = "unfurl flower at me"
   elseif snd.aff_tally() &gt; 3 and snd.balance.fool then
    string = "unfurl fire at me"
    elseif snd.used.shield then
        string = "touch hammer "..snd.target
      elseif snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken", "leeched_aura"}, 5) then
        string = "vanquish "..snd.target
      elseif not snd.checksomeAffs(snd.giving, 4) then
        for v in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[v])  then
            string = "misfortune "..snd.target.." "..snd.giving[v]:gsub("_", " "):gsub("broken", "")
            break
          end
        end
      elseif snd.aff_count_all() &gt; 10 then
      string = "disjunct "..snd.target    
      else
        string = "chill "..snd.target
      end
      
      if snd.need_leech_aura then
        string = "unspool "..snd.target..snd.sep..string
      end 

      if snd.balance.chimera then
          string = "order quetzal croon"..snd.sep..string
      end

      if snd.balance.envelop and snd.balance.soulmaster and string.find(string, "anorexia") then
        string = "order blob envelop"..snd.sep..string..snd.sep.."order "..snd.target.." apply restoration to arms"
      end

    if not snd.loyalsattacking then
        string = "order loyals kill "..snd.target..snd.sep..string
       end
      

      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
  
    end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^vivi$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Shadow</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Archivist</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local bioessence = tonumber(gmcp.Char.Vitals.bio) 
 local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
 local biostring = "" 

      if bioessence &gt; 1 then
      	biostring = "bio stimulant"..snd.sep
      end


 if not snd.waiting.queue then
  if snd.used.shield then
   	string = "incite fork "..snd.target
	elseif theytumbling then
		string = "elicit return "..snd.target.." 3"
	elseif hp &lt;= 70 and bioessence &gt; 1 then
		if snd.defenses.def_ethereal.state ~= "deffed" then
			string = "bio ethereal"
		end
	elseif snd.my_incite == "nil" then
		string = "incite hex "..snd.target..snd.sep
	else
		string = "geo impress star"..snd.sep.."incite crux "..snd.target..snd.sep
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic group affs</name>
									<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
			local touse = {}
      local string = "" 
      local biostring = "" 
      local call = "" 
      local bioessence = tonumber(gmcp.Char.Vitals.bio) 
      local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end
      if bioessence &gt; 1 then
      	biostring = "bio stimulant"..snd.sep
      end
				
			snd.giving = {
			"laxity",
			"faintness",
			"berserking",
			"recklessness",
			"masochism",
			"magnanimity",
			"epilepsy",
			"shyness",
			}
			
			snd.mutagen_giving = {
			"addiction",
			"allergies",
			"blisters",
			"lethargy",
			}
	
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			
      if snd.used.shield then
      	string = string.."incite fork "..snd.target
			elseif theytumbling then
				string = "elicit return "..snd.target.." 3"
			elseif hp &lt;= 70 and bioessence &gt; 1 then
				if snd.defenses.def_ethereal.state ~= "deffed" then
					string = "bio ethereal"
				end
			elseif physcount &gt;= 3 and mentcount &gt;= 3 and snd.my_mutagen then
        if snd.empowerready == true then
					string = "empower rafic"..snd.sep.."elicit unravel "..snd.target..snd.sep..biostring
        else
       	 string = "elicit unravel "..snd.target..snd.sep..biostring
				end
      elseif not snd.checkAff("mutagen") and bioessence &gt;1 then
				if snd.their_mutagen == false then
        	string = "bio infect "..snd.target.." with phys"..snd.sep
				end
      elseif not snd.checksomeAffs({"dementia", "paranoia", "hallucinations"}, 2) and not snd.balance.madness then
          if snd.empowerready then
            string = "empower jhako"..snd.sep.."geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep
					else
						string = "geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep
					end
			elseif snd.health_percent &lt;= 75 then
				if not snd.my_impress == "star" then
					string = "geo impress star"..snd.sep
				end
				string = string.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
      else
				if not snd.my_impress == "hex" then 
					string = "geo impress hex"..snd.sep	
				end
				string = string.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
      end

      if snd.toggles.affcalling and not snd.target_gone then
          string = call..string
					call = "wt Afflicting "..snd.target..": "..string
      end

      if string ~= snd.last_attack and not snd.waiting.queue then
          snd.last_attack = string
          snd.attack(snd.last_attack)
          snd.waiting.queue = true
          tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
 
    end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Sorta 1v1 Build</name>
									<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
			local touse = {}
      local string = "" 
      local biostring = ""
      local constring = ""
      local call = "" 
      local bioessence = tonumber(gmcp.Char.Vitals.bio) 
      local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end
      if bioessence &gt; 1 then
      	biostring = "bio stimulant"..snd.sep
      end
				
			snd.giving = {
				"dizziness",
        "faintness",
        "epilepsy",
        "shyness",
        "laxity",
        "lovers_effect",
        "peace",
        "magnanimity",
        "merciful",
        "masochism",
        "berserking",
        "recklessness",
			}
			
			snd.mutagen_giving = {
			"addiction",
			"allergies",
			"blisters",
			"lethargy",
			}
			
		--addiction = "phys",
		--allergies = "one",
		--blisters = "phys4",
		--lethargy = "phys3",
	
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			
      cecho("\n&lt;red&gt;"..physcount.." "..mentcount)
      
      if snd.used.shield then
      	string = string.."geo impress hex"..snd.sep.."incite fork "..snd.target
			elseif physcount &gt; 2 and mentcount &gt; 2 and snd.my_mutagen then
        if snd.empowerready then
					string = "empower rafic"..snd.sep.."elicit unravel "..snd.target..snd.sep
        else
       		string = "elicit unravel "..snd.target..snd.sep
				end
      elseif not snd.my_mutagen and bioessence &gt; 0 then
				string = "bio infect "..snd.target.." with phys"..snd.sep
			elseif physcount &gt;= 2 and mentcount &gt; 2 and snd.my_mutagen then
        if not (snd.checkAff("paresis") or snd.checkAff("paralysis")) and snd.toggles.torc then
          string = "mind paralyse "..snd.target..snd.sep..biostring..biostring
				elseif not snd.checkAff("addiction") and bioessence &gt; 0 then
					string = "empower jhako"..snd.sep.."geo impress swirl"..snd.sep.."bio flare "..snd.target..snd.sep..biostring..biostring
				end
      elseif not snd.checksomeAffs({"dementia", "paranoia", "hallucinations"}, 1) and not snd.balance.madness then
        if snd.empowerready then
          string = "empower jhako"..snd.sep.."geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep
				else
					string = "geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep
				end
			elseif not snd.checkAff("patterns") and snd.checksomeAffs({"lemniscate","matrix"}, 1) then
				string = "empower rafic"..snd.sep.."geo pattern "..snd.target..snd.sep		
			elseif (mentcount == 2 or mentcount == 7) and not snd.checkAff("vomiting") and not snd.balance.madness then 
				string = "empower jhako" ..snd.sep.. "geo impress bloom" ..snd.sep.. "elicit madness " ..snd.target.. "" ..snd.sep
			elseif (mentcount == 4 or mentcount == 9) and not snd.checkAff("vomiting") then 
				if not snd.conjoin then
					string = "empower jhako"..snd.sep.."geo impress bloom" ..snd.sep.."geo conjoin"..snd.sep.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
				else
					string = "empower jhako"..snd.sep.."geo impress bloom" ..snd.sep.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
				end
			elseif mentcount &gt; 6 and physcount == 1 and not snd.checkAff("addiction") and bioessence &gt; 0 and not snd.growth then
				string = "empower jhako"..snd.sep.."geo impress bloom" ..snd.sep.."bio growth " ..snd.target.. "" ..snd.sep
			elseif mentcount &gt; 5 and physcount &lt; 2 and not snd.my_incite == "Hex"  then
				string = "empower jhako"..snd.sep.."geo impress star" ..snd.sep.. "incite hex " ..snd.target.. "" ..snd.sep
			elseif snd.checksomeAffs({"faintness", "dizziness"}, 2) or snd.checksomeAffs({"shyness", "laxity"}, 1) and not snd.checkAff("lemniscate") then
				string = "empower ef'tig"..snd.sep.."geo impress hex" ..snd.sep.. "incite lemniscate " ..snd.target.. "" ..snd.sep
			elseif snd.checkAff("lemniscate") and not snd.checkAff("matrix") then
				string = "empower jhako"..snd.sep.."geo impress hex" ..snd.sep.. "geo matrix " ..snd.target.. "" ..snd.sep
			elseif snd.checksomeAffs({"dizziness", "faintness", "epilepsy", "shyness"}, 4) and not snd.squareseal then
				string = "geo impress hex"..snd.sep.."geo sealing square " ..snd.target.. "" ..snd.sep
				snd.squareseal = true
 			elseif snd.checksomeAffs({"laxity", "lovers_effect", "peace", "magnanimity"}, 4) and not snd.triangleseal then
				string = "geo impress hex"..snd.sep.."geo sealing triangle " ..snd.target.. "" ..snd.sep
				snd.triangleseal = true
 			elseif snd.checksomeAffs({"merciful", "masochism", "berserking", "recklessness"}, 4) and not snd.circleseal then
				string = "geo impress hex"..snd.sep.."geo sealing circle " ..snd.target.. "" ..snd.sep
				snd.circleseal = true
			else
				if not snd.conjoin then
					string = "geo conjoin"..snd.sep.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
				else
					string = "geo impress hex"..snd.sep.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
				end

			end

      if snd.toggles.affcalling and not snd.target_gone then
          string = call..string
					call = "wt Afflicting "..snd.target..": "..string
      end

      if string ~= snd.last_attack and not snd.waiting.queue then
          snd.last_attack = string
          snd.attack(snd.last_attack)
          snd.waiting.queue = true
          tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
 
    end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^kll$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Carnifex</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Carnifex" then
  snd.send("quickwield both greatmaul")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Carnifex" then
snd.send("quickwield both bardiche")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield limbs</name>
									<script>if snd.class == "Carnifex" then
snd.send("quickwield both warhammer")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wlb$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Savagery</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>impale</name>
									<script>if snd.class == "Carnifex" then
if matches[2] == "" then
 snd.attack("pole skewer "..snd.target)
else
 snd.attack("pole skewer "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^imp(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>disembowel</name>
									<script>if snd.class == "Carnifex" then
 snd.attack("pole wrench")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^db$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Deathlore</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>rez</name>
									<script>if snd.class == "Carnifex" then
snd.toggles.attacking = false
snd.send("qeb soul call "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>venoms only</name>
									<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"clumsiness",
"asthma",
"slickness",
"stupidity",
"anorexia",
"allergies",
--"weariness",
--"haemophilia",
--"sensitivity",
--"vomiting",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
--display(snd.target_has)
  local string = ""
  local left = "none"
  local right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epteth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.have_raloth then
    string = "pole hook "..sndtarget
  elseif snd.used.rebounding and snd.used.shield then
   string = "pole raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
   string = "pole spinslash "..snd.target.." "..left.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^vn$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>affs</name>
									<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"asthma",
"clumsiness",
"slickness",
"stupidity",
"anorexia",
"dizziness",
--"weariness",
--"sensitivity",
--"haemophilia",
--"vomiting",
--"allergies",
--"recklessness",
--"voyria",
}
snd.hound_queue = {
"mark",
"dizziness",
"berserking",
"weariness",
"impairment",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  local string = ""
  local left = "none"
  local right = "none"

  for i in pairs(snd.giving) do
   if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.used.rebounding and snd.used.shield then
   string = "pole raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
	 if snd.checkAff("fallen") and snd.target_locked() then
	  if table.contains(snd.target_has, "crushed_chest") then
		 string = "hammer pulverize "..snd.target
		else
	   string = "hammer crush "..snd.target.." chest"
		end
	 else
    string = "pole spinslash "..snd.target.." "..left.." "..right
	  if snd.toggles.affcalling and not snd.target_gone then
	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	  end
	 end
	end
	if snd.soul &lt;= 80 and not table.contains(snd.target_has, "soul_disease") then
	 string = string..snd.sep.."soul disease "..snd.target
	elseif snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif #snd.target_has &gt;= 12 and snd.balance.soulpoison then
	 string = string..snd.sep.."soul poison "..snd.target
	elseif snd.soul &lt;= 75 and snd.balance.implant and not table.contains(snd.target_has, "soul_implant") then
	 if snd.target_locked() then
	  string = string..snd.sep.."soul implant "..snd.target.." aconite slike"
	 end
	end
	string = x..string..snd.sep.."hammer throw "..snd.target
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  if snd.used.rebounding or snd.used.shield then
   string = "hammer raze "..snd.target
  elseif snd.proned() then
   if table.contains(snd.target_has, "crushed_chest") then
	  string = "hammer pulverize "..snd.target
	 else
	  string = "hammer crush "..snd.target.." chest"
	 end
  else
   string = "pole spinslash "..snd.target.." epseth epseth"
  end
	if snd.soul &lt;= 90 then
	 string = string..snd.sep.."soul distort "..snd.target
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lgs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>magic</name>
									<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"asthma",
"weariness",
"slickness",
"stupidity",
"anorexia",
"dizziness",
--"clumsiness",
--"sensitivity",
--"haemophilia",
--"vomiting",
--"allergies",
--"recklessness",
--"voyria",
}
snd.hound_queue = {
"stupidity",
"weariness",
"confusion",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  left = "none"
  right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) and snd.giving[i] ~= snd.implant then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.used.rebounding and snd.used.shield then
   string = "pole raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
	 if snd.proned() then
	  if table.contains(snd.target_has, "crushed_chest") then
		 string = "hammer pulverize "..snd.target
		else
	   string = "hammer crush "..snd.target.." chest"
		end
	 else
    string = "pole spinslash "..snd.target.." "..left.." "..right
	  if snd.toggles.affcalling and not snd.target_gone then
	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	  end
	 end
	end
	if snd.soul &lt;= 80 and not table.contains(snd.target_has, "soul_disease") then
	 string = string..snd.sep.."soul disease "..snd.target
	elseif snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif #snd.target_has &gt;= 12 and snd.balance.soulpoison then
	 string = string..snd.sep.."soul poison "..snd.target
	elseif snd.soul &lt;= 75 and snd.balance.implant and not table.contains(snd.target_has, "soul_implant") then
	 if snd.target_locked() and table.contains(snd.target_has, "stupidity") then
	  string = string..snd.sep.."soul implant "..snd.target.." kalmia gecko"
	 end
	elseif snd.soul &lt;= 20 then
	 string = string..snd.sep.."soul sacrifice "..snd.target
	end
	string = x..string
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Carnifex" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.have_raloth then
    string = "pole hook "..sndtarget
  elseif snd.used.shield then
		string = "soul erode "..snd.target
  
	elseif theyran then
		string = "hammer throw "..snd.target
	
	else
   	string = "hammer doublebash "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can pulverize now!
  if table.contains(snd.target_has, "crushed_chest") and snd.proned() then
   string = "hammer pulverize "..snd.target
	-- or if we should set up pulverize...
	elseif snd.proned() and snd.resto_limb ~= "none" then
	 string = "hammer crush "..snd.target.." chest"
  else -- can't pulverize, needs logic
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 -- are the legs prepped?
	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
		 string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."hammer doublebash "..snd.target
	 else -- target not prone, legs not prepped
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- don't do anything!
			 -- if it's not a leg about to break, go for it
		  elseif right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	  if left == "nothing" then -- we only found one limb to hit
	   left = right -- double up!
	  end
	  -- end limb picking logic
	  -- on to attacking logic!
	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
     string = "hammer raze "..snd.target -- raze has static balance cost
	  else
	   string = "hammer doublebash "..snd.target.." "..left.." "..right
		 if snd.soul &lt;= 80 and not table.contains(snd.target_has, "glasslimb") then
		  string = string..snd.sep.."soul frailty "..snd.target
		 end
    end
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can pulverize now!
  if table.contains(snd.target_has, "crushed_chest") and snd.proned() then
   string = "hammer pulverize "..snd.target
	-- or if they're prone and staying that way
	elseif snd.proned() and ((snd.limb_dmg["left leg"] &gt;= 33.33 and snd.limb_dmg["right leg"] &gt;= 33.33) or snd.limb_dmg["left leg"] &gt;= 66.66 or snd.limb_dmg["right leg"] &gt;= 66.66) then
	 -- are they distorted?
	 if table.contains(snd.target_has, "distortion") and snd.soul &lt;= 70 then
	  string = "hammer crush "..snd.target.." chest"
	 -- do we need to raze?
	 elseif snd.used.shield or snd.used.rebounding then
	  string = "hammer raze "..snd.target
	 -- can they parry?
	 else
	  string = "hammer crush "..snd.target.." chest"
	 end
	elseif snd.proned() then -- at least they're prone
	 if (snd.used.shield or snd.used.rebounding) and not table.contains(snd.target_has, "distortion") then -- bleh!
	  string = "hammer raze "..snd.target
	 else -- make sure they stay down
	  if table.contains(snd.target_has, "frozen") or table.contains(snd.target_has, "distortion") then
		 string = "hammer doublebash "..snd.target.." left leg right leg"
	  elseif snd.parried_limb == "left leg" then
		 string = "hammer doublebash "..snd.target.."right leg right leg"
		elseif snd.parried_limb == "right leg" then
		 string = "hammer doublebash "..snd.target.."left leg left leg"
		else
	   string = "hammer doublebash "..snd.target.." left leg right leg"
		end
	 end
	-- did they apply resto?
	--elseif not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
	-- string = "target nothing with left"..snd.sep.."target nothing with right"..snd.sep.."pole spinslash "..snd.target.." epseth epseth"
  else -- can't pulverize, needs logic
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 -- are the legs prepped?
	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
    string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."hammer doublebash "..snd.target
	 else -- target not prone, legs not prepped
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  if right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	  if left == "nothing" then -- we only found one limb to hit
	   left = right -- double up!
	  end
	  -- end limb picking logic
	  -- on to attacking logic!
	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
     string = "hammer raze "..snd.target -- raze has static balance cost
	  else
	   string = "hammer doublebash "..snd.target.." "..left.." "..right
    end
	 end
	end
	if snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif snd.soul &lt;= 90 then
	 string = string..snd.sep.."soul distort "..snd.target
  elseif snd.soul &lt;= 80 and not table.contains(snd.target_has, "glasslimb") then
   string = string..snd.sep.."soul frailty "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Indorani</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Damage</name>
									<script>if snd.class == "Indorani" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "touch hammer "..snd.target
  else
   	string = "flick bonedagger "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Affliction</name>
									<script>if snd.class == "Indorani" then
snd.giving_sun = {
"paresis",
"asthma",
"sensitivity",
"clumsiness",
"vomiting",
"lethargy",
}
snd.giving_moon = {
		"impatience",
		"stupidity",
		"confusion",
		"recklessness",	
		"anorexia",
		"epilepsy",
}
snd.starting_attack()

function snd.attack_function()
 
 local string = ""
 local sun = "none"
 local moon = "none"
 
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "touch hammer "..snd.target
	elseif snd.need_leech_aura then
		string = "leech "..snd.target
	else
	  if snd.balance.sun then
   		for i in pairs(snd.giving_sun) do
	  		if not snd.checkAff(snd.giving_sun[i]) and sun == "none" then
	   			sun = snd.giving_sun[i]
	  		end
	 		end
		end
		if snd.balance.moon then
			for i in pairs(snd.giving_moon) do
	  		if not snd.checkAff(snd.giving_moon[i]) and moon == "none" then
	   			moon = snd.giving_moon[i]
	  		end
	 		end
		end
		if hasSkill("Imprint") then
			if sun ~= "none" and moon ~= "none" then
				string = string.."outc blank as sun"..snd.sep.."outc blank as moon"..snd.sep.."fling sun "..sun.." and moon "..moon..snd.target..snd.sep
 			end
		else
			if hasSkill("Sun") then
				string = string.."outc sun"..snd.sep.."fling sun "..sun..snd.target..snd.sep
			end
  	end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Different Affliction / Adder</name>
									<script>if snd.class == "Indorani" then

  snd.giving = {
  "paresis",
  "impatience",
  "clumsiness",
  "weariness",
  "asthma",
  "aeon",
  "stupidity",
  "slickness",
  "anorexia",
  "epilepsy",
  "sensitivity",
  "vomiting",
  "lethargy",
  "confusion",
  "recklessness",	
}
  
  snd.starting_attack()
  
  function snd.attack_function() 
   local string = ""
   local raw_affs_to_fling = {}
   local cards = {one = {affliction = "", card = ""}, two = {affliction = "", card = ""}}
   
   if not snd.waiting.queue then -- all instakill conditions(deform/vivi) or other add ons should go here as elseif.
   
    if snd.used.shield then
  		string = "touch hammer "..snd.target
    -- vivi/deform checks would prolly go here
      
  	else -- No special attacks, time to run through our aff list defined above and see what we want to give most.
  		for i in pairs(snd.giving) do
  			if not snd.checkAff(snd.giving[i]) then
  				if not table.contains(raw_affs_to_fling, snd.giving[i]) then
  					table.insert(raw_affs_to_fling, snd.giving[i]) -- insert into a raw aff list that they don't have, based on priority chosen above
  				end
  			end
  		end
     
      for k, v in ipairs(raw_affs_to_fling) do -- run through the raw affs
        if cards.one.affliction == "" then -- fill in card one, could start with card two if you want to work around dodge CD
          if snd.indorani_cards[v].card == "adder" then
            if not snd.adder_attached then-- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.indorani_cards[v].card
            end
          else
            cards.one.affliction = v
            cards.one.card = snd.indorani_cards[v].card
          end
        elseif cards.one.card ~= snd.indorani_cards[v].card and cards.two.card == "" then -- if the card types are different and we haven't already set card two
          if snd.indorani_cards[v].card == "adder" then
            if not snd.adder_attached then -- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.indorani_cards[v].card
            end
          else
            cards.one.affliction = v
            cards.one.card = snd.indorani_cards[v].card
          end
        end
      end
      
      -- If the card is an adder venom affliction, convert the affliction to the venom.
      if cards.one.card == "adder" then cards.one.affliction = snd.effects[cards.one.affliction] end
      if cards.two.card == "adder" then cards.two.affliction = snd.effects[cards.two.affliction] end
      
      if snd.need_leech_aura then
  	    string = "leech "..snd.target
      end
      
      if snd.adder_ready then
        string = string..snd.sep.."activate adder "..snd.target
      end
      
      -- Syntax should be the same unless you have arti deck/regular deck, change next line as necessary
  		string = string..snd.sep.."outc blank as "..cards.one.card..snd.sep.."outc blank as "..cards.two.card..snd.sep.."fling "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
  
  	end
  
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff2$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>LImbs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs/Vivi</name>
									<script>if snd.class == "Indorani" then
  snd.starting_attack()
  function snd.attack_function()
    local string = ""

    if not snd.waiting.queue then
      if snd.used.shield then
          string = "touch hammer "..snd.target
      elseif snd.target_has_aura and snd.need_leech_aura then
          string = "leech "..snd.target
      elseif snd.checksomeAffs({"right_leg_broken", "left_leg_broken", "right_arm_broken", "left_arm_broken"}, 4) then
        string = "vivisect "..snd.target
      else
        for aff in ipairs({"right_leg_broken", "left_leg_broken", "right_arm_broken", "left_arm_broken"}) do
          if not snd.checkAff(aff) then
            string = "shrivel "..snd.target..aff:gsub("_broken", "")
            break
          end
        end
      end 
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
    end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Teradrim</name>
							<script>--If checking for sand in room use the following 

-- table.contains(gmcp.Room.Info.details, "sand")</script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Teradrim" then
snd.starting_attack()
function snd.attack_function()
 local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm) -- not used but useful for building
 local string = ""
 if not snd.waiting.queue then
 		if snd.target_impaled then
        string = "earth stonevice"
     elseif snd.used.shield or snd.used.rebounding and sandstorm &gt;= 5 then
        string = "sand slice "..snd.target.." storm"
    elseif snd.used.shield or snd.used.rebounding then
        string = "earth stoneblast "..snd.target
     elseif theytumbling then
        string = "earth impale "..snd.target
    elseif snd.balance.momentum then
       string = "prepare earthenwill"..snd.sep.."earth momentum"..snd.sep.."earth batter "..snd.target
    else 
       string = "prepare earthenwill"..snd.sep.."earth batter "..snd.target
  	end
		
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Mode</name>
									<script>if snd.class == "Teradrim" then
snd.starting_attack()
function snd.attack_function()
 local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm) -- not used but useful for building
 local string = ""
 if not snd.waiting.queue then
 
      if snd.target_impaled then
        string = "earth stonevice"
      elseif snd.used.shield or snd.used.rebounding and sandstorm &gt;=5 then
        string = "sand slice "..snd.target.." storm"
    	elseif snd.used.shield or snd.used.rebounding then
        string = "earth stoneblast "..snd.target
     	elseif theytumbling then
        string = "earth impale "..snd.target
    	elseif not snd.checkAff("sandrot") and sandstorm &gt;=5 then
        string = "sand curse "..snd.target.. " storm"
      elseif not snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken"},1) then
        string = "sand scourge "..snd.target
   	 	elseif snd.balance.momentum then
       string = "prepare earthenwill"..snd.sep.."earth momentum"..snd.sep.."earth batter "..snd.target
    	else 
       string = "prepare earthenwill"..snd.sep.."earth batter "..snd.target
  		end
			
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limbs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs Mode</name>
									<script>if snd.class == "Teradrim" then -- Note that this is intended for groups, not 1v1
  snd.starting_attack()
  function snd.attack_function()
    local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm) -- not used but useful for building
    local string = ""
    if not snd.waiting.queue then
 		   if snd.used.shield or snd.used.rebounding and sandstorm &gt;= 5 then
         string = "sand slice "..snd.target.." storm"
       elseif snd.used.shield or snd.used.rebounding then
         string = "earth stoneblast "..snd.target
       elseif theytumbling then
         string = "earth impale "..snd.target
       elseif snd.proned() then
         string = "earth pulp "..snd.target
       elseif not snd.lev_gone then
         string = "earth overhand "..snd.target
       elseif not snd.proned() and snd.lev_gone then
         string = "earth shockwave "..snd.target      
    	 elseif not snd.checkAff("sandrot") and sandstorm &gt;=5 then
         string = "sand curse "..snd.target.. " storm"
       elseif not snd.checkAff("sandrot") then
         string = "sand curse "..snd.target
       elseif not snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken"},1) then
         string = "sand scourge "..snd.target
       elseif snd.balance.momentum then
         string = "prepare earthenwill"..snd.sep.."earth momentum"..snd.sep.."earth batter "..snd.target
       else 
         string = "prepare earthenwill"..snd.sep.."earth batter "..snd.target
  	   end
		
       if string ~= snd.last_attack and not snd.waiting.queue then
         snd.last_attack = string
         snd.attack(snd.last_attack)
         snd.waiting.queue = true
         tempTimer(snd.delay(), [[snd.waiting.queue = false]])
       end
    end
  end
  
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Ehtias Tests</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>New aliasaff+hammer</name>
									<script>if snd.class == "Teradrim" then
snd.starting_attack()
function snd.attack_function()
 local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm) -- not used but useful for building
 local string = ""
 if not snd.waiting.queue then
   local hammer = "none"
	 for limb in ipairs(limbs) do
   if snd.limb_bruising[limbs[limb]] &gt;= 3 then
    hammer = limbs[limb]
   end
  end
  if hammer ~= "none" and not snd.used.shield then -- if hammer is go
   string = "earth hammer "..snd.target
  	elseif snd.target_impaled then
        string = "earth stonevice"
		 elseif snd.used.shield or snd.used.rebounding and sandstorm &gt;=5 then
        string = "prepare earthenwill"..snd.sep.."sand slice "..snd.target.." storm"
    elseif snd.used.shield or snd.used.rebounding then
        string = "earth stoneblast "..snd.target
     elseif theytumbling == true then
        string = "earth impale "..snd.target
    elseif not snd.checkAff("sandrot") and sandstorm &gt;=5 then
        string = "prepare earthenwill"..snd.sep.."sand curse "..snd.target.. " storm"
		elseif not snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken"},1) then
        string = "prepare earthenwill"..snd.sep.."sand scourge "..snd.target
    elseif snd.balance.momentum == true then
       string ="prepare earthenwill"..snd.sep.."earth momentum"..snd.sep.."earth batter "..snd.target
		else 
       string = "prepare earthenwill"..snd.sep.."earth batter "..snd.targettarget
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^hammeraff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>New affing</name>
									<script>if snd.class == "Teradrim" then
snd.starting_attack()
function snd.attack_function()
 local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm) -- not used but useful for building
 local string = ""
 if not snd.waiting.queue then
      if snd.target_impaled then
        string = "earth stonevice"
		 elseif snd.used.shield or snd.used.rebounding and sandstorm &gt;=5 then
        string = "order golem kill "..snd.target..snd.sep.."prepare earthenwill"..snd.sep.."sand slice "..snd.target.." storm"..snd.sep.."sand curse "..snd.target
    elseif snd.used.shield or snd.used.rebounding then
        string = "earth stoneblast "..snd.target
     elseif theytumbling == true then
        string = "earth impale "..snd.target
    elseif not snd.checkAff("sandrot") and sandstorm &gt;=5 then
        string = "order golem kill "..snd.target.."prepare earthenwill"..snd.sep.."sand curse "..snd.target.. " storm"..snd.sep.."sand scourge "..snd.target
		elseif not snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken"},1) and sandstorm &gt;=5 then
        string = "order golem kill "..snd.target.."prepare earthenwill"..snd.sep.."sand scourge "..snd.target.." storm"..snd.sep.."sand scourge "..snd.target
		elseif not snd.checkAff("sandrot") then
					 string = "order golem kill "..snd.target.."prepare earthenwill"..snd.sep.."sand curse "..snd.target
		elseif not snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken"},1) then
        string = "order golem kill "..snd.target.."prepare earthenwill"..snd.sep.."sand scourge "..snd.target
    elseif snd.balance.momentum == true then
       string ="order golem kill "..snd.target.."prepare earthenwill"..snd.sep.."earth momentum"..snd.sep.."earth gutsmash "..snd.target
		else 
       string = "order golem kill "..snd.target.."prepare earthenwill"..snd.sep.."earth gutsmash "..snd.targettarget
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff2$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>GroupTera</name>
									<script>if snd.class == "Teradrim" then
snd.starting_attack()
function snd.attack_function()
 local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm) -- not used but useful for building
 local string = ""
 if not snd.waiting.queue then
      if snd.target_impaled then
        string = "earth stonevice"
		 elseif snd.used.shield or snd.used.rebounding and not snd.checkAff("sandrot") and sandstorm &gt;=5 then
        string = "order golem kill "..snd.target..snd.sep.." prepare earthenwill"..snd.sep.." sand slice "..snd.target.." storm"..snd.sep.."sand curse "..snd.target
						 elseif snd.used.shield or snd.used.rebounding and sandstorm &gt;=5 then
        string = "order golem kill "..snd.target..snd.sep.."prepare earthenwill"..snd.sep.."sand slice "..snd.target.." storm"..snd.sep.."sand scourge "..snd.target
    elseif snd.used.shield or snd.used.rebounding then
        string = "earth stoneblast "..snd.target
     elseif theytumbling == true then
        string = "earth impale "..snd.target
    elseif not snd.checkAff("sandrot") and sandstorm &gt;=5 then
        string = "order golem kill "..snd.target..snd.sep.."prepare earthenwill"..snd.sep.."sand curse "..snd.target.. " storm"..snd.sep.."sand scourge "..snd.target
		elseif not snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken"},1) and sandstorm &gt;=5 then
        string = "order golem kill "..snd.target..snd.sep.."prepare earthenwill"..snd.sep.."sand scourge "..snd.target.." storm"..snd.sep.."sand scourge "..snd.target
		elseif not snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken"},1) then
        string = "order golem kill "..snd.target..snd.sep.."prepare earthenwill"..snd.sep.."sand scourge "..snd.target
    elseif snd.balance.momentum == true then
       string ="order golem kill "..snd.target..snd.sep.."prepare earthenwill"..snd.sep.."earth momentum"..snd.sep.."earth batter "..snd.target
		else 
       string = "order golem kill "..snd.target..snd.sep.."prepare earthenwill"..snd.sep.."earth batter "..snd.targettarget
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^grpaff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs Tera</name>
									<script>if snd.class == "Teradrim" then
snd.starting_attack()
function snd.attack_function()
 local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm)
 if not snd.waiting.queue then
  local string = ""
  -- list what limbs to hit
 local	limbs = {"left leg", "right leg","torso", "left arm","head", "right arm"}
  local	bruised = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	-- check if we can hammer now!
  local hammer = "none"
	local call = ""
	local how_many_moderate = 0
for k,v in pairs(snd.limb_bruising) do
    if v &gt;= 2 then
        how_many_moderate = how_many_moderate + 1
    end
end
  if how_many_moderate &gt;= 3 and not snd.used.shield then -- if hammer is go
   string = "earth hammer "..snd.target
  else -- can't hammer, needs logic
	 left = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   left = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   left = "right leg"
	  else
	   left = "right leg"
	  end

	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 11.06 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 11.06 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
		 string = "earth furor "..snd.target.." left leg right leg"
	 else -- target not prone, legs not prepped
	  for limb in pairs(limbs) do
            -- ignore last parried, last hit, and any limbs being resto'd
            if
              limbs[limb] ~= snd.parried_limb and
              limbs[limb] ~= snd.last_hit_limb and
			  			snd.limb_bruising[limbs[limb]] &lt;= 1  and
              (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33)
            then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- don't do anything!
			 -- if it's not a leg about to break, go for it
		  elseif right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
			 -- if it's not a leg about to break, go for it
			  end
	  end
	 end
	  if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 -- end limb picking logic
	 -- on to attacking logic!
	  if snd.target_impaled then
        string = "earth stonevice"
   elseif snd.used.shield and snd.used.rebounding and sandstorm &gt;=4 then -- baddie is turtling
        string = "prepare earthenwill "..snd.sep.."sand slice "..snd.target.." storm"..snd.sep.."earth stoneblast "..snd.target
    elseif snd.used.shield or snd.used.rebounding and sandstorm&gt;= 4 and left=="torso" then  -- not double shielded but storm powered
        string = "prepare earthenwill "..snd.sep.."sand slice "..snd.target.." storm"..snd.sep.."earth gutsmash "..snd.target
				    elseif snd.used.shield or snd.used.rebounding and sandstorm&gt;= 4 and left=="head" then  -- not double shielded but storm powered
        string = "prepare earthenwill "..snd.sep.."sand slice "..snd.target.." storm"..snd.sep.."earth facesmash "..snd.target
				    elseif snd.used.shield or snd.used.rebounding and sandstorm&gt;= 4 then  -- not double shielded but storm powered
        string = "prepare earthenwill "..snd.sep.."sand slice "..snd.target.." storm"..snd.sep.."earth slam "..snd.target.." "..left
		elseif snd.used.shield or snd.used.rebounding and sandstorm&lt; 4 then  -- not enough storm
        string = "prepare earthenwill"..snd.sep.."earth stoneblast "..snd.target
				elseif theytumbling == true then
        string = "earth impale "..snd.target
		elseif sandstorm &gt;=5 then --2 mending breaks bruising logic with storm power
			if snd.proned() and not snd.checksomeAffs("collapsed_lung") then
					string ="sand scourge "..snd.target.." "..left.." storm"..snd.sep.."earth pulp "..snd.target
			elseif left=="torso" then
				 string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.."sand shred "..snd.target.." "..left.." storm"..snd.sep.."earth gutsmash "..snd.target			 
			elseif left=="head" then
				string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.."sand shred "..snd.target.." "..left.." storm"..snd.sep.."earth facesmash "..snd.target
			elseif not snd.checksomeAffs({"left_arm_bruised_moderate", "right_arm_bruised_moderate", "left_leg_bruised_moderate", "right_leg_bruised_moderate"},1) then   
					string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.." sand shred "..snd.target.." "..left.." storm"..snd.sep.."earth slam "..snd.target.." "..left
			
	end
elseif sandstorm &lt;5 then 
 	--if snd.proned() and not snd.checksomeAffs("collapsed_lung") then
			--string = "earth pulp "..snd.target
	if left=="torso" then			
			string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.." earth gutsmash "..snd.target
	elseif left=="head" then		
			string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.." earth facesmash "..snd.target
	elseif not snd.checksomeAffs({"left_arm_bruised_moderate", "right_arm_bruised_moderate", "left_leg_bruised_moderate", "right_leg_bruised_moderate"},1) then
			string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.."earth slam "..snd.target.." "..left
	end		
		else
	   		string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.."earth fracture "..snd.target.." "..left
		end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbstest$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>NewDamage</name>
									<script>if snd.class == "Teradrim" then
snd.starting_attack()
function snd.attack_function()
 local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm)
 local string = ""
 if not snd.waiting.queue then
 if snd.target_impaled then
        string = "earth stonevice"
     elseif snd.used.shield or snd.used.rebounding and sandstorm &gt;= 5 then
        string = "sand slice "..snd.target.." storm"
    elseif snd.used.shield or snd.used.rebounding then
        string = "earth stoneblast "..snd.target
     elseif theytumbling == true then
        string = "earth impale "..snd.target
    elseif snd.balance.momentum == true then
       string ="prepare earthenwill "..snd.sep.."order golem kill "..snd.target..snd.sep.."earth skullbash "..snd.target
		else 
       string ="prepare earthenwill "..snd.sep.."order golem kill "..snd.target..snd.sep.."earth skullbash "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^damage2$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>TeraFractureLimbs</name>
									<script>if snd.class == "Teradrim" then
snd.starting_attack()
function snd.attack_function()
 local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm)
 if not snd.waiting.queue then
  local string = ""
  -- list what limbs to hit
 local	limbs = {"left leg", "right leg","left arm","head","torso", "right arm"}
  local	bruised = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	-- check if we can hammer now!
  local hammer = "none"
	local call = ""
	local how_many_moderate = 0
for k,v in pairs(snd.limb_bruising) do
    if v &gt;= 2 then
        how_many_moderate = how_many_moderate + 1
    end
end
  if how_many_moderate &gt;= 3 and not snd.used.shield then -- if hammer is go
   string = "earth hammer "..snd.target
  else -- can't hammer, needs logic
	 left = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   left = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   left = "right leg"
	  else
	   left = "right leg"
	  end

	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 11.06 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 11.06 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
		 string = "earth furor "..snd.target.." left leg right leg"
	 else -- target not prone, legs not prepped
	  for limb in pairs(limbs) do
            -- ignore last parried, last hit, and any limbs being resto'd
            if
              limbs[limb] ~= snd.parried_limb and
              limbs[limb] ~= snd.last_hit_limb and
			  			snd.limb_bruising[limbs[limb]] &lt;= 1  and
              (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33)
            then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- don't do anything!
			 -- if it's not a leg about to break, go for it
		 elseif left == "nothing"then
	     left = limbs[limb]
		  end
			 -- if it's not a leg about to break, go for it
			  end
	  end
	 end
	
	 -- end limb picking logic
	 -- on to attacking logic!
	  if snd.target_impaled then
        string = "earth stonevice"
		elseif theytumbling == true then
        string = "earth impale "..snd.target
   elseif snd.used.shield and snd.used.rebounding and sandstorm &gt;=4 then -- baddie is turtling
        string = "prepare earthenwill "..snd.sep.."sand slice "..snd.target.." storm"..snd.sep.."earth stoneblast "..snd.target
    elseif snd.used.shield or snd.used.rebounding and sandstorm&gt;= 4 and left=="torso" then  -- not double shielded but storm powered
        string = "prepare earthenwill "..snd.sep.."sand slice "..snd.target.." storm"..snd.sep.."earth gutsmash "..snd.target
		elseif snd.used.shield or snd.used.rebounding and sandstorm&gt;= 4 and left=="head" then  -- not double shielded but storm powered
        string = "prepare earthenwill "..snd.sep.."sand slice "..snd.target.." storm"..snd.sep.."earth facesmash "..snd.target
		elseif snd.used.shield or snd.used.rebounding and sandstorm&gt;= 4 and not snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken"},1) then  -- not double shielded but storm powered
        string = "prepare earthenwill "..snd.sep.."sand slice "..snd.target.." storm"..snd.sep.."earth fracture "..snd.target.." "..left
		elseif snd.used.shield or snd.used.rebounding and sandstorm&gt;= 4 then
				string = "prepare earthenwill "..snd.sep.."sand slice "..snd.target.." storm"..snd.sep.."earth slam "..snd.target.." "..left
		elseif snd.used.shield or snd.used.rebounding and sandstorm&lt; 4 then  -- not enough storm
        string = "prepare earthenwill"..snd.sep.."earth stoneblast "..snd.target
		elseif sandstorm &gt;=5 then --2 mending breaks bruising logic with storm power
			if snd.proned() and not snd.checksomeAffs("collapsed_lung") then
					 string ="sand scourge "..snd.target.." storm"..snd.sep.."earth pulp "..snd.target
			elseif left=="torso" then
					 string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.."sand scourge "..snd.target.." "..left.." storm"..snd.sep.."earth gutsmash "..snd.target			 
			elseif left=="head" then
					string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.."sand scourge "..snd.target.." "..left.." storm"..snd.sep.."earth facesmash "..snd.target
			elseif not snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken"},3) then
					string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.." sand scourge "..snd.target.." storm"..snd.sep.."earth fracture "..snd.target.." "..left
			else
					string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.." sand scourge "..snd.target.." storm"..snd.sep.."earth slam "..snd.target.." "..left
			
	end
elseif sandstorm &lt;5 then 
 	--if snd.proned() and not snd.checksomeAffs("collapsed_lung") then
			--string = "earth pulp "..snd.target
	if left=="torso" then			
			string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.." earth gutsmash "..snd.target
	elseif left=="head" then		
			string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.." earth facesmash "..snd.target
	elseif not snd.checksomeAffs({"left_arm_broken", "right_arm_broken", "left_leg_broken", "right_leg_broken"},3) then
			string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.."earth fracture "..snd.target.." "..left
	end		
		else
	   		string = "prepare earthenwill "..snd.sep.."order golem kill "..snd.target.." "..snd.sep.."earth slam "..snd.target.." "..left
		end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fraclimbs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Sciomancer</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Afflictions</name>
									<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."cast hew "..snd.target
  elseif not snd.checkAff("gloom") then
		if hasSkill("Fever") then
			if gmcp.Char.Vitals.shadowprice &lt; "2" then
				string = string.."shadowprice gloom "..snd.target..snd.sep.."cast fever "..snd.target
			else
				string = string.."cast gloom "..snd.target
			end
		else
			if gmcp.Char.Vitals.shadowprice &lt; "2" then
				string = string.."shadowprice gloom "..snd.target
			else
				string = string.."cast gloom "..snd.target
			end
		end
	elseif not snd.checksomeAffs({"clumsiness", "weariness", "lethargy", "paresis"}, 1) then
		if gmcp.Char.Vitals.shadowprice &lt; "2" then
			string = string.."shadowprice ruin "..snd.target
		else
			string = string.."cast ruin "..snd.target
		end
  elseif snd.checkAff("sight") and not snd.checkAff("voidtrapped") then
		string = string.."cast voidgaze " ..snd.target..snd.sep
	elseif not snd.checksomeAffs({"vomiting", "haemophilia"}, 1) and hasSkill("Fever") then
		string = string.."cast fever "..snd.target
  else
   	string = string.."cast scourge "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Sorta 1v1 Build</name>
									<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
 
 local shadestring = "order shadeling kill "..snd.target..snd.sep
 
 local shadowprice = tonumber(gmcp.Char.Vitals.shadowprice)
 
		local total_aff_count = 0
    for aff in pairs(snd.all_affs) do
        if table.contains(snd.target_has, snd.all_affs[aff]) then
            total_aff_count = total_aff_count + 1
        end
    end
 
 local scourgecount = 0 
   for aff in pairs(snd.scourge_affs) do
     if table.contains(snd.target_has, snd.scourge_affs[aff]) then
       scourgecount = scourgecount + 1
     end
   end

	if tonumber(snd.repay) &lt; 2 and hp &gt; 60 and shadowprice &gt; 0 then
		string = string.."cast repay" ..snd.sep
	end 

 
	if snd.used.shield then
		if shadowprice &lt; "2" then
   		string = string.."shadowprice hew "..snd.target..snd.sep
		elseif snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string.."shadowprice hew "..snd.target..snd.sep
		else
			string = string.."cast hew "..snd.target
		end
	
	elseif not snd.checkAff("imbued") and gmcp.Char.Vitals.singularity ~= "" then
		string = string..shadestring.."gravity imbue "..snd.target..snd.sep
	elseif snd.gravity == 0 and gmcp.Char.Vitals.singularity ~= "" and not snd.checkAff("impede") then
		string = string..shadestring.."gravity grip "..snd.target..snd.sep
	elseif snd.gravity &gt;= 0 and gmcp.Char.Vitals.singularity ~= "" and not snd.checkAff("impede") then
		string = string..shadestring.."gravity impede "..snd.target..snd.sep
	elseif not snd.checkAff("shaderot_benign") then
		if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string.."shadowprice rot " ..snd.target..snd.sep
		elseif shadowprice &lt; "3" then
			string = string.."shadowprice rot " ..snd.target..snd.sep
		else
			string = string.."cast rot " ..snd.target..snd.sep
		end
	elseif not snd.checkAff("sight") and not snd.checkAff("voidgaze") then
		if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string.."shadowprice voidgaze " ..snd.target..snd.sep
		elseif shadowprice &lt; "3" then
			string = string.."shadowprice voidgaze " ..snd.target..snd.sep
		end
	elseif snd.balance.shadowsphere and not snd.checkAff("shadowsphere") and total_aff_count &gt; 4 then
		if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string.."shadowprice sphere " ..snd.target..snd.sep
		elseif shadowprice &lt; "3" then
			string = string.."shadowprice sphere " ..snd.target..snd.sep
		else
			string = string.."cast sphere " ..snd.target..snd.sep
		end
	elseif not snd.checkAff("gloom") then
		if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string..shadestring.."shadowprice gloom "..snd.target
		elseif shadowprice &lt; "3" then
			string = string..shadestring.."shadowprice gloom "..snd.target	
		else
			string = string..shadestring.."cast gloom "..snd.target
		end
	elseif scourgecount &lt; 5 and snd.checkAff("shadowsphere") then
		if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string.."shadowprice scourge " ..snd.target..snd.sep
		elseif shadowprice &lt; "3" then
			string = string.."shadowprice scourge " ..snd.target..snd.sep
		else
			string = string.."cast scourge " ..snd.target..snd.sep
		end
	elseif snd.checksomeAffs({"haemophilia", "nyctophobia"}, 2) then
		if not snd.checksomeAffs({"dementia", "exhausted"}, 1) then
			if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
				string = string.."shadowprice falter " ..snd.target..snd.sep
			elseif shadowprice &lt; "3" then
				string = string.."shadowprice falter " ..snd.target..snd.sep
			else
				string = string.."cast falter " ..snd.target..snd.sep
			end
		else
			string = string.."cast falter " ..snd.target..snd.sep
		end
	elseif not snd.checksomeAffs({"vomiting", "haemophilia"}, 1) then
		string = string.."cast fever "..snd.target
	elseif not snd.checksomeAffs({"clumsiness", "paresis"}, 1) then
		string = string.."cast ruin "..snd.target
	elseif snd.checkAff("sight") and not snd.checkAff("voidtrapped") then
		string = string.."cast voidgaze " ..snd.target..snd.sep
	else
		string = string.."cast ruin " ..snd.target..snd.sep
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^kll$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic Damage</name>
									<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."cast hew "..snd.target
  elseif snd.checkAff("writhe_transfix") then
		if not snd.checkAff("gloom") then
			if hasSkill("Fever") then
				if gmcp.Char.Vitals.shadowprice &lt; "2" then
					string = string.."shadowprice gloom "..snd.target..snd.sep.."cast fever "..snd.target
				else
					string = string.."cast gloom "..snd.target
				end
			else
				if gmcp.Char.Vitals.shadowprice &lt; "2" then
					string = string.."shadowprice gloom "..snd.target
				else
					string = string.."cast gloom "..snd.target
				end
			end
		end
  else
   		if hasSkill("Transfix") then
				string = string.."cast transfix "..snd.target
			else
				string = string.."cast rot "..snd.target
			end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs</name>
									<script>if snd.class == "Sciomancer" then
  snd.starting_attack()
  function snd.attack_function()
    local string = ""
    if not snd.waiting.queue then
      limbs = {"left leg", "right leg", "left arm", "right arm"}
      for limb in pairs(limbs) do
      -- ignore last hit and any limbs being resto'd
        if
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == "nothing" then
            targ = limbs[limb]
          end
        end
      end

	if snd.used.shield then
   string = string.."cast hew "..snd.target
	elseif gmcp.Char.Vitals.singularity == "" then
		if hasSkill("Genesis") then
			string = string.."gravity genesis tether"
		else
			string = string.."gravity singularity"
		end
  elseif snd.gravity &lt; 5 then
		string = string.."gravity grip "..snd.target
  else
		if not snd.checkAff(" broken"..targ) then
			string = string.."gravity erupt "..snd.target..targ
		else
			if hasSkill("Transfix") then
				string = string.."cast transfix "..snd.target
			else
				string = string.."cast chill "..snd.target
			end
		end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
							<Alias isActive="yes" isFolder="no">
								<name>Sing Summon</name>
								<script>snd.send("qeb gravity genesis tether weight absorb attunement pulsar")</script>
								<command></command>
								<packageName></packageName>
								<regex>^sing1$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Gravity Cannon</name>
								<script>snd.send("qeb gravity cannon "..snd.target)</script>
								<command></command>
								<packageName></packageName>
								<regex>^gc$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Praenomen</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()
  local string = ""
  local corpus = "none"
  local touse = {}

	snd.giving_whisper = {
			"impatience",
			"loneliness",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",
	}
	
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
	
	if not snd.waiting.queue then
	 	if theytumbling then
			string = "breathe "..snd.target..snd.sep.."qeb feed "..snd.target
		elseif theyran then
			string = "lure "..snd.target
  	--elseif not snd.checkAff("writhe_transfix") then
 		--	string = "mesmerize "..snd.target
		else
			string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
    end
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   	snd.last_attack = string
   	snd.attack(snd.last_attack)
   	snd.waiting.queue = true
   	tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end

end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Mes feast</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()

  local string = ""
  local corpus = "none"
  local touse = {}
	
	
	snd.giving_whisper = {
			"impatience",
			"loneliness",
			"berserking",
			"stupidity",
			"confusion",
			"recklessness",
			"masochism",
			"anorexia",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"paranoia",
	}

	
  if not snd.waiting.queue then
	 	if theytumbling then
			string = "breathe "..snd.target..snd.sep.."qeb feed "..snd.target
		elseif theyran then
			string = "lure "..snd.target
  	elseif not snd.checkAff("writhe_transfix") then
 			string = "mesmerize "..snd.target
		elseif not snd.checkAff("feast") then
			string = "blood feast "..snd.target
		else
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
		
			string = "feed "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
		end
	end
 
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^feast$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Afflictions</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local corpus = "none"
 local touse = {}
 
 
 snd.giving_whisper = {
			"impatience",
			"loneliness",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",

	}
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
	
	
  if not snd.waiting.queue then
	 	if theytumbling then
			string = "breathe "..snd.target..snd.sep.."qeb feed "..snd.target
		elseif theyran then
			string = "lure "..snd.target
		else
			string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
		end
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Annhilate and Mesmerize</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()
  local string = "contemplate "..snd.target..snd.sep
  local corpus = "none"
  local touse = {}
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end

	snd.giving_whisper = {
			"impatience",
			"loneliness",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",
	}


	
  if not snd.waiting.queue then
	 	if theytumbling then
			string = string .. "breathe "..snd.target..snd.sep.."qeb feed "..snd.target
		elseif theyran then
			string = string .. "lure "..snd.target
		elseif snd.mana_percent &lt; 35 and not snd.used.shield then
 			string = string .. "annihilate "..snd.target
  	elseif snd.proned() then
	 		string = string .. "siphon "..snd.target
  	elseif not snd.checkAff("writhe_transfix") then
 			string = string .. "mesmerize "..snd.target
		else
			
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
		
			string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
    end
	end

 
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mez$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Test</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local corpus = "none"
 	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
local whis = {}
 
 snd.giving_whisper = {
            "impatience",
            "loneliness",
            "peace",
            "stupidity",
            "confusion",
            "anorexia",
            "berserking",
            "recklessness",
            "agoraphobia",
            "vertigo",
            "indifference",
            "masochism",
            "paranoia",
 
    }
snd.giving = {
        "paresis",
        "clumsiness",
        "weariness",
}
      for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end

            for j in pairs(snd.giving_whisper) do
                if not snd.checkAff(snd.giving_whisper[j]) then
                    if not table.contains(whis, snd.giving_whisper[j]) then
                        table.insert(whis, snd.giving_whisper[j])
                    end
                end
            end
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end
   
  if not snd.waiting.queue then
  
        if theyran then
            string = "contemplate " ..snd.target..snd.sep.."lure "..snd.target
        elseif theytumbling then
            string = "contemplate " ..snd.target..snd.sep.."breathe "..snd.target..snd.sep.."qeb feed "..snd.target
        elseif snd.mana_percent &lt; 35 and not snd.used.shield then
 			      string = "contemplate " ..snd.target..snd.sep.."annihilate "..snd.target
        elseif not snd.runeused then
            string = "contemplate " ..snd.target..snd.sep.."blood rune " ..snd.target
        elseif mentcount &gt;= 3 and not snd.checkAff("blood_curse") then
            string = "contemplate " ..snd.target..snd.sep.."blood curse " ..snd.target
        elseif snd.mana_percent &lt; 41 and not snd.balance.seize then
            string = "contemplate " ..snd.target..snd.sep.."activate rune"
        elseif mentcount &gt;= 8 and snd.balance.seize  then
            string = "contemplate " ..snd.target..snd.sep.."blood seize " ..snd.target
        elseif snd.used.rebounding then
            string = "contemplate " ..snd.target..snd.sep.."claw " ..snd.target..snd.sep.. "whisper "..whis[1].." "..whis[2].." "..snd.target
        elseif snd.used.shield then
            string = "contemplate "..snd.target..snd.sep.."frenzy "..snd.target..snd.sep.."whisper "..whis[1].." "..whis[2].." "..snd.target
        else
            string = "contemplate "..snd.target..snd.sep.."gash "..snd.target.." "..tohit[1]..snd.sep.."whisper "..whis[1].." "..whis[2].." "..snd.target
        end
    end
   
   
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(d), [[snd.waiting.queue = false]])
  end
 end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^test$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Praenomen" then
  snd.send("quickwield both scythe")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Revenant</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Revenant" then
  snd.send("quickwield both longsword shield")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield harrow (zeal)</name>
									<script>if snd.class == "Revenant" then
  snd.send("quickwield both warhammer")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^whar$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Revenant" then
	snd.send("quickwield both shortsword shortsword.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield limbs</name>
									<script>if snd.class == "Revenant" then
  snd.send("quickwield both mace mace.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wlb$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield longswords</name>
									<script>if snd.class == "Revenant" then
  snd.send("quickwield both longsword longsword.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wls$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield damage</name>
									<script>if snd.class == "Revenant" then
  snd.send("quickwield both bastard")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wdmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Riving</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>strike (rive)</name>
									<script>if snd.class == "Revenant" then
  snd.attack("rivebash "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^stk$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>duality (duplicity)</name>
									<script>if snd.class == "Revenant" then
  snd.attack("dpl "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dsk$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>impale (transpierce)</name>
									<script>if snd.class == "Revenant" then
  if matches[2] == "" then
    snd.attack("transpierce "..snd.target)
  else
    snd.attack("transpierce "..matches[2])
  end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^imp (.+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>disembowel (extirpate)</name>
									<script>if snd.class == "Revenant" then
  if matches[2] == "" then
    snd.attack("extirpate "..snd.target)
  else
    snd.attack("extirpate "..matches[2])
  end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^db(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>cleave (eclipse)</name>
									<script>if snd.class == "Revenant" then
  if matches[2] == "" then
    snd.attack("eclipse "..snd.target)
  else
    snd.attack("eclipse "..matches[2])
  end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^clv(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>lunge (jumpcut)</name>
									<script>if snd.class == "Revenant" then
  if matches[2] == "" then
    snd.attack("jumpcut "..snd.target)
  else
    snd.attack("jumpcut "..matches[2])
  end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ln(.*)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Manifestation</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>deliver (retrieve)</name>
									<script>if snd.class == "Revenant" then
  snd.send("qeb get monolith"..snd.sep.."phantasm retrieve "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^del (.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>resurrection (reanimate)</name>
									<script>if snd.class == "Revenant" then
  snd.toggles.attacking = false
  snd.send("qeb phantasm reanimate "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>pilgrimage (sidestep)</name>
									<script>if snd.class == "Templar" then
  snd.toggles.attacking = false
  snd.toggles.bashing = false
  snd.toggles.fasthunt = false
  if snd.have_aff("paresis") then
    snd.send("firstaid elevate paresis")
  end
  snd.send("unjuxtapose")
  snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."phantasm sidestep")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^pilg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>latency (tether)</name>
									<script>if snd.class == "Revenant" then
  snd.toggles.attacking = false
  snd.toggles.bashing = false
  snd.toggles.fasthunt = false
  if snd.have_aff("paresis") then
    snd.send("firstaid elevate paresis")
  end
  snd.send("unjuxtapose")
  snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."phantasm sidestep phantasm")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ltn$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Chirography</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>straight retri (cull)</name>
									<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "duskosa"
		local atdum = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			atdum = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
			"mortalterror",
			"crippled",
			"paresis",
			"mental disruption",
			"physical disruption",
			"crippled body",
			--deathblow!
			}
		-- first and foremost, check if we can retri!
		
		if snd.checksomeAffs({"paralysis", "crippled body", "mental disruption","physical disruption" },4) then
			string = "cull "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.actuate_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield or snd.used.rebounding then
				string = "deceive "..snd.target
			elseif snd.used.rebounding then
				string = "dpl "..snd.target.." wasi "..tohit[1]
				snd.wasi = true
				call = "wt Afflicting "..snd.target..": wasi, "..tohit[1]..snd.sep
			elseif atdum then
				string = "blade scribe right atdum "..snd.target.." "..tohit[1]..snd.sep.."dpl "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dpl "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^raw$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>retribution stack (cull)</name>
									<script>--Meat and potatoes for 1v1, this is a classic vlock followed by
--retri finisher. Good for whales.
if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "duskosa"
		-- let's determine how many affs we are away from locking
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local atdum = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			atdum = true -- yesssssss
		end
		-- we're going to use a different affliction stack if the target is locked
		if snd.target_locked() then
			snd.giving = {
			"left_leg_broken",
			"right_leg_broken",
			"crippled",
			"mental disruption",
			"physical disruption",
			"crippled body",
			"sensitivity",
			"clumsiness",
			"weariness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"mortalterror",
			"asthma",
			"clumsiness",
			"paresis",
			"crippled",
			"slickness",
			"stupidity",
			"anorexia",
			"mental disruption",
			"physical disruption",
			"crippled body",
			--deathblow!
			"weariness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled body", "mental disruption","physical disruption" },4) then
			string = "cull "..snd.target
		else -- if not...
			-- see if we can lock this round, in any of three possible ways
			if atdum and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.actuate_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield or snd.used.rebounding then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dpl "..snd.target.." wasi "..tohit[1]
				snd.wasi = true
				call = "wt Afflicting "..snd.target..": wasi, "..tohit[1]..snd.sep
			elseif atdum and not snd.target_locked() and #missing &gt; 2 then
				string = "blade scribe right atdum "..snd.target.." "..tohit[1]..snd.sep.."dpl "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dpl "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ret$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>magic</name>
									<script>--Meat and potatoes for 1v1, this is a classic vlock followed by
--retri finisher. Good for whales.
if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "duskosa"
		-- let's determine how many affs we are away from locking
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local atdum = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			atdum = true -- yesssssss
		end
		-- we're going to use a different affliction stack if the target is locked
		if snd.target_locked() then
			snd.giving = {
			"left_leg_broken",
			"right_leg_broken",
			"crippled",
			"mental disruption",
			"physical disruption",
			"crippled body",
			"sensitivity",
			"weariness",
			"clumsiness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"mortalterror",
			"asthma",
			"weariness",
			"paresis",
			"crippled",
			"slickness",
			"stupidity",
			"anorexia",
			"mental disruption",
			"physical disruption",
			"crippled body",
			--deathblow!
			"clumsiness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled body", "mental disruption","physical disruption" },4) then
			string = "cull "..snd.target
		else -- if not...
			-- see if we can lock this round, in any of three possible ways
			if atdum and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.actuate_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield  or snd.used.rebounding then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dpl "..snd.target.." wasi "..tohit[1]
				snd.wasi = true
				call = "wt Afflicting "..snd.target..": wasi, "..tohit[1]..snd.sep
			elseif atdum and not snd.target_locked() and #missing &gt; 2 then
				string = "blade scribe right atdum "..snd.target.." "..tohit[1]..snd.sep.."dpl "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dpl "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "wilave"
		local telvi = false
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 100 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 100 then
			telvi = true
		end
		-- set the affs we want to use
			snd.giving = {
			"right_leg_broken",
			"left_leg_broken",
			"right_arm_broken",
			"left_arm_broken",
			"stupidity",
			"mental disruption",
			"anorexia",
			"slickness",
			"asthma",
			"paresis",
			"crippled",
			"physical disruption",
			}
			
		-- pick affs from the list above
		for i in pairs(snd.giving) do
			-- make sure not to double up paresis and paralysis
			if not snd.checkAff(snd.giving[i]) then
				-- and don't add an aff we've already got in the list!
				if not table.contains(touse, snd.giving[i]) then
					table.insert(touse, snd.giving[i])
				end
			end
		end
			
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled body", "mental disruption","physical disruption" },4) then
			string = "cull "..snd.target
		elseif snd.target_impaled then
			string = "extirpate "..snd.target
		elseif snd.proned() and not snd.checkAff("writhe_impaled") then
			string = "lurk "..snd.target..snd.sep.."transpierce "..snd.target
			if telvi then
				string = "blade scribe left telvi "..snd.target..snd.sep.."blade scribe right telvi "..snd.target..snd.sep..string
			end
		else 
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.actuate_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield  or snd.used.rebounding then
				string = "deceive "..snd.target
			elseif snd.used.rebounding then
				string = "dpl "..snd.target.." wasi "..tohit[1]
				snd.wasi = true
				call = "wt Afflicting "..snd.target..": wasi, "..tohit[1]..snd.sep
			elseif telvi then
				string = "blade scribe telvi "..snd.target..snd.sep.."blade scribe left telvi "..snd.target..snd.sep.."dpl "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			else
				string = "dpl "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lgs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "duskosa"
		local atdum = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			atdum = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
      "sight",
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "extirpate "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and not snd.checkAff("writhe_thighlock") and not snd.checkAff("writhe_armpitlock") and not snd.checkAff("writhe_necklock") then
			if atdum then
				string = "blade scribe left lawid "..snd.target..snd.sep.."blade scribe right lawid "..snd.target..snd.sep.."lurk "..snd.target..snd.sep.."transpierce "..snd.target
			else
				string = "lurk "..snd.target..snd.sep.."transpierce "..snd.target
			end
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.actuate_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield  or snd.used.rebounding then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dpl "..snd.target.." wasi "..tohit[1]
				snd.wasi = true
				call = "wt Afflicting "..snd.target..": wasi, "..tohit[1]..snd.sep
			elseif atdum then
				string = "blade scribe right atdum "..snd.target.." "..tohit[1]..snd.sep.."dpl "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dpl "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>impale mode</name>
									<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local physcount = 0
		for aff in pairs(snd.physical_affs) do
			if table.contains(snd.target_has, snd.physical_affs[aff]) then
				physcount = physcount + 1
			end
		end
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "duskosa"
		local atdum = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			atdum = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      "left_leg_broken",
      "right_leg_broken",
      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "extirpate "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and physcount &gt;= 4 and atdum then
			string = "blade scribe left lawid "..snd.target..snd.sep.."blade scribe right lawid "..snd.target..snd.sep.."lurk "..snd.target..snd.sep.."transpierce "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.actuate_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield  or snd.used.rebounding then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dpl "..snd.target.." wasi "..tohit[1]
				snd.wasi = true
				call = "wt Afflicting "..snd.target..": wasi, "..tohit[1]..snd.sep
			elseif atdum then
				string = "blade scribe right atdum "..snd.target.." "..tohit[1]..snd.sep.."dpl "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dpl "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^im$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>newbie mode</name>
									<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "duskosa"
		-- set the affs we want to use
			snd.giving = {
      "sight",
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "extirpate "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and not snd.checkAff("writhe_thighlock") and not snd.checkAff("writhe_armpitlock") and not snd.checkAff("writhe_necklock") then
			string = "transpierce "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.actuate_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield  or snd.used.rebounding then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "deceive "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dpl "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^newb$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = ""
		if snd.used.rebounding or snd.used.shield then
			string = "raze "..snd.target
		elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 then
			string = "blade scribe left lawid "..snd.target
    end
			string = string..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."harrow "..snd.target
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Impale</name>
									<script>-- Hello. This route requires a warhammer, as well as you setting up what type of weapon you're using.
-- There is a variable in the script 'PvP variables', which you need to change to be whatever weapon you use.
-- We need this so we can switch to a warhammer/switch back at will without having to put in lots of
-- weird checks to see what kind of weapon you use. Templar has many!

if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "duskosa"
		local atdum = false -- can we use vorpal? set to false until we check
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			atdum = true -- yesssssss
		end

    local wield = ""
		if not string.find(gmcp.Char.Vitals.wield_left, snd.templar_weapon_one) then 
      wield = "quickwield left "..snd.templar_weapon_one
      if not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
        wield = wield..snd.sep.."quickwield right "..snd.templar_weapon_two..snd.sep 
      end
    elseif not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
      wield = "quickwield right "..snd.templar_weapon_two..snd.sep 
    end

    
		-- set the affs we want to use
     snd.giving = {
      "sight",
		  "paresis",
	    "sensitivity",
			"asthma",
      "vomiting",
      "allergies",
      "slickness",
			"left_leg_broken",
			"right_leg_broken",
			"anorexia",
      "stupidity",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "extirpate "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") then
			string = "lurk "..snd.target..snd.sep.."transpierce "..snd.target
		elseif snd.checkAff("writhe_impaled") and snd.checkAff("sensitivity") then
				string = "lurk "..snd.target..snd.sep.."relax grip"..snd.sep.."quickwield both warhammer"..snd.sep.."grip"..snd.sep.."fell "..snd.target.." duskosa duskosa"		
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			if string.find(string, "impale") or string.find(string, "fell") and atdum then -- Do we have vorpal and are we finishing someone off?
					string = "blade scribe left lawid "..snd.target..snd.sep.."blade scribe right lawid "..snd.target..snd.sep..string
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.actuate_attacks[touse[aff]])
        end
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield  or snd.used.rebounding then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "deceive "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dpl "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		
		--check if we need to re-wield our speed weps
		if wield ~= "" then string = wield..snd.sep..string end
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gimp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Bleed/Hemm</name>
									<script>if snd.class == "Revenant" then
  snd.starting_attack()

  function snd.attack_function()
    local string = ""-- we'll load this with our attack string
    local call = ""  -- and this with our affliction call
    
                     -- next, the afflictions we want to give
    local touse = {}
    local tohit = {}
    local extraaff = "hemorrhage" -- and in case we don't find enough of them
    
    local left_crescent = ""
    if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 85 then left_crescent = "blade scribe left lawid "..snd.target end
    
    local right_crescent = "" 
    if tonumber(gmcp.Char.Vitals.charge_right) &gt;= 85 then right_crescent = "blade scribe right lawid "..snd.target end

    
    if not snd.waiting.queue then
      
      snd.giving = {   -- set the affs we want to use
      "hearing", 
      "haemophilia", 
      "clumsiness",
      "sensitivity"}
       
      -- We really only care about the sensitivity/haemophilia
      -- If they have both, go straight into damage
      if snd.checksomeAffs({"haemophilia", "sensitivity"}, 2) then
        table.insert(touse, "hemorrhage")
        table.insert(touse, "hemorrhage")
        
      else
        -- If that condition isn't met, pick affs from the list above
        for i in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[i]) then
            -- Don't add an aff we've already got in the list!
            if not table.contains(touse, snd.giving[i]) then
              table.insert(touse, snd.giving[i])
            end
          end
        end
      end
      
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        if snd.effects[touse[aff]] then
				  table.insert(tohit, snd.effects[touse[aff]])
        else
          table.insert(tohit, snd.actuate_attacks[touse[aff]])
        end
			end
      
      -- if we didn't find enough stuff to hit with, stick in hemorrhage.
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end

      if (snd.used.shield and snd.used.rebounding) then -- Double barrier, try to break through both with rsk/blaze.
        string = "deceive " .. snd.target .. " wasi"
        
      elseif (snd.used.shield or snd.used.rebounding) then -- One layer of barrier, rsk w/venom.
        string = "deceive " .. snd.target .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[1]
        
      else -- Send 2 hits with venoms/empowerments
        string = "dpl " .. snd.target .. " " .. tohit[2] .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[2] .. ", " .. tohit[1]
        
        if left_crescent ~= "" and snd.checkAff("sensitivity") then string = left_crescent..snd.sep..string end
        if right_crescent ~= "" and snd.checkAff("sensitivity") then string = right_crescent..snd.sep..string end 
      end
      
    end
    
    -- prepend our affliction call, if we need one
    if snd.toggles.affcalling and not snd.target_gone then
      string = call .. snd.sep .. string
    end
    
    -- handle anti-spam and the actual attacking now
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bleed$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  -- list what limbs to hit
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can rupture now!
  local hemoclysm = "none"
	local atdum = false
	local call = ""
  for limb in ipairs(limbs) do
   if snd.limb_bruising[limbs[limb]] &gt;= 3 then
    rupture = limbs[limb]
   end
  end
  if hemoclysm ~= "none" and not snd.used.shield and not snd.used.rebounding then -- if rupture is go
   string = "lurk "..snd.target..snd.sep.."hemoclysm "..snd.target.." "..rupture
  else -- can't rupture, needs logic
   -- but can we vorpal tho!
   if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
    atdum = true
	 else
	  atdum = false
	 end
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 else -- target not prone
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- if we have vorpal and can use it with impunity
			 if atdum and not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
			  if right == "nothing" then
			   right = limbs[limb]
			  elseif left == "nothing" then
			   left = limbs[limb]
			  end
				-- otherwise leave the prepped leg alone!
		   end
			 -- if it's not a leg about to break, go for it
		  elseif right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 -- end limb picking logic
	 -- on to attacking logic!
	 if snd.used.shield and snd.used.rebounding then -- baddie is turtling
    string = "raze "..snd.target -- raze has static balance cost
	 elseif snd.used.shield or snd.used.rebounding then
    string = "target nothing with left"..snd.sep.."target "..right.." with right"..snd.sep.."deceive "..snd.target.." lura"
	 -- here's the tricky part, we're checking for optimal conditions
	 -- we need vorpal ready, a leg about to break, and resto poultice off balance
	 elseif atdum and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
	  if left == "left leg" then right = "right leg" end
	  if left == "right leg" then right = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."actuate right with adil"..snd.sep.."blade scribe right atdum "..snd.target..snd.sep.."dpl "..snd.target.." lura baludu"
	 -- we could also meet the same conditions, but on the other limb we picked
	 elseif atdum and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
	  if right == "left leg" then left = "right leg" end
	  if right == "right leg" then left = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."actuate right with adil"..snd.sep.."blade scribe right atdum "..snd.target..snd.sep.."dpl "..snd.target.." baludu lura"
	 else -- we can't do a Big Bad Break, run normal logic
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dpl "..snd.target.." lura lura"
   end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
--snd.send("circle "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>ice blast limbs</name>
									<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
  local left = "nothing"
  local right = "nothing"
	local atdum = false
	local hemoclysm = "none"
	if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
	 atdum = true
	else
	 atdum = false
	end
	if table.contains(snd.target_has, "frozen") then
	 if snd.limb_dmg["left leg"] &gt;= snd.limb_dmg["right leg"] then
	  left = "left leg"
		right = "left leg"
	 else
	  left = "right leg"
		right = "right leg"
	 end
	else
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb then
	   if right == "nothing" then
	    right = limbs[limb]
	   elseif left == "nothing" and limbs[limb] ~= right and limbs[limb] ~= snd.last_hit_limb then
	    left = limbs[limb]
		 end
	  end
	 end
	end
  for limb in ipairs(limbs) do
	 if snd.limb_bruising[limbs[limb]] &gt;= 3 then
	  rupture = limbs[limb]
	 end
  end
  if snd.used.shield and snd.used.rebounding then
   string = "raze "..snd.target
	elseif snd.used.shield then
	 string = "target nothing with left"..snd.sep.."target "..left.." with right"..snd.sep.."deceive "..snd.target.." lura"
  elseif hemoclysm ~= "none" then
	 string = "lurk "..snd.target..snd.sep.."hemoclysm "..snd.target.." "..rupture
	elseif snd.used.rebounding then
   string = "target nothing with left"..snd.sep.."target "..left.." with right"..snd.sep.."deceive "..snd.target.." lura"
	elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and not table.contains(snd.target_has, "frozen") then
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."blade scribe left telvi "..snd.target..snd.sep.."dpl "..snd.target.." lura lura"
	elseif tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 and not table.contains(snd.target_has, "frozen") then
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."blade scribe right telvi "..snd.target..snd.sep.."dpl "..snd.target.." lura lura"
	elseif atdum then
	 string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."actuate right with adil"..snd.sep.."blade scribe right atdum "..snd.target..snd.sep.."dpl "..snd.target.." lura lura"
	else
   string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dpl "..snd.target.." lura lura"
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
--snd.send("circle "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ib$</regex>
								</Alias>
							</AliasGroup>
							<Alias isActive="yes" isFolder="no">
								<name>charge</name>
								<script>if snd.class == "Revenant" then
  echo(gmcp.Char.Vitals.charge_right)
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^rc$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Earthcaller</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Earthcaller" then
  snd.send("quickwield both tower mace")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Earthcaller" then
snd.send("quickwield both buckler mace")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Subjugation</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>beckon</name>
									<script>if snd.class == "Earthcaller" then
if matches[2] == "" then
 snd.send("qeb osso lurch "..snd.target)
elseif matches[2] == "all" then
 snd.send("qeb osso lurch")
else
 snd.send("qeb osso lurch "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bk(.*)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Apocalyptia</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>force stop</name>
									<script>if snd.class == "Earthcaller" then
 snd.toggles.attacking = false
 if matches[2] == "" then
  snd.send("qeb dirge ordain "..snd.target.." stop")
 else
  snd.send("qeb dirge ordain "..matches[2].." stop")
 end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fs(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>resurrection</name>
									<script>if snd.class == "Earthcaller" then
snd.toggles.attacking = false
snd.send("qeb DIRGE IMPERISHABLE "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Earthcaller" then
snd.giving_shield = {
"sight",
"paresis",
"weariness",
"asthma",
}
snd.giving_spur = {
"impatience",
"sensitivity",
"stupidity",
"vertigo",
"self_pity",
"migraine",
}
snd.giving_subdue = {
"loneliness",
"hypochondria",
"stupidity",
"lethargy",
"dementia",
"recklessness",
"masochism",
"paranoia"
}
snd.starting_attack()
function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
 local shield = "none"
 local spur = "none"
 local subdue = "none"
 if snd.mana_percent &lt; 40 and not snd.used.shield then
  string = "osso fragment "..snd.target
 elseif snd.proned() then
  string = "shield deface "..snd.target
 elseif table.contains(snd.target_has, "sight") then
  string = "tectonic transfixion "..snd.target
 else
  if snd.balance.battle then
   for i in pairs(snd.giving_spur) do
	  if not snd.checkAff(snd.giving_spur[i]) and battle == "none" then
	   spur = snd.giving_spur[i]
	  end
	 end
  end
  if snd.used.shield then
   shield = "shield raze"
  else
   for i in pairs(snd.giving_shield) do
    if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
	   shield = snd.subjugation_attacks[snd.giving_shield[i]]
	  end
   end
  end
  if shield == "none" then
   shield = "shield strike"
  end
  if snd.used.rebounding and shield ~= "facesmash" then
   shield = "shield raze"
  end
  for i in pairs(snd.giving_subdue) do
   if not snd.checkAff(snd.giving_subdue[i]) and subdue == "none" and snd.giving_subdue[i] ~= battle then
	  subdue = snd.giving_subdue[i]
	 end
  end
  if spur ~= "none" then
   if snd.toggles.affcalling and not snd.target_gone then
	  string = "wt Spur "..snd.target..": "..battle..snd.sep
	 end
   string = string.."osso spur "..spur.." "..snd.target..snd.sep
  end
  string = string..shield.." "..snd.target..snd.sep
  if shield ~= "slam" and shield ~= "overwhelm" then
   if subdue == "none" then
    string = string.."subdue "..snd.target
   else
	  if snd.toggles.affcalling and not snd.target_gone then
	   string = string.."wt Subdue "..snd.target..": "..subdue..snd.sep
	  end
    string = string.."subdue "..snd.target.." "..subdue
	 end
  end
 end
 
 if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then 
 	string = string..snd.sep.."quickwield left tower"
 end

 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Affs - Used to lock someone in place</name>
									<script>if snd.class == "Earthcaller" then
  snd.giving_shield = {"sight", "paresis", "weariness", "confusion", "writhe_transfix", "asthma", "berserking"}
  snd.giving_spur = {"impatience", "stupidity", "sensitivity", "self_pity", "vertigo"}
  snd.giving_subdue = {"hypochondria", "stupidity", "recklessness", "lethargy", "masochism", "dementia", "paranoia", "anorexia",}
  snd.starting_attack()

  function snd.attack_function()
    local total_aff_count = snd.aff_count_all()
    local mental_aff_count = snd.aff_count_mental()
  
    local string = "contemplate " .. snd.target .. snd.sep
    if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then
      string = string .. "quickwield right crozier" .. snd.sep
    end
    if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then
      string = string .. "quickwield left buckler" .. snd.sep
    end
    local shield = "none"
    local spur = "none"
    local subdue = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "osso fragment " .. snd.target
    else
      --battle aff pick
      if snd.balance.battle then
        for i in pairs(snd.giving_spur) do
          if not snd.checkAff(snd.giving_spur[i]) and spur == "none" then
            spur = snd.giving_spur[i]
          end
        end
      end
      --If they have shield we can do nothing
      if snd.used.shield then
        shield = "shield raze"
        --If they are prone/psuedo prone and have 5 affs, smack them
      elseif total_aff_count &gt;= 5 and snd.proned() then
        shield = "shield deface " .. snd.target
        --We need to build up disrupt/affs.
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.subjugation_attacks[snd.giving_shield[i]]
          end
        end
        --If they have 2 mental affs and confusion is one of them, disrupt ASAP to lock them in place.
        if
          mental_aff_count &gt;= 2 and
          snd.checkAff("confusion") and
          not snd.checkAff("disrupted") and
          total_aff_count &lt; 7
        then
          shield = "shield crash"
        end
      end
      --Dazzle can hit through rebounding, check if they have confusion first and a few affs
      if snd.used.rebounding then
        if snd.checkAff("confusion") or total_aff_count &lt; 3 then
          shield = "shield raze"
        else
          shield = "dirge hysteria"
        end
      end
      --Chasten aff pick
      for i in pairs(snd.giving_subdue) do
        if
          not snd.checkAff(snd.giving_subdue[i]) and
          subdue == "none" and
          snd.giving_subdue[i] ~= battle
        then
          subdue = snd.giving_subdue[i]
        end
      end
      --Start building our attack - Spur first
      if spur ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt Spur " .. snd.target .. ": " ..spur.. snd.sep
        end
        string = string .. "osso spur " ..spur.. " " ..snd.target..snd.sep
      end
      --Add shield/evoke/perform attacks
      string = string .. shield .. " " .. snd.target .. snd.sep
      --Add Subdue choice
      if not shield:find("slam") or shield:find("transfix") or shield:find("dazzle") or shield:find("crash") then
        if subdue == "none" then
          string = string .. "chasten " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Subdue " .. snd.target .. ": " .. subdue .. snd.sep
          end
          string = string .. "subdue " .. snd.target .. " " .. subdue
        end
      end
    end
    --Are we gonna smack them with overwhelm? Let's make it hurt.
    if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then
      string = string..snd.sep.."quickwield left tower"
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^affaf$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mana drain</name>
									<script>if snd.class == "Earthcaller" then
  snd.giving_spur = {"stupidity", "vertigo", "self_pity", "migraine", "sensitivity", "impatience"}
  snd.giving_subdue =
    {
      "lethargy",
      "loneliness",
      "stupidity",
      "hypochondria",
      "dementia",
      "recklessness",
      "masochism",
      "paranoia",
    }
  snd.starting_attack()

  function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local spur = "none"
    local subdue = "none"
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "osso fragment " .. snd.target
    elseif snd.mana_percent &lt; 40 and snd.used.shield then
      for i in pairs(snd.giving_subdue) do
        if
          not snd.checkAff(snd.giving_subdue[i]) and
          subdue == "none" and
          snd.giving_subdue[i] ~= battle
        then
          subdue = snd.giving_subdue[i]
        end
      end
      string = "shield raze " .. snd.target .. snd.sep
      if snd.toggles.affcalling and not snd.target_gone then
        string = string .. "wt subdue " .. snd.target .. ": " .. subdue .. snd.sep
      end
      string = string .. "subdue " .. snd.target .. " " .. subdue
    else
      string = string.."osso bleach " .. snd.target
    end
		
    if snd.balance.battle then
      for i in pairs(snd.giving_spur) do
        if not snd.checkAff(snd.giving_spur[i]) and spur == "none" then
          spur = snd.giving_spur[i]
        end
      end
    end
    string = "osso spur " .. spur .. " " .. snd.target .. snd.sep .. string
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt spur " .. snd.target .. ": " .. spur .. snd.sep .. string
    end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mana$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Damage - Best used with an impale</name>
									<script>if snd.class == "Earthcaller" then
  snd.giving_shield = {"paresis", "weariness", "sight", "asthma"}
  snd.giving_spur = {"impatience", "sensitivity", "self_pity", "stupidity", "vertigo"}
  snd.giving_subdue =
    {
      "hypochondria",
      "loneliness",
      "recklessness",
      "stupidity",
      "lethargy",
      "masochism",
      "dementia",
      "paranoia",
      "anorexia",
    }
  snd.starting_attack()

  function snd.attack_function()
  local total_aff_count = snd.aff_count_all()
  local mental_aff_count = snd.aff_count_mental()
  
  local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local shield = "none"
    local spur = "none"
    local subdue = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "osso fragment " .. snd.target
      --They've hit our aff count limit, let's lock them down/kill them.
    elseif total_aff_count &gt;= 4 and snd.checkAff("sight") and not snd.used.shield then
      if not snd.checkAff("writhe_transfix") then
        string = "tectonic transfixion " .. snd.target
      else
        string = "shield deface " .. snd.target
        if snd.checkAff("hearing") and not snd.checkAff("sensitivity") then
          string = "osso spur " .. snd.target .. " sensitivity" .. snd.sep .. string
        end
      end
    else
      if snd.balance.battle then
        for i in pairs(snd.giving_spur) do
          if not snd.checkAff(snd.giving_spur[i]) and spur == "none" then
            spur = snd.giving_spur[i]
          end
        end
      end
      if snd.used.shield then
        shield = "shield raze"
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.subjugation_attacks[snd.giving_shield[i]]
          end
        end
      end
      if shield == "none" then
        shield = "shield strike"
      end
      if snd.used.rebounding and shield ~= "facesmash" then
        shield = "shield raze"
      end

      for i in pairs(snd.giving_subdue) do
        if
          not snd.checkAff(snd.giving_subdue[i]) and
          subdue == "none" and
          snd.giving_subdue[i] ~= battle
        then
          subdue = snd.giving_subdue[i]
        end
      end

      if spur ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt spur " .. snd.target .. ": " .. spur .. snd.sep
        end
        string = string .. "osso spur " .. spur .. " " .. snd.target .. snd.sep
      end

      string = string .. shield .. " " .. snd.target .. snd.sep

      if shield ~= "slam" then
        if subdue == "none" then
          string = string .. "chasten " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt subdue " .. snd.target .. ": " .. subdue .. snd.sep
          end
          string = string .. "chasten " .. snd.target .. " " .. chasten
        end
      end
    end

    if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then
      string = string..snd.sep.."quickwield left tower"
    end


    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^git$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Smite - Straight damage</name>
									<script>if snd.class == "Earthcaller" then
  snd.giving_spur = {"sensitivity", "stupidity", "vertigo", "self_pity", "migraine", "impatience"}
  snd.giving_subdue =
    {
      "dementia",
      "loneliness",
      "stupidity",
      "hypochondria",
      "recklessness",
      "masochism",
      "paranoia",
      "lethargy",
    }
  snd.starting_attack()

  function snd.attack_function()
  local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
  
  local spur = "none"
  local subdue = "none"
  local overwhelm = false
    
  if snd.balance.battle then
    for i in pairs(snd.giving_spur) do
      if not snd.checkAff(snd.giving_spur[i]) and spur == "none" then
        spur = snd.giving_spur[i]
      end
    end
  end
  
  for i in pairs(snd.giving_subdue) do
    if not snd.checkAff(snd.giving_subdue[i]) and subdue == "none" and
      snd.giving_subdue[i] ~= battle
    then
      subdue = snd.giving_subdue[i]
    end
  end  
  
  for aff in pairs(snd.entangleaffs) do
    if snd.checkAff(aff) then
      overwhelm = true
    end
  end
  
  if snd.balance.battle then
    string = string..snd.sep.."osso spur "..spur.." "..snd.target..snd.sep
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt spur " .. snd.target .. ": " .. spur .. snd.sep .. string
    end
  end

  if snd.mana_percent &lt; 40 and not snd.used.shield then
    string = "osso fragment " .. snd.target
  elseif snd.mana_percent &lt; 40 and snd.used.shield then
    string = "shield raze " .. snd.target .. snd.sep
  elseif overwhelm then
    string = "overwhelm "..snd.target..snd.sep
  else
    string = string.."quash " .. snd.target ..snd.sep
  end
  
  if snd.toggles.affcalling and not snd.target_gone then
    string = string .. "wt subdue " .. snd.target .. ": " .. subdue .. snd.sep
  end
  string = string .. " subdue " .. snd.target .. " " .. subdue
		
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Ylem</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>move on</name>
						<script>ylm.active = true
if ylm.next_zone == "none" then
 ylm.next_zone = "1680"
end
snd.moving_to = ylm.next_zone
send(" ")
if ylm.next_zone == "city" then
  ylm.active = false
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^goylem$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>move to next</name>
						<script>ylm.active = true
if ylm.next_zone == "none" then
  ylm.next_zone = "806"
end
ylm.next_zone = ylm.path["v" .. ylm.next_zone]
snd.moving_to = ylm.next_zone
send(" ")
if ylm.next_zone == "city" then
  ylm.active = false
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^goylem next$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>move on start</name>
						<script>ylm.active = true
ylm.next_zone = "1680"
snd.moving_to = ylm.next_zone
send(" ")
</script>
						<command></command>
						<packageName></packageName>
						<regex>^goylem start$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>stop ylem</name>
						<script>ylm.next_zone = "city"
snd.moving_to = ylm.next_zone
ylm.active = false
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^goylem stop$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Utilities</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>rockcrush</name>
						<script>snd.send("qeb rockcrush rock for ink")</script>
						<command></command>
						<packageName></packageName>
						<regex>^rc$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>harvest rock</name>
						<script>snd.send("qeb harvest rock")</script>
						<command></command>
						<packageName></packageName>
						<regex>^hr$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>priceall</name>
						<script>snd.shopitem = matches[2]
snd.shopprice = matches[3]
snd.shopshelf = matches[4]
snd.shopih = true
snd.send("ih "..snd.shopitem)</script>
						<command></command>
						<packageName></packageName>
						<regex>^priceall (\w+) (\d+) (\d+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>buy herbs</name>
						<script>pills = {
"waterbreathing",
"kawhepil",
"acuity",
"steroid",
"stimulant",
"coagulation",
"thanatonin",
"paste",
"somnium",
"ototoxin",
"decongestant",
"amaurosis",
"depressant",
"antipsychotic",
"panacea",
"euphoriant",
"anabiotic",
}
for pill in pairs(pills) do
 snd.send("buy "..matches[2].." "..pills[pill])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^bh (\d+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>OOC</name>
						<script>send("tell " .. matches[2] .. " (( " .. matches[3] .. " ))", false)</script>
						<command></command>
						<packageName></packageName>
						<regex>^ooc (\w+) (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Check stuff</name>
						<script>send("pull "..matches[2])
send("look in "..matches[2])
send("push "..matches[2])
send("turn "..matches[2])
send("enter "..matches[2])
send("read "..matches[2])
send("touch "..matches[2])
send("ponder "..matches[2])
send("probe "..matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^check (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>who groups</name>
						<script>snd.parse_who()</script>
						<command></command>
						<packageName></packageName>
						<regex>^who groups$</regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Sunder Shop Aliases</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Buying Fluids</name>
							<script>local fluid_types = {
  venoms = {
  "epteth",
  "gecko",
  "epseth",
  "prefarar",
  "delphinium",
  "digitalis",
  "curare",
  "darkshade",
  "hepafarin",
  "monkshood",
  "oculus",
  "selarnia",
  "kalmia",
  "xentio",
  "eurypteria",
  "aconite",
  "vernalius",
  "slike",
  "euphorbia",
  "larkspur",
  "oleander",
  "voyria",
  },
  
  elixirs = {
  "health",
  "mana",
  "immunity",
  "levitation",
  "antivenin",
  "frost",
  "speed",
  "vigor",
  },
  
  poultices = {
  "mending",
  "mass",
  "restoration",
  "caloric",
  "epidermal",
  },
}
for _, v in ipairs(fluid_types[matches[3]]) do
  currentamount = 0
  while currentamount &lt; tonumber(matches[2]) do
    snd.send("buy refill of " .. v .. " for fluidcache")
    currentamount = currentamount + 1
  end
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^fillcache (\d+) (elixirs|poultices|venoms)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Filling Elixirs!</name>
							<script>local elixirs = {
"health",
"mana",
"immunity",
"levitation",
"antivenin",
"frost",
"speed",
"vigor",
}
for elixir in pairs(elixirs) do
 snd.send("fc fill "..elixirs[elixir])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^fillvials$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Consuming Elixirs</name>
							<script>local elixirs = {
"health",
"mana",
"immunity",
"levitation",
"antivenin",
"frost",
"speed",
"vigor",
}
for elixir in pairs(elixirs) do
 snd.send("fc consume "..elixirs[elixir])
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^unfillvials$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Filling Poultices</name>
							<script>local poultices = {
"mending",
"mass",
"restoration",
"caloric",
"epidermal",
}
for poultice in pairs(poultices) do
 snd.send("fc fill "..poultices[poultice])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^fillbandages$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Consuming Poultices</name>
							<script>local poultices = {
"mending",
"mass",
"restoration",
"caloric",
"epidermal",
}
for poultice in pairs(poultices) do
 snd.send("fc consume "..poultices[poultice])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^unfillbandages$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>priceall</name>
							<script>snd.shopitem = matches[2]
snd.shopprice = matches[3]
snd.shopshelf = matches[4]
snd.shopih = true
snd.send("ih "..snd.shopitem)</script>
							<command></command>
							<packageName></packageName>
							<regex>^priceall (\w+) (\d+) (\d+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Buying pills</name>
							<script>pills = {
"waterbreathing",
"kawhepil",
"acuity",
"steroid",
"stimulant",
"coagulation",
"thanatonin",
"paste",
"somnium",
"ototoxin",
"decongestant",
"amaurosis",
"depressant",
"antipsychotic",
"panacea",
"euphoriant",
"anabiotic",
}
for pillname in pairs(pills) do
 snd.send("buy "..matches[2].." "..pills[pillname])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^buypills (\d+)$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Toxicology</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>sacs</name>
							<script>snd.send("harvest sac from "..matches[2]..snd.sep.."drop "..matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^sac (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>milking</name>
							<script>snd.send("qeb milk "..matches[2].." into fluidcache")</script>
							<command></command>
							<packageName></packageName>
							<regex>^milk (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>cask</name>
							<script>snd.send("qeb milk "..matches[2].." into cask")</script>
							<command></command>
							<packageName></packageName>
							<regex>^cask (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>unvenom</name>
							<script>venoms = {
"epteth",
"gecko",
"epseth",
"prefarar",
"delphinium",
"digitalis",
"curare",
"darkshade",
"hepafarin",
"monkshood",
"oculus",
"selarnia",
"kalmia",
"xentio",
"eurypteria",
"aconite",
"vernalius",
"slike",
"euphorbia",
"larkspur",
"oleander",
"voyria",
}
for venom in pairs(venoms) do
 snd.send("fc consume "..venoms[venom])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^unvenom$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>venoms</name>
							<script>venoms = {
"epteth",
"gecko",
"epseth",
"prefarar",
"aconite",
"vernalius",
"slike",
"digitalis",
"curare",
"darkshade",
"oculus",
"selarnia",
"kalmia",
"xentio",
"hepafarin",
"monkshood",
"eurypteria",
"delphinium",
"euphorbia",
"larkspur",
"oleander",
"voyria",
}
for venom in pairs(venoms) do
 snd.send("fc fill "..venoms[venom])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^venoms$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>rag</name>
							<script>snd.send("qeb craft rag")</script>
							<command></command>
							<packageName></packageName>
							<regex>^rag$</regex>
						</Alias>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Fishing</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>FishingGo</name>
						<script>local results = get_fishing_holes(matches[2], true)
if #results == 1 then
	echo("Pathing to " .. results[1].name .. ".\n")
	results[1].rooms = results[1].rooms or {}
	if #results[1].rooms &lt;= 0 then
		echo("That fishing hole has no rooms saved. Aborting.\n")
		return
	else
		send("path find " .. results[1].rooms[1])
	end
	if gmcp.Char.Vitals.mounted == "0" then
		send("path go dash")
	else
		send("path go gallop")
	end
else
	echo("Please specify a unique fishing location.\n")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^fgo (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>FishSearch</name>
						<script>get_fishing_holes(matches[3], true, (matches[2] ~= ""))
</script>
						<command></command>
						<packageName></packageName>
						<regex>^fishing search\s*(full|info)*\s*(.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>ToggleAutoFish</name>
						<script>if currently_fishing then
	echo("Autofishing disabled.\n")
	if currently_fishing then snd.send("qeb fishing cut", false) end
	currently_fishing = false
  expandAlias("wbsh")
else
	echo("Autofishing enabled.\n")
	currently_fishing = true
	snd.send("secure left"..snd.sep.."secure right"..snd.sep.."wear shield"..snd.sep.."wield pole"..snd.sep.."qeb fishing cast", false)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^afish$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Cureset Configs</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Lycan Cureset(shifter)</name>
						<script>send("firstaid on")
send("firstaid reporting on")
send("firstaid health 85")  
send("firstaid mana 90")
send("firstaid forcehealth 40")
send("firstaid forcemana 60")
send("firstaid anabiotic health 80")
send("firstaid anabiotic mana 80")
send("firstaid vitals priority health")
send("firstaid stop mana below 45")
send("firstaid curing on")
send("firstaid defence on")
send("firstaid heal health on")
send("firstaid heal mana on")
send("firstaid use anabiotic on")
send("firstaid auto stand on")
send("firstaid auto wake on")
send("firstaid use tree on")
send("firstaid use focus on")
send("firstaid use endgame on")
send("firstaid use insomnia on")
send("firstaid use clot on")
send("firstaid clot at 30")  
send("firstaid clot above 60")
send("firstaid stupidity double on")
send("firstaid adder 3")
send("firstaid precache 3")
send("firstaid prerestore on")
send("firstaid halt for channel on")
send("FIRSTAID PRIORITY PRESTORE LEFT LEG 20% 2")
send("FIRSTAID PRIORITY PRESTORE RIGHT LEG 20% 2")
send("FIRSTAID PRIORITY PRESTORE RIGHT ARM 20% 6")
send("FIRSTAID PRIORITY PRESTORE LEFT ARM 20% 6")
send("FIRSTAID PRIORITY PRESTORE TORSO 20% 4")
send("FIRSTAID PRIORITY PRESTORE HEAD 20% 6")
send("firstaid priority reset")
send("firstaid priority left_arm_bruised_critical 2")
send("firstaid priority right_arm_bruised_critical 2")
send("firstaid priority left_leg_bruised_critical 2")
send("firstaid priority right_leg_bruised_critical 2")
send("firstaid priority torso_bruised_critical 2")
send("firstaid priority left_arm_bruised_moderate 2")
send("firstaid priority right_arm_bruised_moderate 2")
send("firstaid priority left_leg_bruised_moderate 2")
send("firstaid priority right_leg_bruised_moderate 2")
send("firstaid priority torso_bruised_moderate 2")
send("firstaid priority head_bruised_moderate 2")
send("firstaid priority defence insulation 8")
send("firstaid priority defence density 1")
send("firstaid priority defence temperance 2")
send("firstaid priority defence levitation 1")
send("firstaid priority defence speed 1")
send("firstaid priority defence venom_resistance 4")
send("firstaid priority defence fangbarrier 1")
send("firstaid priority defence insomnia 1")
send("firstaid priority defence instawake 2")
send("firstaid priority defence waterbreathing 3")
send("firstaid priority defence deafness 4")
send("firstaid priority defence blindness 3")  
send("firstaid priority crippled_body 1")
send("firstaid priority paralysis 1")
send("firstaid priority paralysis 2")
send("firstaid priority anorexia 1")
send("firstaid priority ringing_ears 2")
send("firstaid priority clumsiness 2")
send("firstaid priority impairment 2") -- Potential howl. Affects RENEW. Pill (decongestant)
send("firstaid priority paresis 3")
send("firstaid priority plodding 3") -- Potential howl, increases pill recovery
send("firstaid priority blurry_vision 3") -- Potential howl/claw - Sets up Facemaul and salve balance.
send("firstaid priority sandrot 3")
send("firstaid priority thin_blood 3")
send("firstaid priority soulfire 3")
send("firstaid priority frozen 3")
send("firstaid priority stupidity 3")
send("firstaid priority nyctophobia 3")
send("firstaid priority rend 4") -- Can stack bleeding pretty bad.
send("firstaid priority weariness 4")
send("firstaid priority lethargy 4")
send("firstaid priority dementia 4")
send("firstaid priority baldness 4")
send("firstaid priority hypochondria 4")
send("firstaid priority impatience 4")
send("firstaid priority infested 4")
send("firstaid priority mirroring 4")
send("firstaid priority pacifism 4")
send("firstaid priority patterns 4")
send("firstaid priority recklessness 4")
send("firstaid priority shivering 4")
send("firstaid priority blighted 5")
send("firstaid priority blood_curse 5")
send("firstaid priority blood_poison 5")
send("firstaid priority confusion 5")
send("firstaid priority idiocy 5")
send("firstaid priority mental_disruption 5")
send("firstaid priority merciful 5")
send("firstaid priority physical_disruption 5")
send("firstaid priority allergies 6")
send("firstaid priority crippled 6")
send("firstaid priority epilepsy 6")
send("firstaid priority haemophilia 6")
send("firstaid priority loneliness 6")
send("firstaid priority masochism 6")
send("firstaid priority sensitivity 6")
send("firstaid priority vomiting 6")
send("firstaid priority heatspear 6")
send("firstaid priority berserking 7")
send("firstaid priority egocentric 7")
send("firstaid priority exhausted 7")
send("firstaid priority hallucinations 7")
send("firstaid priority hatred 7")
send("firstaid priority heartflutter 7")
send("firstaid priority hypersomnia 7")
send("firstaid priority hypothermia 7")
send("firstaid priority justice 7")
send("firstaid priority laxity 7")
send("firstaid priority lovers_effect 7")
send("firstaid priority peace 7")
send("firstaid priority mauled_face 8") -- Face ouchie. Causes disfigurement (Not really a big deal, so should ignore lower.)
send("firstaid priority agoraphobia 8")
send("firstaid priority claustrophobia 8")
send("firstaid priority dissonance 8")
send("firstaid priority dizziness 8")
send("firstaid priority faintness 8")
send("firstaid priority paranoia 8")
send("firstaid priority shyness 8")
send("firstaid priority vertigo 8")
send("firstaid priority addiction 9")
send("firstaid priority body_odor 9")
send("firstaid priority commitment_fear 9")
send("firstaid priority hubris 9")
send("firstaid priority magnanimity 9")
send("firstaid priority sadness 9")
send("firstaid priority self-pity 9")
send("firstaid priority blisters 10")
send("firstaid priority generosity 10")
send("firstaid priority superstition 10")
send("firstaid priority shaderot_benign 10") -- SCIO AFF
send("firstaid priority shaderot_body 10")-- SCIO AFF
send("firstaid priority shaderot_wither 10")-- SCIO AFF
send("firstaid priority shaderot_spirit 10") -- SCIO AFF
send("firstaid priority gloom 10")-- SCIO AFF
send("firstaid priority voidgaze 10")-- SCIO AFF
send("firstaid priority shaderot_heat 10") -- SCIO AFF</script>
						<command></command>
						<packageName></packageName>
						<regex>^lycup$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Scio Cureset (sciomancer)</name>
						<script>send("firstaid on")
send("firstaid reporting on")
send("firstaid health 85")  
send("firstaid mana 90")
send("firstaid forcehealth 40")
send("firstaid forcemana 60")
send("firstaid anabiotic health 80")
send("firstaid anabiotic mana 80")
send("firstaid vitals priority health")
send("firstaid stop mana below 45")
send("firstaid curing on")
send("firstaid defence on")
send("firstaid heal health on")
send("firstaid heal mana on")
send("firstaid use anabiotic on")
send("firstaid auto stand on")
send("firstaid auto wake on")
send("firstaid use tree on")
send("firstaid use focus on")
send("firstaid use endgame on")
send("firstaid use insomnia on")
send("firstaid use clot on")
send("firstaid clot at 30")  
send("firstaid clot above 60")
send("firstaid stupidity double on")
send("firstaid adder 3")
send("firstaid precache 3")
send("firstaid prerestore on")
send("firstaid halt for channel on")
send("FIRSTAID PRIORITY PRESTORE LEFT LEG 15% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT LEG 15% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT ARM 15% 8")
send("FIRSTAID PRIORITY PRESTORE LEFT ARM 15% 8")
send("FIRSTAID PRIORITY PRESTORE torso 15% 8")
send("FIRSTAID PRIORITY PRESTORE head 15% 8")
send("firstaid priority reset")
send("firstaid priority left_arm_bruised_critical 2")
send("firstaid priority right_arm_bruised_critical 2")
send("firstaid priority left_leg_bruised_critical 2")
send("firstaid priority right_leg_bruised_critical 2")
send("firstaid priority torso_bruised_critical 2")
send("firstaid priority left_arm_bruised_moderate 2")
send("firstaid priority right_arm_bruised_moderate 2")
send("firstaid priority left_leg_bruised_moderate 2")
send("firstaid priority right_leg_bruised_moderate 2")
send("firstaid priority torso_bruised_moderate 2")
send("firstaid priority head_bruised_moderate 2")
send("firstaid priority defence insulation 3") -- Higher Vs. Scio for Shadeling
send("firstaid priority defence density 1")
send("firstaid priority defence temperance 2")
send("firstaid priority defence levitation 1")
send("firstaid priority defence speed 1")
send("firstaid priority defence venom_resistance 4")
send("firstaid priority defence fangbarrier 1")
send("firstaid priority defence insomnia 1")
send("firstaid priority defence instawake 2")
send("firstaid priority defence waterbreathing 3")
send("firstaid priority defence deafness 4")
send("firstaid priority defence blindness 3")  
send("firstaid priority crippled_body 1")
send("firstaid priority paralysis 1")
send("firstaid priority shaderot_body 1")-- SCIO AFF
send("firstaid priority shaderot_wither 1")-- SCIO AFF
send("firstaid priority gloom 1")-- SCIO AFF
send("firstaid priority voidgaze 1")-- SCIO AFF
send("firstaid priority paralysis 2")
send("firstaid priority anorexia 1")
send("firstaid priority ringing_ears 2")
send("firstaid priority clumsiness 2")-- SCIO AFF
send("firstaid priority weariness 3")-- SCIO AFF
send("firstaid priority paresis 3")
send("firstaid priority sandrot 3")
send("firstaid priority thin_blood 3")
send("firstaid priority frozen 3")-- SCIO AFF
send("firstaid priority nyctophobia 3")
send("firstaid priority lethargy 4")-- SCIO AFF
send("firstaid priority dementia 4") -- SCIO AFF
send("firstaid priority baldness 4")
send("firstaid priority hypochondria 4")
send("firstaid priority impatience 4")
send("firstaid priority infested 4")
send("firstaid priority mirroring 4")
send("firstaid priority pacifism 4")
send("firstaid priority patterns 4")
send("firstaid priority recklessness 4")
send("firstaid priority shaderot_heat 4") -- SCIO AFF
send("firstaid priority shivering 4") -- SCIO AFF
send("firstaid priority blighted 5")
send("firstaid priority blood_curse 5")
send("firstaid priority blood_poison 5")
send("firstaid priority confusion 5")
send("firstaid priority idiocy 5")
send("firstaid priority mental_disruption 5")
send("firstaid priority merciful 5")
send("firstaid priority physical_disruption 5")
send("firstaid priority plodding 5")
send("firstaid priority allergies 6")
send("firstaid priority crippled 6")
send("firstaid priority epilepsy 6")
send("firstaid priority haemophilia 6")
send("firstaid priority impairment 6")
send("firstaid priority loneliness 6")
send("firstaid priority masochism 6")
send("firstaid priority rend 6")
send("firstaid priority sensitivity 6")
send("firstaid priority vomiting 6")
send("firstaid priority heatspear 6")
send("firstaid priority berserking 7")
send("firstaid priority egocentric 7")
send("firstaid priority exhausted 7")
send("firstaid priority hallucinations 7")
send("firstaid priority hatred 7")
send("firstaid priority heartflutter 7")
send("firstaid priority hypersomnia 7")
send("firstaid priority hypothermia 7")
send("firstaid priority justice 7")
send("firstaid priority laxity 7")
send("firstaid priority lovers_effect 7")
send("firstaid priority peace 7")
send("firstaid priority stupidity 7")
send("firstaid priority shaderot_spirit 8") -- SCIO AFF
send("firstaid priority agoraphobia 8")
send("firstaid priority claustrophobia 8")
send("firstaid priority dissonance 8")
send("firstaid priority dizziness 8")
send("firstaid priority faintness 8")
send("firstaid priority paranoia 8")
send("firstaid priority shyness 8")
send("firstaid priority vertigo 8")
send("firstaid priority shaderot_benign 9") -- SCIO AFF
send("firstaid priority addiction 9")
send("firstaid priority body_odor 9")
send("firstaid priority commitment_fear 9")
send("firstaid priority hubris 9")
send("firstaid priority magnanimity 9")
send("firstaid priority sadness 9")
send("firstaid priority self-pity 9")
send("firstaid priority blisters 10")
send("firstaid priority generosity 10")
send("firstaid priority superstition 10")

send("firstaid priority soulfire 10") -- Luminary Aff</script>
						<command></command>
						<packageName></packageName>
						<regex>^scioup$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Carnifex Cureset (carnifex)</name>
						<script>send("firstaid on")
send("firstaid reporting on")
send("firstaid health 85")  
send("firstaid mana 90")
send("firstaid forcehealth 40")
send("firstaid forcemana 60")
send("firstaid anabiotic health 80")
send("firstaid anabiotic mana 80")
send("firstaid vitals priority health")
send("firstaid stop mana below 45")
send("firstaid curing on")
send("firstaid defence on")
send("firstaid heal health on")
send("firstaid heal mana on")
send("firstaid use anabiotic on")
send("firstaid auto stand on")
send("firstaid auto wake on")
send("firstaid use tree on")
send("firstaid use focus on")
send("firstaid use endgame on")
send("firstaid use insomnia on")
send("firstaid use clot on")
send("firstaid clot at 30")  
send("firstaid clot above 60")
send("firstaid stupidity double on")
send("firstaid adder 3")
send("firstaid precache 3")
send("firstaid prerestore on")
send("firstaid halt for channel on")
send("FIRSTAID PRIORITY PRESTORE LEFT LEG 19% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT LEG 19% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT ARM 19% 8")
send("FIRSTAID PRIORITY PRESTORE LEFT ARM 19% 8")
send("FIRSTAID PRIORITY PRESTORE TORSO 19% 8")
send("FIRSTAID PRIORITY PRESTORE HEAD 19% 8")
send("firstaid priority reset")
send("firstaid priority left_arm_bruised_critical 2")
send("firstaid priority right_arm_bruised_critical 2")
send("firstaid priority left_leg_bruised_critical 2")
send("firstaid priority right_leg_bruised_critical 2")
send("firstaid priority torso_bruised_critical 2")
send("firstaid priority left_arm_bruised_moderate 2")
send("firstaid priority right_arm_bruised_moderate 2")
send("firstaid priority left_leg_bruised_moderate 2")
send("firstaid priority right_leg_bruised_moderate 2")
send("firstaid priority torso_bruised_moderate 2")
send("firstaid priority head_bruised_moderate 2")
send("firstaid priority defence insulation 8")
send("firstaid priority defence density 1")
send("firstaid priority defence temperance 2")
send("firstaid priority defence levitation 1")
send("firstaid priority defence rebounding 1")
send("firstaid priority defence speed 1")
send("firstaid priority defence venom_resistance 4")
send("firstaid priority defence fangbarrier 1")
send("firstaid priority defence insomnia 1")
send("firstaid priority defence instawake 2")
send("firstaid priority defence waterbreathing 3")
send("firstaid priority defence deafness 4")
send("firstaid priority defence blindness 3")  
send("firstaid priority crippled_body 1"). -- Opiate tree. Lowers the damage YOU deal.
send("firstaid priority paralysis 1")
send("firstaid priority paralysis 2")
send("firstaid priority anorexia 2") -- Vlock. Anti Pill.
send("firstaid priority slickness 2")  -- Vlock. Anti-Salve.
send("firstaid priority asthma 2")  -- Vlock. Anti Smoking.
send("firstaid priority ringing_ears 2")
send("firstaid priority clumsiness 2") -- Carni route can stack Decongestant tree very easily.
send("firstaid priority crushed_chest 3") -- Carni (gives Asthma). Resto cure.
send("firstaid priority weariness 3") -- Carni route can stack Decongestant tree very easily.
send("firstaid priority impairment 3") -- Carni Hound aff. Decongestant Tree.
send("firstaid priority hypochondria 3") -- Decongestant Tree.
send("firstaid priority paresis 3")
send("firstaid priority sandrot 3")
send("firstaid priority thin_blood 3")
send("firstaid priority soulfire 3")
send("firstaid priority frozen 3")
send("firstaid priority stupidity 3")
send("firstaid priority nyctophobia 3")
send("firstaid priority sensitivity 4") -- Carni would use this with Hammer for extra ow. Decongestant tree.
send("firstaid priority crippled 4") -- Carni Aff. Opiate Tree
send("firstaid priority plodding 4")
send("firstaid priority lethargy 4")
send("firstaid priority dementia 4")
send("firstaid priority baldness 4")
send("firstaid priority impatience 4")
send("firstaid priority infested 4")
send("firstaid priority mirroring 4")
send("firstaid priority pacifism 4")
send("firstaid priority patterns 4")
send("firstaid priority recklessness 4") -- Not fun to get to stick. Depressant tree.
send("firstaid priority shivering 4") -- Tundralhowl Carni (also enfrost from hammer). Caloric Salve.
send("firstaid priority blisters 5") -- Hound aff. Afflicts if you have rend.
send("firstaid priority blighted 5")
send("firstaid priority blood_curse 5")
send("firstaid priority blood_poison 5")
send("firstaid priority confusion 5")
send("firstaid priority idiocy 5")
send("firstaid priority mental_disruption 5")
send("firstaid priority merciful 5")
send("firstaid priority physical_disruption 5")
send("firstaid priority berserking 6") -- Hound aff. 
send("firstaid priority rend 6") -- Carni give this through hounds. Coagulation Tree.
send("firstaid priority dizziness 6") -- Carni Aff. Hound or venom.
send("firstaid priority allergies 6")
send("firstaid priority epilepsy 6") -- Hound aff.
send("firstaid priority haemophilia 6")
send("firstaid priority loneliness 6")
send("firstaid priority masochism 6")
send("firstaid priority vomiting 6")
send("firstaid priority heatspear 6")
send("firstaid priority egocentric 7")
send("firstaid priority exhausted 7")
send("firstaid priority hallucinations 7") -- Hound aff, given if you have epilepsy
send("firstaid priority hatred 7")
send("firstaid priority heartflutter 7")
send("firstaid priority hypersomnia 7")
send("firstaid priority hypothermia 7")
send("firstaid priority justice 7")
send("firstaid priority laxity 7")
send("firstaid priority lovers_effect 7")
send("firstaid priority peace 7")
send("firstaid priority agoraphobia 8")
send("firstaid priority claustrophobia 8")
send("firstaid priority dissonance 8")
send("firstaid priority faintness 8")
send("firstaid priority paranoia 8")
send("firstaid priority shyness 8")
send("firstaid priority vertigo 8")
send("firstaid priority addiction 9")
send("firstaid priority body_odor 9")
send("firstaid priority commitment_fear 9")
send("firstaid priority hubris 9")
send("firstaid priority magnanimity 9")
send("firstaid priority sadness 9")
send("firstaid priority self-pity 9")

send("firstaid priority generosity 10")
send("firstaid priority superstition 10")
send("firstaid priority shaderot_benign 10") -- SCIO AFF
send("firstaid priority shaderot_body 10")-- SCIO AFF
send("firstaid priority shaderot_wither 10")-- SCIO AFF
send("firstaid priority shaderot_spirit 10") -- SCIO AFF
send("firstaid priority gloom 10")-- SCIO AFF
send("firstaid priority voidgaze 10")-- SCIO AFF
send("firstaid priority shaderot_heat 10") -- SCIO AFF</script>
						<command></command>
						<packageName></packageName>
						<regex>^carniup$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Monk Cureset (monk)</name>
						<script>send("firstaid on")
send("firstaid reporting on")
send("firstaid health 85")  
send("firstaid mana 90")
send("firstaid forcehealth 40")
send("firstaid forcemana 60")
send("firstaid anabiotic health 80")
send("firstaid anabiotic mana 80")
send("firstaid vitals priority health")
send("firstaid stop mana below 45")
send("firstaid curing on")
send("firstaid defence on")
send("firstaid heal health on")
send("firstaid heal mana on")
send("firstaid use anabiotic on")
send("firstaid auto stand on")
send("firstaid auto wake on")
send("firstaid use tree on")
send("firstaid use focus on")
send("firstaid use endgame on")
send("firstaid use insomnia on")
send("firstaid use clot on")
send("firstaid clot at 30")  
send("firstaid clot above 60")
send("firstaid stupidity double on")
send("firstaid adder 3")
send("firstaid precache 3")
send("firstaid prerestore on")
send("firstaid halt for channel on")
send("FIRSTAID PRIORITY PRESTORE LEFT LEG 20% 4")
send("FIRSTAID PRIORITY PRESTORE RIGHT LEG 20% 4")
send("FIRSTAID PRIORITY PRESTORE RIGHT ARM 20% 6")
send("FIRSTAID PRIORITY PRESTORE LEFT ARM 20% 6")
send("FIRSTAID PRIORITY PRESTORE TORSO 20% 4")
send("FIRSTAID PRIORITY PRESTORE HEAD 20% 3")
send("firstaid priority reset")
send("firstaid priority left_arm_bruised_critical 2")
send("firstaid priority right_arm_bruised_critical 2")
send("firstaid priority left_leg_bruised_critical 2")
send("firstaid priority right_leg_bruised_critical 2")
send("firstaid priority torso_bruised_critical 2")
send("firstaid priority left_arm_bruised_moderate 2")
send("firstaid priority right_arm_bruised_moderate 2")
send("firstaid priority left_leg_bruised_moderate 2")
send("firstaid priority right_leg_bruised_moderate 2")
send("firstaid priority torso_bruised_moderate 2")
send("firstaid priority head_bruised_moderate 2")
send("firstaid priority defence insulation 8")
send("firstaid priority defence density 1")
send("firstaid priority defence temperance 2")
send("firstaid priority defence levitation 1")
send("firstaid priority defence speed 1")
send("firstaid priority defence venom_resistance 4")
send("firstaid priority defence fangbarrier 1")
send("firstaid priority defence insomnia 1")
send("firstaid priority defence instawake 2")
send("firstaid priority defence waterbreathing 3")
send("firstaid priority defence deafness 4")
send("firstaid priority defence blindness 3")  
send("firstaid priority crippled_body 1")
send("firstaid priority paralysis 1")
send("firstaid priority paralysis 2")
send("firstaid priority anorexia 1") -- Salve Aff.
send("firstaid priority ringing_ears 2")
send("firstaid priority clumsiness 2")
send("firstaid priority whiplash 2") -- Salve (soothing).
send("firstaid priority impairment 2")
send("firstaid priority paresis 3")
send("firstaid priority deadening 3") -- Smoked.
send("firstaid priority blurry_vision 3") 
send("firstaid priority sandrot 3")
send("firstaid priority thin_blood 3")
send("firstaid priority soulfire 3")
send("firstaid priority frozen 3")
send("firstaid priority stupidity 3")
send("firstaid priority nyctophobia 3")
send("firstaid priority epilepsy 4") -- Telepathy. Can prone.
send("firstaid priority weariness 4")
send("firstaid priority lethargy 4")
send("firstaid priority dementia 4")
send("firstaid priority baldness 4")
send("firstaid priority hypochondria 4")
send("firstaid priority impatience 4")
send("firstaid priority infested 4")
send("firstaid priority mirroring 4")
send("firstaid priority pacifism 4")
send("firstaid priority patterns 4")
send("firstaid priority recklessness 4")
send("firstaid priority shivering 4")
send("firstaid priority plodding 5")
send("firstaid priority blighted 5")
send("firstaid priority blood_curse 5")
send("firstaid priority blood_poison 5")
send("firstaid priority confusion 5")
send("firstaid priority idiocy 5")
send("firstaid priority mental_disruption 5")
send("firstaid priority merciful 5")
send("firstaid priority physical_disruption 5")
send("firstaid priority allergies 6")
send("firstaid priority crippled 6")
send("firstaid priority rend 6")
send("firstaid priority haemophilia 6")
send("firstaid priority loneliness 6")
send("firstaid priority masochism 6")
send("firstaid priority sensitivity 6")
send("firstaid priority vomiting 6")
send("firstaid priority heatspear 6")
send("firstaid priority berserking 7")
send("firstaid priority egocentric 7")
send("firstaid priority exhausted 7")
send("firstaid priority hallucinations 7")
send("firstaid priority hatred 7")
send("firstaid priority heartflutter 7")
send("firstaid priority hypersomnia 7")
send("firstaid priority hypothermia 7")
send("firstaid priority justice 7")
send("firstaid priority laxity 7")
send("firstaid priority lovers_effect 7")
send("firstaid priority peace 7")
send("firstaid priority mauled_face 8") -- Face ouchie. Causes disfigurement (Not really a big deal, so should ignore lower.)
send("firstaid priority agoraphobia 8")
send("firstaid priority claustrophobia 8")
send("firstaid priority dissonance 8")
send("firstaid priority dizziness 8")
send("firstaid priority faintness 8")
send("firstaid priority paranoia 8")
send("firstaid priority shyness 8")
send("firstaid priority vertigo 8")
send("firstaid priority addiction 9")
send("firstaid priority body_odor 9")
send("firstaid priority commitment_fear 9")
send("firstaid priority hubris 9")
send("firstaid priority magnanimity 9")
send("firstaid priority sadness 9")
send("firstaid priority self-pity 9")
send("firstaid priority blisters 10")
send("firstaid priority generosity 10")
send("firstaid priority superstition 10")
send("firstaid priority shaderot_benign 10") -- SCIO AFF
send("firstaid priority shaderot_body 10")-- SCIO AFF
send("firstaid priority shaderot_wither 10")-- SCIO AFF
send("firstaid priority shaderot_spirit 10") -- SCIO AFF
send("firstaid priority gloom 10")-- SCIO AFF
send("firstaid priority voidgaze 10")-- SCIO AFF
send("firstaid priority shaderot_heat 10") -- SCIO AFF</script>
						<command></command>
						<packageName></packageName>
						<regex>^monkup$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Templar Cureset (templar)</name>
						<script>send("firstaid on")
send("firstaid reporting on")
send("firstaid health 85")  
send("firstaid mana 90")
send("firstaid forcehealth 40")
send("firstaid forcemana 60")
send("firstaid anabiotic health 80")
send("firstaid anabiotic mana 80")
send("firstaid vitals priority health")
send("firstaid stop mana below 45")
send("firstaid curing on")
send("firstaid defence on")
send("firstaid heal health on")
send("firstaid heal mana on")
send("firstaid use anabiotic on")
send("firstaid auto stand on")
send("firstaid auto wake on")
send("firstaid use tree on")
send("firstaid use focus on")
send("firstaid use endgame on")
send("firstaid use insomnia on")
send("firstaid use clot on")
send("firstaid clot at 30")  
send("firstaid clot above 60")
send("firstaid stupidity double on")
send("firstaid adder 3")
send("firstaid precache 3")
send("firstaid prerestore on")
send("firstaid halt for channel on")
send("FIRSTAID PRIORITY PRESTORE LEFT LEG 19% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT LEG 19% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT ARM 19% 8")
send("FIRSTAID PRIORITY PRESTORE LEFT ARM 19% 8")
send("FIRSTAID PRIORITY PRESTORE TORSO 19% 8")
send("FIRSTAID PRIORITY PRESTORE HEAD 19% 8")
send("firstaid priority reset")
send("firstaid priority left_arm_bruised_critical 1") -- Increased vs Blunt Templars (Rupture)
send("firstaid priority right_arm_bruised_critical 1") -- Increased vs Blunt Templars (Rupture)
send("firstaid priority left_leg_bruised_critical 1") -- Increased vs Blunt Templars (Rupture)
send("firstaid priority right_leg_bruised_critical 1") -- Increased vs Blunt Templars (Rupture)
send("firstaid priority torso_bruised_critical 1") -- Increased vs Blunt Templars (Rupture)
send("firstaid priority left_arm_bruised_moderate 2")
send("firstaid priority right_arm_bruised_moderate 2")
send("firstaid priority left_leg_bruised_moderate 2")
send("firstaid priority right_leg_bruised_moderate 2")
send("firstaid priority torso_bruised_moderate 2")
send("firstaid priority head_bruised_moderate 2")
send("firstaid priority defence insulation 8")
send("firstaid priority defence density 1")
send("firstaid priority defence temperance 2")
send("firstaid priority defence levitation 1")
send("firstaid priority defence rebounding 1")
send("firstaid priority defence speed 1")
send("firstaid priority defence venom_resistance 4")
send("firstaid priority defence fangbarrier 1")
send("firstaid priority defence insomnia 1")
send("firstaid priority defence instawake 2")
send("firstaid priority defence waterbreathing 3")
send("firstaid priority defence deafness 4")
send("firstaid priority defence blindness 3")  
send("firstaid priority crippled_body 1"). -- Opiate tree. Lowers the damage YOU deal.
send("firstaid priority paralysis 1")
send("firstaid priority paralysis 2")
send("firstaid priority anorexia 2") -- Vlock. Anti Pill.
send("firstaid priority slickness 2")  -- Vlock. Anti-Salve.
send("firstaid priority asthma 2")  -- Vlock. Anti Smoking.
send("firstaid priority mental_disruption 2") -- Retri Aff.
send("firstaid priority physical_disruption 2") -- Retri Aff.
send("firstaid priority sensitivity 3") -- Hemo Route, major ouch.
send("firstaid priority clumsiness 3") -- Soft Lock route can stack Decongestant tree very easily.
send("firstaid priority weariness 3") -- -- Soft Lock route can stack Decongestant tree very easily.
send("firstaid priority hypochondria 3") -- Soft Lock route can stack Decongestant tree very easily.
send("firstaid priority paresis 3")
send("firstaid priority sandrot 3")
send("firstaid priority thin_blood 3")
send("firstaid priority soulfire 3")
send("firstaid priority frozen 3")
send("firstaid priority stupidity 3")
send("firstaid priority nyctophobia 3")
send("firstaid priority crippled 4")
send("firstaid priority plodding 4")
send("firstaid priority lethargy 4")
send("firstaid priority dementia 4")
send("firstaid priority baldness 4")
send("firstaid priority impatience 4")
send("firstaid priority infested 4")
send("firstaid priority mirroring 4")
send("firstaid priority pacifism 4")
send("firstaid priority patterns 4")
send("firstaid priority recklessness 4") -- Not fun to get to stick. Depressant tree.
send("firstaid priority shivering 4") -- Iceblast
send("firstaid priority rend 5") -- Bleed ouchie. (Hemo Route)
send("firstaid priority blisters 5") 
send("firstaid priority blighted 5")
send("firstaid priority blood_curse 5")
send("firstaid priority blood_poison 5")
send("firstaid priority confusion 5")
send("firstaid priority idiocy 5")
send("firstaid priority merciful 5")
send("firstaid priority impairment 6")
send("firstaid priority berserking 6")
send("firstaid priority dizziness 6") 
send("firstaid priority allergies 6")
send("firstaid priority haemophilia 6")
send("firstaid priority loneliness 6")
send("firstaid priority masochism 6")
send("firstaid priority vomiting 6")
send("firstaid priority heatspear 6")
send("firstaid priority egocentric 7")
send("firstaid priority exhausted 7")
send("firstaid priority hallucinations 7")
send("firstaid priority hatred 7")
send("firstaid priority heartflutter 7")
send("firstaid priority hypersomnia 7")
send("firstaid priority hypothermia 7")
send("firstaid priority ringing_ears 7")
send("firstaid priority justice 7")
send("firstaid priority laxity 7")
send("firstaid priority lovers_effect 7")
send("firstaid priority peace 7")
send("firstaid priority crushed_chest 8") -- Carni (gives Asthma). Resto cure.
send("firstaid priority agoraphobia 8")
send("firstaid priority epilepsy 8")
send("firstaid priority claustrophobia 8")
send("firstaid priority dissonance 8")
send("firstaid priority faintness 8")
send("firstaid priority paranoia 8")
send("firstaid priority shyness 8")
send("firstaid priority vertigo 8")
send("firstaid priority addiction 9")
send("firstaid priority body_odor 9")
send("firstaid priority commitment_fear 9")
send("firstaid priority hubris 9")
send("firstaid priority magnanimity 9")
send("firstaid priority sadness 9")
send("firstaid priority self-pity 9")
send("firstaid priority generosity 10")
send("firstaid priority superstition 10")
send("firstaid priority shaderot_benign 10") -- SCIO AFF
send("firstaid priority shaderot_body 10")-- SCIO AFF
send("firstaid priority shaderot_wither 10")-- SCIO AFF
send("firstaid priority shaderot_spirit 10") -- SCIO AFF
send("firstaid priority gloom 10")-- SCIO AFF
send("firstaid priority voidgaze 10")-- SCIO AFF
send("firstaid priority shaderot_heat 10") -- SCIO AFF</script>
						<command></command>
						<packageName></packageName>
						<regex>^tempup$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Syssin Cureset (syssin)</name>
						<script>send("firstaid on")
send("firstaid reporting on")
send("firstaid health 85")  
send("firstaid mana 90")
send("firstaid forcehealth 40")
send("firstaid forcemana 60")
send("firstaid anabiotic health 80")
send("firstaid anabiotic mana 80")
send("firstaid vitals priority health")
send("firstaid stop mana below 45")
send("firstaid curing on")
send("firstaid defence on")
send("firstaid heal health on")
send("firstaid heal mana on")
send("firstaid use anabiotic on")
send("firstaid auto stand on")
send("firstaid auto wake on")
send("firstaid use tree on")
send("firstaid use focus on")
send("firstaid use endgame on")
send("firstaid use insomnia on")
send("firstaid use clot on")
send("firstaid clot at 30")  
send("firstaid clot above 60")
send("firstaid stupidity double on")
send("firstaid adder 3")
send("firstaid precache 3")
send("firstaid prerestore on")
send("firstaid halt for channel on")
send("FIRSTAID PRIORITY PRESTORE LEFT LEG 15% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT LEG 15% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT ARM 15% 8")
send("FIRSTAID PRIORITY PRESTORE LEFT ARM 15% 8")
send("FIRSTAID PRIORITY PRESTORE TORSO 15% 8")
send("FIRSTAID PRIORITY PRESTORE HEAD 15% 8")
send("firstaid priority reset")
send("firstaid priority left_arm_bruised_critical 2")
send("firstaid priority right_arm_bruised_critical 2")
send("firstaid priority left_leg_bruised_critical 2")
send("firstaid priority right_leg_bruised_critical 2")
send("firstaid priority torso_bruised_critical 2")
send("firstaid priority left_arm_bruised_moderate 2")
send("firstaid priority right_arm_bruised_moderate 2")
send("firstaid priority left_leg_bruised_moderate 2")
send("firstaid priority right_leg_bruised_moderate 2")
send("firstaid priority torso_bruised_moderate 2")
send("firstaid priority head_bruised_moderate 2")
send("firstaid priority defence insulation 8")
send("firstaid priority defence density 1")
send("firstaid priority defence temperance 2")
send("firstaid priority defence levitation 1")
send("firstaid priority defence rebounding 1")
send("firstaid priority defence speed 1")
send("firstaid priority defence venom_resistance 4")
send("firstaid priority defence fangbarrier 1")
send("firstaid priority defence insomnia 1")
send("firstaid priority defence instawake 2")
send("firstaid priority defence waterbreathing 3")
send("firstaid priority defence deafness 4")
send("firstaid priority defence blindness 3")  
send("firstaid priority crippled_body 1"). -- Opiate tree. Lowers the damage YOU deal.
send("firstaid priority paralysis 1")
send("firstaid priority paralysis 2")
send("firstaid priority anorexia 2") -- Vlock. Anti Pill.
send("firstaid priority slickness 2")  -- Vlock. Anti-Salve.
send("firstaid priority asthma 2")  -- Vlock. Anti Smoking.
send("firstaid priority allergies 2") -- To Hide Thin Blood/Haemo.
send("firstaid priority clumsiness 2") -- Soft lock - Decongestant.
send("firstaid priority impatience 2") -- Focus block (Euphoriant) Helps stall vlock curing.
send("firstaid priority weariness 3") -- -- Soft lock - Decongestant.
send("firstaid priority impairment 3") -- Soft Lock Decongestant Tree.
send("firstaid priority hypochondria 3") -- Soft lock - Decongestant.
send("firstaid priority haemophilia 3") -- Baddie at the end, massive bleed. (Coag)
send("firstaid priority paresis 3")
send("firstaid priority sandrot 3")
send("firstaid priority thin_blood 3") -- Big bleeds for slit.
send("firstaid priority frozen 3")
send("firstaid priority stupidity 3")
send("firstaid priority nyctophobia 3")
send("firstaid priority vomiting 4") -- To Hide Thin Blood/Haemo.
send("firstaid priority sensitivity 4") -- Soft lock - Decongestant. Ouch time.
send("firstaid priority crippled 4")
send("firstaid priority plodding 4")
send("firstaid priority lethargy 4")
send("firstaid priority baldness 4")
send("firstaid priority infested 4")
send("firstaid priority mirroring 4")
send("firstaid priority pacifism 4")
send("firstaid priority patterns 4")
send("firstaid priority recklessness 4") 
send("firstaid priority shivering 4") 
send("firstaid priority dementia 5")
send("firstaid priority blisters 5") 
send("firstaid priority blighted 5")
send("firstaid priority blood_curse 5")
send("firstaid priority blood_poison 5")
send("firstaid priority confusion 5")
send("firstaid priority idiocy 5")
send("firstaid priority mental_disruption 5")
send("firstaid priority merciful 5")
send("firstaid priority physical_disruption 5")
send("firstaid priority berserking 6") 
send("firstaid priority rend 6") 
send("firstaid priority dizziness 6") 
send("firstaid priority epilepsy 6") .
send("firstaid priority loneliness 6")
send("firstaid priority masochism 6")
send("firstaid priority ringing_ears 6")
send("firstaid priority heatspear 6")
send("firstaid priority egocentric 7")
send("firstaid priority exhausted 7")
send("firstaid priority hallucinations 7") -- Hound aff, given if you have epilepsy
send("firstaid priority hatred 7")
send("firstaid priority heartflutter 7")
send("firstaid priority hypersomnia 7")
send("firstaid priority hypothermia 7")
send("firstaid priority justice 7")
send("firstaid priority laxity 7")
send("firstaid priority lovers_effect 7")
send("firstaid priority peace 7")
send("firstaid priority agoraphobia 8")
send("firstaid priority claustrophobia 8")
send("firstaid priority dissonance 8")
send("firstaid priority faintness 8")
send("firstaid priority paranoia 8")
send("firstaid priority shyness 8")
send("firstaid priority vertigo 8")
send("firstaid priority addiction 9")
send("firstaid priority body_odor 9")
send("firstaid priority commitment_fear 9")
send("firstaid priority hubris 9")
send("firstaid priority magnanimity 9")
send("firstaid priority sadness 9")
send("firstaid priority self-pity 9")
send("firstaid priority generosity 10")
send("firstaid priority crushed_chest 10") -- Carni (gives Asthma). Resto cure.
send("firstaid priority superstition 10")
send("firstaid priority soulfire 10") -- Luminary ability.
send("firstaid priority shaderot_benign 10") -- SCIO AFF
send("firstaid priority shaderot_body 10")-- SCIO AFF
send("firstaid priority shaderot_wither 10")-- SCIO AFF
send("firstaid priority shaderot_spirit 10") -- SCIO AFF
send("firstaid priority gloom 10")-- SCIO AFF
send("firstaid priority voidgaze 10")-- SCIO AFF
send("firstaid priority shaderot_heat 10") -- SCIO AFF</script>
						<command></command>
						<packageName></packageName>
						<regex>^syssinup$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Archivist Cureset (archivist)</name>
						<script>-- Unravel requires 3 Physical Affs, 3 Mental affs, + 1 mutagen.

send("firstaid on")
send("firstaid reporting on")
send("firstaid health 85")  
send("firstaid mana 90")
send("firstaid forcehealth 40")
send("firstaid forcemana 60")
send("firstaid anabiotic health 80")
send("firstaid anabiotic mana 80")
send("firstaid vitals priority health")
send("firstaid stop mana below 45")
send("firstaid curing on")
send("firstaid defence on")
send("firstaid heal health on")
send("firstaid heal mana on")
send("firstaid use anabiotic on")
send("firstaid auto stand on")
send("firstaid auto wake on")
send("firstaid use tree on")
send("firstaid use focus on")
send("firstaid use endgame on")
send("firstaid use insomnia on")
send("firstaid use clot on")
send("firstaid clot at 30")  
send("firstaid clot above 60")
send("firstaid stupidity double on")
send("firstaid adder 3")
send("firstaid precache 3")
send("firstaid prerestore on")
send("firstaid halt for channel on")
send("FIRSTAID PRIORITY PRESTORE LEFT LEG 15% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT LEG 15% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT ARM 15% 8")
send("FIRSTAID PRIORITY PRESTORE LEFT ARM 15% 8")
send("FIRSTAID PRIORITY PRESTORE torso 15% 8")
send("FIRSTAID PRIORITY PRESTORE head 15% 8")
send("firstaid priority reset")
send("firstaid priority left_arm_bruised_critical 2")
send("firstaid priority right_arm_bruised_critical 2")
send("firstaid priority left_leg_bruised_critical 2")
send("firstaid priority right_leg_bruised_critical 2")
send("firstaid priority torso_bruised_critical 2")
send("firstaid priority left_arm_bruised_moderate 2")
send("firstaid priority right_arm_bruised_moderate 2")
send("firstaid priority left_leg_bruised_moderate 2")
send("firstaid priority right_leg_bruised_moderate 2")
send("firstaid priority torso_bruised_moderate 2")
send("firstaid priority head_bruised_moderate 2")
send("firstaid priority defence insulation 8")
send("firstaid priority defence density 1")
send("firstaid priority defence rebounding 1")
send("firstaid priority defence temperance 2")
send("firstaid priority defence levitation 1")
send("firstaid priority defence speed 1")
send("firstaid priority defence venom_resistance 4")
send("firstaid priority defence fangbarrier 1")
send("firstaid priority defence insomnia 1")
send("firstaid priority defence instawake 2")
send("firstaid priority defence waterbreathing 3")
send("firstaid priority defence deafness 4")
send("firstaid priority defence blindness 3")  

----- Curing Priority
send("firstaid priority crippled_body 1")-- Still need Crippled Body decent high, as it halves damage done.
send("firstaid priority paralysis 1")
send("firstaid priority paralysis 2")

-- Mutagens (have to leave the room!)
send("firstaid priority lethargy 2") -- Physical Aff. (Coag)  Mutagen 
send("firstaid priority blisters 2")  -- Vlock. Anti Smoking. Mutagen  (Opiate)
send("firstaid priority allergies 2") -- Mutagen (Coagulation). Phys aff. 
send("firstaid priority addiction 2")  --  Phys aff. Mutagen (antipsychotic)

-- Coagulation Physicals
send("firstaid priority vomiting 3") -- Phys Aff. -- (Coag) 
send("firstaid priority haemophilia 3") -- Phys Aff. (Coag)
send("firstaid priority rend 4") -- Phys Aff. (coag)
send("firstaid priority exhausted 4") -- Phys Aff. (coag)
send("firstaid priority physical_disruption 4") -- Physical Aff. (Coagulation)

-- Decongestant Physicals
send("firstaid priority asthma 2")  -- Vlock. Anti Smoking. Phys Aff. (Decongestant)
send("firstaid priority sensitivity 3") -- Physical (Decongestant)-- Phys Aff.
send("firstaid priority impairment 3") -- Phys Aff. (Decongestant)
send("firstaid priority clumsiness 3") -- Phys Aff. (Decongestant)
send("firstaid priority ringing_ears 4")-- Phys Aff. (decongestant)
send("firstaid priority blood_poison 4") -- Phys Aff.(decongestant)

-- Opiate Physicals
send("firstaid priority sandrot 3") -- Phys Aff. (opiate)
send("firstaid priority heartflutter 4") -- Phys Aff. (opiate)

-- Salve Physicals
send("firstaid priority magic_fire 3")  -- Phys Aff. (Salve)
send("firstaid priority lightwound 3")  -- Phys Aff. (salve)
send("firstaid priority frozen 3") -- Phys Aff. (salve)
send("firstaid priority ablaze 3") -- ON FIRE. Physical aff. (Salve)
send("firstaid priority shivering 4") -- Phys Aff. (salve)
send("firstaid priority hypothermia 5") -- Phys Aff. (salve)
send("firstaid priority crippled_throat 5")   -- Phys Aff. (Salve)
send("firstaid priority whiplash 5")  -- Phys Aff. (salve)
send("firstaid priority backstrain 5") -- Phys Aff. (salve)
send("firstaid priority sore_wrist 5") -- Phys Aff. (salve)
send("firstaid priority sore_ankle 5") -- Phys Aff. (salve)
send("firstaid priority burnt_eyes 5") -- Phys Aff. (salve)
send("firstaid priority blurry_vision 5") -- Phys Aff. (salve)

-- Steroid Physical
send("firstaid priority limp_veins 3")  -- Phys Aff. (steroid)

-- Antipsychotic Physical
send("firstaid priority blood_curse 3")  -- Phys Aff. (antipsychotic)
send("firstaid priority hypersomnia 4") -- Phys Aff. (Antipsychotic)

-- Smoked Physical
send("firstaid priority migraine 3") -- Phys Aff. (smoked)
send("firstaid priority deadening 3") -- Phys Aff. (smoked)
send("firstaid priority disfigurement 4") -- Phys Aff. (smoked)
send("firstaid priority slickness 5") -- NON -Phys Aff. But stops salves (smoked)


-- Mental Affs (Should be lower Prio than Physical) Set at 5 and below

--- Depressent Mental
send("firstaid priority recklessness 5") -- Mental Aff (Depressant)
send("firstaid priority berserking 6") -- Mental Aff (depressant)
send("firstaid priority nyctophobia 6") -- Mental Aff (Depressant)
send("firstaid priority egocentric 7") -- Mental Aff (depressant)
send("firstaid priority loneliness 7") -- Mental Aff (depressant)
send("firstaid priority agoraphobia 8") -- Mental Aff (depressant)
send("firstaid priority masochism 8") -- Mental Aff (Depressant)
send("firstaid priority claustrophobia 8") -- Mental Aff (Depressant)
send("firstaid priority vertigo 8") -- Mental Aff (Depressant)

-- Decongestant Mental
send("firstaid priority weariness 5") -- Mental Aff (Decongestant)


-- Euphoriant Mental
send("firstaid priority impatience 5") -- Mental Aff (Euphoriant) (should be higher than most)
send("firstaid priority stupidity 5") -- Mental Aff (Euphoriant)
send("firstaid priority epilepsy 6") -- Mental Aff (Euphoriant)
send("firstaid priority dizziness 7") -- Mental Aff (Euphoriant)
send("firstaid priority faintness 7") -- Mental Aff (Euphoriant)

-- Salve Mental
send("firstaid priority anorexia 5") -- Mental Aff (Salve)
send("firstaid priority indifference 6") -- Mental Aff (Salve)

-- Opiate Mental
send("firstaid priority mirroring 7") -- Mental Aff (Opiate)

-- Coagulation Mental
send("firstaid priority mental_disruption 6")  -- Mental Aff (Coagulation)

-- Antipsychotic Mental
send("firstaid priority confusion 5") -- Mental Aff (Antipsychotic)
send("firstaid priority hallucinations 6") -- Mental Aff (Antipsychotic)
send("firstaid priority hatred 7") -- Mental Aff (Antipsychotic)
send("firstaid priority paranoia 7") -- Mental Aff (Antipsychotic)
send("firstaid priority dementia 7") -- Mental Aff (Antipsychotic)

-- Steroid Mental
send("firstaid priority pacifism 7") -- Mental Aff (Steroid)
send("firstaid priority peace 7") -- Mental Aff (Steroid)
send("firstaid priority lovers_effect 7") -- Mental Aff (Steroid)
send("firstaid priority laxity 7") -- Mental Aff (Steroid)
send("firstaid priority generosity 8") -- Mental Aff (Steroid)


-- Focus Mental
send("firstaid priority premonition 5") -- Mental Aff(Focus)


-- Still have to Prio Paresis
send("firstaid priority paresis 3")

-- Rest of Affs 7 or below.
send("firstaid priority plodding 7")
send("firstaid priority baldness 8")
send("firstaid priority thin_blood 8")
send("firstaid priority hypochondria 8")
send("firstaid priority infested 8")
send("firstaid priority patterns 8")
send("firstaid priority blighted 9")
send("firstaid priority idiocy 9")
send("firstaid priority crippled 8")
send("firstaid priority heatspear 8")
send("firstaid priority justice 9")
send("firstaid priority dissonance 9")
send("firstaid priority merciful 10")
send("firstaid priority shyness 10")
send("firstaid priority body_odor 10")
send("firstaid priority commitment_fear 10")
send("firstaid priority hubris 10")
send("firstaid priority magnanimity 10")
send("firstaid priority sadness 10")
send("firstaid priority self-pity 10")
send("firstaid priority superstition 10")
send("firstaid priority soulfire 10") -- Only a Luminary skill, no biggy vs. Archi.</script>
						<command></command>
						<packageName></packageName>
						<regex>^archiup$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>firstaidstart</name>
						<script>send("firstaid on##firstaid reporting on##firstaid health 85##firstaid mana 90##firstaid forcehealth 40##firstaid forcemana 60##firstaid anabiotic health 80##firstaid anabiotic mana 80##firstaid vitals priority health")
tempTimer(.5, [[send("firstaid stop mana below 45##firstaid curing on##firstaid defence on##firstaid priority defence rebounding 1##firstaid heal health on##firstaid heal mana on##firstaid use anabiotic on")]])
tempTimer(1, [[send("firstaid auto stand on##firstaid auto wake on##firstaid use tree on##firstaid use focus on##firstaid use endgame on##firstaid use insomnia on##firstaid use clot on##firstaid clot at 30##firstaid clot above 60")]])
tempTimer(1.5, [[send("firstaid stupidity double on##firstaid adder 3##firstaid precache 3##firstaid halt for channel on##firstaid priority reset##firstaid priority defence insulation 8##firstaid priority defence density 1##firstaid priority defence temperance 2##firstaid priority defence levitation 1")]])
tempTimer(2, [[send("firstaid priority defence speed 1##firstaid priority defence venom_resistance 4##firstaid priority defence fangbarrier 1##firstaid priority defence insomnia 1##firstaid priority defence instawake 2##firstaid priority defence waterbreathing 3##firstaid priority defence deafness 4##firstaid priority defence blindness 3##FIRSTAID PRIORITY PRESTORE LEFT LEG 15% 8##FIRSTAID PRIORITY PRESTORE RIGHT LEG 15% 8##FIRSTAID PRIORITY PRESTORE RIGHT ARM 15% 8##FIRSTAID PRIORITY PRESTORE LEFT ARM 15% 8##FIRSTAID PRIORITY PRESTORE torso 15% 8")]])
tempTimer(2.5, [[send("FIRSTAID PRIORITY PRESTORE head 15% 8##firstaid priority aeon 1##firstaid priority anorexia 1##firstaid priority indifference 1##firstaid priority destroyed_throat 1##firstaid priority crippled_body 1##firstaid priority paresis 1##firstaid priority paralysis 1##firstaid priority asleep 1##firstaid priority voyria 1##firstaid priority writhe_gunk 1")]])
tempTimer(3, [[send("firstaid priority writhe_grappled 1##firstaid priority writhe_stasis 1##firstaid priority writhe_web 1##firstaid priority writhe_vines 1##firstaid priority writhe_bind 1##firstaid priority writhe_transfix 1##firstaid priority writhe_ropes 1##firstaid priority writhe_impaled 1##firstaid priority writhe_thighlock 1##firstaid priority dazed 1##firstaid priority writhe_hoist 1##firstaid priority itchy 1##firstaid priority slickness 2##firstaid priority hellsight 2##firstaid priority asthma 2")]])
tempTimer(3.5, [[send("firstaid priority ringing_ears 2##firstaid priority limp_veins 2##firstaid priority head_mangled 2##firstaid priority crushed_chest 2##firstaid priority burnt_skin 2##firstaid priority head_bruised_critical 2##firstaid priority disrupted 2##firstaid priority withering 3##firstaid priority left_arm_amputated 3##firstaid priority right_arm_amputated 3##firstaid priority left_leg_amputated 3##firstaid priority right_leg_amputated 3##firstaid priority left_arm_damaged 3##firstaid priority right_arm_damaged 3")]])
tempTimer(4, [[send("firstaid priority left_leg_damaged 3##firstaid priority right_leg_damaged 3##firstaid priority right_leg_mangled 3##firstaid priority left_leg_mangled 3##firstaid priority right_arm_mangled 3##firstaid priority left_arm_mangled 3##firstaid priority left_leg_bruised_critical 3##firstaid priority right_leg_bruised_critical 3##firstaid priority torso_bruised_critical 3##firstaid priority voidgaze 3##firstaid priority clumsiness 3##firstaid priority sandrot 3##firstaid priority thin_blood 3")]])
tempTimer(4.5, [[send("firstaid priority disfigurement 4##firstaid priority migraine 4##firstaid priority left_leg_broken 4##firstaid priority right_leg_broken 4##firstaid priority right_arm_broken 4##firstaid priority left_arm_broken 4##firstaid priority firstaid_predict_arms 4##firstaid priority firstaid_predict_legs 4##firstaid priority first##firstaid priority impatience 4##firstaid priority infested 4##firstaid priority mirroring 4##firstaid priority pacifism 4##firstaid priority patterns 4##firstaid priority recklessness 4")]])
tempTimer(5, [[send("firstaid priority weariness 4##firstaid priority deadening 5##firstaid priority spinal_rip 5##firstaid priority head_damaged 5##firstaid priority torso_damaged 5##firstaid priority torso_mangled 5##firstaid priority left_arm_bruised 5##firstaid priority right_arm_bruised 5##firstaid priority left_leg_bruised 5##firstaid priority right_leg_bruised 5##firstaid priority head_bruised 5##firstaid priority torso_bruised 5##firstaid priority left_leg_bruised_moderate 5")]])
tempTimer(5.5, [[send("firstaid priority torso_bruised_moderate 5##firstaid priority head_bruised_moderate 5##firstaid priority gloom 5##firstaid priority blighted 5##firstaid priority blood_curse 5##firstaid priority blood_poison 5##firstaid priority confusion 5##firstaid priority idiocy 5##firstaid priority mental_disruption 5##firstaid priority merciful 5##firstaid priority physical_disruption 5##firstaid priority plodding 5##firstaid priority squelched 6")]])
tempTimer(6, [[send("firstaid priority shivering 6##firstaid priority frozen 6##firstaid priority gorged 6##firstaid priority effused_blood 6##firstaid priority blurry_vision 6##firstaid priority smashed_throat 6##firstaid priority cracked_ribs 6##firstaid priority whiplash 6##firstaid priority backstrain 6##firstaid priority collapsed_lung 6##firstaid priority left_arm_dislocated 6##firstaid priority left_leg_dislocated 6##firstaid priority right_arm_dislocated 6##firstaid priority right_leg_dislocated 6##firstaid priority sore_wrist 6")]])
tempTimer(6.5, [[send("firstaid priority sore_ankle 6##firstaid priority muscle_spasms 6##firstaid priority heatspear 6##firstaid priority sensitivity 6##firstaid priority rend 6##firstaid priority epilepsy 6##firstaid priority masochism 6##firstaid priority loneliness 6##firstaid priority haemophilia 6##firstaid priority lethargy 6##firstaid priority vomiting 6##firstaid priority impairment 6##firstaid priority crippled 6##firstaid priority allergies 6")]])
tempTimer(7, [[send("firstaid priority shaderot_heat 6##firstaid priority shaderot_wither 6##firstaid priority ablaze 7##firstaid priority hypothermia 7##firstaid priority stuttering 7##firstaid priority crippled_throat 7##firstaid priority mauled_face 7##firstaid priority deepwound 7##firstaid priority stiffness 7##firstaid priority stupidity 7##firstaid priority heartflutter 7")]])
tempTimer(7.5, [[send("firstaid priority justice 7##firstaid priority lovers_effect 7##firstaid priority laxity 7##firstaid priority egocentric 7##firstaid priority exhausted 7##firstaid priority premonition 7##firstaid priority burnt_eyes 8##firstaid priority lightwound 8##firstaid priority dementia 8##firstaid priority paranoia 8##firstaid priority dizziness 8##firstaid priority shyness 8##firstaid priority right_leg_bruised_moderate 5##firstaid priority right_arm_bruised_moderate 5##firstaid priority left_arm_bruised_moderate 5")]])
tempTimer(8, [[send("firstaid priority fear 8##firstaid priority sadness 9##firstaid priority addiction 9##firstaid priority self-pity 9##firstaid priority commitment_fear 9##firstaid priority hubris 9##firstaid priority body_odor 9##firstaid priority magnanimity 9##firstaid priority generosity 10##firstaid priority superstition 10##firstaid priority blisters 10##firstaid priority oiled 10##firstaid priority void 11##firstaid priority weakvoid 11##firstaid priority embedded_axe 12")]])
tempTimer(8.5, [[send("firstaid priority shaderot_body 6##firstaid priority shaderot_benign 6##firstaid priority shaderot_spirit 6##firstaid priority hallucinations 7##firstaid priority hypersomnia 7##firstaid priority hatred 7##firstaid priority peace 7##firstaid priority berserking 7##firstaid priority dissonance 8##firstaid priority agoraphobia 8##firstaid priority vertigo 8##firstaid priority claustrophobia 8##firstaid priority faintness 8##firstaid priority nyctophobia 3##firstaid priority vinethorns 3")]])
enableTimer("Firstaidstatustimer")

  if not snd.prestore then
    snd.send("firstaid prerestore on")
  end</script>
						<command></command>
						<packageName></packageName>
						<regex>^firstaidstart$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Auto Targeting</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Add Target List</name>
						<script>local list = matches[2]:gsub(" ", ", ")

snd.addTargetList(list)
snd.callTargetList()</script>
						<command></command>
						<packageName></packageName>
						<regex>^atl (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Add Target Position</name>
						<script>local tar = matches[2]:title()
local pos = matches[3] or nil

snd.addSingleTarget(tar, pos)

if snd.toggles.calling then
	if pos then
		send("wt Target priority: " .. tar .. " " .. pos)
	else
		send("wt Target priority: " .. tar)
	end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^atp (\w+)(?:\s)?(\d+)?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>List Targets</name>
						<script>snd.displayTargetList()
snd.callTargetList()</script>
						<command></command>
						<packageName></packageName>
						<regex>^tlist$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Clear Target List</name>
						<script>snd.clearTargetList()</script>
						<command></command>
						<packageName></packageName>
						<regex>^atlc$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Next Target</name>
						<script>snd.targeting.skip = true
snd.get_new_target()</script>
						<command></command>
						<packageName></packageName>
						<regex>^nt$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Remove Target</name>
						<script>local who = matches[2]:title()

snd.removeTarget(who)

if snd.toggles.calling then 
  send("wt Target removed: " .. who)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^atr (\w+)$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Snd Autopaths</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Using Paths</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Bash areas of your choice</name>
							<script>snd_bashAreas(matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^bashpath (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Single Area Path</name>
							<script>snd_bashArea() </script>
							<command></command>
							<packageName></packageName>
							<regex>^goarea$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Creating</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Compile Pather</name>
							<script> snd_patherCompile() </script>
							<command></command>
							<packageName></packageName>
							<regex>^path compile$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Add Path Room</name>
							<script> snd_patherAdd() </script>
							<command></command>
							<packageName></packageName>
							<regex>^path addroom$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Start Pather</name>
							<script> snd_createPather() </script>
							<command></command>
							<packageName></packageName>
							<regex>^path create$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>Rihrin Path</name>
						<script>expandAlias("bashpath illdon, tiyen, spiral, nal'jin, xaanhal, forgotten dome, a basilisk lair, clawhook range, bakal chasm, dovan, dramedo, depths, ia'shal, maul")</script>
						<command></command>
						<packageName></packageName>
						<regex>^bash1$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>YALL</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>check ylem log</name>
						<script>compiled_logged_records = {}
compiled_logged_tallies = {}
local ylem_logger_orgs = {
Spinesreach = "command",
Bloodloch = "raiders",
Enorian = "enorian",
Duiran = "dion"
}
local org_to_read = ylem_logger_orgs[gmcp.Char.Status.city]
enableTrigger("ylem readlog parser")
send("readlog "..org_to_read.." 0 1", false)
send("readlog "..org_to_read.." 0 2", false)
send("readlog "..org_to_read.." 0 3", false)
send("readlog "..org_to_read.." 0 4", false)
send("readlog "..org_to_read.." 0 5", false)
send("readlog "..org_to_read.." 0 6", false)
send("readlog "..org_to_read.." 0 7", false)
tempTimer(3, [[expandAlias("printylem")]])
</script>
						<command></command>
						<packageName></packageName>
						<regex>^ylemlog$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>print ylem log</name>
						<script>disableTrigger("ylem readlog parser")
cecho("\n&lt;green&gt;YALL is thinking&lt;white&gt;...\n...\n...\n...\n\n")
cecho("&lt;green&gt;Over the previous seven days, "..gmcp.Char.Status.city.." has recorded:")
for activity in pairs(compiled_logged_tallies) do
  cecho("\n&lt;white&gt;"..compiled_logged_tallies[activity].." "..activity.."s")
end
cecho("\n&lt;green&gt;------------------------")
cecho("\n&lt;white&gt;Attendence is as follows")
cecho("\n&lt;green&gt;------------------------")
for name in pairs(compiled_logged_records) do
  cecho("\n&lt;white&gt;"..name..": ")
  for activity in pairs(compiled_logged_records[name]) do
    cecho(compiled_logged_records[name][activity].." "..activity.."s ")
  end
end
--display(compiled_logged_records)
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^printylem$</regex>
					</Alias>
				</AliasGroup>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage />
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
