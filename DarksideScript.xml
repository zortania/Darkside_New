<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage />
	<TimerPackage />
	<AliasPackage />
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Darkside 5.0</name>
			<packageName>Sunder v4.12</packageName>
			<script></script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Darkside</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Core</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="no" isFolder="no">
						<name>Changes / Changelog</name>
						<packageName></packageName>
						<script>--v5.0 - Split off of a Separate Shadow version called Darkside (Zortania's Attempt to Separate)

--CHANGELOG OF CHANGES

--5.10
--Idk any more. I've updated to version 5.52 of Sunder. May have missed a few things here and there, but trying to maintain it the same.

--5.09
--Removed all sndb parts. Reverted back to old style for snd.shadow and snd.spirit lists.

--5.08
--Starting work on merging more of Mazzsys curing into the system.
--Welt tracking for Zealots.
--Avoidance switching added.
--Updated all limb broken affs to Sunder's new format to match the game better.
--Added in Revenant/Warden defs.
--Added in Revenant aliases converted from Templar ones.
--Updated all writhe affs, too. Might have broken the old Skiva aliases.
--Indorani cards updated to match Sunder
--Updated parry/no_parry for new writhe and stuff.
--Updated deffing up to new Sunder version, more slimlined.
--Pondering updating to more slim-lined approach Bulrok/Stine started, script is in but no triggers yet.

--5.07
--Tracking for pendelum on both Zealot side and curing side.
--Updates to firstaidstart alias.
--Fixes for Zealot and limbs aliases added.
--Fixes for Archi/Scio tracking.
--Merged updates from regular sunder into Darkside, including help files/sndb/etc.
--Added more bashing paths to the big/endgame one, including new zones in Albedos.
--Updated Teradrim items from comparing Ehtias' posted information. This includes adding some of his test aliases.
--Shifter trigger updates for better accuracy and expanded functionality.
--Updates for Scio/Archi bashing from Saidenn.
--Class fixes from last two classlead rounds, that can be done in code.
--Started updates for elixir changes, and tracking your affs/cures by coloring instead of the line alone to help against illusions.

--5.06
--Cleaned up monk and zealot stuff
--Included new vivisect alias for Indorani
--Fixed some defs
--Fixed some curative stuff
--Updates to vampire things
--Lots of other just QOL changes I didn't document for myeslf so no clue

--5.05
--New toggle for questing. Queston to turn it on. This is to gate all that auto-questing and stop it from spamming.
--With this toggle comes questing for Aerie, Attica, Arbothia, and a few other places.
--Note that I will never make a full auto-quester/walker. But, having a system that'll allow you to still walk around manually and do the quests? Sure.
--Additional blackout tracking implemeneted.
--Additional curing added, primarily for clotting/standing/waking/endgame/backup sipping/tree from prompt.
--Prompt trigger actually changed to a prompt.
--First 1v1 script coded in for Archivist and tested.
--More tracking aff fixes/additions made.
--Updated Sciomancer code to not consider firefly stuff.
--Put in proper shaderot curing tracking for if darkness in room or not. Need to test.
--Lots of timers put in, just a fyi. Mostly related to advanced curing as I build it out. Yes, they have stupid names. Blame Mazz.
--Fix to mending tracking to hopefully help with shifter tracking.

--5.04b
--Minimal blackout stuff put in for testing. Mostly to build upon.
--Skiva's aliases for shapeshifter in and probably borking but mostly working.
--Golem calling on defup for Teradrim.
--Sciomancer channel shadow on defup.
--Updated Teradrim bashing from Ehtias.
--Some other shit, idk, I lost track this time.

--5.04
--Bunch of teradrim/praenomen fixes were put in and offered up in a 'a' version of 5.03.
--Fixed the 'pth' bugging in pathing (thanks Rebra)
--Took out 'eval' if you're calling and left it just for bashing.
--Added scour to 'pon' toggle for active curing. Teradrim/Carnifex/Praenomen have this setup so far.
--Teradrim routes fixed/tweaked thanks to Ehtias.
--Updated several things in appending chat, including deathsight.
--Auto-web-inviter if you have web calling on. This will invite if unstable and calling and they ask on web on raiders, or just in general if you have calling on and they send you a tell or login.
--Prepping some lines for Archivist absorb. Added new toggle for later (alias is 'sup' for support modes).
--Starting priority curing for several lifer classes. Based off Mazzsys. Needs testing.
--Fixed some shapeshifter defenses.
--Started putting monk triggers in from fallout so we can build monk defenses, but not converted, so folder is disabled. Do not enable folder or be prepared for your system to scream at you.
--New alias for sciomancers - kll. It's 1v1, but needs work.
--New alias for archivists - kll. Needs testing and work, probably best to not touch.
--Still need to work on a lot of things with curing, but panacea tracking may be improved for shaderot at least. 
--Lots of fixes in scio tracking in general.
--Some Teradrim fixes, too. Defenses. Tracking. Etc.
--LDD added for shapeshifter, but also separate ones for 'wolf' and 'bear'. Can build these out as needed.

--5.03
--Updated for when you die to clear out enemy affs/etc. Will test.
--Added alias 'whos' to check for who grouped peoples.
--Alias and all related items converted from 'pt' to 'pth'
--Alias for 'landmarks' is now 'landmarkst'
--Updated Syssin code for multi-aff checking
--Added lipreading to Syssin defense
--Put some stuff in to recognize to not channel any more. See if it helps with things.
--Testing Integration of Swarm Caller (with hybrid switch to snd.spirit if needed). Check out 'Auto Targeting' aliases. Let me know how it works.
--Vermin for Bloodloch, Spinesreach, and Duiran added. Vnums pending for Enorian. Bases which city it chooses from by your personal city.

--5.02
--Added in correction on class abilities for future curing updates.
--Scenting now, instead of reporting to WT, shows you the vnums and room numbers of people. Can click to path to them.
--Coded in counterattack stuff for Tcanna/Drakuum. It wield shield.
--Coded in a channeling feature (thanks Mjoll) to use for a 'pause'.
--Said 'pause' setup for waiting for dwarves to pop back up and go back to attacking them. Hopefully. Go into Maus/Tcanna to test.
--Auto-cham added. Type in 'tcham' to toggle it on. Thanks Zuleika!
--Put in a bunch of color echoes for auto-kill attacks, like reave and noose.
--Put in echo of when you're tumbling, and also should try to auto-cloak when you finish.
--Added echo for Ascendril enrapture, since it's something you could easily cancel someone doing.
--Alias "tr" will turn on rockharvest like before, but you can also then go to Mor and do "rockgo" and do a basic path around to rockharvest. Needs work.
--Bashing split up into Bloodwood, Vortex, Lair, Endgame, High, Medium, Low for your gogo paths.
--Several new paths added for lower level areas.
--Added in auto grab for lure, hammer throw, neckdrag for pvp aliases.
--Fixed Syssin bashing to change newbie toggle from bite to garrote.

--5.01
--Fixed the 'dison' alias to that. Whups.
--Added Khauskin to basher low.
--Updated autofisher alias to unwield all and wield pole, then cast line, for Archivist. Will build gradually for others.
--Archivist has had some route changes.
--Added in 'tumble' stops into Archivist, Teradrim, and Praenomen. These are done in the pvp aliases as they run, rather than off the tumble trigger.
--Updated some Sciomancer stuff to check for skills and whatnot. Just mostly in PvP.
--Loaded a bunch of NPCs into different zone lists.
--Added in reminder that you might want to GTFO with Calamity ticking.
--Added reset/clear of affs of you and enemy on your death. This checks by 'you are dead' message and also by having 0 health via gmcp so it should avoid illusion stuff.
--Maybe, just maybe, put in a fix that if it goes to try to parry and you don't have the skill - it turns parrying off. We'll see how bad this breaks people.
--Put in temporary fix to elevate torso curing if you are getting the message for hypothermia caloric fail.
--Updated keypad 0 for expanding 'aa' alias.

--5.0
--Reverted setup of Sciomancer triggers. Not sure why they were changed as extremely as they were, so didn't want to risk it.
--Fixed several Archivist issues.
--Fixed Carnifex purge and Praenomen purify to properly work and have alias toggle to use.
--Somehow this version was missing Sciomancer bashing. Fixed, and double-checked all bashing to confirm accurate.
--Renamed all Vampire items to Praenomen.
--Experimental vermin basher for Spinesreach added. Alias is 'vermon'. Auto-paths through part of Spinesreach and then goes to sell.
--Added aliases for 'firstaidstart' to setup basic firstaid priorities and 'OOC' to send ooc tells to someone.
--Put disperse toggle back in. 'dison' to turn it on or off, will work off faction member list.
--Replaced keypad keys with my usual, since they give you up/down/etc and make more sense.
--Added in a bunch of movement related triggers and set them up for you to call out info if you have target calling on.
--With the above item, also made it so vamps attempt to auto-feed on someone tumbling and everyone else tries to brazier.
--Fixed trigger where people ask 'where are you x' to check and call out where you are. Needs testing.
--Put in triggers to say who enters the fracture, for those who can sense it.
--Added in 'version' alias to check what version you're on.
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>init</name>
						<packageName></packageName>
						<script>
snd = snd or {}

setConsoleBufferSize("main", 100000, 1000)

snd.gui = snd.gui or {
  enabled = true,
  }
 

fish = fish or {}</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Variables</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>options</name>
							<packageName></packageName>
							<script>snd.sep = snd.sep or "##" -- important! CONFIG SEPARATOR value
snd.version = "5.10"

snd.class = snd.class or "" -- your class, used for bashing
snd.limb_dmg_done = snd.limb_dmg_done or 6.5 -- really only for Templars
snd.faction = snd.faction or "" -- your faction, spirit or shadow
snd.mount = snd.mount or "276905" -- your horse's ID number

snd.stats = { 
  xp = 0,
  last_xp = 0,
  max_xp = 0,
}

snd.toggles = {
active = true, -- is the system running?
healing = false, -- keep off, incomplete
parrying = true, -- parry most-damaged limb
defenses = true, -- maintain defenses like cloak and density
calling = false, -- call targets on web chat
listening = false, -- listening to targets on web chat
affcalling = false, -- announce afflictions as you hit
chameleon = false, -- use chameleon to change name on qw/who
standing = true, -- like healing, also incomplete
clotting = true, -- incomplete
bashing = false, -- bashing! Woo!
fasthunt = false, -- automatically clear bashing rooms as you enter
generics = false, -- target by name instead of number while bashing
gathering = true, -- pick up corpses/items/gold while bashing
lighting = true, -- light pipes
attacking = false, -- attacking with a PvP function
balecho = true, -- replace balance lines with shorthand
atkecho = true, -- replace attack lines with shorthand
newbie = false, -- use newbie bashing attacks
cobra = false, -- use of tekura cobra stance
lightning = false, -- use Luminary/Earthcaller lightning for bashing
gallop = false, -- use gallop while pathing around
dash = false, -- use of dash while pathing around
rockharvest = false, -- are you harvesting rocks?
disperse = false, -- use disperse to remove writhes from allies
questing = false, -- Used to stop you from randomly questing while doing other stuff
vermin = false, -- Toggle vermin walker/basher
channeling = false, -- this is if you need to use channeling abilities
scepter = false,
zeal = false, -- use Templar or Revenant-type zeal for bashing
fitness = true, -- have access to the fitness ability
shrug = false, -- have access to shrug
purge = false, -- have access to Carnifex/Revenant purge
purify = false, -- have access to Praenomen/Akkari purify
panacea = true, -- have access to Shaman/Alchemist panacea
scour = false, -- have access to Teradrim scour
roe = false, -- harvesting fishroe
support = false, -- if you want to use a support system or not
farm = false, -- farming
goggles = true, -- Do you have the antiquated artifact goggles?
goggle_level = goggle_level or "20",
gauntlet_level = gauntlet_level or "6",
nontargetgags = true, -- spam filter for removing non-target curing
aegis = false,
auto_reject = false,
fastwalk = false,

}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>toggles</name>
							<packageName></packageName>
							<script>function snd.toggle(toggle)
  if snd.toggles[toggle] then
    snd.toggles[toggle] = false
    snd.message(string.title(toggle) .. " &lt;red&gt;OFF&lt;white&gt;!", "toggle")
    if toggle == "chameleon" then
      expandAlias("kd chameleon", false)
    end
  else
    snd.toggles[toggle] = true
    snd.message(string.title(toggle) .. " &lt;green&gt;ON&lt;white&gt;!", "toggle")
    if toggle == "chameleon" then
      snd.load_def(snd.class:lower())
      snd.defenses["def_chameleon"].needit = true
    end
  end
  
  snd.updateToggles()

  send(" ")
end

</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>vitals</name>
							<packageName></packageName>
							<script>snd.balance = snd.balance or {
fitness = true,
shrug = true,
battle = true,
hound = true,
implant = true,
soulpoison = true,
scour = true,
purge = true,
purify = true,
panacea = true,
cleanse = true,
fool = true,
fury = true,
shadowsphere = true,
chimera = true,
soulmaster = true,
envelop = true,
aeon = true,
mend = true,
expunge = true,
nimbleness = true,
momentum = true,
absorb = true,
earthenwill = true,
morph = true,
furor = true,
vitality = true,
mindcleanse = false,
mindpush = false,
blackout = true,
regenerate = true,
mindcommand = true,
kaistrike = true,
seize = true,
madness = true,
backstab = true,
rage = true,
lycberserk = true,
pendulum = true,
barrier = true,
crystal = true,
sorcery_transfix = true,
  inspire = true,
  bravado = true,
  might = true,
  leech = true,
  shadowsphere = true,
  unbroken = true,
  soulcage = true,
  wand = true,
}

snd.waiting = snd.waiting or {
balance = false,
equilibrium = false,
rarm = false,
larm = false,
quest_get = false,
lighting = false,
elixir = false,
herb = false,
vial = false,
salve = false,
moss = false,
writhe = false,
concentrate = false,
tree = false,
focus = false,
clot = false,
parry = false,
queue = false,
who_here = false,
hound = false,
scour = false,
purge = false,
purify = false,
panacea = false,
melting = false,
nimbleness = false,
}

snd.my_limb_damage = snd.my_limb_damage or {
head = 0,
torso = 0,
["left arm"] = 0,
["right arm"] = 0,
["left leg"] = 0,
["right leg"] = 0
}

snd.parrying = snd.parrying or "none"
snd.pipes_lit = snd.pipes_lit or false
snd.emptypipe = snd.emptypipe or "none"
snd.smokedpipe = snd.smokedpipe or "none"

snd.sent = {

}

snd.cur = snd.cur or {
herb = "",
drink = "",
vial = "",
salve = "",
pipe = ""
}

snd.last = snd.last or {
elixir = "",
herb = "",
smoke = "",
salve = "",
tattoo = "",
focus = "",
tree = ""
}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>misc</name>
							<packageName></packageName>
							<script>
snd.queued = snd.queued or nil
snd.target = snd.target or "none"
snd.target_gone = snd.target_gone or false
snd.moving_to = snd.moving_to or "none"
snd.backup_path = snd.backup_path or "none"
snd.can_path = snd.can_path or true
snd.scented = snd.scented or {}
snd.items = snd.items or {}
snd.group = snd.group or {}
snd.wielded = snd.wielded or {left =  {name="", id=""}, right = {name="", id=""}}
snd.eld = snd.eld or 0
snd.pathing = snd.pathing or false
snd.need_fitness = snd.need_fitness or false
snd.need_aegis = snd.need_aegis or false
snd.shopih = snd.shopih or false
snd.toparry = snd.toparry or "none"
snd.heelrush = snd.heelrush or "none"
snd.counterattack_active = snd.counterattack_active or false
snd.ylem_check = snd.ylem_check or false
snd.melting = false

snd.delete_prompt = snd.delete_prompt or false

snd.used = snd.used or {
shield = false,
rebounding = false,
paste = false
}

snd.my = snd.my or {
area = "",
room = "",
room_name = "",
room_exits = "",
}

snd.new = snd.new or {
room = false,
area = false
}

snd.pills = {
acuity = "a pill of acuity",
amaurosis = "a pill of amaurosis",
anabiotic = "an anabiotic pill",
antipsychotic = "an antipsychotic pill",
coagulation = "a coagulation pill",
decongestant = "a decongestant pill",
depressant = "a depressant pill",
euphoriant = "an euphoriant pill",
kawhe = "a kawhe pill",
opiate = "an opiate pill",
ototoxin = "an ototoxin pill",
panacea = "a panacea pill",
steroid = "a steroid pill",
stimulant = "a stimulant pill",
thanatonin = "a thanatonin pill",
eucrasia = "an eucrasia pill",
waterbreathing = "a pill of waterbreathing",
}


snd.balance_pills = {
"antipsychotic",
"amaurosis",
"steroid",
"opiate",
"panacea",
"euphoriant",
"ototoxin",
"decongestant",
"stimulant",
"depressant",
"waterbreathing",
"eucrasia",
}

snd.outred = snd.outred or {
ash = 0,
bayberry = 0,
bellwort = 0,
bloodroot = 0,
cohosh = 0,
echinacea = 0,
elm = 0,
ginseng = 0,
goldenseal = 0,
hawthorn = 0,
help = 0,
kola = 0,
lobelia = 0,
moss = 0,
pear = 0,
sileris = 0,
skullcap = 0,
valerian = 0,
antipsychotic = 0,
eucrasia = 0,
amaurosis = 0,
steroid = 0,
opiate = 0,
panacea = 0,
euphoriant = 0,
ototoxin = 0,
decongestant = 0,
stimulant = 0,
depressant = 0,
waterbreathing = 0,
}

snd.physical_affs = {
"paralysis",
"paresis",
"right_arm_broken",
"left_arm_broken",
"right_leg_broken",
"left_leg_broken",
"haemophilia",
"asthma",
"impairment",
"clumsiness",
"vomiting",
"sensitivity",
"ringing_ears",
"lethargy",
"blood_poison",
"blood_curse",
"crippled_throat",
"slough",
"disfigurement",
"blisters",
"lightwound",
"ablaze",
"hypothermia",
"shivering",
"frozen",
"limp_veins",
"rend",
"exhausted",
"allergies",
"addiction",
"hypersomnia",
"heartflutter",
"whiplash",
"backstrain",
"sore_wrist",
"sore_ankle", 
"burnt_eyes",
"blurry_vision",
"migraine",
"deadening",
"ice_encased",
}

snd.mental_affs = {
"egocentric",
"stupidity",
"anorexia",
"epilepsy",
"mirroring",
"mental_disruption",
"peace",
"paranoia",
"hallucinations",
"stuttering",
"dizziness",
"indifference",
"berserking",
"pacifism",
"lovers_effect",
"laxity",
"hatred",
"generosity",
"claustrophobia",
"vertigo",
"faintness",
"loneliness",
"agoraphobia",
"masochism",
"recklessness",
"weariness",
"impatience",
"confusion",
"dementia",
"dread"
}

snd.all_affs =  table.n_union(snd.physical_affs, snd.mental_affs, { "hypochondria",})

snd.circle_affs = {
"merciful",
"masochism",
"berserking",
"recklessness",
"sealing_circle"
}
snd.triangle_affs = {
"laxity",
"lovers_effect",
"peace",
"magnanimity",
"sealing_triangle"
}
snd.square_affs = {
"dizziness",
"faintness",
"epilepsy",
"shyness",
"sealing_square"
}

snd.weapon_types = {
"club",
"flail",
"mace",
"morningstar",
"greatmaul",
"warhammer",
"handaxe",
"javelin",
"battleaxe",
"broadsword",
"dagger",
"stiletto",
"dirk",
"falchion",
"falcata",
"flyssa",
"longsword",
"rapier",
"sarissa",
"scimitar",
"shortsword",
"spear",
"trident",
"whip",
"bardiche",
"bastard",
"falx",
"glaive",
"halberd",
"scythe",
"manta",
"shotel",

"banded",
"buckler",
"cavalry",
"kite",
"tower",
"shield",
}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>landmarks</name>
							<packageName></packageName>
							<script>
snd.landmarks = {
["eno"] = "enorian",
["dui"] = "duiran",
["sp"] = "spinesreach",
["bl"] = "bloodloch",
["es"] = "esterport",
["crack"] = "9193", -- Bloodloch meeting place
["ty"] = "22066", -- templar training room
["rd"] = "64874", -- Rising dawn - hidden room in enorian
["milk"] = "21899", -- Enorian milking room
["bp"] = "9330", -- boiling point, bloodloch training room
["im"] = "52748", -- ironmaw, spinesreach training room
["dir"] = "directory",
["tear"] = "19296", -- tear of lleis
["tw"] = "three widows",
["tw1"] = "23655", -- three widows mine
["tw2"] = "23708", -- three widows cows
["tw3"] = "23137", -- jinjin
["tw4"] = "58744", -- turn in alpacas
["tw5"] = "58740", -- turn in kestrels
["stp"] = "14050", -- spinesreach stipend
["mine"] = "mines", -- in case you typo like me all the time :(
["hlb"] = "50504", -- radek in helba
["hlbp"] = "57744", -- helba pickaxes for sale
["hlbm"] = "23359", -- helba mine
["ag"] = "12335", -- agrasha
["put"] = "28511", -- putoran
["gre"] = "37005", -- grecht with the garden
["oy"] = "11203", -- oysters for bruce
["bruce"] = "11146", -- turn in sapphires
["ann"] = "23246", -- annaria
["tue"] = "23282", -- tuera
["tlm"] = "23236", -- near tellimerius, so darkies don't die
["tlmt"] = "23219", -- turn in tellimerius
["vn"] = "22908", -- venicus
["vn1"] = "22883", -- venicus turnin
["sr"] = "siroccian mountains", -- shorthand
["sr1"] = "58748", -- turn in ores, nuggets, and coal
["sr2"] = "1429", -- if you found the chest with the axe
["ms1"] = "24493",
["ms2"] = "65216",
["ms3"] = "59970",
["ms4"] = "60126",
["ms5"] = "59967",
["ms6"] = "59955",
["or"] = "62642", -- orrery
--hunting grounds
["hg"] = "4746",
["nighteye"] = "9342",
["claw"] = "9341",
["shade"] = "6090",
["staghelm"] = "9348",
["silence"] = "4614",
["rose"] = "9341",
["ivory"] = "6842",
["rowan"] = "6842",
["hgshrine"] = "23489",
}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>class_catch</name>
							<packageName></packageName>
							<script>function class_catch()

  if snd.class == "Luminary" then
    snd.defenses.def_constitution = snd.alternative_class_defenses.Luminary_constitution
  end
  
  if snd.class == "Earthcaller" then
    snd.defenses.def_constitution = snd.alternative_class_defenses.Earthcaller_constitution
  end
  
  if snd.class == "Syssin" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Syssin_shroud
  end
  
  if snd.class == "Carnifex" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Carnifex_shroud
  end
  
  if snd.class == "Warden" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Warden_shroud
    snd.defenses.def_rigor = snd.alternative_class_defenses.Warden_rigor
    snd.defenses.def_fearless = snd.alternative_class_defenses.Warden_fearless
  end
  
  if snd.class == "Sciomancer" then
    snd.defenses.def_rigor = snd.alternative_class_defenses.Sciomancer_rigor
    snd.defenses.def_empowered_moon = snd.alternative_class_defenses.Sciomancer_empowered_moon
  end
  
   if snd.class == "Indorani" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Indorani_shroud
  end
  
   if snd.class == "Oneiromancer" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Oneiromancer_shroud
  end
  
   if snd.class == "Ascendril" then
    snd.defenses.def_empowered_moon = snd.alternative_class_defenses.Ascendril_empowered_moon
  end
  
   if snd.class == "Bloodborn" then
    snd.defenses.def_empowered_moon = snd.alternative_class_defenses.Bloodborn_empowered_moon
  end
  
   if snd.class == "Runecarver" then
    snd.defenses.def_empowered_moon = snd.alternative_class_defenses.Runecarver_empowered_moon
  end
  
  if snd.class == "Templar" then
   snd.defenses.def_maingauche = snd.alternative_class_defenses.Templar_maingauche
  end
  
  if snd.class == "Revenant" then
   snd.defenses.def_maingauche = snd.alternative_class_defenses.Revenant_maingauche
  end

  if snd.assumed_class ~= nil then return end
	local stats = gmcp.Char.Vitals.charstats
	for i,v in ipairs(stats) do
 		stat = string.split(v, ": ")
 		if stat[1] == "Class" then
   			snd.class = stat[2]
  		end
	end
  
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Vitals</string>
							</eventHandlerList>
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Events</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>gmcp_room</name>
							<packageName></packageName>
							<script>function gmcp_room()
--Check current room
 if snd.my.room ~= gmcp.Room.Info.num then
--Clear room effects
--Set current room
  snd.my.room = gmcp.Room.Info.num
  snd.my.room_name = gmcp.Room.Info.name
  snd.my.room_exits = {}
  for ex in pairs(gmcp.Room.Info.exits) do
    table.insert(snd.my.room_exits, ex)
  end
  if snd.gui.enabled then
    if #snd.my.room_exits &gt;= 1 then
      exits:echo("&lt;center&gt;"..table.concat(snd.my.room_exits, ", ").."&lt;/center&gt;")
    else
      exits:echo("&lt;center&gt;no exits&lt;/center")
    end
  end
  if snd.toggles.rockharvest then
    snd.send("harvest rock")
  end
  if snd.toggles.plants then
    snd.send("plants")
  end
  if snd.bashing_loaded then
    snd.vermin = 0
    if snd.toggles.vermin then
      enableTimer("moveroom")
    end
--Initiate fasthunt if necessary
    snd.need_loot = false
    snd.new.room = true
    snd.room_clear = false
    if (snd.my.room == 56222 or snd.my.room == 55185 or snd.my.room == 55150) and snd.toggles.fasthunt then
      snd.send("pull lever")
    end
    if (snd.my.room == 55187 or snd.my.room == 55184) and snd.toggles.fasthunt then
      snd.send("pull 2.lever")
    end
    if snd.my.room == 16941 then
      snd.send("push bookcase")
    end
    if snd.my.room == 16949 then
      snd.send("pull lever")
    end
  end
  if snd.offense_loaded then
    snd.class_hitting = "none"
    snd.person_hitting = "none"
  end
  if snd.ylem_loaded then
    if snd.my.room == tonumber(ylm.next_zone) then
      snd.send("leylines")
    end
  end
end
--Check current area
  if snd.my.area ~= gmcp.Room.Info.area then
    if
      snd.my.area ~= "Eld" and
      (
        not (snd.my.area:find("Vortex") and gmcp.Room.Info.area == "the Shattered Vortex") or
        (snd.my.area:find("Vortex") and gmcp.Room.Info.area ~= "the Shattered Vortex")
      )
    then
      --have exceptions for fracture and vortex then
      snd.my.area = gmcp.Room.Info.area
      --Initiate new area targets, if necessary
      snd.new.area = true
      --Set current area
    end
  end
end</script>
							<eventHandlerList>
								<string>gmcp.Room.Info</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_vitals</name>
							<packageName></packageName>
							<script>function gmcp_vitals()
  -- snd.core()
  if gmcp.Char.Vitals.prone == "1" and snd.not_entangled() and snd.not_aff("paralysis") then
    snd.aff_have("prone")
  else
    snd.aff_remove("prone")
  end
  if snd.can_cast() then
    snd.last_attack = "none"
  end
  if tonumber(gmcp.Char.Vitals.bleeding) &gt;= 200 then
    snd.aff_have("bleeding")
  else
    snd.aff_remove("bleeding")
  end
  hp = (100 * (gmcp.Char.Vitals.hp / gmcp.Char.Vitals.maxhp)) or 100
  if hp &lt; 10 then
    snd.aff_have("health_10")
  elseif hp &lt; 35 then
    snd.aff_remove("health_10")
    snd.aff_have("health_35")
  elseif hp &lt; 55 then
    snd.aff_remove("health_10")
    snd.aff_remove("health_35")
    snd.aff_have("health_55")
  elseif hp &lt; 75 then
    snd.aff_remove("health_10")
    snd.aff_remove("health_35")
    snd.aff_remove("health_55")
    snd.aff_have("health_75")
  else
    snd.aff_remove("health_10")
    snd.aff_remove("health_35")
    snd.aff_remove("health_55")
    snd.aff_remove("health_75")
  end
  if hp &lt; 65 then
    snd.aff_have("health_low")
  else
    snd.aff_remove("health_low")
  end
  mp = 100 * (gmcp.Char.Vitals.mp / gmcp.Char.Vitals.maxmp)
  if mp &lt; 10 then
    snd.aff_have("mana_10")
  elseif mp &lt; 35 then
    snd.aff_remove("mana_10")
    snd.aff_have("mana_35")
  elseif mp &lt; 55 then
    snd.aff_remove("mana_10")
    snd.aff_remove("mana_35")
    snd.aff_have("mana_55")
  elseif mp &lt; 75 then
    snd.aff_remove("mana_10")
    snd.aff_remove("mana_35")
    snd.aff_remove("mana_55")
    snd.aff_have("mana_75")
  else
    snd.aff_remove("mana_10")
    snd.aff_remove("mana_35")
    snd.aff_remove("mana_55")
    snd.aff_remove("mana_75")
  end
  if mp &lt; 65 then
    snd.aff_have("mana_low")
  else
    snd.aff_remove("mana_low")
  end
  hp = 100 * (gmcp.Char.Vitals.hp / gmcp.Char.Vitals.maxhp)
  if
    snd.toggles.attacking and snd.offense_loaded and snd.check_aegis() and snd.toggles.aegis
    and (snd.count(snd.people_hitting_me) &gt;= 3 or snd.aff_tally() &gt;= 5 or hp &lt; 50)
    and (tonumber(gmcp.Char.Vitals.residual) &gt;= 60 
    or (tonumber(gmcp.Char.Vitals.residual) &gt;= 30 and snd.defenses.def_milestones_half_residual.state == "deffed"))
  then
    snd.need_aegis = true
  else
    snd.need_aegis = false
  end 
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Vitals</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_items</name>
							<packageName></packageName>
							<script>
function gmcp_items()
 if gmcp.Char.Items.List.location == "room" then
  snd.items = {}
  snd.agros = {}
  for _, v in ipairs(gmcp.Char.Items.List.items) do
   if not snd.items[v.name] then snd.items[v.name] = {} end
   if v.icon == "face-angry-horns" then
    if not snd.agros[v.name] then snd.agros[v.name] = {} end
      table.insert(snd.agros[v.name], v.id) --insert to agros table
      table.insert(snd.items[v.name], 1, v.id) --insert at start of table
    else
     table.insert(snd.items[v.name], v.id) --insert at end of table
   end
  end 
  snd.updateMonolith()
 elseif gmcp.Char.Items.List.location == "inv" then
  snd.wielded = {left =  {name="", id=""}, right = {name="", id=""}}
  if gmcp.Char.Vitals.wield_left ~= "empty" then
    snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
    snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
  end
  if gmcp.Char.Vitals.wield_right ~= "empty" then
    snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
    snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
  end
 end
 for item in pairs(snd.items) do
    if item == "some gold sovereigns" and #snd.items[item] &gt;= 1 then
      table.insert(snd.gathering, "sovereigns")
    elseif table.contains(snd.possible_items, item) or table.contains(snd.global_items, item) then
      for id in pairs(snd.items[item]) do
        table.insert(snd.gathering, snd.items[item][id])
      end
    end
  end
 snd.updateItems()
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Items.List</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_item_add</name>
							<packageName></packageName>
							<script>
function gmcp_item_add()
 v = gmcp.Char.Items.Add.item
 if gmcp.Char.Items.Add.location == "room" then
  if not snd.items[v.name] then snd.items[v.name] = {} end
  table.insert(snd.items[v.name], v.id)
  snd.updateMonolith()
 elseif gmcp.Char.Items.List ~= nil then
  if gmcp.Char.Vitals.wield_left ~= "empty" then
    snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
    snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
  end
  if gmcp.Char.Vitals.wield_right ~= "empty" then
    snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
    snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
  end
 end
 snd.updateItems()
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Items.Add</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_item_remove</name>
							<packageName></packageName>
							<script>function gmcp_item_remove()
  v = gmcp.Char.Items.Remove.item
  if gmcp.Char.Items.Remove.location == "room" then
    if v == snd.bashing.target and snd.toggles.fasthunt then
      snd.runBasher()
    end
    for item in pairs(snd.items) do
      for id in pairs(snd.items[item]) do
        if snd.items[item][id] == v.id then
          table.remove(snd.items[item], id)
          if #snd.items[item] == 0 then
            snd.items[item] = nil
          end
        end
      end
    end
    snd.updateMonolith()
  elseif gmcp.Char.Items.List ~= nil then
    if gmcp.Char.Items.List.location == "inv" then
      if gmcp.Char.Vitals.wield_left ~= "empty" then
        snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
        snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
      end
      if gmcp.Char.Vitals.wield_right ~= "empty" then
        snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
        snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
      end
    end
  end
  snd.updateItems()
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Items.Remove</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_item_update</name>
							<packageName></packageName>
							<script>function gmcp_item_update()
 v = gmcp.Char.Items.Update.item
 --echo(v.name)
 if gmcp.Char.Items.Update.location == "inv" then
    if gmcp.Char.Vitals.wield_left ~= "empty" then
      snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
      snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
    end
    if gmcp.Char.Vitals.wield_left ~= "empty" then
      snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
      snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
    end
	else
	 if snd.wielded.left.id == v.id then
	  snd.wielded.left.name = ""
		snd.wielded.left.id = ""
	 elseif snd.wielded.right.id == v.id then
	  snd.wielded.right.name = ""
		snd.wielded.right.id = ""
	 end
	end
 snd.updateItems()
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Items.Update</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_people_update</name>
							<packageName></packageName>
							<script>function gmcp_people_update()
  snd.players_here = {}
  for k, v in ipairs(gmcp.Room.Players) do
    if not table.contains(snd.players_here, gmcp.Room.Players[k].name) then
      table.insert(snd.players_here, gmcp.Room.Players[k].name)
    end
  end
  snd.are_we_checking_ql = false
  people_update()
end</script>
							<eventHandlerList>
								<string>gmcp.Room.Players</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_people_remove</name>
							<packageName></packageName>
							<script>function gmcp_people_remove()

local removePlayer = gmcp.Room.RemovePlayer
  if table.contains(snd.players_here, removePlayer) then
      table.remove(snd.players_here, table.index_of(snd.players_here, removePlayer))   
  end
    people_update()
end


</script>
							<eventHandlerList>
								<string>gmcp.Room.RemovePlayer</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_people_add</name>
							<packageName></packageName>
							<script>function gmcp_people_add()
  local newPlayers = gmcp.Room.AddPlayer.name
  if not table.contains(snd.players_here, newPlayers) then
    table.insert(snd.players_here, newPlayers)
    people_update()
  end
end</script>
							<eventHandlerList>
								<string>gmcp.Room.AddPlayer</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>updating the boxes for people in room</name>
							<packageName></packageName>
							<script>people_update = function()
	spirit_people:clear()
	shadow_people:clear()

	local spiritpeoplehere = {}
  
  if gmcp.Char.Status.name == "Rhesk" then
  
	for name, val in pairs(snd.players_here) do
		if val and (table.isMember(snd.rheskallies, val) or table.isMember(snd.rheskallies, val)) then 
			table.insert(spiritpeoplehere, val) 
		end
	end
	
	local shadowpeoplehere = {}
	for name, val in pairs(snd.players_here) do
		if val and (table.isMember(snd.rheskenemies, val) or table.isMember(snd.rheskenemies, val)) then
			table.insert(shadowpeoplehere, val) 
		end
	end
	
	if #spiritpeoplehere &gt;= 1 then
	 spirit_people:echo("&lt;center&gt;"..table.concat(spiritpeoplehere, "&lt;br&gt;").."&lt;/center&gt;")
	 snd.spirit_targets = spiritpeoplehere
  end
	
	if #shadowpeoplehere &gt;= 1 then
	 shadow_people:echo("&lt;center&gt;"..table.concat(shadowpeoplehere, "&lt;br&gt;").."&lt;/center&gt;")
	 snd.shadow_targets = shadowpeoplehere
  end
  
  else
  
  for name, val in pairs(snd.players_here) do
		if val and (table.isMember(snd.spirit, val) or table.isMember(snd.randomspirit, val)) then 
			table.insert(spiritpeoplehere, val) 
		end
	end
	
	local shadowpeoplehere = {}
	for name, val in pairs(snd.players_here) do
		if val and (table.isMember(snd.shadow, val) or table.isMember(snd.randomshadow, val)) then
			table.insert(shadowpeoplehere, val) 
		end
	end
	
	if #spiritpeoplehere &gt;= 1 then
	 spirit_people:echo("&lt;center&gt;"..table.concat(spiritpeoplehere, "&lt;br&gt;").."&lt;/center&gt;")
	 snd.spirit_targets = spiritpeoplehere
  end
	
	if #shadowpeoplehere &gt;= 1 then
	 shadow_people:echo("&lt;center&gt;"..table.concat(shadowpeoplehere, "&lt;br&gt;").."&lt;/center&gt;")
	 snd.shadow_targets = shadowpeoplehere
  end
  
  end
	
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_communication</name>
							<packageName></packageName>
							<script>function gmcp_communication()
--work in progress

	local channel = gmcp.Comm.Channel.Start
	local talker =  gmcp.Comm.Channel.Text.talker
	local text = gmcp.Comm.Channel.Text.text
  
  --You can choose whether you want it to match only names that are in the database (excluding divine)
  --Or if you want it to just match any one word name. Some NPCs might slip through.
  
   
  if string.match(talker, "%W") then return end
  
  local mobs_to_ignore = {
    "Nysaac",
    "Tayiv",
    "Huemotl",
    "Damari",
    "Jinjin",
    "Micotetotl",
    "Hob",
    "Saaik",
    "Eddan",
    "Gorwin",
    "Trudd",
    "Vladerhelm",
    "Hvan",
    "August",
    "Dale",
    "William",
    "Ocauh",
    "Klaana",
    "Valgar",}
  if table.isMember(mobs_to_ignore, talker) then return end
  
  if channel:find("clt") then channel = "clt" end
  
  snd.who_is_talking = talker or ""
  snd.we_saw_a_thot = false
  snd.last_channel = "Misc"
  snd.channel_ignores = {
	hints = true,
}

--will maybe be useful at some point but not used right now.
--text = string.gsub (text, string.char (27) .. "%[(.-)m", "") &lt;- removes extraneous data from raw gmcp data
--demonnic.chat:append(snd.channel_list[channel], text)

	snd.channel_list = {
    ["newbie"] = "Misc",
    ["market"] = "Misc",
    ["web"] = "Web",
    ["ct"] = "City",
    ["cnt"] = "City",
    ["emotes"] = "Local",
    ["gt"] = "Guild",
    ["gts"] = "Guild",
    ["clt"] = "Clans",
    ["tell"] = "Tells",
    ["says"] = "Local",
    ["ot"] = "Order",
    ["cot"] = "Order",
    ["congregation"] = "Order",
  }

	if channel == "web" and snd.toggles.listening and table.contains(snd.callers, talker) then
      text = text:lower()
			if text:find("target:") and not text:find("list") and not text:find("calling") and not text:find("priority") and not text:find("removed") and not text:find("next") then
				local check = string.match(text, "target: (%w+)%.")
				if check:lower()~= snd.target:lower() then
					expandAlias("t " .. check)
				end
			end
	end
  
  for c, t in pairs(snd.channel_list) do
		if channel == c then
			snd.last_channel = t
			break
		end
	end
  
  if snd.channel_ignores[channel] then return false end
  enableTrigger("generic capture")
  
end</script>
							<eventHandlerList>
								<string>gmcp.Comm.Channel.Start</string>
							</eventHandlerList>
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Misc</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Skill Checking</name>
							<packageName></packageName>
							<script>	snd.skills = snd.skills or {}
  snd.skills.tattoos_on_me = snd.skills.tattoos_on_me or {}
  snd.skills.raceskills = snd.skills.raceskills or {}</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>parse_skillsets</name>
								<packageName></packageName>
								<script>function parse_skillsets()
  local tattoos = {}
  local racials = {}
  if snd.skills.tattoos_on_me ~= nil then
    tattoos = snd.skills.tattoos_on_me
  end
  if snd.skills.raceskills ~= nil then
    racials = snd.skills.raceskills
  end

	snd.skills = {}
  
  snd.skills.raceskills = racials
  snd.skills.tattoos_on_me = tattoos

	for _, set in ipairs(gmcp.Char.Skills.Groups) do
		local skills = string.format("Char.Skills.Get %s", yajl.to_string({ group = set.name }))
		sendGMCP(skills)
	end
	send("\n")
end</script>
								<eventHandlerList>
									<string>gmcp.Char.Skills.Groups</string>
								</eventHandlerList>
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>populate_skills</name>
								<packageName></packageName>
								<script>function populate_skills()

	local group = gmcp.Char.Skills.List.group
	local list = gmcp.Char.Skills.List.list
	local newlist = {}
	for i, val in ipairs(list) do
		list[i] = val:gsub("* ", "")
	end

	if group then
		if not snd.skills then snd.skills = {} end
			snd.skills[group] = list
	end
end</script>
								<eventHandlerList>
									<string>gmcp.Char.Skills.List</string>
								</eventHandlerList>
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>has_skill</name>
								<packageName></packageName>
								<script>function hasSkill(skill, tree)

	if not snd.skills then return false end

  if skill == "Generic" or skill == "Goggle" then return true end
  
  if snd.assumed_class ~= nil then return true end

	if tree then
		if snd.skills[tree:lower()] and table.contains(snd.skills[tree:lower()], skill) then
			return true
		else
			return false
		end
	else
		if table.contains(snd.skills, skill) then
			return true
		else
			return false
		end
	end
end</script>
								<eventHandlerList />
							</Script>
						</ScriptGroup>
						<Script isActive="yes" isFolder="no">
							<name>message</name>
							<packageName></packageName>
							<script>
function snd.message(string, type)
  if snd.gui.enabled then
    if type == "atk" then
      color = "magenta"
    elseif type == "death" then
      color = "red"
    elseif type == "q" then
      color = "brown"
    elseif type == "balance" then
      color = "orange"
    elseif type == "level" then
      color = "yellow"
    elseif type == "reset" then
      color = "brown"
    elseif type == "affliction" then
      color = "DeepSkyBlue"
    elseif type == "dendara" then
      color = "green"
    else
      color = "white"
    end
    if type == "toggle" or type == "echo" then
      line = ""
    else
      line = "\n"
    end
    cecho(line.."&lt;green&gt;[&lt;white&gt;SND&lt;green&gt;]&lt;"..color.."&gt; "..string)
    if type == "reset" then
      send(" ")
    end
  end
end

function snd.attack_hit(attack, target)
 snd.message("You: &lt;green&gt;HIT&lt;magenta&gt; "..attack.."&lt;white&gt; "..target.."&lt;magenta&gt;!", "atk")
end

function snd.got_hit(attack, attacker)
 snd.message(attacker..": &lt;red&gt;HIT&lt;magenta&gt; "..attack.."&lt;white&gt; you&lt;magenta&gt;!", "atk")
end

function snd.third_hit(attack, attacker, target)
 snd.message("&lt;white&gt;"..attacker..": &lt;red&gt;HIT&lt;white&gt; "..attack.." "..target)
end

function snd.target_hit(attack, attacker, target)
 snd.message("&lt;grey&gt;"..attacker..": &lt;red&gt;HIT&lt;grey&gt; "..attack.." "..target)
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>able</name>
							<packageName></packageName>
							<script>function snd.functional()
  if snd.have_aff("stun") or snd.have_aff("petrified") or snd.have_aff("asleep") then
    return false
  else
    return true
  end
end

function snd.wielding(weapon)
  if
    snd.weaponType(snd.wielded.left.name) == weapon or
    snd.weaponType(snd.wielded.right.name) == weapon
  then
    return true
  else
    return false
  end
end

function snd.full_balance()
  if gmcp.Char == nil then
    return false
  end
  if
    gmcp.Char.Vitals.balance == "1" and
    gmcp.Char.Vitals.equilibrium == "1" and
    gmcp.Char.Vitals.left_arm == "1" and
    gmcp.Char.Vitals.right_arm == "1" and
    not snd.waiting.balance and
    not snd.waiting.equilibrium
  then
    return true
  else
    return false
  end
end

function snd.have_aff(affliction)
  if not string.find(affliction, "aff_") then
    affliction = "aff_" .. affliction
  end
  if snd.afflictions[affliction] == nil then
    return false
  end
  if snd.afflictions[affliction].state ~= "healed" then
    return true
  else
    return false
  end
end

function snd.aff_tally()
  count = 0
  for aff in pairs(snd.afflictions) do
    if snd.have_aff(aff) then
      if
        snd.afflictions[aff]["cures"]["herb"] ~= nil or
        snd.afflictions[aff]["cures"]["salve"] ~= nil or
        snd.afflictions[aff]["cures"]["smoke"] ~= nil
      then
        count = count + 1
      end
    end
  end
  return count
end

function snd.aff_tally_specific(afflictions, number)
  --aff_tally checks all affs, aff_tally_specific requires you send it the specific affs you want to check
  if number == 0 then
    return true
  end
  if number == nil then
    number = 1
  end
  if type(afflictions) == "string" then
    return snd.have_aff(afflictions)
  elseif type(afflictions) == "table" then
    local count = 0
    for i, v in ipairs(afflictions) do
      if snd.have_aff(v) then
        count = count + 1
        if count &gt;= number then
          return true
        end
      end
    end
    -- if the count of how many returned true didn't meet or exceed the number given, return false
    return false
  end
end

function snd.not_aff(affliction)
  if not string.find(affliction, "aff_") then
    affliction = "aff_" .. affliction
  end
  if snd.afflictions[affliction].state == "healed" then
    return true
  else
    return false
  end
end

function snd.can_cast()
  if
    snd.full_balance() and
    snd.functional() and
    snd.not_aff("paralysis") and
    snd.not_aff("pacifism") and
    gmcp.Char.Vitals.prone == "0"
  then
    return true
  else
    return false
  end
end

function snd.can_tattoo()
 if snd.not_aff("paresis") then
    return true
 else
    return false
 end
end

function snd.can_eat()
  if snd.not_aff("anorexia") and snd.not_aff("destroyed_throat") then
    return true
  else
    return false
  end
end

function snd.can_apply()
  if snd.not_aff("slickness") then
    return true
  else
    return false
  end
end

function snd.can_smoke()
  if snd.not_aff("asthma") then
    return true
  else
    return false
  end
end

function snd.can_focus()
  if snd.not_aff("impatience") and snd.not_aff("muddled") then
    return true
  else
    return false
  end
end

function snd.can_fitness()
  if
    snd.not_aff("destroyed_throat") and
    hasSkill("Fitness") and
    snd.balance.fitness
  then
    return true
  else
    return false
  end
end

function snd.can_shrug()
  if snd.class == "Syssin" and hasSkill("Shrugging") and snd.balance.shrug then
    return true
  else
    return false
  end
end

function snd.can_rage()
  if
    (snd.class == "Templar" or snd.class == "Revenant" or snd.class == "Shapeshifter") and
    hasSkill("Rage") and
    snd.balance.rage
  then
    return true
  else
    return false
  end
end


function snd.not_entangled()
 if snd.have_aff("writhe_grappled") or
    snd.have_aff("writhe_web") or
    snd.have_aff("writhe_impaled") or
    snd.have_aff("writhe_grappled") then
    return false
 else
    return true
 end
end

function snd.not_slow()
 if snd.not_aff("aeon") then
    return true
 else
    return false
 end
end

function snd.have_slow()
 if snd.have_aff("aeon") then
    return true
 else
    return false
 end
end

function snd.can_arms()
 if snd.have_aff("left_arm_broken") or
    snd.have_aff("left_arm_damaged") or
    snd.have_aff("left_arm_mangled") or
    snd.have_aff("right_arm_broken") or
    snd.have_aff("right_arm_damaged") or
    snd.have_aff("right_arm_mangled") then
    return false
 else
    return true
 end
end

function snd.can_legs()
 if snd.have_aff("left_leg_broken") or
    snd.have_aff("left_leg_damaged") or
    snd.have_aff("left_leg_mangled") or
    snd.have_aff("right_leg_broken") or
    snd.have_aff("right_leg_damaged") or
    snd.have_aff("right_leg_mangled") then
    return false
 else
    return true
 end
end

function snd.can_firstaid()
   if not snd.firstaid_go then
    return false
   else
    return true
   end
end 

function snd.self_prone()

  if not snd.have_aff("frozen") or snd.have_aff("indifference") or snd.have_aff("paralysis") or 
      snd.have_aff("writhe_transfix") or snd.have_aff("writhe_web") or snd.have_aff("writhe_feed") or 
      snd.have_aff("writhe_impaled") or snd.have_aff("writhe_thighlock") or snd.have_aff("writhe_armpitlock") or 
      snd.have_aff("writhe_necklock") or snd.have_aff("writhe_ropes") or snd.have_aff("writhe_vines") or 
      snd.have_aff("fallen") or snd.have_aff("asleep") then
    return false
  
  else
    return true
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>delay</name>
							<packageName></packageName>
							<script>
function snd.delay()
 if snd.not_slow() then
  return 0.5
 else
  return 1.5
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>queue</name>
							<packageName></packageName>
							<script>
function snd.set_queue(action)
 if snd.can_cast() then
  snd.send_attack(action)
 else
  snd.queued = action
  snd.message("Queued: "..string.upper(action), "q")
  send(" ")
 end
end

function snd.send_attack(action)
 if snd.can_cast() then
  snd.send(action)
  if action == snd.queued then
   snd.queued = nil
  end
 end
end

function snd.send(action)
 send(action, false)
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>movement</name>
							<packageName></packageName>
							<script>function snd.get_moving()
  hp = 100 * (gmcp.Char.Vitals.hp / gmcp.Char.Vitals.maxhp)
  if snd.can_path and snd.can_cast() and hp &gt;= 85 and snd.moving_to ~= "none" then
    if snd.toggles.gallop then
      if gmcp.Char.Vitals.mounted == "0" then
        expandAlias("mnt", false)
      end
      snd.send("path find " .. snd.moving_to .. snd.sep .. "path go gallop")
    elseif snd.toggles.dash then
      snd.send("path find " .. snd.moving_to .. snd.sep .. "path go dash")
    else
      snd.send("path track " .. snd.moving_to)
    end
    snd.moving_to = "none"
    if ylm.active and ylm.next_zone == "city" then
      ylm.active = false
    end
  end
end

function snd.parseDir(direction)
 if direction == "north" then
  return "n"
 elseif direction == "south" then
  return "s"
 elseif direction == "east" then
  return "e"
 elseif direction == "west" then
  return "w"
 elseif direction == "northeast" then
  return "ne"
 elseif direction == "northwest" then
  return "nw"
 elseif direction == "southeast" then
  return "se"
 elseif direction == "southwest" then
  return "sw"
 elseif direction == "up" then
  return "up"
 elseif direction == "down" then
  return "d"
 else
  return direction
 end
end

function snd.swapDir(direction)
  directions =
    {
      north = "south",
      south = "north",
      east = "west",
      west = "east",
      northeast = "southwest",
      southwest = "northeast",
      northwest = "southeast",
      southeast = "northwest",
      ["in"] = "out",
      out = "in",
      up = "down",
      down = "up",
    }
  return directions[direction]
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>no target</name>
							<packageName></packageName>
							<script>function snd.no_target()
  --deleteLine()
  --snd.message("Need new targets!")
  if snd.offense_loaded then
    snd.target_gone = true
    snd.get_new_target()
  end
  if snd.bashing_loaded then
    snd.untarget()
    snd.waiting.balance = false
    snd.waiting.equilibrium = false
    snd.bashing.target_priority = 10000
  end
end

function snd.untarget()
  snd.bashing.engaged = false
  snd.bashing.targeted = false
  snd.last_attack = "none"
  if snd.bashing.stopping then
    snd.message("Bashing OFF!")
    if snd.toggles.bashing then
      snd.toggle("bashing")
    end
    snd.bashing.stopping = false
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>reset me</name>
							<packageName></packageName>
							<script>function snd.reset_me()
  for i in pairs(snd.afflictions) do
    snd.aff_remove(i)
  end
  for i in pairs(snd.defenses) do
    snd.def_remove(i)
  end
  for i in pairs(snd.balance) do
    snd.balance[i] = true
  end
  snd.parrying = "none"
  snd.crescentable = true
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>misc</name>
							<packageName></packageName>
							<script>function snd.changeClass()
 if snd.assumed_class ~= nil then
  snd.class = snd.assumed_class
 else
  snd.class = gmcp.Char.Status.class
 end
 snd.city = gmcp.Char.Status.city
 if snd.city == "Spinesreach" or snd.city == "Bloodloch" then
  snd.faction = "shadow"
 elseif snd.city == "Enorian" or snd.city == "Duiran" then
  snd.faction = "spirit"
 end
 if snd.gui.enabled then
  snd.set_vitals()
 end
 expandAlias("ldd none", false)
end

function snd.updateMonolith()
 if snd.items["a monolith sigil"] ~= nil then
  snd.monolith = true
 else
  snd.monolith = false
 end
end

function snd.updateItems()
  if snd.gui.enabled then
    if snd.monolith then
      monolith:setColor("medium_sea_green")
    else
      monolith:setColor("firebrick")
    end
    if snd.wielded.left.name == "" and snd.wielded.right.name == "" then
      wielding:echo("&lt;center&gt;empty hands&lt;/center&gt;")
    else
      local string = ""
      if snd.wielded.left.name ~= "" then
        string = string.."&lt;center&gt;"..snd.weaponType(snd.wielded.left.name).."&lt;/center&gt;"
      end
      if snd.wielded.right.name ~= "" then
        string = string.."&lt;center&gt;"..snd.weaponType(snd.wielded.right.name).."&lt;/center&gt;"
      end
      wielding:echo(string)
    end
  end
  if snd.questing_loaded then
    snd.runQuests()
  end
end

function snd.weaponType(weapon)
 for wtype in pairs(snd.weapon_types) do
  if string.find(weapon, snd.weapon_types[wtype]) then
	 return snd.weapon_types[wtype]
	end
 end
 return weapon
end

function snd.skillrankcheck(rank)
  local skillranks = {"Transcendent", "Mythical", "Fabled", "Virtuoso"}
  for _, v in pairs(skillranks) do
    if string.find(rank, v) then
      return true
    end
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>random functions</name>
							<packageName></packageName>
							<script>function roundDown(number, places)
   return math.floor(number * math.pow(10,places)) / math.pow(10,places)
end

function roundUp(number, places)
   return math.ceil(number * math.pow(10,places)) / math.pow(10,places)
end

function round(num, idp)
  local mult = 10 ^ (idp or 0)
  return math.floor(num * mult + 0.5) / mult
end

function table.isMember(table, member)
  for i, m in ipairs(table) do
    if m == member then
      return true
    end
  end
  return false
end

function snd.count(table)
  local count = 0
  for i, v in ipairs(table) do
    count = count + 1
  end
  return count
end

function tablelength(T)
  local count = 0
  for _ in pairs(T) do count = count + 1 end
  return count
end

function deleteFull()
  deleteLine()
  tempLineTrigger(1,1,[[if isPrompt() then
    deleteLine()
  end]])
end

function padLeft(s, l, c)
  return string.rep(c or ' ', l - #s) .. s
end

function padRight(s, l, c)
  return s .. string.rep(c or ' ', l - #s)
end

function snd.goggle_update()

  local goggle_defenses = {
    --heatsight = {level = 1, non_goggle_method = {needybalancetake = "heatsight"}, non_goggle_skill = "Heatsight"},
    nightsight = {level = 1, non_goggle = {special = "nightsight"} , non_goggle_skill = "Nightsight"},
    mindseye_tattoo = {level = 2, non_goggle = {balanceequilibrium = "touch allsight"}, non_goggle_skill = "Generic"},
    thirdeye = {level = 2, non_goggle = {eat = "acuity"}, non_goggle_skill = "Generic"},
    overwatch = {level = 5, non_goggle = {""}, non_goggle_skill = "Generic"},
    insight = {level = 8, non_goggle = {needyequilibriumtake = "mind insight on"}, non_goggle_skill = "Insight"},
    lifevision = {level = 9, non_goggle = {balanceequilibriumtake = "lifevision"}, non_goggle_skill = "Lifevision"},
    lipreading = {level = 17, non_goggle = {needybalancetake = "lipread"}, non_goggle_skill = "Lipread"},
}

  for k, v in pairs(goggle_defenses) do
    if tonumber(snd.toggles.goggle_level) &gt;= v.level and snd.toggles.goggles then
      snd.def_options.general_defs["def_"..k] = "on"
      snd.defenses["def_"..k].skill = "Goggle"
      if k:find("tattoo") then
        snd.defenses["def_"..k].balance = {special = "goggle toggle mindseye"}
      else
        snd.defenses["def_"..k].balance = {special = "goggle toggle "..k}
      end
    else
      snd.defenses["def_"..k].balance = goggle_defenses[k].non_goggle
      snd.defenses["def_"..k].skill = goggle_defenses[k].non_goggle_skill
    end
  end
end  

function snd.are_we_with_grouped()
    local good2go = true
    for _, name in pairs(snd.players_here) do
      if not table.contains(snd.group, name) and name ~= gmcp.Char.Status.name then
        good2go = false
      end
    end
    return good2go
 end   
 </script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Who groups parser</name>
							<packageName></packageName>
							<script>function snd.parse_who()
  snd.who_list = {}
  snd.true_who = {}

  enableTrigger("Who parser")
  send("who")
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Logic</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>core</name>
							<packageName></packageName>
							<script>function snd.core()
  if not snd.channeling then
    if snd.toggles.active then
      if snd.emptypipe ~= "none" and not snd.waiting.lighting and snd.can_cast() then
        snd.send("outc " .. snd.emptypipe .. snd.sep .. "put " .. snd.emptypipe .. " in emptypipe")
        snd.waiting.lighting = true
        tempTimer(snd.delay(), [[snd.waiting.lighting = false]])
      end
  
      snd.def_check()
      snd.aff_check()
  
      if snd.update_priority &gt; 0 then
        if snd.setting_priority == "burnt_skin 1" then
          snd.update_priority = 0
        end
        snd.firstaidresetlistnone()
      end
    
      if snd.toggles.active and snd.healing_loaded and snd.have_aff("asleep") and snd.toggles.standing then
        snd.send("wake")
      end
    
      if snd.functional() then
        snd.do_queue()
        snd.do_stuff()
      end
    end
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>priorities</name>
							<packageName></packageName>
							<script>snd.queue = {}
 
snd.priorities = 
  {
    "lighting",
    "def_speed",
    "aff_prone",
    "aff_adder_tarot",
    
    "fitness",
    "shrugging",
    "purge",
    "purify",
    "panacea",
    "rage",
    "reset_cures",
    "aegis",
    "def_safeguard",
    "def_miasma",
    "def_warmth",
    "def_cloak_tattoo",
    
    "attack",
    
    "aff_bleeding",
    "aff_voyria",
    "def_spheres",
    "def_earthenform",
    "def_permafrost",
    "def_focalmark",
    "aff_health_10",
    "aff_health_35",
    "aff_health_55",
    "aff_health_low",
    "aff_health_75",
    "aff_mana_10",
    "aff_mana_35",
    "aff_mana_55",
    "aff_mana_low",
    "aff_mana_75",
    "def_chameleon",
    
    "loot",
    
    "queue",
    "bashing",
    "moving",
    
    "aff_aeon",
    "aff_paralysis",
    "aff_paresis",
    "aff_mirroring",
    "aff_crippled_body",
    "aff_crippled",
    "aff_heartflutter",
    "aff_slough",
    "def_firefly_tattoo",
    "aff_rot_body",
    "aff_rot_wither",
    "aff_baldness",
    "aff_clumsiness",
    "aff_hypochondria",
    "aff_weariness",
    "aff_asthma",
    "aff_sensitivity",
    "aff_blood_poison",
    "aff_limp_veins",
    "aff_slickness",
    "aff_disfigurement",
    "aff_squelched",
    "aff_migraine",
    "aff_self-pity",
    "aff_self_pity",
    "aff_stupidity",
    "aff_dizziness",
    "aff_shyness",
    "aff_epilepsy",
    "aff_impatience",
    "aff_dissonance",
    "aff_infested",
    "aff_itchy",
    "aff_rot_heat",
    "aff_rot_spirit",
    "aff_accursed",
    "aff_agony",
    "aff_body_odor",
    "aff_haemophilia",
    "aff_mental_disruption",
    "aff_physical_disruption",
    "aff_allergies",
    "aff_vomiting",
    "aff_thin_blood",
    "aff_rend",
    "aff_lethargy",
    "aff_ringing_ears",
    "aff_addiction",
    "aff_exhausted",
    "aff_hubris",
    "aff_pacifism",
    "aff_peace",
    "aff_lovers_effect",
    "aff_superstition",
    "aff_generosity",
    "aff_justice",
    "aff_egocentric",
    "aff_commitment_fear",
    "aff_recklessness",
    "aff_masochism",
    "aff_agoraphobia",
    "aff_loneliness",
    "aff_berserking",
    "aff_vertigo",
    "aff_claustrophobia",
    "aff_nyctophobia",
    "aff_sadness",
    "aff_confusion",
    "aff_dementia",
    "aff_hallucinations",
    "aff_paranoia",
    "aff_hypersomnia",
    "aff_hatred",
    "aff_blood_curse",
    "aff_blighted",
    "aff_plodding",
    "aff_idiocy",
    "aff_withering",
    "aff_hellsight",
    "aff_deadening",
    "aff_anorexia",
    "aff_head_mangled",
    "aff_head_damaged",
    "aff_head_bruised_critical",
    "aff_head_bruised_moderate",
    "aff_head_bruised",
    "aff_destroyed_throat",
    "aff_left_arm_amputated",
    "aff_left_arm_mangled",
    "aff_left_arm_damaged",
    "aff_right_arm_amputated",
    "aff_right_arm_mangled",
    "aff_right_arm_damaged",
    "aff_left_arm_broken",
    "aff_right_arm_broken",
    "aff_left_arm_bruised_critical",
    "aff_left_arm_bruised_moderate",
    "aff_crushed_elbows",
    "aff_left_arm_bruised",
    "aff_left_arm_dislocated",
    "aff_right_arm_bruised_critical",
    "aff_right_arm_bruised_moderate",
    "aff_right_arm_bruised",
    "aff_right_arm_dislocated",
    "aff_broken_arm",
    "aff_left_leg_amputated",
    "aff_left_leg_mangled",
    "aff_left_leg_damaged",
    "aff_right_leg_amputated",
    "aff_right_leg_mangled",
    "aff_right_leg_damaged",
    "aff_left_leg_bruised_critical",
    "aff_right_leg_bruised_critical",
    "aff_left_leg_broken",
    "aff_right_leg_broken",
    "aff_left_leg_bruised_moderate",
    "aff_left_leg_bruised",
    "aff_left_leg_dislocated",
    "aff_right_leg_bruised_moderate",
    "aff_broken_leg",
    "aff_right_leg_bruised",
    "aff_crushed_kneecaps",
    "aff_right_leg_dislocated",
    "aff_crushed_chest",
    "aff_voidgaze",
    "aff_torso_mangled",
    "aff_torso_damaged",
    "aff_torso_bruised_critical",
    "aff_heatspear",
    "aff_cracked_ribs",
    "aff_torso_bruised_moderate",
    "aff_torso_bruised",
    "aff_spinal_rip",
    "aff_selarnia",
    "aff_mauled_face",
    "aff_burnt_skin",
    "aff_collapsed_lung",
    "aff_ablaze",
    "aff_crippled_throat",
    "aff_throatclaw",
    "aff_smashed_throat",
    "aff_deepwound",
    "aff_lightwound",
    "aff_pre_restore_head",
    "aff_pre_restore_left_arm",
    "aff_pre_restore_left_leg",
    "aff_pre_restore_right_arm",
    "aff_pre_restore_right_leg",
    "aff_pre_restore_torso",
    "aff_gorged",
    "aff_effused_blood",
    "aff_indifference",
    "aff_stuttering",
    "aff_blurry_vision",
    "aff_burnt_eyes",
    "aff_gloom",
    "aff_rot_benign",
    "aff_frozen",
    "aff_shivering",
    "aff_disrupted",
    "aff_fear",
    "aff_premonition",
    "aff_vinethorns",
    "aff_void",
    "aff_weakvoid",
    "aff_grappled",
    "aff_writhe_armpitlock",
    "aff_writhe_bind",
    "aff_writhe_feed",
    "aff_writhe_hoist",
    "aff_writhe_impaled",
    "aff_writhe_lure",
    "aff_writhe_necklock",
    "aff_writhe_ropes",
    "aff_writhe_tar",
    "aff_writhe_thighlock",
    "aff_writhe_transfix",
    "aff_writhe_vines",
    "aff_writhe_web",
    "aff_writhe_grappled",
    "aff_dazed",
    "aff_embedded_axe",
    
    "def_victimise",
    "def_panoply",
    "def_forestall",
    "def_gripping",
    "def_vigor",
    "def_divert_melee",
    "def_dodge_melee",
    "def_waterwalking",
    "def_mindseye_tattoo",
    "def_flame_tattoo",
    "def_fearless",
    "def_recklessness",
    "def_soulharvest",
    "def_soulthirst",
    "def_soul_fortify",
    "def_soul_fracture",
    "def_soul_body",
    "def_weathering",
    "def_bodyheat",
    "def_metabolism",
    "def_endurance",
    "def_thickhide",
    "def_corner",
    "def_salivate",
    "def_harden",
    "def_lightshield",
    "def_heatshield",
    "def_inspiration_strength",
    "def_inspiration_intelligence",
    "def_inspiration_dexterity",
    "def_inspiration_constitution",
    "def_battlehymn_strength",
    "def_battlehymn_intelligence",
    "def_battlehymn_dexterity",
    "def_battlehymn_constitution",
    "def_fireblock",
    "def_smothering",
    "def_toughness",
    "def_resistance",
    "def_warding",
    "def_corpus_warding",
    "def_finesse",
    "def_weaving",
    "def_shadowsight",
    "def_ghost",
    "def_hiding",
    "def_shroud",
    "def_shadowslip",
    "def_vinculum",  
    "def_ruthlessness", 
    "def_impenetrable", 
    "def_criticality", 
    "def_unfinished", 
    "def_exhilarate", 
    "def_reflexes",
    "def_contempt",
    "def_velocity", 
    "def_untouchable", 
    "def_inflated", 
    "def_ironskin",
    "def_fortify",
    "def_countercurrent",
    "def_rigor",
    "def_shadow_engulf",
    "def_shadow_mantle",
    "def_blurring",
    "def_empowered_moon",
    "def_thirdeye",
    "def_blindness",
    "def_deafness",
    "def_kola",
    "def_waterbreathing",
    "def_deathsight",
    "def_insomnia",
    "def_frost",
    "def_venom",
    "def_levitation",
    "def_caloric",
    "def_fangbarrier",
    "def_rebounding",
    "def_density",
    "def_nightsight",
    "def_clarity",
    "def_vitality",
    "def_kaido_regeneration",
    "def_constitution",
    "def_split_mind",
    "def_immunity",
    "def_boosted_regen",
    "def_soulmask",
    "def_maingauche",
    "def_pacing",
    "def_soulcage",
    "def_heatsight",
    "def_reveling",
    "def_herculeanrage",
    "def_initiative",
    "def_barkskin",
    "def_conceal",
    "def_hardiness",
    "def_flexibility",
    "def_lifesap",
    "def_maskedscent",
    "def_linked",
    "def_oneness",
    "def_eclipse",
    "def_sublimation",
    "def_ameliorate",
    "def_catabolism",
    "def_blindsense",
    "def_greenheart",
    "def_endure",
    "def_mountaineer",
    "def_dustcoat",
    "def_resilience",
    "def_desolation",
    "def_circulation",
    "def_potence",
    "def_celerity",
    "def_lifescent",
    "def_lifevision",
    "def_veil",
    "def_stalk",
    "def_concentrate",
    "def_entwine",
    "def_devilpact",
    "def_ricochet",
    "def_twinsoul",
    "def_earth_resonance",
    "def_stonebind",
    "def_earthenwill",
    "def_erosion",
    "def_imbue_stonefury",
    "def_sand_swelter",
    "def_sealegs",
    "def_wavebreaking",
    "def_tideflux",
    "def_lifebond",
    "def_shore_leave",
    "def_encrusted",
    "def_elemental_engulf",
    "def_expose_brume",
    "def_expose_rime",
    "def_sirensong",
    "def_panoptic",
    "def_fog_obscure",
    "def_fluctuations",
    "def_arcaneskin",
    "def_missiles",
    "def_firefist",
    "def_tempered_body",
    "def_lipreading",
    "def_swagger",
    "def_deflection",
    "def_discharge",
    "def_resurgence",
    "def_haste",
    "def_litheness",
    "def_disunion",
    "def_wrath",
    "def_bending",
    "def_mindspark",
    "def_spiritbond",
    "def_protection",
    "def_shaman_spiritsight",
    "def_lifebloom",
    "def_shaman_warding",
    "def_insight",
    "def_foreststride",
    "def_overwatch",
    "def_hypersight",
    "def_defiance",
    "def_glaciation",
    "def_remembrance",
    "def_redoubt",
    "def_gravechill",
    "def_vengeance",
    "def_hierophant",
    "def_chariot",
    "def_crane",
    "def_faerie",
    "def_cloud",
    "def_fan",
    "def_intoxication",
    "def_battleflow",
    "def_ancest_victory",
    "def_invocation",
    "def_ancest_blessing_safeguard",
    "def_ancestral_bolster",
    "def_homage",
    "def_intervention",
    "def_displacement",
    "def_severity",
    "def_roaring",
    "aff_magic_fire",
    "def_sheath",
    "def_charisma",
    "def_euphonia",
    "def_discordance", 
    "def_halfbeat", 
    "def_aurora", 
    "def_equipoise", 
    "def_stretching", 
    "def_destiny",
    "def_interposition",
    "def_obfuscation",
    "def_cognisance",
    "def_resuscitation",
    "def_conduit_crutch",
    "def_astral_refulgence",
    "def_astral_presence",
    "def_astral_chaosspores",
    "def_astral_dreamtide",
    "def_astral_recursion",
    "def_oath_forestwalker",
    "def_oath_tranquility",
    "def_oath_shaman",
    "def_greenfoot",
    "def_discipline_fieldstudies",
    "def_discipline_research",
    "def_discipline_biology",
    "def_blightbringer",
    "def_nimbleness",
    "def_brutality",
    "def_axe_avert",
    "def_axe_obstruct",
    "def_axe_repel",
    "def_bloodtrails",
    "def_phalanx",
    "def_potence_strength",
    "def_potence_constitution",
    "def_potence_intelligence",
    "def_potence_dexterity",
    "def_shadowblow",
    "def_blurred",
    "def_elusion",
    "def_deathlink",
    "def_surefooted",
    "def_soul_spiritsight",
    "def_ardour_strength",
    "def_ardour_constitution",
    "def_ardour_intelligence",
    "def_ardour_dexterity",
    "def_relentless",
    "def_resolved",
    "def_acuity",
    "def_dim",
    "def_stalking",
    "def_muffle",
    "def_ascetic",
    "def_retaliation",
    "def_supressed",
    "def_transience",
    "def_entrench",   
    
  }</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>methods</name>
							<packageName></packageName>
							<script>
snd.method_priority = {
{balance = "special", func = function(current) snd.do_special(current) end},
{balance = "balanceneed", func = function(current) snd.do_balance_need(current) end},
{balance = "equilibriumneed", func = function(current) snd.do_equilibrium_need(current) end},
{balance = "balanceequilibrium", func = function(current) snd.do_balance_equilibrium_need(current) end},

{balance = "reject", func = function(current) snd.do_reject(current) end},
{balance = "concentrate", func = function(current) snd.do_concentrate(current) end},
{balance = "drink", func = function(current) snd.do_drink(current) end},
{balance = "vial", func = function(current) snd.do_vial(current) end},
{balance = "eat", func = function(current) snd.do_eat(current) end},
{balance = "smoke", func = function(current) snd.do_smoke(current) end},
{balance = "herb", func = function(current) snd.do_herb(current) end},
{balance = "salve", func = function(current) snd.do_salve(current) end},
{balance = "elixir", func = function(current) snd.do_elixir(current) end},
{balance = "moss", func = function(current) snd.do_moss(current) end},
{balance = "clot", func = function(current) snd.do_clot(current) end},
{balance = "stand", func = function(current) snd.do_stand(current) end},
{balance = "writhe", func = function(current) snd.do_writhe(current) end},
{balance = "focus", func = function(current) snd.do_focus(current) end},
{balance = "tree", func = function(current) snd.do_tree(current) end},

{balance = "tattoo", func = function(current) snd.do_tattoo(current) end},
{balance = "balancetake", func = function(current) snd.do_balance_take(current) end},
{balance = "equilibriumtake", func = function(current) snd.do_equilibrium_take(current) end},
{balance = "needybalancetake", func = function(current) snd.do_needy_balance_take(current) end},
{balance = "needyequilibriumtake", func = function(current) snd.do_needy_equilibrium_take(current) end},
{balance = "balanceequilibriumtake", func = function(current) snd.do_balance_equilibrium_take(current) end}
}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>queue</name>
							<packageName></packageName>
							<script>function snd.do_queue()
  snd.queue = {}
  if not snd.channeling then
    if snd.toggles.active then
      if not snd.pipes_lit and snd.toggles.lighting then
          table.insert(snd.queue, "lighting")
      end
    if snd.defenses_loaded and snd.toggles.defenses then
      for k in pairs(snd.defenses) do
        if snd.defenses[k].state == "down" and snd.defenses[k].needit then
          if k == "def_vitality" then
            if snd.balance.vitality then
              table.insert(snd.queue, k)
            end
          elseif (k == "def_shroud" or k == "def_ghost" or k == "def_hiding") then
            if snd.defenses.def_phase.state ~= "deffed" then
              table.insert(snd.queue, k)
            end
          elseif (k == "def_miasma" or k == "def_safeguard" or k == "def_warmth") then
            if
              not (
                snd.defenses.def_miasma.state == "deffed" or
                snd.defenses.def_safeguard.state == "deffed" or
                snd.defenses.def_warmth.state == "deffed"
              )
            then
              table.insert(snd.queue, k)
            end
          else
            table.insert(snd.queue, k)
          end
        end
      end
    end
   if snd.queued ~= nil then
    table.insert(snd.queue, "queue")
   end
      if snd.update_priority &gt; 0 then
        if snd.setting_priority == "burnt_skin 1" then
          snd.update_priority = 0
        end
        snd.firstaidresetlistnone()
      end
      if snd.bashing_loaded then
        if #snd.gathering &gt;= 1 then
          table.insert(snd.queue, "loot")
        end
        if snd.toggles.bashing and snd.bashing_loaded then
          table.insert(snd.queue, "bashing")
        end
        if snd.moving_to ~= "none" then
          table.insert(snd.queue, "moving")
        end
        if snd.toggles.active and snd.have_aff("asthma") and snd.have_aff("slickness") and gmcp.Char.Vitals.pipe == "1" then
          snd.need_fitness = true
          table.insert(snd.queue, "fitness")
        end
        if snd.toggles.parrying and snd.offense_loaded then -- remove the offense_loaded check if you want it to always parry
          snd.parry()
        end
        if ((hasSkill("Purge") and snd.class == "Carnifex") or (hasSkill("Annul") and snd.class == "Warden")) and snd.purge_check() then
          table.insert(snd.queue, "purge")
        end
        if snd.rage_check() then
          table.insert(snd.queue, "rage")
        end
        if snd.need_aegis then
  	      table.insert(snd.queue, "aegis")
  	    end
  	    if (hasSkill("Panacea") and snd.class == "Shaman") or (snd.class == "Alchemist" and hasSkill("Subversion")) and snd.panacea_check() then
  	      table.insert(snd.queue, "panacea")
  	    end
  	    if (hasSkill("Purify") and snd.class == "Praenomen") or (hasSkill("Succour") and snd.class == "Akkari") and snd.purify_check() then
  	      table.insert(snd.queue, "purify")
  	    end
        if snd.toggles.attacking and snd.offense_loaded and snd.defenses.def_manipulation_aegis.state ~= "deffed" then
          table.insert(snd.queue, "attack")
        end
      end
    end
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>stuff</name>
							<packageName></packageName>
							<script>function snd.do_stuff()
 for _,i in ipairs(snd.priorities) do
  if table.contains(snd.queue, i) then
   if i == "queue" then
    snd.send_attack(snd.queued)
   elseif i == "bashing" then
    snd.bashing_function()
   elseif i == "lighting" then
    snd.do_lighting()
   elseif i == "attack" then
    snd.attack_function()
   elseif i == "loot" then
    snd.do_loot()
   elseif i == "moving" then
    snd.get_moving()
	 elseif i == "fitness" then
	  snd.do_fitness()
		snd.do_shrug()
   elseif i == "rage" then
    snd.do_rage()
	 elseif i == "purge" then
	  snd.do_purge()
	 elseif i == "purify" then
	 	snd.do_purify()
   elseif i == "panacea" then
    snd.do_panacea()
	 elseif i == "aegis" then
	 	snd.do_aegis()
   elseif i == "reset_cures" then
    if snd.update_priority &gt; 0 then
      if snd.setting_priority == "burnt_skin 1" then
        snd.update_priority = 0
      end
      snd.firstaidresetlistnone()
    end
   else
    for _,z in pairs(snd.method_priority) do
     if snd.afflictions[i] ~= nil then
      if snd.afflictions[i].cures[z.balance] ~= nil then
       z.func(i)
      end
     elseif snd.defenses[i] ~= nil then
      if snd.defenses[i].balance[z.balance] ~= nil then
       z.func(i)
      end
     end
    end
   end
  end
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>lighting</name>
							<packageName></packageName>
							<script>
function snd.do_lighting()
 if snd.can_cast() and (not snd.pipes_lit) and (not snd.waiting.lighting) then
  snd.light_up()
 end
end

function snd.light_up()
 snd.send("light pipes", false)
 snd.waiting.lighting = true
 tempTimer(snd.delay(), [[snd.waiting.lighting = false]])
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Tracking</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Afflictions</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>affliction table</name>
								<packageName></packageName>
								<script>
snd.afflictions = {
aff_health_75 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_health_55 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_health_35 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_health_10 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_mana_75 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_55 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_35 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_35 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_10 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_health_low = {state = "healed", cures = {moss = "send"}, assess = false, timer = createStopWatch()},
aff_mana_low = {state = "healed", cures = {moss = "send"}, assess = false, timer = createStopWatch()},
aff_bleeding = {state = "healed", cures = {clot = "send"}, assess = false, timer = createStopWatch()},

aff_prone = {state = "healed", effect = "cannot move or attack, must STAND", cures = {stand = "send"}, assess = false, timer = createStopWatch()},
aff_fallen = {state = "healed", effect = "cannot move or attack, must STAND", cures = {stand = "send"}, assess = false, timer = createStopWatch()},
aff_asleep = {state = "healed", effect = "cannot do anything other than WAKE", cures = {}, assess = false, timer = createStopWatch()},
aff_stun = {state = "healed", effect = "cannot do anything", cures = {}, assess = false, timer = createStopWatch()},
aff_aeon = {state = "healed", effect = "delays all actions", cures = {smoke = "elm"}, assess = false, timer = createStopWatch()},

aff_paresis = {state = "healed", effect = "prevents tattoos and movement", cures = {herb = "bloodroot"}, assess = false, timer = createStopWatch()},
aff_paralysis = {state = "healed", effect = "prevents attacks, movement, and tattoos", cures = {herb = "bloodroot"}, assess = false, timer = createStopWatch()},
aff_anorexia = {state = "healed", effect = "prevents eating", cures = {tree = "send", salve = "epidermal to torso", focus = "send"}, assess = false, timer = createStopWatch()},
aff_asthma = {state = "healed", effect = "prevents smoking", cures = {tree = "send", herb = "kelp"}, assess = false, timer = createStopWatch()},
aff_slickness = {state = "healed", effect = "prevents applying salves", cures = {tree = "send", smoke = "valerian", herb = "bloodroot"}, assess = false, timer = createStopWatch()},

aff_broken_arm = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_broken_leg = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_adder_tarot = {state = "healed", effect = "", cures = {balanceequilibrium = "rip card from body"}, assess = false, timer = createStopWatch()},

aff_ablaze = {state = "healed", effect = "", cures = {salve = "mending to body", tree = "send"}, assess = false, timer = createStopWatch()},
aff_accursed = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_achromatopsia = {state = "healed", effect = "colors leeched away", cures = {}, assess = false, timer = createStopWatch()},
aff_addiction = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_agony = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_agoraphobia = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_allergies = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_amplify_asphyxiation = {state = "healed", effect = "more dmg from asphyx source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_blunt = {state = "healed", effect = "more dmg from blunt source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_cold = {state = "healed", effect = "more dmg from cold source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_cutting = {state = "healed", effect = "more dmg from cutting source per stack",cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_electric = {state = "healed", effect = "more dmg from electric source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_fire = {state = "healed", effect = "more dmg from fire source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_magic = {state = "healed", effect = "more dmg from magic source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_poison = {state = "healed", effect = "more dmg from poison source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_psychic = {state = "healed", effect = "more dmg from psychic source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_shadow = {state = "healed", effect = "more dmg from shadow source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_spirit = {state = "healed", effect = "more dmg from spirit source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_unblockable = {state = "healed", effect = "more dmg from unblockable source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_airwreath = {state = "healed", effect = "dmg over time", cures = {}, assess = false, timer = createStopWatch()},
aff_arrow_wound = {state = "healed", effect = "delayed by stacks of arrows", cures = {}, assess = false, timer = createStopWatch()},
aff_asphyxiation_weakness = {state = "healed", effect = "more dmg from asphyx source", cures = {}, assess = false, timer = createStopWatch()},
aff_attuned = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_backstabbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_backstrain = {state = "healed", effect = "torso dmg on standing", cures = {tree = "send", salve = "soothing to torso"}, assess = false, timer = createStopWatch()},
aff_baldness = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_barbs = {state = "healed", effect = "dmg per stack of barbs", cures = {balanceequilibrium = "pull barbs from body"}, assess = false, timer = createStopWatch()},
aff_battle_hunger = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_berserking = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_besilence = {state = "healed", effect = "", cures = {smoke = "skullcap", tree = "send"}, assess = false, timer = createStopWatch()},
aff_blackout = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_blighted = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_blisters = {state = "healed", effect = "poison dmg/bleeding when using bal/eq", cures = {tree = "send", herb = "bloodroot"}, assess = false, timer = createStopWatch()},
aff_blood_curse = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_blood_poison = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_bloodlust = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_blunt_weakness = {state = "healed", effect = "more dmg from blunt source", cures = {}, assess = false, timer = createStopWatch()},
aff_blurry_vision = {state = "healed", effect = "", cures = {salve = "epidermal to body", tree = "send"}, assess = false, timer = createStopWatch()},
aff_body_odor = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_bulimia = {state = "healed", effect = "vomit the next thing you eat", cures = {}, assess = false, timer = createStopWatch()},
aff_burnt_eyes = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_burnt_skin = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_burnout = {state = "healed",  effect = "slower cds", cures = {}, assess = false, timer = createStopWatch()},
aff_chaos_warp = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_claustrophobia = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_clumsiness = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_cold_weakness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_collapsed_lung = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_commitment_fear = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send"}, assess = false, timer = createStopWatch()},
aff_confusion = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_contrition = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_conviction = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_corsin_weight = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_cracked_ribs = {state = "healed", effect = "", cures = {salve = "mending to torso", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crippled = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crippled_body = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crippled_throat = {state = "healed", effect = "", cures = {salve = "mending to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crushed_chest = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_crushed_elbows = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crushed_kneecaps = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_cutting_weakness = {state = "healed", effect = "more dmg from cuttingsource", cures = {}, assess = false, timer = createStopWatch()},
aff_dazed = {state = "healed", effect = "can't regain balance normally", cures = {balanceequilibrium = "recoup"}, assess = false, timer = createStopWatch()},
aff_deadening = {state = "healed", effect = "", cures = {smoke = "elm", tree = "send"}, assess = false, timer = createStopWatch()},
aff_deepwound = {state = "healed", effect = "makes bleeding more impactful (cant clot immediately)", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_dementia = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_despair = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_destroyed_throat = {state = "healed", effect = "", cures = {salve = "mending to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_direfrost = {state = "healed", effect = "leads to frostbrand", cures = {}, assess = false, timer = createStopWatch()},
aff_disabled = {state = "healed", effect = "divine only? unsure", cures = {}, assess = false, timer = createStopWatch()},
aff_disfigurement = {state = "healed", effect = "", cures = {smoke = "valerian", tree = "send"}, assess = false, timer = createStopWatch()},
aff_disorientated = {state = "healed", effect = "delays cures by 1.5 seconds", cures = {}, assess = false, timer = createStopWatch()},
aff_disrupted = {state = "healed", effect = "", cures = {special = "concentrate"}, assess = false, timer = createStopWatch()},
aff_dissonance = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send"}, assess = false, timer = createStopWatch()},
aff_distortion = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_dizziness = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_dread = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_effused_blood = {state = "healed", effect = "", cures = {salve = "epidermal to torso"}, assess = false, timer = createStopWatch()},
aff_eldritch_invocation = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_electric_weakness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_emberbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_egocentric = {state = "healed", effect = "can't help others", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_embedded_axe = {state = "healed", effect = "does major limb damage when pulled", cures = {balanceequilibrium = "pull axe from me"}, assess = false, timer = createStopWatch()},
aff_epilepsy = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_exhausted = {state = "healed", effect = "dodge cut in half, slower movement", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_farag_rot = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_faintness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_fear = {state = "healed", effect = "", cures = {special = "compose"}, assess = false, timer = createStopWatch()},
aff_fire_weakness = {state = "healed", effect = "more dmg from fire source", cures = {}, assess = false, timer = createStopWatch()},
aff_flamewreathed_limb = {state = "healed", effect = "extra limb damage if hit by fire spell", cures = {}, assess = false, timer = createStopWatch()},
aff_flared = {state = "healed", effect = "unable to stealth or go incorporeal", cures = {}, assess = false, timer = createStopWatch()},
aff_flash_blindness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_forestbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_frostbrand = {state = "healed", effect = "continually freezes over time", cures = {}, assess = false, timer = createStopWatch()},
aff_frostwreath = {state = "healed", effect = "divine only? unsure", cures = {}, assess = false, timer = createStopWatch()},
aff_frozen = {state = "healed", effect = "", cures = {salve = "caloric to torso", tree = "send"}, assess = false, timer = createStopWatch()},
aff_frozen_feet = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_generosity = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_glasslimb = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_gloom = {state = "healed", effect = "", cures = {salve = "epidermal to head"}, assess = false, timer = createStopWatch()},
aff_gorged = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_haemophilia = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hallucinations = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_halted = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_hatred = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_head_broken = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_head_bruised = {state = "healed", effect = "", cures = {salve = "mending to head"}, assess = false, timer = createStopWatch()},
aff_head_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to head"}, assess = false, timer = createStopWatch()},
aff_head_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending  to head"}, assess = false, timer = createStopWatch()},
aff_head_damaged = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_head_mangled = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_head_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_heartflutter = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hellsight = {state = "healed", effect = "", cures = {smoke = "elm", tree = "send"}, assess = false, timer = createStopWatch()},
aff_heatspear = {state = "healed", effect = "can't cure ablaze", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_hollow = {state = "healed", effect = "mana drain and random affs", cures = { herb = "eucrasia"}, assess = false, timer = createStopWatch()},
aff_hubris = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hypersomnia = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hypertension = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_hypochondria = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hypothermia = {state = "healed", effect = "", cures = {salve = "epidermal to torso", tree = "send"}, assess = false, timer = createStopWatch()},
aff_idiocy = {state = "healed", effect = "", cures = {moss = "send", tree = "send"}, assess = false, timer = createStopWatch()},
aff_impeded = {state = "healed", effect = "10% slower pills, cured by removing gravity", cures = {}, assess = false, timer = createStopWatch()},
aff_impairment = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_plodding = {state = "healed", effect = "", cures = {moss = "send", tree = "send"}, assess = false, timer = createStopWatch()},
aff_ice_encased = {state = "healed", effect = "longer salve bal, extra blunt dmg", cures = {}, assess = false, timer = createStopWatch()},
aff_imbued = {state = "healed", effect = "auto gravity from scio spells", cures = {}, assess = false, timer = createStopWatch()},
aff_impatience = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_indifference = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_infernal_seal = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_infernal_shroud = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_infested = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send"}, assess = false, timer = createStopWatch()},
aff_acidic_ink = {state = "healed", effect = "It's ink. You wait it out.", cures = {}, assess = false, timer = createStopWatch()},
aff_insomnia = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_itchy = {state = "healed", effect = "tree has to cure this first always", cures = { tree = "send" }, assess = false, timer = createStopWatch()},
aff_intimidated = {state = "healed", effect = "can't heal above 90%", cures = {}, assess = false, timer = createStopWatch()},
aff_justice = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_kneel = {state = "healed", effect = "hurts you if you walk too far from ravager", cures = {}, assess = false, timer = createStopWatch()},
aff_laxity = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_leeched_aura = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_left_arm_amputated = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_broken = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_left_arm_bruised = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_damaged = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_dislocated = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_mangled = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_left_arm_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_left_leg_amputated = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_broken = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_left_leg_bruised = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_damaged = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_dislocated = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_mangled = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_left_leg_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_lemniscate = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_lethargy = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_lifebane = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_lightwound = {state = "healed", effect = "extra bleeding", cures = {salve = "mending to body"}, assess = false, timer = createStopWatch()},
aff_limp_veins = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_loneliness = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_lovers_effect = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_magic_fire = {state = "healed", effect = "ablaze mask aff", cures = {salve = "mending"}, assess = false, timer = createStopWatch()},
aff_magic_weakness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_magnanimity = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_malevolence = {state = "healed", effect = "destroys shield, extra damage from weather", cures = {}, assess = false, timer = createStopWatch()},
aff_marked  = {state = "healed", effect = "marked by a mage", cures = {}, assess = false, timer = createStopWatch()},
aff_masochism = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_mauled_face = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_mental_disruption = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_mental_fatigue = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_merciful = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_migraine = {state = "healed", effect = "", cures = {smoke = "valerian", tree = "send"}, assess = false, timer = createStopWatch()},
aff_turmoil = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_mind_clamped = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_mirroring = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_misery = {state = "healed", effect = "Might strip defs?", cures = { herb = "eucrasia"}, assess = false, timer = createStopWatch()},
aff_mistbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_muddled = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_muscle_spasms = {state = "healed", effect = "chance to apply incorrectly", cures = {tree = "send", salve = "soothing to torso"}, assess = false, timer = createStopWatch()},
aff_mutagen = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_mutation_sickness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_narcolepsy = {state = "healed", effect = "Enjoy some napping", cures = { herb = "eucrasia"}, assess = false, timer = createStopWatch()},
aff_nightmare  = {state = "healed", effect = "???", cures = {}, assess = false, timer = createStopWatch()},
aff_nyctophobia  = {state = "healed", effect = "can't move in to/out of darkness", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_numb_arms = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_numbed_skin = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_oblivion = {state = "healed", effect = "best gtfo", cures = {}, assess = false, timer = createStopWatch()},
aff_oiled = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_omen = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_pacifism = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_paranoia = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_patterns = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_peace = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_penance = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_perplexed = {state = "healed", effect = "cannot interact with items and maybe cannot attack?", cures = { herb = "eucrasia"}, assess = false, timer = createStopWatch()},
aff_petrified = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_physical_disruption = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_polymorph = {state = "healed", effect = "divine only? unsure", cures = {}, assess = false, timer = createStopWatch()},
aff_poison_weakness = {state = "healed", effect = "more dmg from poison source", cures = {}, assess = false, timer = createStopWatch()},
aff_pre_restore_head = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_pre_restore_left_arm = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_pre_restore_left_leg = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_pre_restore_right_arm = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_pre_restore_right_leg = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_pre_restore_torso = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_psi_tether = {state = "healed", effect = "hurts you if you walk too far from zealot", cures = {}, assess = false, timer = createStopWatch()},
aff_psychic_weakness = {state = "healed", effect = "more dmg from psychic source", cures = {}, assess = false, timer = createStopWatch()},
aff_punished_arms = {state = "healed", effect = "unable to parry", cures = {}, assess = false, timer = createStopWatch()},
aff_punished_legs = {state = "healed", effect = "movement has 33% chance to fail", cures = {}, assess = false, timer = createStopWatch()},
aff_quicksand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ravaged = {state = "healed", effect = "applying salves hurts you", cures = {}, assess = false, timer = createStopWatch()},
aff_recklessness = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_remorse = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_rend = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_resin_glauxe = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_resonance = {state = "healed", effect = "templar can assess/diagnose you for free", cures = {}, assess = false, timer = createStopWatch()},
aff_right_arm_amputated = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_right_arm_broken = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_right_arm_bruised = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_damaged = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_right_arm_dislocated = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_mangled = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_right_arm_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_right_arm_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_right_leg_amputated = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_right_leg_broken = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_right_leg_bruised = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_damaged = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_right_leg_dislocated = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_mangled = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_right_leg_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_right_leg_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_ringing_ears = {state = "healed", effect = "unable to become deaf until cured", cures = {herb = "lobelia", tree = "send"}, assess = false, timer = createStopWatch()},
aff_ripped_groin = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ripped_spleen = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ripped_throat = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ruptured_eardrum = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sadness = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_salve_seared = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sand_trapped = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_slough = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_sapped_constitution = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_dexterity = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_intelligence = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_stats = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_strength = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sealing_circle = {state = "healed", effect = "circle affs cant be cured by pill", cures = {}, assess = false, timer = createStopWatch()},
aff_sealing_square = {state = "healed", effect = "square affs cant be cured by pill", cures = {}, assess = false, timer = createStopWatch()},
aff_sealing_triangle = {state = "healed", effect = "triangle affs cant be cured by pill", cures = {}, assess = false, timer = createStopWatch()},
aff_selarnia = {state = "healed", effect = "", cures = {salve = "mending to torso", tree = "send"}, assess = false, timer = createStopWatch()},
aff_self_loathing = {state = "healed", effect = "Lose balance and fall down", cures = { herb = "eucrasia"}, assess = false, timer = createStopWatch()},
["aff_self-pity"] = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send"}, assess = false, timer = createStopWatch()},
["aff_self_pity"] = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send"}, assess = false, timer = createStopWatch()},
aff_seduction = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sensitivity = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_rot_benign = {state = "healed", effect = "rot1 - no affs", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_rot_body = {state = "healed", effect = "rot5 - salve recovery doubled", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_rot_heat = {state = "healed", effect = "rot3 - can't apply caloric", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_rot_spirit = {state = "healed", effect = "rot2 - shadow damage", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_rot_wither = {state = "healed", effect = "rot4 - passive lethargy", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_shadow_coat = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_shadow_weakness = {state = "healed", effect = "more dmg from shadow source", cures = {}, assess = false, timer = createStopWatch()},
aff_shadowbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_shadowed = {state = "healed", effect = "gain affs if luminary shine hits you", cures = {}, assess = false, timer = createStopWatch()},
aff_shadowsphere = {state = "healed", effect = "hides scio affs and generally a bad time", cures = {}, assess = false, timer = createStopWatch()},
aff_shivering = {state = "healed", effect = "", cures = {salve = "caloric", tree = "send"}, assess = false, timer = createStopWatch()},
aff_shock = {state = "healed", effect = "can't run away fast", cures = {}, assess = false, timer = createStopWatch()},
aff_shyness = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_smashed_throat = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_sore_ankle = {state = "healed", effect = "leg dmg on movement", cures = {tree = "send", salve = "soothing to legs"}, assess = false, timer = createStopWatch()},
aff_sore_wrist = {state = "healed", effect = "arm dmg on parry", cures = {tree = "send", salve = "soothing to arms"}, assess = false, timer = createStopWatch()},
aff_soul_disease = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soul_poison = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soulchill = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soulpuncture = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soulroot = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_spinal_rip = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_spiritbane = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_spiritbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_spirit_weakness = {state = "healed", effect = "more dmg from spirit source", cures = {}, assess = false, timer = createStopWatch()},
aff_squelched = {state = "healed", effect = "", cures = {smoke = "valerian", tree = "send"}, assess = false, timer = createStopWatch()},
aff_stiffness = {state = "healed", effect = "lower dodge/divert, soothing cured affs can break bones", cures = {tree = "send", salve = "soothing to torso"}, assess = false, timer = createStopWatch()},
aff_stonebrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_stonevice = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_stormtouched = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_stupidity = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_stuttering = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_superstition = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_temptation = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_taunted = {state = "healed", effect = "can only hit who taunted you", cures = {}, assess = false, timer = createStopWatch()},
aff_terror = {state = "healed", effect = "prevents ability to compose", cures = {}, assess = false, timer = createStopWatch()},
aff_thin_blood = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_thorns = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_throatclaw = {state = "healed", effect = "", cures = {salve = "mending to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_throatslice = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_thunderstorm = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_torso_bruised = {state = "healed", effect = "", cures = {salve = "mending to torso"}, assess = false, timer = createStopWatch()},
aff_torso_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to torso"}, assess = false, timer = createStopWatch()},
aff_torso_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to torso"}, assess = false, timer = createStopWatch()},
aff_torso_damaged = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_torso_mangled = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_torso_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_tree_seared = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_trick_flame = {state = "healed", effect = "doubles ablaze stacks, easier re-application of stacks", cures = {}, assess = false, timer = createStopWatch()},
aff_troubled_breathing = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_unknown = {state = "healed", effect = "unknown aff", cures = {}, assess = false, timer = createStopWatch()},
aff_vertigo = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_vinethorns = {state = "healed", effect = "", cures = {special = "pull thorn from body"}, assess = false, timer = createStopWatch()},
aff_vitalbane = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_void = {state = "healed", effect = "", cures = {salve = "caloric"}, assess = false, timer = createStopWatch()},
aff_voidgaze = {state = "healed", effect = "gives stacking affs while active", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_voidtrapped = {state = "healed", effect = "stuck prone for a bit via voidgaze", cures = {}, assess = false, timer = createStopWatch()},
aff_vomiting = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_voyria = {state = "healed", effect = "", cures = {vial = "immunity"}, assess = false, timer = createStopWatch()},
aff_weak_grip = {state = "healed", effect = "bypass fist sigil", cures = {tree = "send", salve = "soothing to arms"}, assess = false, timer = createStopWatch()},
aff_weakvoid = {state = "healed", effect = "", cures = {salve = "caloric"}, assess = false, timer = createStopWatch()},
aff_whiplash = {state = "healed", effect = "head dmg", cures = {tree = "send", salve = "soothing to legs"}, assess = false, timer = createStopWatch()},
aff_weariness = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_windbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_withering = {state = "healed", effect = "", cures = {smoke = "elm", tree = "send"}, assess = false, timer = createStopWatch()},
aff_worrywort = {state = "healed", effect = "Will prevent you from healing other things", cures = { herb = "eucrasia"}, assess = false, timer = createStopWatch()},
aff_wraith = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_writhe_armpitlock = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_bind = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_feed = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_hoist = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_impaled = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_lure = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_necklock = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_ropes = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_gunk = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_thighlock = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_transfix = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_vines = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_web = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_grappled = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_stasis = {state = "healed", effect = "can't move, can attack", cures = {}, assess = false, timer = createStopWatch()},

---- Mirror affs here
--Revenant
aff_lurk = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_mortalterror = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},

--Oneiromancer
aff_fae_curse = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_unspooled = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},

--Warden
aff_ancestral_portent = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ancestral_ambush = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_haunting = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_eluded = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_debilitated = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_inhibited = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},

--Earthcaller
aff_aftershocks = {state = "healed", effect = "gain affs if earthcaller seismicity hits you", cures = {}, assess = false, timer = createStopWatch()},
aff_faulted = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},

--Runecarver
aff_inoculated = {state = "healed", effect = "auto gravity from scio spells", cures = {}, assess = false, timer = createStopWatch()},
aff_fungal_invasion = {state = "healed", effect = "10% slower pills, cured by removing gravity", cures = {}, assess = false, timer = createStopWatch()},
aff_preymark = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_woe_curse = {state = "healed", effect = "hides scio affs and generally a bad time", cures = {}, assess = false, timer = createStopWatch()},
aff_mystified = {state = "healed", effect = "stuck prone for a bit via voidgaze", cures = {}, assess = false, timer = createStopWatch()},

--Bloodborn
aff_excess_choleric = {state = "healed", effect = "emberbrand - ablaze on all spells", cures = {}, assess = false, timer = createStopWatch()},
aff_excess_melancholic = {state = "healed", effect = "thunderbrand - health damage, slower pills", cures = {}, assess = false, timer = createStopWatch()},
aff_frostbite = {state = "healed", effect = "leads to frostbrand", cures = {}, assess = false, timer = createStopWatch()},
aff_excess_phlegm = {state = "healed", effect = "frostbrand - continually freezes over time", cures = {}, assess = false, timer = createStopWatch()},
aff_corroded_limb = {state = "healed", effect = "extra limb damage if hit by yellowbile spell", cures = {}, assess = false, timer = createStopWatch()},
aff_bile_covered = {state = "healed", effect = "dmg over time", cures = {}, assess = false, timer = createStopWatch()},
aff_phlegm_frozen = {state = "healed", effect = "gives an additional cold damage proc on cold damage receive", cures = {}, assess = false, timer = createStopWatch()},

}</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>give/take afflictions</name>
								<packageName></packageName>
								<script>function snd.aff_check()
 for i in pairs(snd.afflictions) do
  if snd.afflictions[i].cures.writhe ~= nil or string.find(i, "damaged") or string.find(i, "mangled") or string.find(i, "pre_restore") or i == "aff_concussion" then
   if getStopWatchTime(snd.afflictions[i].timer) &gt; 7 and snd.afflictions[i].state == "waiting" then
    snd.aff_timeout(i)
   end
  elseif snd.afflictions[i].state == "waiting" and getStopWatchTime(snd.afflictions[i].timer) &gt; 2 then
   snd.aff_timeout(i)
  end
 end
end

function snd.aff_timeout(affliction)
 snd.afflictions[affliction].state = "afflicted"
 snd.message("[Resetting: &lt;white&gt;"..affliction.."&lt;brown&gt;]", "reset")
end

function snd.aff_gain(affliction)
 if affliction == "aeon" then
  if snd.defenses.def_speed.state == "deffed" then
   snd.def_take("speed")
   return
  end
 end
 snd.message("You: &lt;red&gt;GOT&lt;DeepSkyBlue&gt; "..affliction..".", "affliction")
 snd.aff_have(affliction)
 if affliction == "amnesia" then
  for i = 1,5 do
   snd.send("stand")
  end
 elseif affliction == "paresis" then
  if snd.paraTimer then killTimer(snd.paraTimer) end
  snd.paraTimer = tempTimer(3, [[if snd.have_aff("paresis") then snd.send("firstaid elevate paresis") end]])
 elseif affliction == "allergies" then
  if snd.allergyTimer then killTimer(snd.allergyTimer) end
	snd.allergyTimer = tempTimer(18, [[if snd.have_aff("allergies") then snd.send("firstaid elevate allergies") end]])
 end
 if snd.gui.enabled then 
  display_my_affs()
  color_self_limbs()
 end
end

function snd.aff_have(affliction)
 if snd.class_hitting == "archivist" then
	if table.contains(snd.circle_affs, affliction) then
	 hit_aff = false
	 for aff in pairs(snd.circle_affs) do
	  if not hit_aff then
		 snd.send("firstaid predict "..snd.circle_affs[aff])
		 if snd.circle_affs[aff] == affliction then
		  hit_aff = true
		 end
		end
	 end
	end
	if table.contains(snd.square_affs, affliction) then
	 hit_aff = false
	 for aff in pairs(snd.square_affs) do
	  if not hit_aff then
		 snd.send("firstaid predict "..snd.square_affs[aff])
		 if snd.square_affs[aff] == affliction then
		  hit_aff = true
		 end
		end
	 end
	end
	if table.contains(snd.triangle_affs, affliction) then
	 hit_aff = false
	 for aff in pairs(snd.triangle_affs) do
	  if not hit_aff then
		 snd.send("firstaid predict "..snd.triangle_affs[aff])
		 if snd.triangle_affs[aff] == affliction then
		  hit_aff = true
		 end
		end
	 end
	end
 end
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 if snd.afflictions[affliction].state == "healed" then
  snd.afflictions[affliction].state = "afflicted"
	if snd.gui.enabled then 
    display_my_affs()
	  color_self_limbs()
  end
 end
end

function snd.aff_diag(affliction)
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 snd.aff_have(affliction)
 if snd.gui.enabled then 
  deleteLine()
 end
 if snd.afflictions[affliction].cures.herb ~= nil then
  if string.find(snd.afflictions[affliction].cures.herb, "eat") then
   snd.aff_color = "&lt;red&gt;"
  elseif string.find(snd.afflictions[affliction].cures.herb, "smoke") then
   snd.aff_color = "&lt;blue&gt;"
  end
 elseif snd.afflictions[affliction].cures.salve ~= nil then
   snd.aff_color = "&lt;green&gt;"
 end
 snd.aff_color = "&lt;yellow&gt;"
 cecho(snd.aff_color.."\n"..affliction)
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 echo(" "..snd.afflictions[affliction].effect)
 if snd.gui.enabled then 
  display_my_affs()
  color_self_limbs()
 end
end

function snd.aff_cure(affliction)
 snd.message("You: &lt;green&gt;HEAL&lt;DeepSkyBlue&gt; "..affliction..".", "affliction")
 snd.aff_remove(affliction)
 if snd.gui.enabled then 
  display_my_affs()
  color_self_limbs()
 end
end

function snd.aff_remove(affliction)
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 if snd.afflictions[affliction].cures.writhe ~= nil then
    --snd.status.writhing = false
 end
 snd.afflictions[affliction].state = "healed"
 if snd.gui.enabled then 
  display_my_affs()
  color_self_limbs()
 end
end

function snd.aff_count_mental()
  local aff_count = 0
  for aff in pairs(snd.mental_affs) do
    if table.contains(snd.target_has, snd.mental_affs[aff]) then
      aff_count = aff_count + 1
    end
  end
  return aff_count
end

function snd.aff_count_physical()
  local aff_count = 0
  for aff in pairs(snd.physical_affs) do
    if table.contains(snd.target_has, snd.physical_affs[aff]) then
      aff_count = aff_count + 1
    end
  end
  return aff_count
end

function snd.aff_count_all()
  local aff_count = 0
  for aff in pairs(snd.all_affs) do
    if table.contains(snd.target_has, snd.all_affs[aff]) then
      aff_count = aff_count + 1
    end
  end
  return aff_count
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>clear</name>
								<packageName></packageName>
								<script>
function snd.clear_afflictions(type)
 snd.clear_affs = {}
 for i in pairs(snd.afflictions) do
  if snd.afflictions[i].cures[type] ~= nil then
   if snd.afflictions[i].cures[type] == snd.last[type] and snd.afflictions[i].state ~= "healed" then
    table.insert(snd.clear_affs, i)
    snd.aff_remove(i)
   end
  end
 end
 if #snd.clear_affs &gt; 0 then
  cecho("&lt;red&gt;\n[Removing:")
  for k in pairs(snd.clear_affs) do
   if snd.clear_affs[k] then
    cecho("&lt;blue&gt; "..snd.clear_affs[k])
   end
  end
  cecho("&lt;red&gt;]")
  send(" ")
 end
end
</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Timer</name>
								<packageName></packageName>
								<script>timer = timer or {}
timer.values = timer.values or {}

-- Usage:
--
-- timer:init() - create master timer
-- timer:get(xname) - return current value or nil
-- timer:set(xname, xduration) -- set timer 'xname' to value 'xduration' (duration=nil removes timer)
-- timer:custom - if created, this script will be called every second after all timers are updated
--
-- If a function exists matching the name of the timer, it will be called every second with arguments (functionname, timervalue).
-- When time remaining reaches 0, the timer will then be removed.


function timer:init()
	if exists("MudTimer", "timer") == 0 then
		permTimer("MudTimer", "", 1, [[timer:script()]] )
	end

	enableTimer("MudTimer")
end

function timer:set(xname, xduration)
	self.values[xname] = xduration
end

function timer:get(xname)
	if self.values[xname] == nil then
		return(nil)
	end

	return (self.values[xname])
end

function timer:script()
	-- decrement all timers
	for k, v in pairs(timer.values) do
		timer.values[k] = timer.values[k]-1

		-- Timer has reached 0 (expired)
		if timer.values[k] &lt; 1 and k ~= "" then
			timer.values[k] = nil	

			if _G[k] ~= nil then
				-- call timer with 0 (expired)
				_G[k](k, 0)
			end
		else
			-- have timer called every second with "fname, time" as argument
			if _G[k] ~= nil then
				_G[k](k, timer.values[k])
			end
		end
	end

	if timer.custom ~= nil then
		timer:custom()
	end
end</script>
								<eventHandlerList />
							</Script>
						</ScriptGroup>
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Defenses</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>defense table</name>
								<packageName></packageName>
								<script>
snd.defenses = {
-- Probably handled by firstaid anyways, otherwise auto assume people have plants/vials. 
def_deafness = {defense = "deafness", type = "normal", effect = "Protects from sonic effects", balance = {herb = "ototoxin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_blindness = {defense = "blindness", type = "normal", effect = "Protects from visual effects", balance = {herb = "amaurosis"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_waterbreathing = {defense = "waterbreathing", type = "normal", effect = "Prevents choking underwater", balance = {herb = "waterbreathing"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_kola = {defense = "instawake", type = "normal", effect = "Removes the WAKE delay", balance = {eat = "stimulant"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_insomnia = {defense = "insomnia", type = "normal", effect = "Prevents sleep effects", balance = {eat = "kawhepill"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
--def_deathsight = {defense = "deathsight", type = "normal", effect = "Reports player deaths", balance = {eat = "thanatonin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
--def_thirdeye = {defense = "thirdeye", type = "normal", effect = "Adds locations to WHO", balance = {eat = "acuity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_venom = {defense = "antivenin", type = "normal", effect = "Protects against poison damage", balance = {vial = "antivenin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_levitation = {defense = "levitation", type = "normal", effect = "Protects against falling effects", balance = {vial = "levitation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_frost = {defense = "temperance", type = "normal", effect = "Protects against fire damage", balance = {vial = "frost"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_speed = {defense = "speed", type = "green", effect = "Protects against aeon affliction", balance = {drink = "speed"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_caloric = {defense = "insulation", type = "normal", effect = "Protects against cold damage", balance = {salve = "caloric"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_vigor = {defense = "vigor", type = "normal", effect = "Critical hits heal you", balance = {drink = "vigor"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_fangbarrier = {defense = "fangbarrier", type = "normal", effect = "Protects against syssin bites", balance = {special = "apply paste"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_rebounding = {defense = "rebounding", type = "blue", effect = "Causes weapon attacks to backfire", balance = {smoke = "reishi"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_reflection = {defense = "reflection", type = "blue", effect = "Takes your place for 1 attack", balance = {special = "cast reflection"}, state = "down", needit = false, timer = createStopWatch(), skill = "Reflection"},

--Generic skills or occurs in more than one
def_nightsight = {defense = "nightsight", type = "normal", effect = "Allows glancing at night", balance = {special = "nightsight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Nightsight"},
--def_fitness = {defense = "fitness", type = "normal", effect = "Protects from asthma", balance = {balanceequilibriumtake = "fitness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fitness"},
def_divert_melee = {defense = "divert_melee", type = "normal", effect = "Protects from melee damage", balance = {special = "divert melee"}, state = "down", needit = false, timer = createStopWatch(), skill = "Jerk"},
def_dodge_melee = {defense = "dodge_melee", type = "normal", effect = "Protects from melee damage", balance = {special = "dodge melee"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sidestep"},
def_clarity = {defense = "clarity", type = "normal", effect = "Protects against some mental affs", balance = {needyequilibriumtake = "clarity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Clarity"},
def_shroud = { }, -- handled and set per class elsewhere
def_manipulation_aegis = {defense = "manipulation_aegis", type = "normal", effect = "cheap prism", balance = {needyequilibriumtake = "manipulate pylon for aegis"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_gripping = {defense = "gripping", type = "normal", effect = "Prevents disarming", balance = {balanceequilibrium = "grip"}, state = "down", needit = false, timer = createStopWatch(), skill = "Gripping"},
def_starburst = {defense = "starburst", type = "blue", effect = "Instant revival on death", balance = {tattoo = "starburst"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_density = {defense = "density", type = "red", effect = "Resists forced movement", balance = {salve = "mass"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_waterwalking = {defense = "waterwalking", type = "normal", effect = "Allows you to walk on water", balance = {special = "touch waterwalking"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_overwatch = {defense = "overwatch", type = "normal", effect = "See items in the air/trees", balance = {special = "goggle toggle overwatch"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_divine_speed = {defense = "divine_speed", type = "normal", effect = "Faster movement through Divine Grace", balance = {balanceequilibriumtake = "grace"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_hypersight = {defense = "hypersight", type = "normal", effect = "see through shenanigans", balance = {needyequilibriumtake = "hypersight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_nimbleness = {defense = "nimbleness", type = "normal", effect = "dodge some attacks", balance = {needyequilibriumtake = "nimbleness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Nimbleness"},
def_deathsight = {defense = "deathsight", type = "normal", effect = "Reports player deaths", balance = {special = "deathsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Deathsight"},
def_thirdeye = {defense = "thirdeye", type = "normal", effect = "Adds locations to WHO", balance = {special = "thirdeye"}, state = "down", needit = false, timer = createStopWatch(), skill = "Thirdeye"},
def_lifevision = {defense = "lifevision", type = "normal", effect = "See all things living, sometimes identify illusions.", balance = {balanceequilibriumtake = "lifevision"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifevision" },

--Ylem
def_amber_orb = {defense= "amber_orb", type = "light_yellow", effect = "5% increase in experience", balance = {special = "activate amber orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_green_orb = {defense= "green_orb", type = "lawn_green", effect = "25% increase in vigour healing", balance = {special = "activate green orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_crimson_orb = {defense= "crimson_orb", type = "firebrick", effect = "more damage to and less from denizens", balance = {special = "activate crimson orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_cerulean_orb = {defense= "cerulean_orb", type = "LightBlue", effect = "protection from damage", balance = {special = "activate cerulean orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_white_orb = {defense= "white_orb", type = "ghost_white", effect = "increased ylem gain from eld", balance = {special = "activate white orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--Generic endgame
def_safeguard = {defense = "safeguard", type = "normal", effect = "Increased resistances", balance = {special = "safeguard"}, state = "down", needit = false, timer = createStopWatch(), skill = "Instill"},
def_warmth = {defense = "warmth", type = "normal", effect = "Increased resistances", balance = {special = "warmth"}, state = "down", needit = false, timer = createStopWatch(), skill = "Instill"},
def_miasma = {defense = "miasma", type = "normal", effect = "Increased resistances", balance = {special = "miasma"}, state = "down", needit = false, timer = createStopWatch(), skill = "Instill"},
def_astral_refulgence = {defense = "astral_refulgence", type = "normal", effect = "Absorb affs", balance = {needyequilibriumtake = "astral refulgence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Refulgence"},
def_astral_presence = {defense = "astral_presence", type = "normal", effect = "Chance to crit/dodge more", balance = {needyequilibriumtake = "astral presence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Presence"},
def_astral_chaosspores = {defense = "astral_chaosspores", type = "normal", effect = "Magic Damage Fun", balance = {needyequilibriumtake = "astral spores on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Chaosspores"},
def_astral_dreamtide = {defense = "astral_dreamtide", type = "normal", effect = "Chance to absorb attacks", balance = {needyequilibriumtake = "astral dreamtide"}, state = "down", needit = false, timer = createStopWatch(), skill = "Dreamtide"},
def_astral_recursion = {defense = "astral_recursion", type = "normal", effect = "Replicate an ability", balance = {needyequilibriumtake = "astral recursion on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Recursion"},

--Raceskills or tattoos
def_pacing = {defense = "pacing", type = "red", effect = "Keep up while following", balance = {needybalancetake = "pacing on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Pacing"},
--def_heatsight = {defense = "heatsight", type = "normal", effect = "See hidden people", balance = {needybalancetake = "heatsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Heatsight"},
def_chameleon = {defense = "chameleon", type = "normal", effect = "Change your name on QW/WHO", balance = {balanceequilibrium = "chameleon "}, state = "down", needit = false, timer = createStopWatch(), skill = "ChameleonTattoo"},
def_cloak_tattoo = {defense = "cloak", type = "blue", effect = "Protects from unwanted summons", balance = {tattoo = "cloak"}, state = "down", needit = false, timer = createStopWatch(), skill = "CloakTattoo"},
def_mindseye_tattoo = {defense = "mindseye", type = "green", effect = "Allows deaf/blind hearing/vision", balance = {balanceequilibrium = "touch allsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_firefly_tattoo = {defense = "firefly", type = "green", effect = "Protects you against them Sciomancers", balance = {tattoo = "firefly"},state = "down", needit = false, timer = createStopWatch(), skill = "FireflyTattoo"},
def_flame_tattoo = {defense = "flame", type = "green", effect = "Helps protect against writhe affs", balance = {tattoo = "flame"},state = "down", needit = false, timer = createStopWatch(), skill = "FlameTattoo"},
def_shield_tattoo = {defense = "shielded", type = "green", effect = "Magical shield to stop attacks", balance = {tattoo = "shield"},state = "down", needit = false, timer = createStopWatch(), skill = "ShieldTattoo"},

--Templar
def_maingauche = {defense = "maingauche", type = "normal", effect = "Chance to counter attack", balance = {needyequilibriumtake = "battlefury maingauche"}, state = "down", needit = false, timer = createStopWatch(), skill = "MainGauche"},

--Bard
def_sheath = {defense = "sheath", type = "normal", effect = "10% Resist to Cutting/Blunt", balance = {needyequilibriumtake = "weave sheath"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sheath"},
def_charisma = {defense = "charisma", type = "normal", effect = "Adventuring opportunities are more fruitful", balance = {balanceequilibrium = "charisma"}, state = "down", needit = false, timer = createStopWatch(), skill = "Charisma"},
def_euphonia = {defense = "euphonia", type = "normal", effect = "HP and MP heal for you and allies when you sing/play", balance = {needyequilibriumtake = "euphonia"}, state = "down", needit = false, timer = createStopWatch(), skill = "Euphonia"},
def_discordance = {defense = "discordance", type = "normal", effect = "Affs on enemies when you sing/play", balance = {needyequilibriumtake = "discordance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Discordance"},
def_halfbeat = {defense = "halfbeat", type = "normal", effect = "Speed up music occasionally", balance = {needyequilibriumtake = "halfbeat"}, state = "down", needit = false, timer = createStopWatch(), skill = "Halfbeat"},
def_aurora = {defense = "aurora", type = "normal", effect = "Damage bonus against hostiles", balance = {needyequilibriumtake = "weave aurora"}, state = "down", needit = false, timer = createStopWatch(), skill = "Aurora"},
def_equipoise = {defense = "equipoise", type = "normal", effect = "Follow when off eq", balance = {needybalancetake = "equipoise on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Equipoise"},
def_stretching = {defense = "stretching", type = "normal", effect = "Heal limb damage on mending cure", balance = {needybalancetake = "stretching on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stretching"},
def_destiny = {defense = "destiny", type = "normal", effect = "Certain Weaving spells cost no eq on next cast", balance = {special = "sing song of destiny"}, state = "down", needit = false, timer = createStopWatch(), skill = "Destiny"},

--Carnifex
def_fearless = {defense = "fearless", type = "normal", effect = "Protects against fear affliction.", balance = {special = "fearless"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fearless"},
def_reveling = {defense = "reveling", type = "normal", effect = "Periodic heal on damage done.", balance = {needybalancetake = "reveling on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Reveling"},
def_recklessness = {defense = "reckless", type = "normal", effect = "Can attack with 1 broken arm.", balance = {needybalancetake = "recklessness on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Reckless"},
def_soul_harvest = {defense = "soulharvest", type = "normal", effect = "Automatically harvest souls.", balance = {special = "soul harvest on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Harvest"},
def_soul_fracture = {defense = "soul_fracture", type = "normal", effect = "Boosts defenses and weapon damage.", balance = {special = "soul fracture"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fracture"},
def_soul_body = {defense = "soul_body", type = "normal", effect = "Boosts physical defense.", balance = {needyequilibriumtake = "soul embed in body"}, state = "down", needit = false, timer = createStopWatch(), skill = "EmbedBody"},
def_soul_fortify = {defense = "soul_fortify", type = "normal", effect = "Increased constitution.", balance = {needyequilibriumtake = "soul fortify"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fortify"},
def_soul_thirst = {defense = "soulthirst", type = "normal", effect = "Steals soul on hit.", balance = {equilibriumtake = "soul thirst"}, state = "down", needit = false, timer =createStopWatch(), skill = "Soulthirst"},
def_soul_substitute = {defense = "substitute", type = "normal", effect = "Protected from death.", balance = {needyequilibriumtake = "soul substitute"}, state = "down", needit = false, timer = createStopWatch(), skill = "Substitute"},
def_soul_spiritsight = {defense = "soul_spiritsight", type = "normal", effect = "You can see the hidden.", balance = {needyequilibriumtake = "soul spiritsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spiritsight"},
def_hound_opening = {defense = "hound_opening", type = "normal", effect = "Increases damage done to mobs.", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Openings"},
def_bruteforce = {defense = "bruteforce", type = "normal", effect = "Attacks hit through parry.", balance = {needybalancetake = "hammer force"}, state = "down", needit = false, timer = createStopWatch(), skill = "BruteForce"},
def_herculeanrage = {defense = "herculean rage", type = "normal", effect = "Make them prone/off bal.", balance = {needybalancetake = "hammer rage on"}, state = "down", needit = false, timer = createStopWatch(), skill = "HerculeanRage"},
def_houndmark = {defense = "houndmark", type = "yellow", effect = "hounds go zoom", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--Shapeshifter
def_weathering = {defense = "weathering", type = "normal", effect = "Cold resistance", balance = {special = "weathering"}, state = "down", needit = false, timer = createStopWatch(), skill = "Weathering"},
def_bodyheat = {defense = "bodyheat", type = "normal", effect = "Protects against chill", balance = {needyequilibriumtake = "bodyheat"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bodyheat"},
def_metabolism = {defense = "metabolism", type = "normal", effect = "Increase strength", balance = {balancetake = "metabolize on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Metabolize"},
def_endurance = {defense = "celerity", type = "normal", effect = "Faster movement", balance = {needybalancetake = "endurance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Endurance"},
def_thickhide = {defense = "thickhide", type = "normal", effect = "Physical protection", balance = {balancetake = "thickhide"}, state = "down", needit = false, timer = createStopWatch(), skill = "Thickhide"},
def_corner = {defense = "cornering", type = "normal", effect = "Increase dodge chance", balance = {needybalancetake = "corner on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cornering"},
def_salivate = {defense = "salivating", type = "normal", effect = "Bites give haemophilia", balance = {equilibriumneed = "salivate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Salivate"},
def_harden = {defense = "hardening", type = "normal", effect = "Chance to prevent crippled limbs", balance = {needyequilibriumtake = "harden bones"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hardening"},
def_fury = {defense = "fury", type = "normal", effect = "Can use claws off balance", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Fury"},
def_bracing = {defense = "bracing", type = "normal", effect = "Bracing for physical attacks", balance = {needybalancetake = "brace"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bracing"},
def_stealth = {defense = "stealth", type = "normal", effect = "Hide yourself", balance = {needybalancetake = "stealth on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stealth"},

--Luminary
def_lightshield = {defense = "lightshield", type = "normal", effect = "Light-based damage resistance", balance = {needyequilibriumtake = "evoke lightshield"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lightshield" },
def_fireblock = {defense = "fireblock", type = "normal", effect = "Resists fire attacks", balance = {needybalancetake = "evoke fireblock"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fireblock"},
def_shine = {defense = "shine", type = "normal", effect = "Dealing AoE room damage to enemies", balance = {needybalancetake = "evoke shine"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shine"},
def_inspiration_strength = {defense = "inspiration_strength", type = "normal", effect = "Increases strength", balance = {needyequilibriumtake = "perform inspiration strength"}, state = "down", needit = false, timer = createStopWatch(), skill = "Inspiration" },
def_inspiration_dexterity = {defense = "inspiration_dexterity", type = "normal", effect = "Increases dexterity", balance = {needyequilibriumtake = "perform inspiration dexterity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Inspiration" },
def_inspiration_intelligence = {defense = "inspiration_intelligence", type = "normal", effect = "Increases intelligence", balance = {needyequilibriumtake = "perform inspiration intelligence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Inspiration" },
def_inspiration_constitution = {defense = "inspiration_constitution", type = "normal", effect = "Increases constitution", balance = {needyequilibriumtake = "perform inspiration constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Inspiration" },

--Earthcaller
def_heatshield = {defense = "heatshield", type = "normal", effect = "Light-based damage resistance", balance = {needyequilibriumtake = "tectonic heatshield"}, state = "down", needit = false, timer = createStopWatch(), skill = "Heatshield" },
def_smothering = {defense = "smothering", type = "normal", effect = "Resists fire attacks", balance = {needybalancetake = "tectonic smothering"}, state = "down", needit = false, timer = createStopWatch(), skill = "Smnothering"},
def_seismicity = {defense = "seismicity", type = "normal", effect = "Dealing AoE room damage to enemies", balance = {needybalancetake = "tectonic seismicity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shine"},
def_battlehymn_strength = {defense = "battlehymn_strength", type = "normal", effect = "Increases strength", balance = {needyequilibriumtake = "dirge battlehymn strength"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlehymn" },
def_battlehymn_constitution = {defense = "battlehymn_constitution", type = "normal", effect = "Increases constitution", balance = {needyequilibriumtake = "dirge battlehymn constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlehymn" },
def_battlehymn_intelligence = {defense = "battlehymn_intelligence", type = "normal", effect = "Increases intelligence", balance = {needyequilibriumtake = "dirge battlehymn intelligence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlehymn" },
def_battlehymn_dexterity = {defense = "battlehymn_dexterity", type = "normal", effect = "Increases dexterity", balance = {needyequilibriumtake = "dirge battlehymn dexterity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlehymn" },

--Syssin
def_hiding = {defense = "hiding", type = "blue", effect = "Conceals your presence", balance = {needybalancetake = "hide"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hide"},
def_warding = {defense = "warding", type = "normal", effect = "Physical resistance", balance = {needybalancetake = "warding"}, state = "down", needit = false, timer = createStopWatch(), skill = "Warding"},
def_finesse = {defense = "finesse", type = "normal", effect = "Protects against rebounding", balance = {needybalancetake = "finesse"}, state = "down", needit = false, timer = createStopWatch(), skill = "Finesse"},
def_weaving = {defense = "weaving", type = "red", effect = "Increases dodge rate", balance = {needybalancetake = "weaving on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Weaving"},
def_shadowsight = {defense = "shadowsight", type = "normal", effect = "See hidden people", balance = {equilibriumtake = "shadowsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shadowsight"},
def_ghost = {defense = "ghosted", type = "normal", effect = "Conceals movement", balance = {needyequilibriumtake = "conjure ghost"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ghost"},
--def_shadowslip = {defense = "shadowslip", type = "normal", effect = "HIDE on killing blow", balance = {needybalancetake = "shadowslip on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shadowslip"},
def_phase = {defense = "phased", type = "yellow", effect = "On another plane", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Phase"},
def_lipreading = {defense = "lipreading", type = "normal", effect = "Hear through DEAF", balance = {needybalancetake = "lipread"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lipread"},

--Monk
def_vitality = {defense = "vitality", type = "normal", effect = "You will get a burst of HP when near death", balance = {needyequilibriumtake = "vitality"}, state = "down", needit = false, timer = createStopWatch(), skill = "Vitality"},
def_kaido_regeneration = {defense = "kaido_regeneration", type = "normal", effect = "HP regen", balance = {special = "regeneration on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Regeneration"},
def_constitution = {defense = "constitution", type = "normal", effect = "Protection from nausea", balance = {needyequilibriumtake = "constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Constitution"},
def_split_mind = {defense = "split_mind", type = "normal", effect = "Constant meditation", balance = {needyequilibriumtake = "split mind"}, state = "down", needit = false, timer = createStopWatch(), skill = "Splitting"},
def_kaido_immunity = {defense = "kaido_immunity", type = "normal", effect = "You will auto cure the next poison you are hit with", balance = {needyequilibriumtake = "immunity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Immunity"},
def_boosted_regen = {defense = "boosted_regen", type = "normal", effect = "Even more HP regen", balance = {special = "boost regeneration"}, state = "down", needit = false, timer = createStopWatch(), skill = "Boosting"},
def_insight = {defense = "insight", type = "normal", effect = "See the thoughts of others", balance = {needyequilibriumtake = "mind insight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Insight"},
def_toughness = {defense = "toughness", type = "normal", effect = "Cutting resistance", balance = {needyequilibriumtake = "toughness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Toughness"},
def_resistance = {defense = "resistance", type = "normal", effect = "Magic resistance", balance = {needyequilibriumtake = "resistance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resistance"},

--Sentinel
def_barkskin = {defense = "barkskin", type = "normal", effect = "10% Resist to Cutting/Blunt", balance = {needyequilibriumtake = "barkskin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Barkskin"},
def_lifesap = {defense = "lifesap", type = "normal", effect = "Gain health on melee attack", balance = {needyequilibriumtake = "lifesap"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifesap" },
def_hardiness = {defense = "hardiness", type = "normal", effect = "15% Resist to Cold/Venom", balance = {needyequilibriumtake = "hardiness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hardiness" },
def_flexibility = {defense = "flexibility", type = "normal", effect = "Increased writhe", balance = {balanceequilibriumtake = "flexibility"}, state = "down", needit = false, timer = createStopWatch(), skill = "Flexibility" },
def_maskedscent = {defense = "masked_scent", type = "normal", effect = "Not listed on scent", balance = {balanceequilibriumtake = "mask scent"}, state = "down", needit = false, timer = createStopWatch(), skill = "Masking" },
def_conceal = {defense = "concealed", type = "normal", effect = "You are a shadowy figure", balance = {balanceequilibriumtake = "conceal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Conceal" },
def_foreststride = {defense = "foreststride", type = "normal", effect = "You move faster outdoors &amp; in forests", balance = {balanceequilibriumtake = "foreststride"}, state = "down", needit = false, timer = createStopWatch(), skill = "Foreststriding" },
def_alacrity = {defense = "alacrity", type = "normal", effect = "You shoot and trap faster", balance = {balanceequilibriumtake = "alacrity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Alacrity" },

--Wayfarer
def_ironskin = {defense = "ironskin", type = "normal", effect = "Resist physical damage", balance = {balanceequilibriumtake = "wayfare ironskin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ironskin" },
def_blindsense = {defense = "blindsense", type = "normal", effect = "Resistance to accuracy reduction", balance = {balanceequilibriumtake = "wayfare blindsense on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blindsense" },
def_greenheart = {defense = "greenheart", type = "normal", effect = "Tree Tattoo is sped up", balance = {balanceequilibriumtake = "outc greenink"..snd.sep.."wayfare greenheart on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Greenheart" },
def_endure = {defense = "endure", type = "normal", effect = "Endurance usage reduced", balance = {balanceequilibriumtake = "wayfare endure on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Endure" },
def_mountaineer = {defense = "mountaineer", type = "normal", effect = "You're shoutin' room-wide", balance = {balanceequilibriumtake = "wayfare mountaineer on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mountaineer" },
def_dustcoat = {defense = "dustcoat", type = "normal", effect = "Soulmask while moving", balance = {balanceequilibriumtake = "wayfare dustcoat"}, state = "down", needit = false, timer = createStopWatch(), skill = "Dustcoat" },
def_resilience = {defense = "resilience", type = "normal", effect = "Assess is wonky vs you", balance = {balanceequilibriumtake = "wayfare resilience on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resilience" },
def_desolation = {defense = "desolation", type = "normal", effect = "You do more melee damage, ranged speed down", balance = {balanceequilibriumtake = "wayfare desolation on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Desolation" },
def_circulation = {defense = "circulation", type = "normal", effect = "+1STR, clot under haemophilia, clot cost up", balance = {balanceequilibriumtake = "wayfare circulation on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Circulation" },
def_brutality = {defense = "brutality", type = "normal", effect = "Fear people and maybe regen fury", balance = {balanceequilibriumtake = "fury brutality on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Brutality"},
def_axe_avert = {defense = "axe_avert", type = "normal", effect = "Knock away projectiles", balance = {balanceequilibriumtake = "axe avert on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Avert"},
def_axe_obstruct = {defense = "axe_obstruct", type = "normal", effect = "Smack those feared away", balance = {balanceequilibriumtake = "axe obstruct on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Obstruct"},
def_axe_repel = {defense = "axe_repel", type = "normal", effect = "Stop them from cleaving you", balance = {balanceequilibriumtake = "axe repel on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Repel"},
def_bloodtrails = {defense = "bloodtrails", type = "normal", effect = "Trace those bloody trails", balance = {balanceequilibriumtake = "wayfare bloodtrails on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bloodtrails"},
def_phalanx = {defense = "phalanx", type = "normal", effect = "Give group cut/blunt defense bonus", balance = {balanceequilibriumtake = "fury battlechant phalanx"}, state = "down", needit = false, timer = createStopWatch(), skill = "Phalanx"},

--Archivist
def_spheres = {defense = "spheres", type = "normal", effect = "Spheres defense for Archivist", balance = {needyequilibriumtake = "contemplate spheres"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spheres" },
def_linked = {defense = "linked", type = "normal", effect = "Yay link", balance = {balanceequilibriumtake = "elicit link 50"}, state = "down", needit = false, timer = createStopWatch(), skill = "Link" },
def_oneness = {defense = "oneness", type = "normal", effect = "oneness", balance = {balanceequilibriumtake = "elicit oneness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Oneness" },
def_sublimation = {defense = "sublimation", type = "normal", effect = "sublimation", balance = {balanceequilibrium = "elicit sublimation me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sublimation" },
def_ameliorate = {defense = "ameliorate", type = "normal", effect = "ameliorate", balance = {balanceequilibriumtake = "bio ameliorate on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ameliorate" },
def_catabolism = {defense = "catabolism", type = "normal", effect = "catabolism", balance = {balanceequilibriumtake = "bio catabolism"}, state = "down", needit = false, timer = createStopWatch(), skill = "Catabolism" },
def_geo_invert = {defense = "Token Inverted", type = "normal", effect = "You Have Inverted Your Token", balance = {balanceequilibriumtake = "drop token"..snd.sep.."geo invert"}, state = "down", needit = false, timer = createStopWatch(), skill = "Invert" },
def_geo_trace = {defense = "Token Tracing You", type = "normal", effect = "You Have Traced Your Token", balance = {balanceequilibriumtake = "geo trace me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Trace" },
def_empower_jhako = {defense = "Empowering Jhako", type = "normal", effect = "You Have Empowered Jhako", balance = {balanceequilibriumtake = "empower jhako"}, state = "down", needit = false, timer = createStopWatch(), skill = "Empower" },
def_nexus = {defense = "nexus", type = "normal", effect = "Setup your nexus", balance = {balanceequilibriumtake = "bio nexus one"}, state = "down", needit = false, timer = createStopWatch(), skill = "Nexus" },

--Indorani
def_soulmask = {defense = "soulmask", type = "normal", effect = "Your soul is harder to sense.", balance = {balanceequilibriumtake = "soulmask"}, state = "down", needit = false, timer = createStopWatch(), skill = "Soulmask" },
def_vengeance = {defense = "vengeance", type = "normal", effect = "You will deal AoE damage to enemies upon death.", balance = {balanceequilibriumtake = "vengeance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Vengeance" },
def_deathaura = {defense = "deathaura", type = "normal", effect = "You deal damage to enemies in room passively.", balance = {balanceequilibriumtake = "deathaura on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Deathaura" },
def_gravechill = {defense = "gravechill", type = "normal", effect = "Cold damage on decay instead of magic.", balance = {balanceequilibriumtake = "gravechill"}, state = "down", needit = false, timer = createStopWatch(), skill = "Gravechill" },
def_lifevision = {defense = "lifevision ", type = "normal", effect = "See all things living, sometimes identify illusions.", balance = {balanceequilibriumtake = "lifevision"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifevision" },
def_soulcage = {defense = "soulcage", type = "normal", effect = "You come back to life upon death instantly.", balance = {balanceequilibriumtake = "soulcage"}, state = "down", needit = false, timer = createStopWatch(), skill = "Soulcage" },
def_devilpact = {defense = "devil", type = "normal", effect = "Throw 2 cards at once.", balance = {balanceequilibriumtake = "outc blank as devil"..snd.sep.."fling devil at ground"}, state = "down", needit = false, timer = createStopWatch(), skill = "Devil" },
def_eclipse = {defense = "eclipse", type = "normal", effect = "Every 3rd card is hidden, sun/moon only.", balance = {balanceequilibriumtake = "outc blank as eclipse"..snd.sep.."fling eclipse at me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Eclipse" },
def_chariot = {defense = "chariot", type = "normal", effect = "+Celerity, +bal for cards", balance = {balanceequilibriumtake = "outc blank as chariot"..snd.sep.."fling chariot at ground"}, state = "down", needit = false, timer = createStopWatch(), skill = "Chariot" },
def_hierophant = {defense = "hierophant", type = "normal", effect = "Protect against disloyalty.", balance = {balanceequilibriumtake = "outc blank as hierophant"..snd.sep.."fling hierophant at me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hierophant"},

--Oneiromancer
def_redoubt = {defense = "redoubt", type = "normal", effect = "Your soul is harder to sense.", balance = {special = "redoubt"}, state = "down", needit = false, timer = createStopWatch(), skill = "Redoubt" },
def_defiance = {defense = "defiance", type = "normal", effect = "You will deal AoE damage to enemies upon death.", balance = {balanceequilibriumtake = "defiance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Defiance" },
def_intoxication = {defense = "intoxication", type = "normal", effect = "You deal damage to enemies in room passively.", balance = {balanceequilibriumtake = "intoxication"}, state = "down", needit = false, timer = createStopWatch(), skill = "Intoxication" },
def_glaciation = {defense = "glaciation", type = "normal", effect = "Cold damage on decay instead of magic.", balance = {balanceequilibriumtake = "glaciation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Glaciation" },
def_remembrance = {defense = "remembrance", type = "normal", effect = "You come back to life upon death instantly.", balance = {balanceequilibriumtake = "remembrance"}, state = "down", needit = false, timer = createStopWatch(), skill = "remembrance" },
def_faerie = {defense = "faerie", type = "normal", effect = "Throw 2 cards at once.", balance = {balanceequilibriumtake = "unfurl faerie at ground"}, state = "down", needit = false, timer = createStopWatch(), skill = "Faerie" },
def_cloud = {defense = "cloud", type = "normal", effect = "Every 3rd card is hidden, sun/moon only.", balance = {balanceequilibriumtake = "unfurl cloud at me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cloud" },
def_crane = {defense = "crane", type = "normal", effect = "+Celerity, +bal for cards", balance = {balanceequilibriumtake = "unfurl crane at ground"}, state = "down", needit = false, timer = createStopWatch(), skill = "Crane" },
def_fan = {defense = "fan", type = "normal", effect = "Protect against disloyalty.", balance = {balanceequilibriumtake = "unfurl fan at me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fan"},

--Shaman
def_spiritbond = {defense = "spiritbond", type = "normal", effect = "Share damage with your spirit.", balance = {balanceequilibriumtake = "familiar spiritbond on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spiritbond" },
def_protection = {defense = "protection", type = "normal", effect = "Resistance to cutting/blunt.", balance = {balanceequilibriumtake = "shaman protection"}, state = "down", needit = false, timer = createStopWatch(), skill = "Protection"},
def_shaman_spiritsight = {defense = "shaman_spiritsight", type = "normal", effect = "You get loki 2.0.", balance = {balanceequilibriumtake = "shaman spiritsight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spiritsight" },
def_lifebloom = {defense = "lifebloom", type = "normal", effect = "Restore HP upon getting low health.", balance = {balanceequilibriumtake = "commune lifebloom"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifebloom"},
def_shaman_warding  = {defense = "shaman_warding", type = "normal", effect = "Give mental affs when your parry is hit.", balance = {balanceequilibriumtake = "shaman warding"}, state = "down", needit = false, timer = createStopWatch(), skill = "Warding" },
def_oath_forestwalker  = {defense = "forestwalker", type = "normal", effect = "Heals you in forests", balance = {balanceequilibriumtake = "oath forestwalker activate"}, state = "down", needit = false, timer = createStopWatch(), skill ="Generic"},
def_oath_tranquility  = {defense = "tranquility", type = "normal", effect = "Heals afflictions", balance = {balanceequilibriumtake = "oath tranquility activate"}, state = "down", needit = false, timer = createStopWatch(), skill ="Generic"},
def_oath_shaman  = {defense = "elder shaman", type = "normal", effect = "Heals mental afflictions", balance = {balanceequilibriumtake = "oath eldershaman activate"}, state = "down", needit = false, timer = createStopWatch(), skill ="Generic"},
def_greenfoot  = {defense = "greenfoot", type = "normal", effect = "Bring your nature with you", balance = {balanceequilibriumtake = "nature greenfoot on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Greenfoot"},

--Alchemist
def_interposition = {defense = "interposition", type = "normal", effect = "Share damage with your spirit.", balance = {balanceequilibriumtake = "EXPERIMENT interposition on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spiritbond" },
def_obfuscation = {defense = "obfuscation", type = "normal", effect = "Resistance to cutting/blunt.", balance = {balanceequilibriumtake = "DERIVE OBFUSCATION"}, state = "down", needit = false, timer = createStopWatch(), skill = "Protection"},
def_cognisance = {defense = "cognisance", type = "normal", effect = "You get loki 2.0.", balance = {balanceequilibriumtake = "derive cognisance on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spiritsight" },
def_resuscitation = {defense = "resuscitation", type = "normal", effect = "Restore HP upon getting low health.", balance = {balanceequilibriumtake = "ALCHEMY RESUSCITATION"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifebloom"},
def_conduit_crutch  = {defense = "conduit_crutch", type = "normal", effect = "Give mental affs when your parry is hit.", balance = {balanceequilibriumtake = "DERIVE CRUTCH"}, state = "down", needit = false, timer = createStopWatch(), skill = "Warding" },
def_discipline_fieldstudies  = {defense = "discipline_fieldstudies", type = "normal", effect = "Heals you in forests", balance = {balanceequilibriumtake = "discipline field studies recall"}, state = "down", needit = false, timer = createStopWatch(), skill ="Generic"},
def_discipline_research  = {defense = "discipline_research", type = "normal", effect = "Heals mental afflictions", balance = {balanceequilibriumtake = "discipline research recall"}, state = "down", needit = false, timer = createStopWatch(), skill ="Generic"},
def_discipline_biology  = {defense = "discipline_biology", type = "normal", effect = "Heals afflictions", balance = {balanceequilibriumtake = "discipline biology recall"}, state = "down", needit = false, timer = createStopWatch(), skill ="Generic"},
def_blightbringer  = {defense = "blightbringer", type = "normal", effect = "Bring your nature with you", balance = {balanceequilibriumtake = "botany blightbringer on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Greenfoot"},

--Praenomen
def_potence_strength = {defense = "potence strength", type = "normal", effect = "+1 STR", balance = {balanceequilibriumtake = "potence strength"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence"},
def_potence_constitution = {defense = "potence constitution", type = "normal", effect = "+1 CON", balance = {balanceequilibriumtake = "potence constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence"},
def_potence_intelligence = {defense = "potence intelligence", type = "normal", effect = "+1 INT", balance = {balanceequilibriumtake = "potence intelligence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence"},
def_potence_dexterity = {defense = "potence dexterity", type = "normal", effect = "+1 DEX", balance = {balanceequilibriumtake = "potence dexterity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence" },
def_fortify = {defense = "fortify", type = "normal", effect = "Fortify your body to take less physical damage", balance = {balanceequilibriumtake = "fortify"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fortify" },
def_corpus_warding = {defense = "corpus_warding", type = "normal", effect = "Fortify your body to take less magical damage", balance = {balanceequilibriumtake = "ward"}, state = "down", needit = false, timer = createStopWatch(), skill = "Warding" },
def_celerity = {defense = "celerity", type = "normal", effect = "Increased movement speed", balance = {balanceequilibriumtake = "celerity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Celerity" },
def_lifescent = {defense = "lifescent", type = "normal", effect = "Detect nearby prey movements", balance = {balanceequilibriumtake = "lifescent"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifescent" },
def_lifevision = {defense = "lifevision", type = "normal", effect = "See things in the shadows", balance = {balanceequilibriumtake = "lifevision"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifevision" },
def_veil = {defense = "veil", type = "normal", effect = "Hide deeper in the shadows", balance = {balanceequilibriumtake = "veil"}, state = "down", needit = false, timer = createStopWatch(), skill = "Veil"},
def_stalking = {defense = "stalking", type = "normal", effect = "Nighttime hiding in the shadows", balance = {balanceequilibriumtake = "stalk"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stalking" },
def_concentrate = {defense = "concentrate", type = "normal", effect = "Make your blood use more efficient", balance = {balanceequilibriumtake = "blood concentrate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Concentration" },
def_shadowblow = {defense = "shadowblow", type = "normal", effect = "Your shadow strikes out at your attacker", balance = {balanceequilibriumtake = "blood shadow"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shadow" },
def_blurred = {defense = "blurred", type = "normal", effect = "Others cannot see your vitals", balance = {balanceequilibriumtake = "blood blur"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blur" },
def_elusion = {defense = "elusion", type = "normal", effect = "You avoid opponents' blows", balance = {balanceequilibriumtake = "elusion on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Elusion" },
def_deathlink = {defense = "deathlink", type = "normal", effect = "You are linked to your coffin", balance = {balanceequilibriumtake = "deathlink"}, state = "down", needit = false, timer = createStopWatch(), skill = "Deathlink" },

--Akkari
def_ardour_strength = {defense = "ardour strength", type = "normal", effect = "+1 STR", balance = {balanceequilibriumtake = "ardour strength"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ardour"},
def_ardour_constitution = {defense = "ardour constitution", type = "normal", effect = "+1 CON", balance = {balanceequilibriumtake = "ardour constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ardour"},
def_ardour_intelligence = {defense = "ardour intelligence", type = "normal", effect = "+1 INT", balance = {balanceequilibriumtake = "ardour intelligence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ardour"},
def_ardour_dexterity = {defense = "ardour dexterity", type = "normal", effect = "+1 DEX", balance = {balanceequilibriumtake = "ardour dexterity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ardour" },
def_relentless = {defense = "relentless", type = "normal", effect = "Fortify your body to take less physical damage", balance = {balanceequilibriumtake = "relentless"}, state = "down", needit = false, timer = createStopWatch(), skill = "Relentless" },
def_resolved = {defense = "resolved", type = "normal", effect = "Fortify your body to take less magical damage", balance = {balanceequilibriumtake = "resolve"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resolve" },
def_celerity = {defense = "celerity", type = "normal", effect = "Increased movement speed", balance = {balanceequilibriumtake = "celerity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Celerity" },
def_acuity = {defense = "acuity", type = "normal", effect = "Detect nearby prey movements", balance = {balanceequilibriumtake = "acuity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Acuity" },
def_lifevision = {defense = "lifevision", type = "normal", effect = "See things in the shadows", balance = {balanceequilibriumtake = "lifevision"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifevision" },
def_dim = {defense = "dim", type = "normal", effect = "Hide deeper in the shadows", balance = {balanceequilibriumtake = "dim"}, state = "down", needit = false, timer = createStopWatch(), skill = "Dim"},
def_stalking = {defense = "stalking", type = "normal", effect = "Nighttime hiding in the shadows", balance = {balanceequilibriumtake = "muffle"}, state = "down", needit = false, timer = createStopWatch(), skill = "Muffle" },
def_ascetic = {defense = "ascetic", type = "normal", effect = "Make your blood use more efficient", balance = {balanceequilibriumtake = "SPIRIT ASCETIC"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ascetic" },
def_retaliation = {defense = "retaliation", type = "normal", effect = "Your shadow strikes out at your attacker", balance = {balanceequilibriumtake = "SPIRIT RETALIATION"}, state = "down", needit = false, timer = createStopWatch(), skill = "Retaliation" },
def_suppressed = {defense = "suppressed", type = "normal", effect = "Others cannot see your vitals", balance = {balanceequilibriumtake = "SPIRIT SUPPRESS"}, state = "down", needit = false, timer = createStopWatch(), skill = "Suppress" },
def_transience = {defense = "transience", type = "normal", effect = "You avoid opponents' blows", balance = {balanceequilibriumtake = "transience on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Transience" },
def_entrench = {defense = "entrench", type = "normal", effect = "You are linked to your coffin", balance = {balanceequilibriumtake = "entrench"}, state = "down", needit = false, timer = createStopWatch(), skill = "Entrench" },
def_holylight = {defense = "holylight", type = "ivory", effect = "Strike fear into enemies with the Light", balance = {balanceequilibriumtake = "spirit light"}, state = "down", needit = false, timer = createStopWatch(), skill = "Light"},
def_bolster = {defense = "spiritbolster", type = "ivory", effect = "Reduce damage to your squire by half", balance = {balanceequilibriumtake = "spirit bolster"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bolster"},
def_muffle = {defense = "stalking", type = "ivory", effect = "Muffle your footsteps at night", balance = {balanceequilibriumtake = "muffle"}, state = "down", needit = false, timer = createStopWatch(), skill = "Muffle" },
def_unbroken = {defense = "unbroken", type = "ivory", effect = "Damage will not break you.", balance = {balanceequilibriumtake = "spirit unbroken"}, state = "down", needit = false, timer = createStopWatch(), skill = "Unbroken"},
def_transcendence = {defense = "transcendence", type = "ivory", effect = "Transcend mortal limitations", balance = {balanceequilibriumtake = "spirit transcend"}, state = "down", needit = false, timer = createStopWatch(), skill = "Transcend"},

--Teradrim
def_earthenform = {defense = "earthenform", type = "normal", effect = "Embrace your earthen features", balance = {balanceequilibriumtake = "earthenform embrace"}, state = "down", needit = false, timer = createStopWatch(), skill = "Earthenform" },
def_entwine = {defense = "entwine", type = "normal", effect = "Disarm when someone goes for your parried limb", balance = {balanceequilibriumtake = "earth entwine"}, state = "down", needit = false, timer = createStopWatch(), skill = "Entwine" },
def_ricochet =  {defense = "ricochet", type = "normal", effect = "Bounce attacks back to cripple limbs at times", balance = {balanceequilibriumtake = "earth ricochet"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ricochet" },
def_twinsoul = {defense = "twinsoul", type = "normal", effect = "Link your soul to your golem", balance = {balanceequilibriumtake = "golem twinsoul on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Twinsoul" },
def_earth_resonance = {defense = "earth_resonance", type = "normal", effect = "Boosted health/mana regen", balance = {balanceequilibriumtake = "earth resonance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resonance" },
def_stonebind = {defense = "stonebind", type = "normal", effect = "They can't take your weapon", balance = {balanceequilibriumtake = "earth stonebind"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stonebind" },
def_imbue_will = {defense = "imbue_will", type = "normal", effect = "Golem can hit freely next time", balance = {balanceequilibriumtake = "prepare earthenwill"}, state = "down", needit = false, timer = createStopWatch(), skill = "Earthenwill" },
def_erosion = {defense = "erosion", type = "normal", effect = "Erosion is useful on your weapon if you're sand sweltering", balance = {balanceequilibriumtake = "earth imbue erosion"}, state = "down", needit = false, timer = createStopWatch(), skill = "Erosion" },
def_imbue_stonefury = {defense = "imbue_stonefury", type = "normal", effect = "Stonefury is useful on your weapon for bashing", balance = {balanceequilibriumtake = "earth imbue stonefury"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stonefury" },
def_sand_swelter = {defense = "sand_swelter", type = "normal", effect = "Your sands hit people in the room", balance = {balanceequilibriumtake = "sand swelter on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Swelter" },

--Ascendril
def_missiles = {defense = "missiles", type = "normal", effect = "PvE damage", balance = {balanceequilibriumtake = "cast missiles on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Missiles" },
def_arcaneskin = {defense = "arcaneskin", type = "normal", effect = "Increased cutting/blunt resistances", balance = {balanceequilibrium = "cast arcaneskin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Arcaneskin"},
def_countercurrent = {defense = "countercurrent", type = "normal", effect = "chance to resist venoms", balance = {balanceequilibrium = "cast countercurrent"}, state = "down", needit = false, timer = createStopWatch(), skill = "Countercurrent"},
def_stalled = {defense = "stalled", type = "normal", effect = "holding an attack", balance = {balanceequilibrium = ""}, state = "down", needit = false, timer = createStopWatch(), skill = "Stall"},

--Sciomancer
def_shadow_engulf   = {defense = "shadow_engulf", type = "normal", effect = "Mask your movements", balance = {balanceequilibriumtake = "cast engulf on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Engulf" },
def_shadow_mantle  = {defense = "shadow_mantle", type = "normal", effect = "Reduce damage taken from elements", balance = {balanceequilibriumtake = "cast mantle"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mantle" },
def_blurring  = {defense = "blurring", type = "normal", effect = "Better diverting", balance = {balanceequilibriumtake = "cast blurring"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blurring" },

--Zealot
def_firefist = {defense = "firefist", type = "normal", effect = "makes your fists attack cause ablaze", balance = {balanceequilibriumtake = "enact firefist"}, state = "down", needit = false, timer = createStopWatch(), skill = "Firefist" },
def_focalmark = {defense = "focalmark", type = "normal", effect = "Enabled your use of purification abilities", balance = {balanceequilibriumtake = "enact focalmark"}, state = "down", needit = false, timer = createStopWatch(), skill = "Focalmark" },
def_tempered_body = {defense = "tempered_body", type = "normal", effect = "Resist cutting and blunt dmg", balance = {balanceequilibriumtake = "enact tempering"}, state = "down", needit = false, timer = createStopWatch(), skill = "Tempering" },
def_swagger = {defense = "swagger", type = "normal", effect = "Negates paresis only once", balance = {needybalancetake = "swagger"}, state = "down", needit = false, timer = createStopWatch(), skill = "Swagger" },
def_deflection = {defense = "deflection", type = "normal", effect = "Deflect arrows by chance, return them on success", balance = {balanceequilibriumtake = "enact deflection"}, state = "down", needit = false, timer = createStopWatch(), skill = "Deflection"},
def_discharge = {defense = "discharge", type = "normal", effect = "Store up dmgs until threshold, then it heal some of your wounds", balance = {balanceequilibriumtake = "enact discharge"}, state = "down", needit = false, timer = createStopWatch(), skill = "Discharge"},
def_resurgence = {defense = "resurgence", type = "normal", effect = "Revive you once you died", balance = {balanceequilibriumtake = "enact resurgence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resurgence" },
def_haste = {defense = "haste", type = "normal", effect = " +2 to movement", balance = {special = "haste"}, state = "down", needit = false, timer = createStopWatch(), skill = "Haste" },
def_litheness = {defense = "litheness", type = "normal", effect = "Suffer no malus to dodge chance when use channeling action", balance = {needybalance = "litheness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Litheness" },
def_disunion = {defense = "disunion", type = "normal", effect = "give chance to reduce eq and bal timer", balance = {balanceequilibriumtake = "disunion"}, state = "down", needit = false, timer = createStopWatch(), skill = "Disunion" },
def_wrath = {defense = "wrath", type = "normal", effect = "see what other would parries in very short time", balance = {needybalancetake = "wrath"}, state = "down", needit = false, timer = createStopWatch(), skill = "Wrath" },
def_zenith = {defense = "zenith", type = "normal", effect = "cure a random AFF, use certain attacks off bal", balance = {balanceequilibriumtake = "enact zenith"}, state = "down", needit = false, timer = createStopWatch(), skill = "Zenith" },
def_mindspark = {defense = "mindspark", type = "normal", effect = "raises your intelligence", balance = {balanceequilibrium = "psi mindspark"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mindspark" },
def_bending = {defense = "bending", type = "normal", effect = "magical damage reduction or something", balance = {balanceequilibrium = "psi bending"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bending"},

--Ravager
def_vinculum = {defense = "vinculum", type = "normal", effect = "Enabled your use of abilities", balance = {balanceequilibriumtake = "invoke vinculum"}, state = "down", needit = false, timer = createStopWatch(), skill = "Vinculum" },
def_ruthlessness = {defense = "ruthlessness", type = "normal", effect = "Resist cutting and blunt dmg", balance = {balanceequilibriumtake = "invoke ruthlessness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ruthlessness" },
def_contempt = {defense = "contempt", type = "normal", effect = "Negates paresis only once", balance = {needybalancetake = "contempt"}, state = "down", needit = false, timer = createStopWatch(), skill = "Contempt" },
def_impenetrable = {defense = "impenetrable", type = "normal", effect = "Deflect arrows by chance, return them on success", balance = {balanceequilibriumtake = "invoke impenetrable"}, state = "down", needit = false, timer = createStopWatch(), skill = "Impenetrable"},
def_criticality  = {defense = "criticality", type = "normal", effect = "Store up dmgs until threshold, then it heal some of your wounds", balance = {balanceequilibriumtake = "invoke criticality"}, state = "down", needit = false, timer = createStopWatch(), skill = "Criticality"},
def_unfinished = {defense = "unfinished", type = "normal", effect = "Revive you once you died", balance = {balanceequilibriumtake = "invoke unfinished"}, state = "down", needit = false, timer = createStopWatch(), skill = "Unfinished" },
def_velocity = {defense = "velocity", type = "normal", effect = " +2 to movement", balance = {special = "velocity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Velocity" },
def_reflexes = {defense = "reflexes", type = "normal", effect = "Suffer no malus to dodge chance when use channeling action", balance = {needybalance = "reflexes"}, state = "down", needit = false, timer = createStopWatch(), skill = "Reflexes" },
def_exhilarate = {defense = "exhilarate", type = "normal", effect = "give chance to reduce eq and bal timer", balance = {balanceequilibriumtake = "exhilarate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Exhilarate" },
def_inflated = {defense = "inflated", type = "normal", effect = "raises your intelligence", balance = {balanceequilibrium = "ego inflate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Inflate" },
def_untouchable = {defense = "untouchable", type = "normal", effect = "magical damage reduction or something", balance = {balanceequilibrium = "ego untouchable"}, state = "down", needit = false, timer = createStopWatch(), skill = "Untouchable"},
def_predation = {defense = "predation", type = "normal", effect = "see what other would parries in very short time", balance = {needybalancetake = "predation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Predation" },
def_delirium = {defense = "delirium", type = "normal", effect = "cure a random AFF, use certain attacks off bal", balance = {balanceequilibriumtake = "invoke delirium"}, state = "down", needit = false, timer = createStopWatch(), skill = "Delirium" },
def_ravage = {defense = "ravage", type = "normal", effect = "makes your fists attack cause ablaze", balance = {balanceequilibriumtake = "invoke ravage"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ravage" },

--Warden
def_battleflow = {defense = "battleflow", type = "normal", effect = "Can attack with 1 broken arm.", balance = {needybalancetake = "warden battleflow on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battleflow"},
def_ancest_victory = {defense = "victory", type = "normal", effect = "Automatically harvest renown.", balance = {special = "ancest victory on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Victory"},
def_invocation = {defense = "invocation", type = "normal", effect = "Boosts defenses and weapon damage.", balance = {special = "ancest invocation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Invocation"},
def_ancest_blessing_safeguard = {defense = "ancest_blessing_safeguard", type = "normal", effect = "Boosts physical defense.", balance = {needyequilibriumtake = "ancest blessing safeguard"}, state = "down", needit = false, timer = createStopWatch(), skill = "Safeguard"},
def_ancestral_bolster = {defense = "ancestral_bolster", type = "normal", effect = "Increased constitution.", balance = {needyequilibriumtake = "ancest bolster"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bolster"},
def_intervention = {defense = "intervention", type = "normal", effect = "Protected from death.", balance = {needyequilibriumtake = "ancest intervention"}, state = "down", needit = false, timer = createStopWatch(), skill = "Intervention"},
def_tacticianmark = {defense = "tacticianmark", type = "yellow", effect = "simuls go zoom", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_initiative = {defense = "initiative", type = "normal", effect = "Periodic heal on damage done.", balance = {needybalancetake = "warden initiative on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Initiative"},
def_displacement = {defense = "displacement", type = "normal", effect = "Steals soul on hit.", balance = {equilibriumtake = "ancest displacement"}, state = "down", needit = false, timer =createStopWatch(), skill = "Displacement"},
def_simulacrum_opening = {defense = "simulacrum_opening", type = "normal", effect = "Increases damage done to mobs.", balance = {needyequilibriumtake = "simul openings on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Openings"},
def_severity = {defense = "severity", type = "normal", effect = "Attacks hit through parry.", balance = {needybalancetake = "warden severity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Severity"},
def_roaring = {defense = "roaring", type = "normal", effect = "Make them prone/off bal.", balance = {needybalancetake = "warden roaring on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Roaring"},
def_homage = {defense = "homage", type = "normal", effect = "Increased strength.", balance = {needyequilibriumtake = "warden homage"}, state = "down", needit = false, timer = createStopWatch(), skill = "Homage"},

--Tidesage
def_permafrost = {defense = "permafrost", type = "SeaGreen", effect = "Embrace the gales of the distant oceans", balance = {balanceequilibriumtake = "tide permafrost"}, state = "down", needit = false, timer = createStopWatch(), skill = "Permafrost" },
def_sealegs = {defense = "sealegs", type = "SeaGreen", effect = "Sea legs allow you to move faster", balance = {balanceequilibriumtake = "tide sealegs"}, state = "down", needit = false, timer = createStopWatch(), skull = "Sealegs" },
def_wavebreaking = {defense = "wavebreaking", type = "SeaGreen", effect = "Disarm when someone goes for your parried limb", balance = {balanceequilibriumtake = "tide wavebreak"}, state = "down", needit = false, timer = createStopWatch(), skill = "Wavebreak" },
def_tideflux =  {defense = "tideflux", type = "SeaGreen", effect = "Bounce attacks back to cripple limbs at times", balance = {balanceequilibriumtake = "tide flux"}, state = "down", needit = false, timer = createStopWatch(), skill = "Flux" },
def_lifebond = {defense = "lifebond", type = "SeaGreen", effect = "Link your soul to your elemental", balance = {balanceequilibriumtake = "synth lifebond on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifebond" },
def_shore_leave = {defense = "shore_leave", type = "SeaGreen", effect = "Boosted health/mana regen", balance = {balanceequilibriumtake = "tide shore"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shore" },
def_encrusted = {defense = "encrusted", type = "SeaGreen", effect = "They can't take your weapon", balance = {balanceequilibriumtake = "tide encrust"}, state = "down", needit = false, timer = createStopWatch(), skill = "Encrust" },
def_elemental_engulf = {defense = "elemental_engulf", type = "SeaGreen", effect = "Elemental can hit freely next time", balance = {balanceequilibriumtake = "tide engulf"}, state = "down", needit = false, timer = createStopWatch(), skill = "Engulf" },
def_expose_brume = {defense = "expose_brume", type = "SeaGreen", effect = "Brume is useful if calling a sirensong", balance = {balanceequilibriumtake = "tide expose brume"}, state = "down", needit = false, timer = createStopWatch(), skill = "Brume" },
def_expose_rime = {defense = "expose_rime", type = "SeaGreen", effect = "Rime causes more damage for slower strikes", balance = {balanceequilibriumtake = "tide expose rime"}, state = "down", needit = false, timer = createStopWatch(), skill = "Rime" },
def_sirensong = {defense = "sirensong", type = "SeaGreen", effect = "Your fog effects people in the room", balance = {balanceequilibriumtake = "fog sirensong on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sirensong" },
def_panoptic  = {defense = "panoptic", type = "SeaGreen", effect = "Remotely control fog abilities", balance = {balanceequilibriumtake = "fog panoptic on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Panoptic" },
def_fog_obscure  = {defense = "fog_obscure", type = "SeaGreen", effect = "Become obscured in a thick fog", balance = {balanceequilibriumtake = "fog obscureon"}, state = "down", needit = false, timer = createStopWatch(), skill = "Obscure" },
def_fluctuations  = {defense = "fluctuations", type = "SeaGreen", effect = "Your fog informs you of who moves in and out", balance = {balanceequilibriumtake = "fog fluctuations on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fluctuations" },
def_hightide = {defense = "hightide", type = "SeaGreen", effect = "Strike faster during high tide", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Hightide" },

--Bloodborn
def_victimise = {defense = "victimise", type = "normal", effect = "PvE damage", balance = {balanceequilibriumtake = "unleash victimise on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Victimise" },
def_panoply = {defense = "panoply", type = "normal", effect = "Increased cutting/blunt resistances", balance = {balanceequilibrium = "unleash panoply"}, state = "down", needit = false, timer = createStopWatch(), skill = "Panoply"},
def_forestall = {defense = "forestall", type = "normal", effect = "chance to resist venoms", balance = {balanceequilibrium = "unleash forestall"}, state = "down", needit = false, timer = createStopWatch(), skill = "Forestall"},
def_arrhythmia = {defense = "arrhythmia", type = "normal", effect = "holding an attack", balance = {balanceequilibrium = ""}, state = "down", needit = false, timer = createStopWatch(), skill = "Arrhythmia"},

--Runecarver
def_prowess = {defense = "prowess", type = "normal", effect = "WP drain but better crit chance", balance = {balanceequilibriumtake = "runecarv prowess on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Prowess" },
def_hex_stalk = {defense = "hex_stalk", type = "normal", effect = "Mask your movements", balance = {balanceequilibriumtake = "hex stalk "}, state = "down", needit = false, timer = createStopWatch(), skill = "Stalk" },
def_hex_preservation = {defense = "hex_preservation", type = "normal", effect = "Reduce damage taken from elements", balance = {balanceequilibriumtake = "hex preserve"}, state = "down", needit = false, timer = createStopWatch(), skill = "Preserve" },
def_ironbark  = {defense = "ironbark", type = "normal", effect = "Better diverting", balance = {balanceequilibriumtake = "runecarve ironbark"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ironbark" },

}

snd.alternative_class_defenses = {
Luminary_constitution = {defense = "constitution", type = "normal", effect = "Protection against vomiting", balance = {needyequilibriumtake = "perform constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Constitution"},
Earthcaller_constitution = {defense = "constitution", type = "normal", effect = "Protection against vomiting", balance = {needyequilibriumtake = "dirge constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Constitution"},
Indorani_shroud = { defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "shroud"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shroud" },
Oneiromancer_shroud = { defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "shroud"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shroud" },
Carnifex_shroud = {defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "soul shroud"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shroud" },
Warden_shroud = {defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "ancest distort"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shroud" },
Syssin_shroud = { defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "conjure cloak"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cloak" },
Revenant_maingauche = {defense = "maingauche", type = "normal", effect = "Chance to counter attack", balance = {needyequilibriumtake = "riving maingauche"}, state = "down", needit = false, timer = createStopWatch(), skill = "MainGauche"},
Templar_maingauche = {defense = "maingauche", type = "normal", effect = "Chance to counter attack", balance = {needyequilibriumtake = "battlefury maingauche"}, state = "down", needit = false, timer = createStopWatch(), skill = "MainGauche"},
Sciomancer_rigor = {defense = "rigor", type = "normal", effect = "WP drain but better crit chance", balance = {balanceequilibriumtake = "cast rigor on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Rigor"},
Warden_rigor = {defense = "rigor", type = "normal", effect = "Cheap Furor.", balance = {needybalancetake = "warden rigor"}, state = "down", needit = false, timer = createStopWatch(), skill = "Rigor"},
Warden_fearless = {defense = "fearless", type = "normal", effect = "Protects against fear affliction.", balance = {special = "warden fortitude"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fortitude"},
Ascendril_empowered_moon = {defense = "empowered_moon", type = "normal", effect = "extra mana recovery", balance = {balanceequilibriumtake = "cast sagacity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sagacity" },
Bloodborn_empowered_moon = {defense = "empowered_moon", type = "normal", effect = "extra mana recovery", balance = {balanceequilibriumtake = "unleash acumen"}, state = "down", needit = false, timer = createStopWatch(), skill = "Acumen" },
Sciomancer_empowered_moon = {defense = "empowered_moon", type = "normal", effect = "extra mana recovery", balance = {balanceequilibriumtake = "cast sagacity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sagacity" },
Runecarver_empowered_moon = {defense = "empowered_moon", type = "normal", effect = "extra mana recovery", balance = {balanceequilibriumtake = "runecarve mysticism"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mysticism" },

}


</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>give/take defenses</name>
								<packageName></packageName>
								<script>function snd.def_check()
 for i in pairs(snd.defenses) do
  if i == "def_speed" or i == "def_rebounding" or i == "def_deafness" or i == "def_fangbarrier" then
   if snd.defenses[i].state == "waiting" and getStopWatchTime(snd.defenses[i].timer) &gt;= 10 then
    snd.def_timeout(i)
   end
  elseif snd.defenses[i].state == "waiting" and getStopWatchTime(snd.defenses[i].timer) &gt; 2 then
   snd.def_timeout(i)
  end
 end
end

function snd.def_timeout(defense)
 snd.defenses[defense].state = "down"
 snd.message("[Resetting: &lt;white&gt;"..defense.."&lt;brown&gt;]", "reset")
end

function snd.def_gain(defense)
--  deleteLine()
 snd.message("You: &lt;green&gt;GAIN &lt;white&gt;"..defense..".", "defense")
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 x = stopStopWatch(snd.defenses[defense].timer)
-- resetStopWatch(snd.defenses[defense].timer)
 snd.def_have(defense)
 snd.defenses[defense].timer = createStopWatch()
end

function snd.def_have(defense)
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 snd.defenses[defense].state = "deffed"
 if snd.less_defs~= nil then
   for i in pairs(snd.less_defs) do
    if snd.less_defs[i] == defense then
     snd.defenses[defense].needit = false
     table.remove(snd.less_defs, i)
    end
   end
  end
  snd.def_needed = false
end

function snd.def_def(defense)
 if snd.gui.enabled then 
  deleteLine()
 end
 if snd.defenses["def_"..defense].type == "normal" then
  cecho("&lt;white&gt;\n"..defense)
 else
  cecho("&lt;"..snd.defenses["def_"..defense].type.."&gt;\n"..defense)
 end
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 echo(" "..snd.defenses[defense].effect)
 snd.def_have(defense)
end

function snd.def_take(defense)
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end

 if snd.defenses[defense].state == "deffed" then
--  deleteLine()
  snd.message("You: &lt;red&gt;LOSE &lt;white&gt;"..defense..".", "defense")
  snd.def_needed = true
 end
 snd.def_remove(defense)
end

function snd.def_remove(defense)
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 snd.defenses[defense].state = "down"
 snd.def_needed = true
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>most defenses</name>
								<packageName></packageName>
								<script>snd.defenses_list =  {
  ["Your hands are gripping your wielded items tightly."] = "gripping",
  ["Your senses are magically heightened."] = "mindseye_tattoo",
  ["You are diverting melee attacks."] = "divert_melee",
  ["You are surrounded by a cloak of protection."] = "cloak_tattoo", 
  ["You are utilising your bodily control to make yourself more fit."] = "fitness",
  ["You are blind."] = "blindness",
  ["You are deaf."] = "deafness",
  ["You are feeling extremely energetic."] = "kola",
  ["You are surrounded by a pocket of air."] = "waterbreathing",
  ["Your mind has been touched by the essence of the Underking."] = "deathsight",
  ["You have insomnia, and cannot easily go to sleep."] = "insomnia",
  ["You possess the sight of the third eye."] = "thirdeye",
  ["Your resistance to damage by poison has been increased."] = "venom",
  ["You are tempered against fire damage."] = "frost",
  ["You walk on a small cushion of air."] = "levitation",
  ["Your sense of time is heightened, and your reactions are speeded."] = "speed",
  ["You are insulated against the harsh cold."] = "caloric",
  ["You are protected from hand-held weapons with an aura of rebounding."] = "rebounding",
  ["You are dodging melee attacks."] = "dodge_melee",
  ["Your vision is heightened to see in the dark."] = "nightsight",
  ["Your mind is filled with clarity."] = "clarity",
  ["You are completely fearless."] = "fearless",
  ["Your soulstone is split to support your weapon, body, and armour."] = "soul_fracture",
  ["Your soul has been fortified."] = "soul_fortify",
  ["You have the safeguard of an Idreth."] = "safeguard",
  ["You have the miasma of an Azudim."] = "miasma",
  ["You have the warmth of a Yeleni."] = "warmth",
  ["You are prepared to counterattack against physical aggression."] = "maingauche",
  ["You are paced for bursts of exertion."] = "pacing",
  ["You are sensing the heat of others."] = "heatsight",
  ["You walk with the grace of the stars."] = "starburst",
  ["You are extremely heavy and difficult to move."] = "density",
  ["You are harvesting the souls of your victims."] = "soulharvest",
  ["You are deriving pleasure from pain inflicted upon others."] = "reveling",
  ["Your soulstone is embedded in your body."] = "soul_body",
  ["Your weapons thirst for the souls of your enemies."] = "soulthirst",
  ["A steady blast of air fans out from beneath your feet."] = "waterwalking",
  ["You are fighting recklessly."] = "recklessness",
  ["You are immune to normal weather."] = "weathering",
  ["You have the bodyheat defence."] = "bodyheat",
  ["Your body is well heated internally."] = "bodyheat",
  ["You have the metabolism defence."] = "metabolism",
  ["Your metabolism is at peak performance."] = "metabolism",
  ["You are already metabolizing your food faster than usual."] = "metabolism",
  ["You are already moving at supernatural speed."] = "endurance",
  ["Your hide is thickened."] = "thickhide",
  ["Your movements are supernaturally fast."] = "endurance",
  ["Your bones have been hardened greatly."] = "harden",
  ["You have the cornering defence."] = "corner",
  ["You are cornering your opponents."] = "corner",
  ["You are protected from the fangs of serpents."] = "fangbarrier",
  ["You have been invigorated with strength."] = "vigor",
  ["You are already invigorated."] = "vigor",
  ["You are protected from light-based damage sources."] = "lightshield",
  ["Your body is suffused with divinely-inspired resilience"] = "inspiration_constitution",
  ["Your body is lifted with divinely-inspired dexterity."] = "inspiration_dexterity",
  ["Your limbs are suffused with divinely-inspired strength."] = "inspiration_strength",
  ["Your mind is suffused with divinely-inspired intelligence."] = "inspiration_intelligence",
  ["A shield of flame protects you from blazing fires."] = "fireblock",
  ["Your skin is toughened."] = "toughness",
  ["You are resisting magical damage."] = "resistance",
  ["You will substitute your soul with another upon dying."] = "soul_substitute",
  ["Your actions are cloaked in secrecy."] = "shroud",
  ["You are seeking the souls of the hidden."] = "soul_spiritsight",
  ["The ward of the Syssin protects your body."] = "warding",
  ["You have the finesse defence."] = "finesse",
  ["You are already wielding your weapons with finesse."] = "finesse",
  ["You will deliver your blade with trained finesse."] = "finesse",
  ["Cobra-like, you weave back and forth to dodge blows."] = "weaving",
  ["You are watching the shadows."] = "shadowsight",
  ["You are shimmering with a ghostly light."] = "ghost",
  ["You will slip into the shadows after killing."] = "shadowslip",
  ["Phased slightly out of reality, you are effectively untouchable."] = "phase",
  ["You will call upon your fortitude in need."] = "vitality",
  ["You are regenerating lost health through the power of Kaido."] = "kaido_regeneration",
  ["You are using your superior constitution to prevent nausea."] = "constitution",
  ["Your mind is split, allowing constant meditation."] = "split_mind",
  ["Your blood is steeled against poisons."] = "kaido_immunity",
  ["Your regeneration is boosted."] = "boosted_regen",
  ["Your skin is hard and tough, like the bark of an oak tree."] = "barkskin",
  ["You are concealed from the view of others."] = "conceal",
  ["You are hardened against the cold."] = "hardiness",
  ["Your flexibility allows you to unentangle more easily."] = "flexibility",
  ["You are sapping the life energy of others."] = "lifesap",
  ["You have masked your scent to others."] = "maskedscent",
  ["Your tree tattoo glows with enhanced power."] = "greenheart",
  ["You are dedicating your attention to concise movements."] = "endure",
  ["You have the booming voice of a mountaineer."] = "mountaineer",
  ["You are shrouded by a cloud of dust."] = "dustcoat",
  ["You are masking your pain."] = "resilience",
  ["You reign supreme upon the wasteland."] = "desolation",
  ["You are focusing on circulating your blood more efficiently."] = "circulation",
  ["Your senses are attuned to the environment."] = "blindsense",
  ["The states of your body and mind are joined."] = "linked",
  ["You embrace your core oneness."] = "oneness",
  ["Your mind is dampened against psychic attack."] = "sublimation",
  ["You have heightened your ability to repair tissue and organs."] = "ameliorate",
  ["Your internal core is in a state of hyper production."] = "catabolism",
  ["Your skin is as hard as iron."] = "ironskin",
  ["You are fleet of foot."] = "fleetfoot",
  ["You are prepared to repel deadly blows."] = "axe_repel",
  ["You are tracking the bloodtrails left by your targets."] = "bloodtrails",
  ["You are supporting your allies with your battlechant."] = "battlechant",
  ["Your limb-shattering blows incite fear in your enemies."] = "brutality",
  ["You have adopted a defensive position."] = "phalanx",
  ["You are harnessing your inner rage."] = "dauntless",
  ["You are ready to deflect incoming incoming projectiles."] = "axe_avert",
  ["You will strike down those who flee in terror."] = "axe_obstruct",
  ["You are attuned to the music of the spheres."] = "spheres",
  ["Your golem is standing steadfast."] = "steadfast",
  ["You are listening for underground movement."] = "earthsense",
  ["You have embraced your earthen form."] = "earthenform",
  ["You have gained the earthenform defence."] = "earthenform",
  ["You are attempting to bounce your attempts off parried blows."] = "ricochet",
  ["You are preparing to entwine your flail against hostile weapons."] = "entwine",
  ["Your soul is entwined around your golem's."] = "twinsoul",
  ["Your soul is resonating with the earth."] = "earth_resonance",
  ["Your flail imbued with the raw force of the desert."] = "imbue_erosion",
  ["Your arms have been bound in stone."] = "stonebind",
  ["You have imbued the fury of the Earthen into your flail."] = "imbue_stonefury",
  ["You are channeling the will of the Earthen."] = "imbue_will",
  ["You are focusing your energy into sweltering your sands."] = "sand_swelter",
  ["Gnashing your tongue, your mouth salivates with fluid."] = "salivate",
  ["Your coat of fur has been thickened."] = "thickfur",
  ["You are bracing from attacks."] = "bracing",
  ["Your soul is swathed in secrecy."] = "soulmask",
  ["You are striking with great force."] = "bruteforce",
  ["You are blocking exits with tenacity."] = "stalwart",
  ["The Eclipse is looming to mask your Sun and Moon."] = "eclipse",
  ["You are bathed in the glorious protection of decaying flesh."] = "putrefaction",
  ["You have sworn vengeance upon those who would slay you."] = "vengeance",
  ["You are emanating an aura of death harmful to those around you."] = "deathaura",
  ["Your being is protected by the soulcage."] = "soulcage",
  ["You are circulating your blood erratically to hide your vitals."] = "blurred",
  ["You are exuding an aura of trepidation upon those you despise."] = "trepidation",
  ["Your flesh is fortified against damage."] = "fortify",
  ["You are eluding your opponents' blows."] = "elusion",
  ["You have enhanced your vision to be able to see traces of lifeforce."] = "lifevision",
  ["You detect the movements of nearby mortals."] = "lifescent",
  ["Your body is steeled against magical energies."] = "corpus_warding",
  ["Your corpse is already steeled against magical attack."] = "corpus_warding",
  ["Your blood is concentrated."] = "concentrate",
  ["Your blood already courses with increased viscosity."] = "concentrate",
  ["Your movements are supernaturally fast."] = "celerity",
  ["The cold of the grave has filled your body."] = "gravechill",
  ["You have made a deal with the Devil."] = "devilpact",
  ["You are protected by the intimidating presence of the Hierophant."] = "hierophant",
  ["Your speed is increased by the Chariot."] = "chariot",
  ["You share a deepened bond with your familiar."] = "spiritbond",
  ["A protective rune guards you from harm."] = "protection",
  ["You are discerning the spirit of others."] = "shaman_spiritsight",
  ["You have been gifted with the bloom of life."] = "lifebloom",
  ["A ball of lightning wards your limbs."] = "shaman_warding",
  ["Your arms burn with the lines of your spirit focus."] = "focalmark",
  ["Your body has been tempered by the strength of your Inner Fire."] = "tempered_body",
  ["You move with extraordinary haste."] = "haste",
  ["You possess mighty swagger in your actions."] = "swagger",
  ["You have splintered your spirit into multiple."] = "disunion",
  ["You are trying to deflect incoming arrows."] = "deflection",
  ["You are rebuking those who would harm your appendages."] = "rebuke",
  ["You are obscured by a cloak of light."] = "suncloak",
  ["You are lithe and nimble, ready to adapt."] = "litheness",
  ["You are bending ranged magical attacks on itself."] = "bending",
  ["Your mind is sparked with new found curiosity."] = "mindspark",
  ["You are unnaturally keen."] = "potence_intelligence",
  ["You are unnaturally resilient."] = "potence_constitution",
  ["You are unnaturally agile."] = "potence_dexterity",
  ["You are unnaturally strong."] = "potence_strength",
  ["You have flown into a battle rage."] = "herculeanrage",
  ["Your sagacious mind empowers the moon tattoo."] = "empowered_moon",
  ["You are preparing arcane missiles."] = "missiles",
  ["You are protected by a thin layer of magic."] = "arcaneskin",
  ["You have the countercurrent defence."] = "countercurrent",
  ["You are blurring the edges of your form."] = "blurring",
  ["You are surrounded in a mantle of pure shadow."] = "shadow_mantle",
  ["You are focusing on precise spellcasting."] = "rigor",
  ["You have the shadow_engulf defence."] = "shadow_engulf",
  ["You are prepared to discharge energy."] = "discharge",
  ["You are wreathed in an aura of toxicity."] = "nexus",
  ["Your fiery soul has reached its zenith of power."] = "zenith",
  ["An impermeable aegis of ley energy protects you."] = "manipulation_aegis",
  ["Your flame tattoo is glowing faintly."] = "flame_tattoo",
  ["You are surrounded by a nearly invisible magical shield."] = "shield_tattoo",
  ["You are glowing with a radiant light."] = "shine",
  ["You are striding through the forests with ease."] = "foreststride",
  ["You are lipreading to overcome deafness."] = "lipreading",
  ["You have been granted the speed of the Divine."] = "divine_speed",
  ["You have insight into the thoughts of others."] = "insight",
  ["You are watching both the skies and trees above you for any movement."] = "overwatch",
  ["You are utilising hypersight."] = "hypersight",
  ["You will seek opportunities to tend to your wounds."] = "initiative",
  ["An ancestral spirit is displacing the souls of your foes."] = "displacement",
  ["An ancestral invocation fortifies your weapon, body, and armor."] = "invocation",
  ["You are attuned to the flow of battle."] = "battleflow",
  ["You are claiming victory over your foes."] = "ancest_victory",
  ["An ancestor has agreed to intervene upon the time of your death."] = "intervention",
  ["You are resolved to carry out your duties."] = "severity",
  ["You are punctuating your attacks with thunderous roars."] = "roaring",
  ["You have received the ancestral safeguard blessing."] = "ancest_blessing_safeguard",
  ["Your fortitude is bolstered by the ancestors."] = "ancestral_bolster",
  ["Your strength has been bolstered."] = "homage",
  ["You will wreak defiant vengeance on your killer."] = "defiance",
  ["Your aura is concealed by a redoubt."] = "redoubt",
  ["You are infused with the glacial cold of the Astral."] = "glaciation",
  ["Your memory will live on by the grace of the Astral."] = "remembrance",
  ["You are protected by an aura of heated pressure."] = "heatshield",
  ["You are protected from fire by tectonic activity."] = "smothering",
  ["You are emitting waves of pressure."] = "seismicity",
  ["You have made a pact with a faerie."] = "faerie",
  ["You are shielded from disfigurement by a well-placed fan."] = "fan",
  ["Your speed is increased by the agile crane."] = "crane",
  ["Clouds linger to obscure your sphere and hypercube."] = "cloud",
  ["You are projecting an aura of intoxication."] = "intoxication",
  ["You are sheathed against harm by a thin layer of light."] = "sheath",
  ["Your music induces a euphoric reaction in those around you."] = "euphonia",
  ["Your mind and body are in equilibrium."] = "equipoise",
  ["Your music produces discordant recoil in those around you."] = "discordance",
  ["You stand upon the guided road of destiny."] = "destiny",
  ["You are surrounded by occasional glimmers of colour."] = "aurora",
  ["Your limbs have been stretched."] = "stretching",
  ["You currently possess charm and charisma."] = "charisma",
  ["Your inner tempo can act upon a half beat."] = "halfbeat",
  ["You are enveloped in a layer of permafrost."] = "permafrost",
  ["You are remaining steady by dint of your sea legs."] = "sealegs",
  ["You have adopted the stance of the wavebreaker."] = "wavebreaking",
  ["You are maintaining a tidal flux to redirect your weapon strikes."] = "tideflux",
  ["Your life is bonded to that of your elemental."] = "lifebond",
  ["You are recuperating on steady shore."] = "shore_leave",
  ["Briny barnacles cover the length of your arms."] = "encrusted",
  ["You are working in tandem with your elemental."] = "elemental_engulf",
  ["Freezing fog envelops your selkachoar with its power."] = "expose_brume",
  ["Your weapon is exposed to icy rime."] = "expose_rime",
  ["Your fog is creating a beguiling siren's song."] = "sirensong",
  ["You are seeing through the many eyes of the fog."] = "panoptic",
  ["You are attuned to fluctuations with the fog."] = "fluctuations",
  ["The fog is obscuring your movements."] = "obscure",
  ["Your experiment is suffering attacks for you."] = "interposition",
  ["Your conduit is producing a billowing black smoke."] = "obfuscation",
  ["You are sharply cognisant of your opponent's symptoms."] = "cognisance",
  ["You will be resuscitated when near-death."] = "resuscitation",
  ["You are using your conduit as a protective crutch."] = "conduit_crutch",
  ["You are taking advantage of the high tide."] = "hightide",
  ["Your body has been fortified for relentless pursuit."] = "relentless",
  ["Your enhanced acuity is detecting nearby movement."] = "acuity",
  ["You have brought about a state of transience."] = "transience",
  ["You are prepared to entrench at your bunker."] = "entrench",
  ["You are maintaining an ascetic outlook."] = "ascetic",
  ["Your light will retaliate with holy vengeance."] = "retaliation",
  ["You are suppressing signs of your vitality."] = "suppressed",
  ["A vinculum is anchoring your soul."] = "vinculum",
  ["Pain is granting you a sense of ruthless resolve."] = "ruthlessness",
  ["You are impenetrable; incoming arrows will do no harm."] = "impenetrable",
  ["You are preparing to withstand a critical mass."] = "criticality",
  ["Perdition will restore you should you fall."] = "unfinished",
  ["You have become intoxicated upon carnage."] = "exhilarate",
  ["Your reflexes are honed to a razor-sharp level."] = "reflexes",
  ["Contempt and spite drive your body onwards."] = "contempt",
  ["Your bloodlust powers your restless velocity."] = "velocity",
  ["You are untouchable; ranged magics are nothing before you."] = "untouchable",
  ["Your ego is inflated beyond even its normally high limits."] = "inflated",
  ["You are observing your victim with predatory insticts."] = "predation",
  ["Your thoughts are consumed by sweet, agonising delirium."] = "delirium",
  ["Hellish flames coat your fists."] = "ravage",
  ["Your resolve strengthens you against foul magics."] = "resolved",
  ["You are transcending normal limitations."] = "transcendence",
  ["You are blessed with miraculous constitution."] = "ardour_constitution",
  ["You are blessed with miraculous strength."] = "ardour_strength",
  ["You are blessed with miraculous intelligence."] = "ardour_intelligence",
  ["You are blessed with miraculous dexterity."] = "ardour_dexterity",
  ["Your constitution is bolstered by an Earthen battle hymn"] = "battlehymn_constitution",
  ["Your intelligence is bolstered by an Earthen battle hymn"] = "battlehymn_intelligence",
  ["Your dexterity is bolstered by an Earthen battle hymn"] = "battlehymn_dexterity",
  ["Your strength is bolstered by an Earthen battle hymn"] = "battlehymn_strength",
  ["You will forestall poisonous harm."] = "forestall",
["Your moon tattoo is being empowered."] = "empowered_moon",
["You are encased in arcane armour unseen."] = "panoply",
["You will victimise your foes with terrible magic."] = "victimise",
  ["Your predatory prowess enhances your malediction."] = "prowess",
  ["The Broodmother's secrecy masks your steps."] = "hex_stalk",
  ["The Warden's blessing preserves you."] = "hex_preservation",
  ["Phantasmal ironbark girds your form."] = "ironbark",
}
 </script>
								<eventHandlerList />
							</Script>
						</ScriptGroup>
						<Script isActive="yes" isFolder="no">
							<name>Custom Colour Table</name>
							<packageName></packageName>
							<script>color_table.snow = {255, 250, 250}
color_table.ghost_white = {248, 248, 255}
color_table.GhostWhite = {248, 248, 255}
color_table.white_smoke = {245, 245, 245}
color_table.WhiteSmoke = {245, 245, 245}
color_table.gainsboro = {220, 220, 220}
color_table.floral_white = {255, 250, 240}
color_table.FloralWhite = {255, 250, 240}
color_table.old_lace = {253, 245, 230}
color_table.OldLace = {253, 245, 230}
color_table.linen = {250, 240, 230}
color_table.antique_white = {250, 235, 215}
color_table.AntiqueWhite = {250, 235, 215}
color_table.papaya_whip = {255, 239, 213}
color_table.PapayaWhip = {255, 239, 213}
color_table.blanched_almond = {255, 235, 205}
color_table.BlanchedAlmond = {255, 235, 205}
color_table.bisque = {255, 228, 196}
color_table.peach_puff = {255, 218, 185}
color_table.PeachPuff = {255, 218, 185}
color_table.navajo_white = {255, 222, 173}
color_table.NavajoWhite = {255, 222, 173}
color_table.moccasin = {255, 228, 181}
color_table.cornsilk = {255, 248, 220}
color_table.ivory = {255, 255, 240}
color_table.lemon_chiffon = {255, 250, 205}
color_table.LemonChiffon = {255, 250, 205}
color_table.seashell = {255, 245, 238}
color_table.honeydew = {240, 255, 240}
color_table.mint_cream = {245, 255, 250}
color_table.MintCream = {245, 255, 250}
color_table.azure = {240, 255, 255}
color_table.alice_blue = {240, 248, 255}
color_table.AliceBlue = {240, 248, 255}
color_table.lavender = {230, 230, 250}
color_table.lavender_blush = {255, 240, 245}
color_table.LavenderBlush = {255, 240, 245}
color_table.misty_rose = {255, 228, 225}
color_table.MistyRose = {255, 228, 225}
color_table.white = {255, 255, 255}
color_table.black = {0, 0, 0}
color_table.dark_slate_gray = {47, 79, 79}
color_table.DarkSlateGray = {47, 79, 79}
color_table.dark_slate_grey = {47, 79, 79}
color_table.DarkSlateGrey = {47, 79, 79}
color_table.dim_gray = {105, 105, 105}
color_table.DimGray = {105, 105, 105}
color_table.dim_grey = {105, 105, 105}
color_table.DimGrey = {105, 105, 105}
color_table.slate_gray = {112, 128, 144}
color_table.SlateGray = {112, 128, 144}
color_table.slate_grey = {112, 128, 144}
color_table.SlateGrey = {112, 128, 144}
color_table.light_slate_gray = {119, 136, 153}
color_table.LightSlateGray = {119, 136, 153}
color_table.light_slate_grey = {119, 136, 153}
color_table.LightSlateGrey = {119, 136, 153}
color_table.gray = {190, 190, 190}
color_table.grey = {190, 190, 190}
color_table.light_grey = {211, 211, 211}
color_table.LightGrey = {211, 211, 211}
color_table.light_gray = {211, 211, 211}
color_table.LightGray = {211, 211, 211}
color_table.midnight_blue = {25, 25, 112}
color_table.MidnightBlue = {25, 25, 112}
color_table.navy = {0, 0, 128}
color_table.navy_blue = {0, 0, 128}
color_table.NavyBlue = {0, 0, 128}
color_table.cornflower_blue = {100, 149, 237}
color_table.CornflowerBlue = {100, 149, 237}
color_table.dark_slate_blue = {72, 61, 139}
color_table.DarkSlateBlue = {72, 61, 139}
color_table.slate_blue = {106, 90, 205}
color_table.SlateBlue = {106, 90, 205}
color_table.medium_slate_blue = {123, 104, 238}
color_table.MediumSlateBlue = {123, 104, 238}
color_table.light_slate_blue = {132, 112, 255}
color_table.LightSlateBlue = {132, 112, 255}
color_table.medium_blue = {0, 0, 205}
color_table.MediumBlue = {0, 0, 205}
color_table.royal_blue = {65, 105, 225}
color_table.RoyalBlue = {65, 105, 225}
color_table.blue = {0, 0, 255}
color_table.dodger_blue = {30, 144, 255}
color_table.DodgerBlue = {30, 144, 255}
color_table.deep_sky_blue = {0, 191, 255}
color_table.DeepSkyBlue = {0, 191, 255}
color_table.sky_blue = {135, 206, 235}
color_table.SkyBlue = {135, 206, 235}
color_table.light_sky_blue = {135, 206, 250}
color_table.LightSkyBlue = {135, 206, 250}
color_table.steel_blue = {70, 130, 180}
color_table.SteelBlue = {70, 130, 180}
color_table.light_steel_blue = {176, 196, 222}
color_table.LightSteelBlue = {176, 196, 222}
color_table.light_blue = {173, 216, 230}
color_table.LightBlue = {173, 216, 230}
color_table.powder_blue = {176, 224, 230}
color_table.PowderBlue = {176, 224, 230}
color_table.pale_turquoise = {175, 238, 238}
color_table.PaleTurquoise = {175, 238, 238}
color_table.dark_turquoise = {0, 206, 209}
color_table.DarkTurquoise = {0, 206, 209}
color_table.medium_turquoise = {72, 209, 204}
color_table.MediumTurquoise = {72, 209, 204}
color_table.turquoise = {64, 224, 208}
color_table.cyan = {0, 255, 255}
color_table.light_cyan = {224, 255, 255}
color_table.LightCyan = {224, 255, 255}
color_table.cadet_blue = {95, 158, 160}
color_table.CadetBlue = {95, 158, 160}
color_table.medium_aquamarine = {102, 205, 170}
color_table.MediumAquamarine = {102, 205, 170}
color_table.aquamarine = {127, 255, 212}
color_table.dark_green = {0, 100, 0}
color_table.DarkGreen = {0, 100, 0}
color_table.dark_olive_green = {85, 107, 47}
color_table.DarkOliveGreen = {85, 107, 47}
color_table.dark_sea_green = {143, 188, 143}
color_table.DarkSeaGreen = {143, 188, 143}
color_table.sea_green = {46, 139, 87}
color_table.SeaGreen = {46, 139, 87}
color_table.medium_sea_green = {60, 179, 113}
color_table.MediumSeaGreen = {60, 179, 113}
color_table.light_sea_green = {32, 178, 170}
color_table.LightSeaGreen = {32, 178, 170}
color_table.pale_green = {152, 251, 152}
color_table.PaleGreen = {152, 251, 152}
color_table.spring_green = {0, 255, 127}
color_table.SpringGreen = {0, 255, 127}
color_table.lawn_green = {124, 252, 0}
color_table.LawnGreen = {124, 252, 0}
color_table.green = {0, 255, 0}
color_table.chartreuse = {127, 255, 0}
color_table.MediumSpringGreen = {0, 250, 154}
color_table.green_yellow = {173, 255, 47}
color_table.GreenYellow = {173, 255, 47}
color_table.lime_green = {50, 205, 50}
color_table.LimeGreen = {50, 205, 50}
color_table.yellow_green = {154, 205, 50}
color_table.YellowGreen = {154, 205, 50}
color_table.forest_green = {34, 139, 34}
color_table.ForestGreen = {34, 139, 34}
color_table.olive_drab = {107, 142, 35}
color_table.OliveDrab = {107, 142, 35}
color_table.dark_khaki = {189, 183, 107}
color_table.DarkKhaki = {189, 183, 107}
color_table.khaki = {240, 230, 140}
color_table.pale_goldenrod = {238, 232, 170}
color_table.PaleGoldenrod = {238, 232, 170}
color_table.light_yellow = {255, 255, 224}
color_table.LightYellow = {255, 255, 224}
color_table.yellow = {255, 255, 0}
color_table.gold = {255, 215, 0}
color_table.light_goldenrod = {238, 221, 130}
color_table.LightGoldenrod = {238, 221, 130}
color_table.goldenrod = {218, 165, 32}
color_table.dark_goldenrod = {184, 134, 11}
color_table.DarkGoldenrod = {184, 134, 11}
color_table.rosy_brown = {188, 143, 143}
color_table.RosyBrown = {188, 143, 143}
color_table.indian_red = {205, 92, 92}
color_table.IndianRed = {205, 92, 92}
color_table.saddle_brown = {139, 69, 19}
color_table.SaddleBrown = {139, 69, 19}
color_table.sienna = {160, 82, 45}
color_table.peru = {205, 133, 63}
color_table.burlywood = {222, 184, 135}
color_table.beige = {245, 245, 220}
color_table.wheat = {245, 222, 179}
color_table.sandy_brown = {244, 164, 96}
color_table.SandyBrown = {244, 164, 96}
color_table.tan = {210, 180, 140}
color_table.chocolate = {210, 105, 30}
color_table.firebrick = {178, 34, 34}
color_table.brown = {165, 42, 42}
color_table.dark_salmon = {233, 150, 122}
color_table.DarkSalmon = {233, 150, 122}
color_table.salmon = {250, 128, 114}
color_table.light_salmon = {255, 160, 122}
color_table.LightSalmon = {255, 160, 122}
color_table.orange = {255, 165, 0}
color_table.dark_orange = {255, 140, 0}
color_table.DarkOrange = {255, 140, 0}
color_table.coral = {255, 127, 80}
color_table.light_coral = {240, 128, 128}
color_table.LightCoral = {240, 128, 128}
color_table.tomato = {255, 99, 71}
color_table.orange_red = {255, 69, 0}
color_table.OrangeRed = {255, 69, 0}
color_table.red = {255, 0, 0}
color_table.hot_pink = {255, 105, 180}
color_table.HotPink = {255, 105, 180}
color_table.deep_pink = {255, 20, 147}
color_table.DeepPink = {255, 20, 147}
color_table.pink = {255, 192, 203}
color_table.light_pink = {255, 182, 193}
color_table.LightPink = {255, 182, 193}
color_table.pale_violet_red = {219, 112, 147}
color_table.PaleVioletRed = {219, 112, 147}
color_table.maroon = {176, 48, 96}
color_table.medium_violet_red = {199, 21, 133}
color_table.MediumVioletRed = {199, 21, 133}
color_table.violet_red = {208, 32, 144}
color_table.VioletRed = {208, 32, 144}
color_table.magenta = {255, 0, 255}
color_table.violet = {238, 130, 238}
color_table.plum = {221, 160, 221}
color_table.orchid = {218, 112, 214}
color_table.medium_orchid = {186, 85, 211}
color_table.MediumOrchid = {186, 85, 211}
color_table.dark_orchid = {153, 50, 204}
color_table.DarkOrchid = {153, 50, 204}
color_table.dark_violet = {148, 0, 211}
color_table.DarkViolet = {148, 0, 211}
color_table.blue_violet = {138, 43, 226}
color_table.BlueViolet = {138, 43, 226}
color_table.purple = {160, 32, 240}
color_table.medium_purple = {147, 112, 219}
color_table.MediumPurple = {147, 112, 219}
color_table.thistle = {216, 191, 216}

color_table.a_darkred = {128, 0, 0}
color_table.a_darkgreen = {0, 179, 0}
color_table.a_brown = {128, 128, 0}
color_table.a_darkblue = {0, 0, 128}
color_table.a_darkmagenta = {128, 0, 128}
color_table.a_darkcyan = {0, 128, 128}
color_table.a_grey = {192, 192, 192}
color_table.a_darkgrey = {128, 128, 128}
color_table.a_red = {255, 0, 0}
color_table.a_green = {0, 255, 0}
color_table.a_yellow = {255, 255, 0}
color_table.a_blue = {0, 85, 255}
color_table.a_magenta = {255, 0, 255}
color_table.a_cyan = {0, 255, 255}
color_table.a_white = {255, 255, 255}

color_table.chat_bg = {25, 25, 25}

function fgcolor(color)
	setFgColor(color_table[color][1], color_table[color][2], color_table[color][3])
end

function bgcolor(color)
	setBgColor(color_table[color][1], color_table[color][2], color_table[color][3])
end

function cfgcolor(console, color)
	setFgColor(console, color_table[color][1], color_table[color][2], color_table[color][3])
end

function cbgcolor(console, color)
	setBgColor(console, color_table[color][1], color_table[color][2], color_table[color][3])
end

function showColours(num)
	cecho("\n&lt;green&gt; Showing a list of available colours, with "..num.." columns: \n")
	local lineBreak = num
	local linecount = 0
	local padding = math.floor(90/num)
	
	for col, tab in pairs(color_table) do
		linecount = linecount + 1
		cecho(string.rep(" ", padding-#col).."&lt;"..col.."&gt;"..col.."&lt;NavajoWhite&gt;,")
		if linecount &gt;= lineBreak then
			echo("\n")
			linecount = 0
		end
	end
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Sunder Toggles</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Toggles load + save</name>
							<packageName></packageName>
							<script>function snd_toggleSave(disp)
	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local save_loc = getMudletHomeDir() .. separator .. "sunderToggles"
  
	table.save(save_loc, snd.toggles)
	
	if disp then
		snd.message("Current toggle configuration saved.")
	end	
end

function snd_toggleLoad()
	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local load_loc = getMudletHomeDir() .. separator .. "sunderToggles"
 
	if not io.exists(load_loc) then 
		snd.message("Toggle save file not found; will save when you next disconnect/QQ.")
		return
	end
	
	table.load(load_loc, snd.toggles)
	snd.message("Toggles found; we loaded them in just fine.")
  snd.goggle_update()
	snd_toggleSave(false)
end

registerAnonymousEventHandler("sysDisconnectionEvent", "snd_toggleSave", true)
registerAnonymousEventHandler("sysLoadEvent", "snd_toggleLoad")

</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>toggle info</name>
							<packageName></packageName>
							<script>snd.toggle_info = {
active = {info = "System full stop of on/off.", command = "sndon and sndoff"},
parrying = {info = "Basic parry set-up.", command = "tpry or toggle parry"},
defenses = {info = "Maintain defenses automatically.", command = "defup"},
calling = {info = "Call targets over web.", command = "tcl"},
listening = {info = "Accept targets over web.", command = "ls &lt;name name name&gt;"},
affcalling = {info = "Call affs over web.", command = "acl"},
chameleon = {info = "Use chameleon tattoo/racial.", command = "tcm"},
bashing = {info = "Kill NPCs in your room.", command = "aa"},
fasthunt = {info = "Toggle on to clear rooms as you walk around.", command = "ff"},
generics = {info = "Uses name instead of number while bashing.", command = "toggle generic"}, 
gathering = {info = "Pick up items while bashing.", command = "On when fasthunt is active"}, 
lighting = {info = "Toggle lighting pipes.", command = "lgt or toggle (lighting|pipes)"},
attacking = {info = "Turns on/off based on aliases for PvP.", command = "See Sunder Help PK"},
balecho = {info = "Replaces bal/eq with colorful echoes.", command = "automatic"}, 
atkecho = {info = "Replaces attack lines with shorthand.", command = "tatk or toggle attack echo"},
newbie = {info = "Newbie bashing attacks only.", command = "tnewb or toggle newbie"},
cobra = {info = "Toggle cobra bashing for monks.", command = "toggle cobra"}, 
lightning = {info = "Toggle Luminary/Earthcaller lightning to bash.", command = "tlgt or toggle lightning"},
gallop = {info = "Use gallop while pathing around.", command = "tgl or toggle gallop"},
dash =  {info = "Use of dash while pathing around.", command = "tds or toggle dash"},
rockharvest = {info = "Harvest rocks as you walk around.", command = "tr or toggle rockharvest"},
plants = {info = "Shows plants in the room as you walk.", command = "toggle plants"}, 
disperse = {info = "Use disperse to remove writhes from allies.", command = "toggle disperse (all|callers|none)"},
questing = {info = "Toggle questing.", command = "toggle questing"},
vermin = {info = "Vermin walking/killing/turnin.", command = "toggle vermin"},
goggles = {info = "Telling Sunder you have antiquated goggles.", command = "toggle goggles"},
goggle_level = {info = "What level are your goggles?", command = "mygoggles or mygoggles &lt;level&gt;"},
nontargetgags = {info = "Remove nontarget cures from output.", command = "toggle non target gagging"},
aegis = {info = "Do you want Sunder to auto aegis for you?", command = "toggle aegis"},
auto_reject = {info = "Should we auto reject lust attempts?", command = "toggle reject"},
}</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Bashing</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Auto Bashing</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>init</name>
							<packageName></packageName>
							<script>
bot = bot or {}

bot.info = {
room = "",
area = "",
next = ""
}

bot.new_room = false
bot.going = false
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>bot_room_info</name>
							<packageName></packageName>
							<script>
function bot_room_info()
--echo("I see you")
 if bot.info.room ~= gmcp.Room.Info.num then
  bot.new_room = true
  bot.info.room = gmcp.Room.Info.num
  bot.info.area = gmcp.Room.Info.area
 end
end</script>
							<eventHandlerList>
								<string>gmcp.Room.Info</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>paths</name>
							<packageName></packageName>
							<script>function sndpathpick()

local check = {}

if snd.which_path == "verminspines" then
check = {
--Spinesreach
v11687 = "11695",
v11695 = "11696",
v11696 = "11701",
v11701 = "11702",
v11702 = "11703",
v11703 = "14984",
v14984 = "13029",
v13029 = "13041",
v13041 = "13895",
v13895 = "13893",
v13893 = "14328",
v14328 = "12994",
v12994 = "15145",
v15145 = "18453",
v18453 = "12992",
v12992 = "33219",
v33219 = "18458",
v18458 = "18461",
v18461 = "18457",
v18457 = "18460",
v18460 = "18456",
v18456 = "12664",
v12664 = "13707",
v13707 = "18455",
v18455 = "18459",
v18459 = "12662",
v12662 = "56625",
v56625 = "56627",
v56627 = "56628",
v56628 = "56626",
v56626 = "18454",
v18454 = "51752",
v51752 = "54055",
v54055 = "54058",
v54058 = "54059",
v54059 = "54057",
v54057 = "54056",
v54056 = "51979",
v51979 = "51455",
v51455 = "52744",
v52744 = "52753",
v52753 = "52745",
v52745 = "55191",
v55191 = "55192",
v55192 = "56735",
v56735 = "58448",
v58448 = "58449",
v58449 = "58450",
v58450 = "23501",
v23501 = "23500",
v23500 = "23499",
v23499 = "23498",
v23498 = "23497",
v23497 = "23496",
v23496 = "23491",
v23491 = "23502",
v23502 = "23503",
v23503 = "23492",
v23492 = "23494",
v23494 = "23495",
v23495 = "23493",
v23493 = "23490",
v23490 = "14481",
v14481 = "14487",
v14487 = "12965",
v12965 = "12966",
v12966 = "12970",
v12970 = "12973",
v12973 = "44585",

}

elseif snd.which_path == "verminduiran" then
check = {

v44060 = "44062",
v44058 = "44058",
v44046 = "44046",
v44053 = "44053",
v44042 = "44042",
v44045 = "44045",
v44044 = "44044",
v44043 = "44043",
v44051 = "44051",
v44050 = "44050",
v44055 = "44055",
v44047 = "44047",
v44048 = "44048",
v44067 = "44067",
v44059 = "44059",
v44064 = "44064",
v44068 = "44065",
v44065 = "44061",
v44061 = "44069",
v44069 = "44060",
v44060 = "44073",
v44073 = "44072",
v44072 = "44071",
v44071 = "44070",
v44070 = "44063",
v44063 = "44066",
v44066 = "43984",
v43984 = "43978",
v43978 = "43975",
v43975 = "43973",
v43973 = "43962",
v43962 = "43963",
v43963 = "43964",
v43964 = "43754",
v43754 = "43965",
v43965 = "43966",
v43966 = "43972",
v43972 = "43969",
v43969 = "43968",
v43968 = "44037",
v44037 = "44036",
v44036 = "44034",
v44034 = "44033",
v44033 = "44030",
v44030 = "44027",
v44027 = "44026",
v44026 = "44023",
v44023 = "44022",
v44022 = "44025",
v44025 = "44013",
v44013 = "44020",
v44020 = "44019",
v44019 = "44018",
v44018 = "44016",
v44016 = "44014",
v44014 = "44015",
v44015 = "44017",
v44017 = "44041",
v44041 = "43758",
v43758 = "43757",
v43757 = "43740",
v43740 = "43739",
v43739 = "43755",
v43755 = "43756",
v43756 = "44001",
v44001 = "44006",
v44006 = "44000",
v44000 = "43999",
v43999 = "43885",

}

elseif snd.which_path == "verminenorian" then
check = {

v56484 = "56471",
v56471 = "56483",
v56483 = "56485",
v56485 = "56487",
v56487 = "56486",
v56486 = "56481",
v56481 = "56482",
v56482 = "56470",
v56470 = "56473",
v56473 = "56474",
v56474 = "56469",
v56469 = "56480",
v56480 = "56479",
v56479 = "56451",
v56451 = "56450",
v56450 = "56464",
v56464 = "56447",
v56447 = "56446",
v56446 = "56465",
v56465 = "55808",
v55808 = "56452",
v56452 = "56443",
v56443 = "56442",
v56442 = "56448",
v56448 = "56449",
v56449 = "56441",
v56441 = "56445",
v56445 = "56444",
v56444 = "56438",
v56438 = "56440",
v56440 = "56439",
v56439 = "56437",
v56437 = "54105",
v54105 = "54111",
v54111 = "54112",
v54112 = "54113",
v54113 = "54114",
v54114 = "55820",
v55820 = "55827",
v55827 = "55834",
v55834 = "55864",
v55864 = "55866",
v55866 = "55839",
v55839 = "55830",
v55830 = "55829",
v55829 = "55828",
v55828 = "54115",
v54115 = "54089",
v54089 = "54088",
v54088 = "54087",
v54087 = "54086",
v54086 = "54085",
v54085 = "54101",
v54101 = "54100",
v54100 = "56525",

}

elseif snd.which_path == "verminbloodloch" then
check = {

v9193 = "9194",
v9194 = "9195",
v9195 = "9196",
v9196 = "9197",
v9197 = "9201",
v9201 = "9202",
v9202 = "9206",
v9206 = "1331",
v1331 = "1333",
v1333 = "9376",
v9376 = "4974",
v4974 = "4963",
v4963 = "42903",
v42903 = "6817",
v6817 = "6819",
v6819 = "6821",
v6821 = "4719",
v4719 = "4690",
v4690 = "8007",
v8007 = "18278",
v18278 = "24197",
v24197 = "12636",
v12636 = "4683",
v4683 = "4680",
v4680 = "5554",
v5554 = "4429",
v4429 = "4400",
v4400 = "5553",
v5553 = "9207",
v9207 = "9208",
v9208 = "9209",
v9209 = "9210",
v9210 = "3490",
v3490 = "1538",
v1538 = "5451",
v5451 = "5458",
v5458 = "5461",
v5461 = "5638",
v5638 = "6157",
v6157 = "1537",
v1537 = "1338",
v1338 = "1337",
v1337 = "2905",
v2905 = "5440",
v5440 = "5441",
v5441 = "5450",
v5450 = "7678",
v7678 = "7689",
v7679 = "4674",
v4674 = "9190",

}

elseif snd.which_path == "arbothia" then
check = {
-- Arbothia Mansion

v15409 = "15410",
v15410 = "15427",
v15427 = "28115",
v28115 = "15410",
v15410 = "15412",
v15412 = "15422",
v15422 = "15412",
v15412 = "15417",
v15417 = "15420",
v15420 = "15421",
v15421 = "15429",
v15429 = "15430",
v15430 = "15428",
v15428 = "15419",
v15419 = "27100",
v27100 = "27101",
v27101 = "27102",
v27102 = "27111",
v27111 = "27110",
v27110 = "15415",
v15415 = "15416",
v15416 = "27119",
v27119 = "27115",
v27115 = "27114",
v27114 = "27113",
v27113 = "27103",
v27103 = "27116",
v27116 = "27120",
v27120 = "27121",
v27121 = "27122",
v27122 = "27123",
v27123 = "27112",
v27112 = "27117",
v27117 = "27118",
v27118 = "27106",
v27106 = "27105",
v27105 = "15411",
v15411 = "27105",
v27105 = "27104",
v27104 = "15418",
v15418 = "27107",
v27107 = "27109",
v27109 = "27107",
v27107 = "27108",
v27108 = "27107",
v27107 = "15418",
v15418 = "27104",
v27104 = "15413",
v15413 = "36677",

}

elseif snd.which_path == "bloodwood" then
check = {

v57548 = "57547",
v57547 = "57543",
v57543 = "57542",
v57542 = "57541",
v57541 = "57533",
v57533 = "57529",
v57529 = "57527",
v57527 = "57526",
v57526 = "57525",
v57525 = "57524",
v57524 = "57522",
v57522 = "57521",
v57521 = "57523",
v57523 = "57578",
v57578 = "57592",
v57592 = "57591",
v57591 = "57594",
v57594 = "57595",
v57595 = "57609",
v57609 = "57616",
v57616 = "57615",
v57615 = "57614",
v57614 = "57613",
v57613 = "57612",
v57612 = "57611",
v57611 = "57610",
v57610 = "57596",
v57596 = "57597",
v57597 = "57601",
v57601 = "57602",
v57602 = "57603",
v57603 = "57607",
v57607 = "57608",
v57608 = "57606",
v57606 = "57605",
v57605 = "57604",
v57604 = "57600",
v57600 = "57599",
v57599 = "57598",
v57598 = "57593",
v57593 = "57579",
v57579 = "57580",
v57580 = "57590",
v57590 = "57589",
v57589 = "57588",
v57588 = "57586",
v57586 = "57587",
v57587 = "57585",
v57585 = "57584",
v57584 = "57581",
v57581 = "57582",
v57582 = "57583",
v57583 = "57564",
v57564 = "57560",
v57560 = "57561",
v57561 = "57562",
v57562 = "57563",
v57563 = "57556",
v57556 = "57557",
v57557 = "57558",
v57558 = "57559",
v57559 = "57550",
v57550 = "57549",
v57549 = "57546",
v57546 = "57545",
v57545 = "57553",
v57553 = "57552",
v57552 = "57554",
v57554 = "57555",
v57555 = "57551",
v57551 = "57544",
v57544 = "57537",
v57537 = "57538",
v57538 = "57539",
v57539 = "57532",
v57532 = "57540",
v57540 = "57528",
v57528 = "57530",
v57530 = "57531",
v57531 = "57534",
v57534 = "57535",
v57535 = "57536",
v57536 = "57548",
v57548 = "57547",
v57547 = "57543",
v57543 = "57542",
v57542 = "57541",
v57541 = "57533",
v57533 = "57529",
v57529 = "57527",
v57527 = "57526",
v57526 = "57525",
v57525 = "57524",
v57524 = "57522",
v57522 = "57521",
v57521 = "57523",
v57523 = "57578",
v57578 = "57592",
v57592 = "57591",
v57591 = "57594",
v57594 = "57595",
v57595 = "57609",
v57609 = "57616",
v57616 = "57615",
v57615 = "57614",
v57614 = "57613",
v57613 = "57612",
v57612 = "57611",
v57611 = "57610",
v57610 = "57596",
v57596 = "57597",
v57597 = "57601",
v57601 = "57602",
v57602 = "57603",
v57603 = "57607",
v57607 = "57608",
v57608 = "57606",
v57606 = "57605",
v57605 = "57604",
v57604 = "57600",
v57600 = "57599",
v57599 = "57598",
v57598 = "57593",
v57593 = "57579",
v57579 = "57580",
v57580 = "57590",
v57590 = "57589",
v57589 = "57588",
v57588 = "57586",
v57586 = "57587",
v57587 = "57585",
v57585 = "57584",
v57584 = "57581",
v57581 = "57582",
v57582 = "57583",
v57583 = "57564",
v57564 = "57560",
v57560 = "57561",
v57561 = "57562",
v57562 = "57563",
v57563 = "57556",
v57556 = "57557",
v57557 = "57558",
v57558 = "57559",
v57559 = "57550",
v57550 = "57549",
v57549 = "57546",
v57546 = "57545",
v57545 = "57553",
v57553 = "57552",
v57552 = "57554",
v57554 = "57555",
v57555 = "57551",
v57551 = "57544",
v57544 = "57537",
v57537 = "57538",
v57538 = "57539",
v57539 = "57532",
v57532 = "57540",
v57540 = "57528",
v57528 = "57530",
v57530 = "57531",
v57531 = "57534",
v57534 = "57535",
v57535 = "57536",
v57536 = "57548",

}

elseif snd.which_path == "tcanna" then
check = {

v51239 = "51242",
v51242 = "51244",
v51244 = "52633",
v52633 = "52634",
v52634 = "52635",
v52635 = "52636",
v52636 = "53331",
v53331 = "53339",
v53339 = "53560",
v53560 = "53566",
v53566 = "53567",
v53567 = "53592",
v53592 = "53593",
v53593 = "53618",
v53618 = "53619",
v53619 = "53633",
v53633 = "53634",
v53634 = "53635",
v53635 = "53636",
v53636 = "53637",
v53637 = "53639",
v53639 = "53640",
v53640 = "53641",
v53641 = "53642",
v53642 = "53643",
v53643 = "53644",
v53644 = "53645",
v53645 = "53828",
v53828 = "53996",
v53996 = "53997",
v53997 = "53998",
v53998 = "53999",
v53999 = "54000",
v54000 = "54001",
v54001 = "54002",
v54002 = "54003",
v54003 = "54004",
v54004 = "54005",
v54005 = "54006",
v54006 = "54007",
v54007 = "54008",
v54008 = "54009",
v54009 = "54010",
v54010 = "54011",
v54011 = "54012",
v54012 = "54013",
v54013 = "54018",
v54018 = "54019",
v54019 = "54020",
v54020 = "54021",
v54021 = "54022",
v54022 = "54023",
v54023 = "54024",
v54024 = "54028",
v54028 = "54029",
v54029 = "54030",
v54030 = "54031",
v54031 = "54037",
v54037 = "54038",
v54038 = "54039",
v54039 = "54040",
v54040 = "54042",
v54042 = "54043",
v54043 = "54044",
v54044 = "54045",
v54045 = "54046",
v54046 = "54048",
v54048 = "54049",
v54049 = "54050",
v54050 = "54052",
v54052 = "54053",
v54053 = "54054",
v54054 = "54060",
v54060 = "54062",
v54062 = "54065",
v54065 = "54069",
v54069 = "54125",
v54125 = "54126",
v54126 = "54127",
v54127 = "54128",
v54128 = "54131",
v54131 = "54132",
v54132 = "54136",
v54136 = "54137",
v54137 = "54140",
v54140 = "54141",
v54141 = "54142",
v54142 = "54143",
v54143 = "54144",
v54144 = "54145",
v54145 = "54146",
v54146 = "54147",
v54147 = "54148",
v54148 = "54149",
v54149 = "54150",
v54150 = "54156",
v54156 = "54157",
v54157 = "54158",
v54158 = "54159",
v54159 = "54164",
v54164 = "54165",
v54165 = "54223",
v54223 = "54224",
v54224 = "54225",
v54225 = "54226",
v54226 = "54230",
v54230 = "54235",
v54235 = "54236",
v54236 = "54239",
v54239 = "54240",
v54240 = "54241",
v54241 = "54254",
v54254 = "54255",
v54255 = "54258",
v54258 = "54264",
v54264 = "54265",
v54265 = "54266",
v54266 = "54268",
v54268 = "54272",
v54272 = "54273",
v54273 = "54274",
v54274 = "54275",
v54275 = "54288",
v54288 = "54289",
v54289 = "54290",
v54290 = "54292",
v54292 = "54295",
v54295 = "54296",
v54296 = "54298",
v54298 = "54301",
v54301 = "54309",
v54309 = "54310",
v54310 = "54312",
v54312 = "54313",
v54313 = "54314",
v54314 = "54316",
v54316 = "54317",
v54317 = "54320",
v54320 = "54321",
v54321 = "54322",
v54322 = "54323",
v54323 = "54324",
v54324 = "54325",
v54325 = "54326",
v54326 = "54327",
v54327 = "54328",
v54328 = "54330",
v54330 = "54333",
v54333 = "54334",
v54334 = "54335",
v54335 = "54336",
v54336 = "54337",
v54337 = "54339",
v54339 = "54341",
v54341 = "54342",
v54342 = "54343",
v54343 = "54344",
v54344 = "54345",
v54345 = "54346",
v54346 = "54347",
v54347 = "54348",
v54348 = "54349",
v54349 = "54350",
v54350 = "54351",
v54351 = "54352",
v54352 = "54353",
v54353 = "54354",
v54354 = "54355",
v54355 = "54356",
v54356 = "54357",
v54357 = "54358",
v54358 = "54361",
v54361 = "54362",
v54362 = "54363",
v54363 = "54368",
v54368 = "54371",
v54371 = "54372",
v54372 = "54373",
v54373 = "54374",
v54374 = "54375",
v54375 = "54389",
v54389 = "54390",
v54390 = "54391",
v54391 = "54392",
v54392 = "54393",
v54393 = "54401",
v54401 = "54402",
v54402 = "54447",
v54447 = "54448",
v54448 = "54453",
v54453 = "54454",
v54454 = "54455",
v54455 = "54457",
v54457 = "54458",
v54458 = "54459",
v54459 = "54460",
v54460 = "54461",
v54461 = "54462",
v54462 = "54463",
v54463 = "54464",
v54464 = "54465",
v54465 = "54467",
v54467 = "54468",
v54468 = "54469",
v54469 = "54475",
v54475 = "54476",
v54476 = "54477",
v54477 = "54479",
v54479 = "54480",
v54480 = "54481",
v54481 = "54484",
v54484 = "54485",
v54485 = "54486",
v54486 = "54487",
v54487 = "54488",
v54488 = "54489",
v54489 = "54490",
v54490 = "54491",
v54491 = "54492",
v54492 = "54496",
v54496 = "54498",
v54498 = "54502",
v54502 = "54507",
v54507 = "54508",
v54508 = "54509",
v54509 = "54510",
v54510 = "54511",
v54511 = "54512",
v54512 = "54519",
v54519 = "54520",
v54520 = "54521",
v54521 = "54522",
v54522 = "54523",
v54523 = "54524",
v54524 = "54525",
v54525 = "54529",
v54529 = "54574",
v54574 = "54575",
v54575 = "54576",
v54576 = "54577",
v54577 = "54578",
v54578 = "54580",
v54580 = "54581",
v54581 = "54582",
v54582 = "54583",
v54583 = "54584",
v54584 = "54586",
v54586 = "54587",
v54587 = "54588",
v54588 = "54593",
v54593 = "54594",
v54594 = "54595",
v54595 = "54596",
v54596 = "54597",
v54597 = "54598",
v54598 = "54599",
v54599 = "54600",
v54600 = "54601",
v54601 = "54602",
v54602 = "54603",
v54603 = "54604",
v54604 = "54605",
v54605 = "54606",
v54606 = "54608",
v54608 = "54611",
v54611 = "54623",
v54623 = "54625",
v54625 = "54627",
v54627 = "54628",
v54628 = "54629",
v54629 = "54630",
v54630 = "54631",
v54631 = "54632",
v54632 = "54633",
v54633 = "54634",
v54634 = "54635",
v54635 = "54636",
v54636 = "54637",
v54637 = "54682",
v54682 = "54683",
v54683 = "54713",
v54713 = "54714",
v54714 = "54715",
v54715 = "54716",
v54716 = "54717",
v54717 = "54718",
v54718 = "54719",
v54719 = "54720",
v54720 = "54721",
v54721 = "54722",
v54722 = "54741",
v54741 = "54742",
v54742 = "54743",
v54743 = "54744",
v54744 = "54745",
v54745 = "54747",
v54747 = "54748",
v54748 = "54749",
v54749 = "54750",
v54750 = "54751",
v54751 = "54752",
v54752 = "54753",
v54753 = "54754",
v54754 = "54755",
v54755 = "54756",
v54756 = "54798",
v54798 = "54799",
v54799 = "54800",
v54800 = "54801",
v54801 = "54802",
v54802 = "54803",
v54803 = "54804",
v54804 = "54806",
v54806 = "54807",
v54807 = "54808",
v54808 = "54809",
v54809 = "54810",
v54810 = "54811",
v54811 = "54812",
v54812 = "54813",
v54813 = "54814",
v54814 = "54815",
v54815 = "54819",
v54819 = "54820",
v54820 = "54821",
v54821 = "54822",
v54822 = "54823",
v54823 = "54824",
v54824 = "54825",
v54825 = "54826",
v54826 = "54827",
v54827 = "54828",
v54828 = "54829",
v54829 = "54830",
v54830 = "54831",
v54831 = "54832",
v54832 = "54833",
v54833 = "54834",
v54834 = "54835",
v54835 = "54836",
v54836 = "54837",
v54837 = "54838",
v54838 = "54839",
v54839 = "54840",
v54840 = "54841",
v54841 = "54842",
v54842 = "54843",
v54843 = "54844",
v54844 = "54845",
v54845 = "54846",
v54846 = "54847",
v54847 = "54848",
v54848 = "54849",
v54849 = "54850",
v54850 = "54851",
v54851 = "54852",
v54852 = "54853",
v54853 = "54854",
v54854 = "54855",
v54855 = "54857",
v54857 = "54858",
v54858 = "54859",
v54859 = "54860",
v54860 = "54861",
v54861 = "54862",
v54862 = "54863",
v54863 = "54864",
v54864 = "54865",
v54865 = "54866",
v54866 = "54867",
v54867 = "54868",
v54868 = "54869",
v54869 = "54870",
v54870 = "54871",
v54871 = "54872",
v54872 = "54873",
v54873 = "54874",
v54874 = "54875",
v54875 = "54876",
v54876 = "54877",
v54877 = "54878",
v54878 = "54879",
v54879 = "54880",
v54880 = "54881",
v54881 = "54902",
v54902 = "54992",
v54992 = "54993",
v54993 = "54994",
v54994 = "54995",
v54995 = "54996",
v54996 = "54997",
v54997 = "54998",
v54998 = "54999",
v54999 = "55000",
v55000 = "55001",
v55001 = "55237",
v55237 = "55238",
v55238 = "55239",
v55239 = "55240",
v55240 = "55241",
v55241 = "54166",
v54166 = "51224", --FLY Here
v51224 = "51239",
v51239 = "51242",
v51242 = "51244",
v51244 = "52633",
v52633 = "52634",
v52634 = "52635",
v52635 = "52636",
v52636 = "53331",
v53331 = "53339",
v53339 = "53560",
v53560 = "53566",
v53566 = "53567",
v53567 = "53592",
v53592 = "53593",
v53593 = "53618",
v53618 = "53619",
v53619 = "53633",
v53633 = "53634",
v53634 = "53635",
v53635 = "53636",
v53636 = "53637",
v53637 = "53639",
v53639 = "53640",
v53640 = "53641",
v53641 = "53642",
v53642 = "53643",
v53643 = "53644",
v53644 = "53645",
v53645 = "53828",
v53828 = "53996",
v53996 = "53997",
v53997 = "53998",
v53998 = "53999",
v53999 = "54000",
v54000 = "54001",
v54001 = "54002",
v54002 = "54003",
v54003 = "54004",
v54004 = "54005",
v54005 = "54006",
v54006 = "54007",
v54007 = "54008",
v54008 = "54009",
v54009 = "54010",
v54010 = "54011",
v54011 = "54012",
v54012 = "54013",
v54013 = "54018",
v54018 = "54019",
v54019 = "54020",
v54020 = "54021",
v54021 = "54022",
v54022 = "54023",
v54023 = "54024",
v54024 = "54028",
v54028 = "54029",
v54029 = "54030",
v54030 = "54031",
v54031 = "54037",
v54037 = "54038",
v54038 = "54039",
v54039 = "54040",
v54040 = "54042",
v54042 = "54043",
v54043 = "54044",
v54044 = "54045",
v54045 = "54046",
v54046 = "54048",
v54048 = "54049",
v54049 = "54050",
v54050 = "54052",
v54052 = "54053",
v54053 = "54054",
v54054 = "54060",
v54060 = "54062",
v54062 = "54065",
v54065 = "54069",
v54069 = "54125",
v54125 = "54126",
v54126 = "54127",
v54127 = "54128",
v54128 = "54131",
v54131 = "54132",
v54132 = "54136",
v54136 = "54137",
v54137 = "54140",
v54140 = "54141",
v54141 = "54142",
v54142 = "54143",
v54143 = "54144",
v54144 = "54145",
v54145 = "54146",
v54146 = "54147",
v54147 = "54148",
v54148 = "54149",
v54149 = "54150",
v54150 = "54156",
v54156 = "54157",
v54157 = "54158",
v54158 = "54159",
v54159 = "54164",
v54164 = "54165",
v54165 = "54223",
v54223 = "54224",
v54224 = "54225",
v54225 = "54226",
v54226 = "54230",
v54230 = "54235",
v54235 = "54236",
v54236 = "54239",
v54239 = "54240",
v54240 = "54241",
v54241 = "54258",
v54258 = "54264",
v54264 = "54265",
v54265 = "54266",
v54266 = "54268",
v54268 = "54272",
v54272 = "54273",
v54273 = "54274",
v54274 = "54275",
v54275 = "54288",
v54288 = "54289",
v54289 = "54290",
v54290 = "54292",
v54292 = "54295",
v54295 = "54296",
v54296 = "54298",
v54298 = "54301",
v54301 = "54309",
v54309 = "54310",
v54310 = "54312",
v54312 = "54313",
v54313 = "54314",
v54314 = "54316",
v54316 = "54317",
v54317 = "54320",
v54320 = "54321",
v54321 = "54322",
v54322 = "54323",
v54323 = "54324",
v54324 = "54325",
v54325 = "54326",
v54326 = "54327",
v54327 = "54328",
v54328 = "54330",
v54330 = "54333",
v54333 = "54334",
v54334 = "54335",
v54335 = "54336",
v54336 = "54337",
v54337 = "54339",
v54339 = "54341",
v54341 = "54342",
v54342 = "54343",
v54343 = "54344",
v54344 = "54345",
v54345 = "54346",
v54346 = "54347",
v54347 = "54348",
v54348 = "54349",
v54349 = "54350",
v54350 = "54351",
v54351 = "54352",
v54352 = "54353",
v54353 = "54354",
v54354 = "54355",
v54355 = "54356",
v54356 = "54357",
v54357 = "54358",
v54358 = "54361",
v54361 = "54362",
v54362 = "54363",
v54363 = "54368",
v54368 = "54371",
v54371 = "54372",
v54372 = "54373",
v54373 = "54374",
v54374 = "54375",
v54375 = "54389",
v54389 = "54390",
v54390 = "54391",
v54391 = "54392",
v54392 = "54393",
v54393 = "54447",
v54447 = "54448",
v54448 = "54453",
v54453 = "54454",
v54454 = "54455",
v54455 = "54457",
v54457 = "54458",
v54458 = "54459",
v54459 = "54460",
v54460 = "54461",
v54461 = "54462",
v54462 = "54463",
v54463 = "54464",
v54464 = "54465",
v54465 = "54467",
v54467 = "54468",
v54468 = "54469",
v54469 = "54475",
v54475 = "54476",
v54476 = "54477",
v54477 = "54479",
v54479 = "54480",
v54480 = "54481",
v54481 = "54484",
v54484 = "54485",
v54485 = "54486",
v54486 = "54487",
v54487 = "54488",
v54488 = "54489",
v54489 = "54490",
v54490 = "54491",
v54491 = "54492",
v54492 = "54496",
v54496 = "54498",
v54498 = "54502",
v54502 = "54507",
v54507 = "54508",
v54508 = "54509",
v54509 = "54510",
v54510 = "54511",
v54511 = "54512",
v54512 = "54519",
v54519 = "54520",
v54520 = "54521",
v54521 = "54522",
v54522 = "54523",
v54523 = "54524",
v54524 = "54525",
v54525 = "54529",
v54529 = "54574",
v54574 = "54575",
v54575 = "54576",
v54576 = "54577",
v54577 = "54578",
v54578 = "54580",
v54580 = "54581",
v54581 = "54582",
v54582 = "54583",
v54583 = "54584",
v54584 = "54586",
v54586 = "54587",
v54587 = "54588",
v54588 = "54593",
v54593 = "54594",
v54594 = "54595",
v54595 = "54596",
v54596 = "54597",
v54597 = "54598",
v54598 = "54599",
v54599 = "54600",
v54600 = "54601",
v54601 = "54602",
v54602 = "54603",
v54603 = "54604",
v54604 = "54605",
v54605 = "54606",
v54606 = "54608",
v54608 = "54611",
v54611 = "54623",
v54623 = "54625",
v54625 = "54682",
v54682 = "54713",
v54713 = "54714",
v54714 = "54715",
v54715 = "54716",
v54716 = "54717",
v54717 = "54718",
v54718 = "54719",
v54719 = "54720",
v54720 = "54721",
v54721 = "54722",
v54722 = "54741",
v54741 = "54742",
v54742 = "54743",
v54743 = "54744",
v54744 = "54745",
v54745 = "54747",
v54747 = "54748",
v54748 = "54749",
v54749 = "54750",
v54750 = "54751",
v54751 = "54752",
v54752 = "54753",
v54753 = "54754",
v54754 = "54755",
v54755 = "54756",
v54756 = "54798",
v54798 = "54799",
v54799 = "54800",
v54800 = "54801",
v54801 = "54802",
v54802 = "54803",
v54803 = "54804",
v54804 = "54806",
v54806 = "54807",
v54807 = "54808",
v54808 = "54809",
v54809 = "54810",
v54810 = "54811",
v54811 = "54812",
v54812 = "54813",
v54813 = "54814",
v54814 = "54815",
v54815 = "54819",
v54819 = "54820",
v54820 = "54821",
v54821 = "54822",
v54822 = "54823",
v54823 = "54824",
v54824 = "54825",
v54825 = "54826",
v54826 = "54827",
v54827 = "54828",
v54828 = "54829",
v54829 = "54830",
v54830 = "54831",
v54831 = "54832",
v54832 = "54833",
v54833 = "54834",
v54834 = "54835",
v54835 = "54836",
v54836 = "54837",
v54837 = "54838",
v54838 = "54839",
v54839 = "54840",
v54840 = "54841",
v54841 = "54842",
v54842 = "54843",
v54843 = "54844",
v54844 = "54845",
v54845 = "54847",
v54847 = "54848",
v54848 = "54849",
v54849 = "54850",
v54850 = "54851",
v54851 = "54852",
v54852 = "54853",
v54853 = "54854",
v54854 = "54855",
v54855 = "54857",
v54857 = "54858",
v54858 = "54859",
v54859 = "54860",
v54860 = "54861",
v54861 = "54862",
v54862 = "54863",
v54863 = "54864",
v54864 = "54865",
v54865 = "54866",
v54866 = "54867",
v54867 = "54868",
v54868 = "54869",
v54869 = "54870",
v54870 = "54871",
v54871 = "54872",
v54872 = "54873",
v54873 = "54874",
v54874 = "54875",
v54875 = "54876",
v54876 = "54877",
v54877 = "54878",
v54878 = "54879",
v54879 = "54880",
v54880 = "54881",
v54881 = "54902",
v54902 = "54992",
v54992 = "54993",
v54993 = "54994",
v54994 = "54995",
v54995 = "54996",
v54996 = "54997",
v54997 = "54998",
v54998 = "54999",
v54999 = "55000",
v55000 = "55001",
v55001 = "55237",
v55237 = "55238",
v55238 = "55239",
v55239 = "55240",
v55240 = "55241",
v55241 = "54166",

}

elseif snd.which_path == "vortex" then
check = {

--Shattered Vortex
v36079 = "36080",
v36080 = "36081",
v36081 = "36082",
v36082 = "36083",
v36083 = "36084",
v36084 = "36085",
v36085 = "36086",
v36086 = "36087",
v36087 = "36091",
v36091 = "36096",
v36096 = "36093",
v36093 = "36092",
v36092 = "36089",
v36089 = "36088",
v36088 = "36090",
v36090 = "36094",
v36094 = "36095",
v36095 = "36335",
v36335 = "36330",
v36330 = "36326",
v36326 = "36323",
v36323 = "36325",
v36325 = "36324",
v36324 = "36293",
v36293 = "36315",
v36315 = "36329",
v36329 = "36334",
v36334 = "36316",
v36316 = "36328",
v36328 = "36333",
v36333 = "36332",
v36332 = "36331",
v36331 = "36327",
v36327 = "36322",
v36322 = "36321",
v36321 = "36320",
v36320 = "36319",
v36319 = "36318",
v36318 = "36317",
v36317 = "36314",
v36314 = "36313",
v36313 = "36312",
v36312 = "36311",
v36311 = "36310",
v36310 = "36309",
v36309 = "36306",
v36306 = "36298",
v36298 = "36300",
v36300 = "36301",
v36301 = "36308",
v36308 = "36307",
v36307 = "36304",
v36304 = "36305",
v36305 = "36303",
v36303 = "36302",
v36302 = "36299",
v36299 = "36297",
v36297 = "36296",
v36296 = "36103",
v36103 = "36102",
v36102 = "36101",
v36101 = "36100",
v36100 = "36099",
v36099 = "36098",
v36098 = "36104",
v36104 = "36105",
v36105 = "36106",
v36106 = "36107",
v36107 = "36272",
v36272 = "36273",
v36273 = "36278",
v36278 = "36281",
v36281 = "36280",
v36280 = "36279",
v36279 = "36277",
v36277 = "36276",
v36276 = "36282",
v36282 = "36283",
v36283 = "36284",
v36284 = "36285",
v36285 = "36286",
v36286 = "36287",
v36287 = "36288",
v36288 = "36289",
v36289 = "36290",
v36290 = "36291",
v36291 = "36292",
v36292 = "36097",
v36097 = "36294",
v36294 = "36295",
v36295 = "36336",
v36336 = "36347",
v36347 = "36339",
v36339 = "36340",
v36340 = "36346",
v36346 = "36337",
v36337 = "36338",
v36338 = "36345",
v36345 = "36341",
v36341 = "36343",
v36343 = "36344",
v36344 = "36342",
v36342 = "36351",
v36351 = "36350",
v36350 = "36349",
v36349 = "36354",
v36354 = "36357",
v36357 = "36358",
v36358 = "36360",
v36360 = "36361",
v36361 = "36362",
v36362 = "36363",
v36363 = "36364",
v36364 = "36365",
v36365 = "36455",
v36455 = "36456",
v36456 = "36457",
v36457 = "36458",
v36458 = "36459",
v36459 = "36460",
v36460 = "36461",
v36461 = "36359",
v36359 = "36419",
v36419 = "36418",
v36418 = "36417",
v36417 = "36438",
v36438 = "36439",
v36439 = "36440",
v36440 = "36356",
v36356 = "36352",
v36352 = "36355",
v36355 = "36444",
v36444 = "36443",
v36443 = "36442",
v36442 = "36446",
v36446 = "36450",
v36450 = "36451",
v36451 = "36447",
v36447 = "36448",
v36448 = "36452",
v36452 = "36453",
v36453 = "36400",
v36400 = "36353",
v36353 = "36368",
v36368 = "36369",
v36369 = "36462",
v36462 = "36463",
v36463 = "36370",
v36370 = "36371",
v36371 = "36464",
v36464 = "36465",
v36465 = "36372",
v36372 = "36373",
v36373 = "36466",
v36466 = "36467",
v36467 = "36374",
v36374 = "36375",
v36375 = "36468",
v36468 = "36376",
v36376 = "36377",
v36377 = "36378",
v36378 = "36380",
v36380 = "36470",
v36470 = "36469",
v36469 = "36475",
v36475 = "36471",
v36471 = "36381",
v36381 = "36382",
v36382 = "36472",
v36472 = "36476",
v36476 = "36477",
v36477 = "36473",
v36473 = "36383",
v36383 = "36384",
v36384 = "36385",
v36385 = "36386",
v36386 = "36474",
v36474 = "36478",
v36478 = "36387",
v36387 = "36388",
v36388 = "36479",
v36479 = "36480",
v36480 = "36389",
v36389 = "36390",
v36390 = "36481",
v36481 = "36482",
v36482 = "36391",
v36391 = "36392",
v36392 = "36483",
v36483 = "36484",
v36484 = "36393",
v36393 = "36394",
v36394 = "36454",
v36454 = "36449",
v36449 = "36395",
v36395 = "36396",
v36396 = "36445",
v36445 = "36441",
v36441 = "36397",
v36397 = "36398",
v36398 = "36437",
v36437 = "36416",
v36416 = "36399",
v36399 = "36420",
v36420 = "36421",
v36421 = "36422",
v36422 = "36423",
v36423 = "36424",
v36424 = "36425",
v36425 = "36426",
v36426 = "36427",
v36427 = "36433",
v36433 = "36434",
v36434 = "36435",
v36435 = "36436",
v36436 = "36366",
v36366 = "36367",
v36367 = "36379",
v36379 = "36401",
v36401 = "36432",
v36432 = "36431",
v36431 = "36402",
v36402 = "36403",
v36403 = "36430",
v36430 = "36429",
v36429 = "36404",
v36404 = "36405",
v36405 = "36428",
v36428 = "36406",
v36406 = "36407",
v36407 = "36408",
v36408 = "36409",
v36409 = "36410",
v36410 = "36411",
v36411 = "36412",
v36412 = "36413",
v36413 = "36414",
v36414 = "36415",
v36415 = "36508",
v36508 = "36509",
v36509 = "36510",
v36510 = "36511",
v36511 = "36512",
v36512 = "36513",
v36513 = "36514",
v36514 = "36518",
v36518 = "36522",
v36522 = "36523",
v36523 = "36519",
v36519 = "36515",
v36515 = "36516",
v36516 = "36520",
v36520 = "36524",
v36524 = "36525",
v36525 = "36521",
v36521 = "36517",
v36517 = "36526",
v36526 = "36527",
v36527 = "36528",
v36528 = "36529",
v36529 = "36533",
v36533 = "36532",
v36532 = "36530",
v36530 = "36531",
v36531 = "36534",
v36534 = "36535",
v36535 = "36536",
v36536 = "36541",
v36541 = "36537",
v36537 = "36538",
v36538 = "36539",
v36539 = "36540",
v36540 = "36079",

}

elseif snd.which_path == "lair" then
check = {
--Luzith's Lair
v16282 = "16284",
v16284 = "16286",
v16286 = "16285",
v16285 = "16290",
v16290 = "16292",
v16292 = "16311",
v16311 = "16291",
v16291 = "16293",
v16293 = "16287",
v16287 = "16288",
v16288 = "16283",
v16283 = "16289",
v16289 = "16294",
v16294 = "16296",
v16296 = "16295",
v16295 = "16297",
v16297 = "16298",
v16298 = "16300",
v16300 = "16301",
v16301 = "16303",
v16303 = "16305",
v16305 = "16310",
v16310 = "16306",
v16306 = "16307",
v16307 = "16299",
v16299 = "16302",
v16302 = "16304",
v16304 = "16308",
v16308 = "16309",
v16309 = "16359",
v16359 = "16358",
v16358 = "16334",
v16334 = "16333",
v16333 = "16335",
v16336 = "16360",
v16360 = "16335",
v16335 = "16366",
v16366 = "16340",
v16340 = "16362",
v16362 = "16337",
v16337 = "16338",
v16338 = "16339",
v16339 = "16357",
v16357 = "16341",
v16341 = "16342",
v16342 = "16343",
v16343 = "16361",
v16361 = "16344",
v16344 = "16367",
v16367 = "16345",
v16345 = "16346",
v16346 = "16350",
v16350 = "16351",
v16351 = "16347",
v16347 = "16370",
v16370 = "16352",
v16352 = "16372",
v16372 = "16356",
v16356 = "16348",
v16348 = "16353",
v16353 = "16368",
v16368 = "16354",
v16354 = "16371",
v16371 = "16355",
v16355 = "16349",
v16349 = "16369",
v16369 = "16363",
v16363 = "16364",
v16364 = "16365",
v16365 = "16373",
v16373 = "16374",
v16374 = "16375",
v16375 = "16383",
v16383 = "16374",
v16374 = "16375",
v16375 = "16376",
v16376 = "16377",
v16377 = "16379",
v16379 = "16378",
v16378 = "16380",
v16380 = "16381",
v16381 = "16382",
v16382 = "16402",
v16402 = "16386",
v16386 = "16387",
v16387 = "16394",
v16394 = "16388",
v16388 = "16389",
v16389 = "16403",
v16403 = "16404",
v16404 = "16405",
v16405 = "16406",
v16406 = "16390",
v16390 = "16400",
v16400 = "16401",
v16401 = "16391",
v16391 = "16392",
v16392 = "16393",
v16393 = "16395",
v16395 = "16396",
v16396 = "16397",
v16397 = "16398",
v16398 = "16399",
v16399 = "16407",
v16407 = "16408",
v16408 = "16409",
v16409 = "16410",
v16410 = "16411",
v16411 = "16412",
v16412 = "city",

}

elseif snd.which_path == "endgame" then
check = {

--Bastion of Illdon
v4964 = "24410",
v24410 = "24411",
v24411 = "24412",
v24412 = "24413",
v24413 = "24414",
v24414 = "24415",
v24415 = "24416",
v24416 = "24417",
v24417 = "24418",
v24418 = "24424",
v24424 = "24426",
v24426 = "24425",
v24425 = "24419",
v24419 = "24420",
v24420 = "24421",
v24421 = "24422",
v24422 = "24423",
v24423 = "24531",
v24531 = "24532",
v24532 = "24533",
v24533 = "24534",
v24534 = "24535",
v24535 = "24536",
v24536 = "24538",
v24538 = "24539",
v24539 = "24542",
v24542 = "24543",
v24543 = "24544",
v24544 = "24545",
v24545 = "24537",
v24537 = "24926",
v24926 = "24927",
v24927 = "24928",
v24928 = "24613",
v24613 = "24600",
v24600 = "24614",
v24614 = "24599",
v24599 = "24598",
v24598 = "24547",
v24547 = "24546",
v24546 = "24612",
v24612 = "24615",
v24615 = "24619",
v24619 = "24617",
v24617 = "24623",
v24623 = "24622",
v24622 = "24621",
v24621 = "24624",
v24624 = "24625",
v24625 = "24884",
v24884 = "24886",
v24886 = "24885",
v24885 = "24892",
v24892 = "24891",
v24891 = "24893",
v24893 = "24894",
v24894 = "24895",
v24895 = "24896",
v24896 = "24897",
v24897 = "24898",
v24898 = "24899",
v24899 = "24906",
v24906 = "24911",
v24911 = "24912",
v24912 = "24913",
v24913 = "24915",
v24915 = "24916",
v24916 = "24917",
v24917 = "24918",
v24918 = "24920",
v24920 = "24919",
v24919 = "24921",
v24921 = "24908",
v24908 = "24910",
v24910 = "24909",
v24909 = "24907",
v24907 = "24626",
v24626 = "24882",
v24882 = "24887",
v24887 = "24883",
v24883 = "24890",
v24890 = "24888",
v24888 = "24889",
v24889 = "24900",
v24900 = "24901",
v24901 = "24902",
v24902 = "24903",
v24903 = "24904",
v24904 = "24905",
v24905 = "36271",

--Spiral of the Corrupt
v36271 = "36596",
v36596 = "36622",
v36622 = "36624",
v36624 = "36625",
v36625 = "36634",
v36634 = "36639",
v36639 = "36648",
v36648 = "36598",
v36598 = "36599",
v36599 = "36600",
v36600 = "36601",
v36601 = "36602",
v36602 = "36603",
v36603 = "36604",
v36604 = "36605",
v36605 = "36606",
v36606 = "36607",
v36607 = "36608",
v36608 = "36609",
v36609 = "36610",
v36610 = "36611",
v36611 = "36612",
v36612 = "36613",
v36613 = "36614",
v36614 = "36615",
v36615 = "36616",
v36616 = "36617",
v36617 = "36618",
v36618 = "36619",
v36619 = "36620",
v36620 = "36621",
v36621 = "36623",
v36623 = "36626",
v36626 = "36627",
v36627 = "36628",
v36628 = "36629",
v36629 = "36630",
v36630 = "36631",
v36631 = "36632",
v36632 = "36633",
v36633 = "36635",
v36635 = "36636",
v36636 = "36637",
v36637 = "36638",
v36638 = "36640",
v36640 = "36641",
v36641 = "36642",
v36642 = "36643",
v36643 = "36644",
v36644 = "36645",
v36645 = "36647",
v36647 = "36649",
v36649 = "36650",
v36650 = "36646",
v36646 = "38894",

--Upper Tiyen
v38894 = "38896",
v38896 = "38897",
v38897 = "38898",
v38898 = "38899",
v38899 = "38900",
v38900 = "38901",
v38901 = "38902",
v38902 = "38903",
v38903 = "38904",
v38904 = "38905",
v38905 = "38906",
v38906 = "38907",
v38907 = "38908",
v38908 = "38909",
v38909 = "38915",
v38915 = "38912",
v38912 = "38911",
v38911 = "38910",
v38910 = "38913",
v38913 = "38914",
v38914 = "38916",
v38916 = "38918",
v38918 = "38926",
v38926 = "38921",
v38921 = "38927",
v38927 = "38922",
v38922 = "38928",
v38928 = "38930",
v38930 = "38936",
v38936 = "38935",
v38935 = "38937",
v38937 = "38944",
v38944 = "38943",
v38943 = "38941",
v38941 = "38946",
v38946 = "38945",
v38945 = "38958",
v38958 = "38948",
v38948 = "38947",
v38947 = "38950",
v38950 = "38949",
v38949 = "38951",
v38951 = "38954",
v38954 = "38952",
v38952 = "38956",
v38956 = "38957",
v38957 = "38959",
v38959 = "38960",
v38960 = "38961",
v38961 = "38962",
v38962 = "38963",
v38963 = "38964",
v38964 = "38994",
v38994 = "38966",
v38966 = "38965",
v38965 = "38993",
v38993 = "38967",
v38967 = "38999",
v38999 = "39000",
v39000 = "39001",
v39001 = "38995",
v38995 = "38996",
v38996 = "38997",
v38997 = "38998",
v38998 = "39002",
v39002 = "39004",
v39004 = "39003",
v39003 = "39005",
v39005 = "39007",
v39007 = "39006",
v39006 = "39008",
v39008 = "39010",
v39010 = "39009",
v39009 = "39011",
v39011 = "39014",
v39014 = "39015",
v39015 = "39016",
v39016 = "39017",
v39017 = "39019",
v39019 = "39020",
v39020 = "38919",
v38919 = "38917",
v38917 = "38920",
v38920 = "38924",
v38924 = "38925",
v38925 = "38923",
v38923 = "39021",
v39021 = "39022",
v39022 = "39023",
v39023 = "39024",
v39024 = "39025",
v39025 = "38888",
v38888 = "38892",
v38892 = "38893",
v38893 = "39037",
v39037 = "39039",
v39039 = "39043",
v39043 = "39041",
v39041 = "39042",
v39042 = "39044",
v39044 = "39040",
v39040 = "39038",
v39038 = "39026",
v39026 = "39027",
v39027 = "38826",
v38826 = "38827",
v38827 = "38828",
v38828 = "38829",
v38829 = "38835",
v38835 = "38830",
v38830 = "39031",
v39031 = "39033",
v39033 = "39034",
v39034 = "38833",
v38833 = "39029",
v39029 = "39030",
v39030 = "38817",
v38817 = "38818",
v38818 = "38819",
v38819 = "38820",
v38820 = "38832",
v38832 = "38821",
v38821 = "38822",
v38822 = "38823",
v38823 = "38824",
v38824 = "38825",
v38825 = "38836",
v38836 = "38837",
v38837 = "38838",
v38838 = "38840",
v38840 = "38839",
v38839 = "38867",
v38867 = "38870",
v38870 = "38873",
v38873 = "38877",
v38877 = "38841",
v38841 = "38842",
v38842 = "38843",
v38843 = "38844",
v38844 = "38847",
v38847 = "38849",
v38849 = "38851",
v38851 = "38855",
v38855 = "38857",
v38857 = "38861",
v38861 = "38863",
v38863 = "38864",
v38864 = "38866",
v38866 = "38868",
v38868 = "38871",
v38871 = "38879",
v38879 = "38880",
v38880 = "38886",
v38886 = "38887",
v38887 = "38845",
v38845 = "38846",
v38846 = "38848",
v38848 = "38850",
v38850 = "38852",
v38852 = "38856",
v38856 = "38858",
v38858 = "38862",
v38862 = "38865",
v38865 = "39045",
v39045 = "39065",
v39065 = "39064",
v39064 = "39063",
v39063 = "39062",
v39062 = "39048",
v39048 = "39047",
v39047 = "39046",
v39046 = "39066",
v39066 = "39067",
v39067 = "39068",
v39068 = "39069",
v39069 = "39070",

--Lower Tiyen
v39070 = "39071",
v39071 = "39072",
v39072 = "39073",
v39073 = "39076",
v39076 = "39075",
v39075 = "39074",
v39074 = "39077",
v39077 = "39078",
v39078 = "39079",
v39079 = "39080",
v39080 = "39101",
v39101 = "39081",
v39081 = "39098",
v39098 = "39096",
v39096 = "39083",
v39083 = "39082",
v39082 = "39084",
v39084 = "39085",
v39085 = "39097",
v39097 = "39099",
v39099 = "39102",
v39102 = "39929",
v39929 = "39931",
v39931 = "39934",
v39934 = "39935",
v39935 = "39938",
v39938 = "39937",
v39937 = "39936",
v39936 = "39932",
v39932 = "39933",
v39933 = "39930",
v39930 = "39928",
v39928 = "39100",
v39100 = "39927",
v39927 = "39967",
v39967 = "39969",
v39969 = "39971",
v39971 = "39975",
v39975 = "39979",
v39979 = "39982",
v39982 = "39985",
v39985 = "39989",
v39989 = "39991",
v39991 = "39990",
v39990 = "39988",
v39988 = "39984",
v39984 = "39981",
v39981 = "39978",
v39978 = "39974",
v39974 = "39970",
v39970 = "39968",
v39968 = "39973",
v39973 = "39977",
v39977 = "39980",
v39980 = "39983",
v39983 = "39987",
v39987 = "39986",
v39986 = "39976",
v39976 = "39972",
v39972 = "39940",
v39940 = "39939",
v39939 = "39942",
v39942 = "39941",
v39941 = "39943",
v39943 = "39951",
v39951 = "39949",
v39949 = "39947",
v39947 = "39945",
v39945 = "39944",
v39944 = "39946",
v39946 = "39948",
v39948 = "39950",
v39950 = "39953",
v39953 = "39956",
v39956 = "39958",
v39958 = "39955",
v39955 = "39952",
v39952 = "39954",
v39954 = "39957",
v39957 = "39959",
v39959 = "39962",
v39962 = "39960",
v39960 = "15409",

--arbothia
v15409 = "15410",
v15410 = "15427",
v15427 = "28115",
v28115 = "15410",
v15410 = "15412",
v15412 = "15422",
v15422 = "15412",
v15412 = "15417",
v15417 = "15420",
v15420 = "15421",
v15421 = "15429",
v15429 = "15430",
v15430 = "15428",
v15428 = "15419",
v15419 = "27100",
v27100 = "27101",
v27101 = "27102",
v27102 = "27111",
v27111 = "27110",
v27110 = "15415",
v15415 = "15416",
v15416 = "27119",
v27119 = "27115",
v27115 = "27114",
v27114 = "27113",
v27113 = "27103",
v27103 = "27116",
v27116 = "27120",
v27120 = "27121",
v27121 = "27122",
v27122 = "27123",
v27123 = "27112",
v27112 = "27117",
v27117 = "27118",
v27118 = "27106",
v27106 = "27105",
v27105 = "15411",
v15411 = "27105",
v27105 = "27104",
v27104 = "15418",
v15418 = "27107",
v27107 = "27109",
v27109 = "27107",
v27107 = "27108",
v27108 = "27107",
v27107 = "15418",
v15418 = "27104",
v27104 = "15413",
v15413 = "36677",

--Upper Xaanhal
v36677 = "36678",
v36678 = "36679",
v36679 = "36680",
v36680 = "36681",
v36681 = "36682",
v36682 = "36683",
v36683 = "36684",
v36684 = "36685",
v36685 = "36686",
v36686 = "36687",
v36687 = "36689",
v36689 = "36690",
v36690 = "36691",
v36691 = "36692",
v36692 = "36693",
v36693 = "36694",
v36694 = "36695",
v36695 = "36696",
v36696 = "36697",
v36697 = "36698",
v36698 = "36699",
v36699 = "36700",
v36700 = "36701",
v36701 = "36703",
v36703 = "36702",
v36702 = "36704",
v36704 = "36707",
v36707 = "36706",
v36706 = "36705",
v36705 = "36708",
v36708 = "36709",
v36708 = "36688",
v36688 = "38090",

--Nal'jin Depths
v38090 = "38091",
v38091 = "38092",
v38092 = "38093",
v38093 = "38096",
v38096 = "38095",
v38095 = "38094",
v38094 = "38097",
v38097 = "38099",
v38099 = "38110",
v38110 = "38111",
v38111 = "38107",
v38107 = "38104",
v38104 = "38103",
v38103 = "38100",
v38100 = "38102",
v38102 = "38101",
v38101 = "38105",
v38105 = "38108",
v38108 = "38109",
v38109 = "38112",
v38112 = "38106",
v38106 = "38131",
v38131 = "38124",
v38124 = "38117",
v38117 = "38113",
v38113 = "38116",
v38116 = "38123",
v38123 = "38122",
v38122 = "38115",
v38115 = "38114",
v38114 = "38121",
v38121 = "38129",
v38129 = "38128",
v38128 = "38130",
v38130 = "38135",
v38135 = "38142",
v38142 = "38143",
v38143 = "38136",
v38136 = "38137",
v38137 = "38144",
v38144 = "38149",
v38149 = "38145",
v38145 = "38138",
v38138 = "38139",
v38139 = "38146",
v38146 = "38147",
v38147 = "38140",
v38140 = "38141",
v38141 = "38133",
v38133 = "38134",
v38134 = "38132",
v38132 = "38127",
v38127 = "38120",
v38120 = "38119",
v38119 = "38126",
v38126 = "38125",
v38125 = "38118",
v38118 = "38164",
v38164 = "38158",
v38158 = "38154",
v38154 = "38151",
v38151 = "38155",
v38155 = "38159",
v38159 = "38166",
v38166 = "38173",
v38173 = "38180",
v38180 = "38184",
v38184 = "38188",
v38188 = "38190",
v38190 = "38187",
v38187 = "38183",
v38183 = "38179",
v38179 = "38172",
v38172 = "38165",
v38165 = "38171",
v38171 = "38178",
v38178 = "38177",
v38177 = "38170",
v38170 = "38163",
v38163 = "38162",
v38162 = "38169",
v38169 = "38176",
v38176 = "38182",
v38182 = "38175",
v38175 = "38168",
v38168 = "38161",
v38161 = "38157",
v38157 = "38153",
v38153 = "38150",
v38150 = "38152",
v38152 = "38156",
v38156 = "38160",
v38160 = "38167",
v38167 = "38174",
v38174 = "38181",
v38181 = "38185",
v38185 = "38189",
v38189 = "38186",
v38186 = "56107",

--Forgotten Dome
v56107 = "56108",
v56108 = "56110",
v56110 = "56197",
v56197 = "56217",
v56217 = "56218",
v56218 = "56219",
v56219 = "56220",
v56220 = "56196",
v56196 = "56213",
v56213 = "56214",
v56214 = "56215",
v56215 = "56216",
v56216 = "56192",
v56192 = "56193",
v56193 = "56194",
v56194 = "56195",
v56195 = "56205",
v56205 = "56206",
v56206 = "56207",
v56207 = "56208",
v56208 = "56209",
v56209 = "56210",
v56210 = "56211",
v56211 = "56212",
v56212 = "56191",
v56191 = "56201",
v56201 = "56202",
v56202 = "56203",
v56203 = "56204",
v56204 = "56190",
v56190 = "56200",
v56200 = "56199",
v56199 = "56198",
v56198 = "56109",
v56109 = "56186",
v56186 = "56187",
v56187 = "56188",
v56188 = "56189",
v56189 = "56221",
v56221 = "56104",
v56104 = "56103",
v56103 = "56102",
v56102 = "56101",
v56101 = "56100",
v56100 = "56106",
v56106 = "56105",
v56105 = "56099",
v56099 = "56098",
v56098 = "56097",
v56097 = "56091",
v56091 = "56093",
v56093 = "56094",
v56094 = "56083",
v56083 = "56084",
v56084 = "56085",
v56085 = "56075",
v56075 = "56076",
v56076 = "56077",
v56077 = "56080",
v56080 = "56082",
v56082 = "56081",
v56081 = "56079",
v56079 = "56078",
v56078 = "55015",
v55015 = "55188",
v55188 = "56071",
v56071 = "56072",
v56072 = "56073",
v56073 = "56074",
v56074 = "56086",
v56086 = "56087",
v56087 = "56088",
v56088 = "56092",
v56092 = "56095",
v56095 = "56096",
v56096 = "55711",
v55711 = "56247",
v56247 = "55708",
v55708 = "55709",
v55709 = "55706",
v55706 = "55707",
v55707 = "56245",
v56245 = "56239",
v56239 = "56238",
v56238 = "56243",
v56243 = "56244",
v56244 = "56241",
v56241 = "56242",
v56242 = "56227",
v56227 = "56230",
v56230 = "56231",
v56231 = "56228",
v56228 = "56229",
v56229 = "56224",
v56224 = "56226",
v56226 = "56240",
v56240 = "55712",
v55712 = "56246",
v56246 = "56232",
v56232 = "56233",
v56233 = "56236",
v56236 = "56237",
v56237 = "56234",
v56234 = "56235",
v56235 = "56225",
v56225 = "56223",
v56223 = "56222",
v56222 = "57392",
v55183 = "57392",

--Dovan Hollow
v57392 = "49286",
v49286 = "48747",
v48747 = "49287",
v49287 = "49288",
v49288 = "49289",
v49289 = "49291",
v49291 = "49292",
v49292 = "49293",
v49293 = "49294",
v49294 = "48767",
v48767 = "49295",
v49295 = "49296",
v49296 = "48746",
v48746 = "48745",
v48745 = "48744",
v48744 = "48743",
v48743 = "48742",
v48742 = "49297",
v49297 = "49298",
v49298 = "49300",
v49300 = "49299",
v49299 = "49301",
v49301 = "45757",
v45757 = "48405",
v48405 = "49307",
v49307 = "49306",
v49306 = "49309",
v49309 = "49310",
v49310 = "49311",
v49311 = "49324",
v49324 = "49325",
v49325 = "49326",
v49326 = "49327",
v49327 = "49328",
v49328 = "49329",
v49329 = "49330",
v49330 = "48763",
v48763 = "49331",
v49331 = "49332",
v49332 = "49333",
v49333 = "49334",
v49334 = "49335",
v49335 = "44515",
v44515 = "48748",
v48748 = "48749",
v48749 = "48750",
v48750 = "48751",
v48751 = "48752",
v48752 = "48753",
v48753 = "48754",
v48754 = "48755",
v48755 = "48761",
v48761 = "48762",
v48762 = "49305",
v49305 = "49308",
v49308 = "48768",
v48768 = "49303",
v49303 = "49304",
v49304 = "48766",
v48766 = "49302",
v49302 = "49290",
v49290 = "49314",
v49314 = "49313",
v49313 = "49312",
v49312 = "49315",
v49315 = "49316",
v49316 = "49317",
v49317 = "48740",
v48740 = "48741",
v48741 = "49318",
v49318 = "49319",
v49319 = "49320",
v49320 = "49321",
v49321 = "49323",
v49323 = "49322",
v49322 = "58207",

-- Dramedo

v58207 = "58208",
v58208 = "58209",
v58209 = "58210",
v58210 = "58211",
v58211 = "58212",
v58212 = "58213",
v58213 = "58215",
v58215 = "58214",
v58214 = "58236",
v58236 = "58237",
v58237 = "58240",
v58240 = "58241",
v58241 = "58238",
v58238 = "58246",
v58246 = "58239",
v58239 = "58242",
v58242 = "58216",
v58216 = "58217",
v58217 = "58218",
v58218 = "58211",
v58211 = "58243",
v58243 = "58244",
v58244 = "58245",
v58245 = "58247",
v58247 = "58248",
v58248 = "58249",
v58249 = "58250",
v58250 = "58252",
v58252 = "58253",
v58253 = "58254",
v58254 = "58255",
v58255 = "58256",
v58256 = "58257",
v58257 = "58262",
v58262 = "58261",
v58261 = "58260",
v58260 = "58259",
v58259 = "58253",
v58253 = "58251",
v58251 = "58258",
v58258 = "58264",
v58264 = "58266",
v58266 = "58267",
v58267 = "58268",
v58268 = "58269",
v58269 = "58270",
v58270 = "58272",
v58272 = "58273",
v58273 = "58274",
v58274 = "58270",
v58270 = "58271",
v58271 = "58275",
v58275 = "58276",
v58276 = "58277",
v58277 = "58278",
v58278 = "58279",
v58279 = "58271",
v58271 = "58280",
v58280 = "58281",
v58281 = "58282",
v58282 = "58283",
v58283 = "58284",
v58284 = "58285",
v58285 = "58289",
v58289 = "58288",
v58288 = "58286",
v58286 = "58287",
v58287 = "58290",
v58290 = "58291",
v58291 = "58292",
v58292 = "58293",
v58293 = "58294",
v58294 = "58295",
v58295 = "58296",
v58296 = "58297",
v58297 = "58305",
v58305 = "5517",

-- Ia'shal

v5517 = "8670",
v8670 = "6841",
v6841 = "6843",
v6843 = "7670",
v7670 = "6867",
v6867 = "4410",
v4410 = "6716",
v6716 = "6816",
v6816 = "8671",
v8671 = "8673",
v8673 = "8672",
v8672 = "8675",
v8675 = "8674",
v8674 = "8671",
v8671 = "4410",
v4410 = "5519",
v5519 = "5521",
v5521 = "5520",
v5520 = "8680",
v8680 = "5513",
v5513 = "8684",
v8684 = "8683",
v8683 = "6818",
v6818 = "8760",
v8760 = "8765",
v8765 = "8680",
v8680 = "8677",
v8677 = "8679",
v8679 = "8682",
v8682 = "8681",
v8681 = "8678",
v8678 = "8676",
v8676 = "49031",
v49031 = "49032",
v49032 = "49033",
v49033 = "49034",
v49034 = "49035",
v49035 = "49037",
v49037 = "49036",
v49036 = "49038",
v49038 = "48869",
v48869 = "48871",
v48871 = "48870",
v48870 = "48871",
v48871 = "8685",
v8685 = "5514",
v5514 = "6826",
v6826 = "57086",

--forgotten depths of Mount Helba
v57086 = "57087",
v57087 = "57088",
v57088 = "57089",
v57089 = "57090",
v57090 = "57091",
v57091 = "57092",
v57092 = "57093",
v57093 = "57094",
v57094 = "57095",
v57095 = "57096",
v57096 = "57097",
v57097 = "57098",
v57098 = "57099",
v57099 = "57100",
v57100 = "57101",
v57101 = "57102",
v57102 = "57103",
v57103 = "57105",
v57105 = "57104",
v57104 = "57106",
v57106 = "57107",
v57107 = "57108",
v57108 = "57109",
v57109 = "57110",
v57110 = "57111",
v57111 = "57112",
v57112 = "57113",
v57113 = "57114",
v57114 = "57115",
v57115 = "57116",
v57116 = "57117",
v57117 = "57118",
v57118 = "57119",

--basilisk lair
v57119 = "68354",
v68354 = "69128",
v69128 = "69129",
v69129 = "69130",
v69130 = "69131",
v69131 = "69132",
v69132 = "69133",
v69133 = "68784",
v68784 = "68785",
v68785 = "68786",
v68786 = "68787",
v68787 = "68783",
v68783 = "68564",
v68564 = "68606",
v68606 = "68597",
v68597 = "68598",
v68598 = "68617",
v68617 = "68615",
v68615 = "68604",
v68604 = "68607",
v68607 = "68608",
v68608 = "68611",
v68611 = "68613",
v68613 = "68609",
v68609 = "68610",
v68610 = "68612",
v68612 = "68614",
v68614 = "68616",
v68616 = "68618",
v68618 = "68619",
v68619 = "68620",
v68620 = "68622",
v68622 = "68623",
v68623 = "68624",
v68624 = "68625",
v68625 = "68626",
v68626 = "68627",
v68627 = "68621",
v68621 = "68628",
v68628 = "68629",
v68629 = "68705",
v68705 = "68706",
v68706 = "68708",
v68708 = "68712",
v68712 = "68713",
v68713 = "68714",
v68714 = "68710",
v68710 = "68709",
v68709 = "68715",
v68715 = "61011",

--bakal chasm
v68715 = "61011",
v61011 = "61063",
v61063 = "61064",
v61064 = "61065",
v61065 = "61066",
v61066 = "61067",
v61067 = "61069",
v61069 = "61117",
v61117 = "61116",
v61116 = "61117",
v61117 = "61069",
v61069 = "61073",
v61073 = "61115",
v61115 = "61118",
v61118 = "61115",
v61115 = "61114",
v61114 = "61113",
v61113 = "61121",
v61121 = "61122",
v61122 = "61121",
v61121 = "61113",
v61113 = "61112",
v61112 = "61080",
v61080 = "61079",
v61079 = "61119",
v61119 = "61079",
v61079 = "61120",
v61120 = "61135",
v61135 = "61136",
v61136 = "61135",
v61135 = "61120",
v61120 = "61079",
v61079 = "61078",
v61078 = "61131",
v61131 = "61078",
v61078 = "61077",
v61077 = "61076",
v61076 = "61128",
v61128 = "61076",
v61076 = "61075",
v61075 = "61074",
v61074 = "61075",
v61075 = "61076",
v61076 = "61128",
v61128 = "61076",
v61076 = "61077",
v61077 = "61078",
v61078 = "61131",
v61131 = "61078",
v61078 = "61079",
v61079 = "61120",
v61120 = "61135",
v61135 = "61136",
v61136 = "61135",
v61135 = "61120",
v61120 = "61079",
v61079 = "61119",
v61119 = "61079",
v61079 = "61080",
v61080 = "61112",
v61112 = "61113",
v61113 = "61121",
v61121 = "61122",
v61122 = "61121",
v61121 = "61113",
v61113 = "61114",
v61114 = "61115",
v61115 = "61118",
v61118 = "61115",
v61115 = "61073",
v61073 = "61069",
v61069 = "61117",
v61117 = "61116",
v61116 = "61117",
v61117 = "61069",
v61069 = "61067",
v61067 = "61066",
v61066 = "61065",
v61065 = "61064",
v61064 = "61063",
v61063 = "61011",
v61011 = "61013",
v61013 = "61014",
v61014 = "61024",
v61024 = "61025",
v61025 = "61024",
v61024 = "61026",
v61026 = "61027",
v61027 = "61037",
v61037 = "61027",
v61027 = "61040",
v61040 = "61027",
v61027 = "61062",
v61062 = "61061",
v61061 = "61060",
v61060 = "61059",
v61059 = "61058",
v61058 = "61057",
v61057 = "61056",
v61056 = "61055",
v61055 = "61047",
v61047 = "61048",
v61048 = "61049",
v61049 = "61048",
v61048 = "61051",
v61051 = "61048",
v61048 = "61052",
v61052 = "61048",
v61048 = "61047",
v61047 = "61045",
v61045 = "61040",
v61040 = "61041",
v61041 = "61043",
v61043 = "61044",
v61044 = "61057",
v61057 = "50236",

-- the maul
v50236 = "50237",
v50237 = "50238",
v50238 = "50239",
v50239 = "50240",
v50240 = "50246",
v50246 = "50243",
v50243 = "50242",
v50242 = "50241",
v50241 = "50247",
v50247 = "50248",
v50248 = "50249",
v50249 = "50250",
v50250 = "50251",
v50251 = "50252",
v50252 = "50253",
v50253 = "50254",
v50254 = "50255",
v50255 = "50256",
v50256 = "50257",
v50257 = "57980",
v57980 = "50260",
v50260 = "50259",
v50259 = "50258",
v50258 = "50261",
v50261 = "50262",
v50262 = "50260",
v50260 = "50263",
v50263 = "57979",
v57979 = "50268",
v50268 = "50265",
v50265 = "50264",
v50264 = "50266",
v50266 = "50267",
v50267 = "50268",
v50268 = "50269",
v50269 = "50270",
v50270 = "50271",
v50271 = "50272",
v50272 = "50273",
v50273 = "50274",
v50274 = "57978",
v57978 = "50277",
v50277 = "57977",
v57977 = "50276",
v50276 = "50275",
v50275 = "50271",
v50271 = "city",


}

elseif snd.which_path == "high" then
check = {

--Aurer Haven (we are evil after all)
v19321 = "19443",
v19443 = "19444",
v19444 = "19445",
v19445 = "19446",
v19446 = "19447",
v19447 = "19448",
v19448 = "19449",
v19449 = "19450",
v19450 = "19451",
v19451 = "19452",
v19452 = "19453",
v19453 = "19454",
v19454 = "19455",
v19455 = "19456",
v19456 = "19504",
v19504 = "19505",
v19505 = "19457",
v19457 = "19458",
v19458 = "19459",
v19459 = "19460",
v19460 = "19461",
v19461 = "19462",
v19462 = "19463",
v19463 = "19464",
v19464 = "19465",
v19465 = "19466",
v19466 = "19467",
v19467 = "19468",
v19468 = "19469",
v19469 = "19470",
v19470 = "19471",
v19471 = "19472",
v19472 = "19473",
v19473 = "19474",
v19474 = "19476",
v19476 = "19477",
v19477 = "19478",
v19478 = "19479",
v19479 = "19481",
v19481 = "19475",
v19475 = "19480",
v19480 = "19482",
v19482 = "19483",
v19483 = "19484",
v19484 = "19485",
v19485 = "19486",
v19486 = "19489",
v19489 = "19490",
v19490 = "19491",
v19491 = "19492",
v19492 = "19488",
v19488 = "19487",  
v19487 = "19493",
v19493 = "19494",
v19494 = "19495",
v19495 = "19496",
v19496 = "19497",
v19497 = "19498",
v19498 = "19499",
v19499 = "19500",
v19500 = "19501",
v19501 = "19502",
v19502 = "15344",

-- Eresh
v15344 = "15346",
v15346 = "15347",
v15347 = "15350",
v15350 = "15349",
v15349 = "15351",
v15351 = "15352",
v15352 = "15354",
v15354 = "15353",
v15353 = "15355",
v15355 = "15356",
v15356 = "15367",
v15367 = "15368",
v15368 = "15348",
v15348 = "15369",
v15369 = "15370",
v15370 = "15372",
v15372 = "15373",
v15373 = "15371",
v15371 = "15374",
v15374 = "15390",
v15390 = "15375",
v15375 = "15376",
v15376 = "15377",
v15377 = "15391",
v15391 = "15392",
v15392 = "15393",
v15393 = "15394",
v15394 = "15404",
v15404 = "15405",
v15405 = "15395",
v15395 = "15396",
v15396 = "19344",

--Caverns of Mor
v19344 = "19346",
v19346 = "19351",
v19351 = "19352",
v19352 = "19353",
v19353 = "19354",
v19354 = "19355",
v19355 = "19356",
v19356 = "19357",
v19357 = "19358",
v19358 = "19360",
v19360 = "19359",
v19359 = "19361",
v19361 = "19362",
v19362 = "19363",
v19363 = "19364",
v19364 = "19365",
v19365 = "19417",
v19417 = "19416",
v19416 = "19415",
v19415 = "19413",
v19413 = "19414",
v19414 = "19418",
v19418 = "19419",
v19419 = "19424",
v19424 = "19425",
v19425 = "19426",
v19426 = "19427",
v19427 = "19420",
v19420 = "19421",
v19421 = "19423",
v19423 = "19429",
v19429 = "19430",
v19430 = "19431",
v19431 = "19432",
v19432 = "19433",
v19433 = "19434",
v19434 = "19435",
v19435 = "19436",
v19436 = "19437",
v19437 = "19438",
v19438 = "19439",
v19439 = "19440",
v19440 = "19441",
v19441 = "19442",
v19442 = "19506",
v19506 = "19507",
v19507 = "19508",
v19508 = "19509",
v19509 = "19510",  -- need to add "open door sw" in the gmpc_room for here, just in case it's closed
v19510 = "19511",  -- need to add "open door nw" in the gmpc_room for here, just in case it's closed
v19511 = "19512",
v19512 = "19514",
v19514 = "19513",
v19513 = "19515",
v19515 = "19516",
v19516 = "19517",
v19517 = "19518",
v19518 = "19519",
v19519 = "62102",

--Saliltul Swamp

v62102 = "59254",
v59254 = "59257",
v59257 = "61882",
v61882 = "61883",
v61883 = "61884",
v61884 = "61885",
v61885 = "61886",
v61886 = "61878",
v61878 = "61879",
v61879 = "61880",
v61880 = "61881",
v61881 = "61877",
v61877 = "61848",
v61848 = "59256",
v59256 = "61901",
v61901 = "61902",
v61902 = "61903",
v61903 = "61904",
v61904 = "61905",
v61905 = "61906",
v61906 = "61924",
v61924 = "61925",
v61925 = "61927",
v61927 = "62097",
v62097 = "62548",
v62548 = "61900",
v61900 = "61899",
v61899 = "59255",
v59255 = "61887",
v61887 = "61890",
v61890 = "61891",
v61891 = "61892",
v61892 = "61893",
v61893 = "61894",
v61894 = "60845",

--Sparklight
v60845 = "60846",
v60846 = "60847",
v60847 = "60848",
v60848 = "60844",
v60844 = "60855",
v60855 = "60854",
v60854 = "60849",
v60849 = "60851",
v60851 = "60850",
v60850 = "60853",
v60853 = "60852",
v60852 = "60856",
v60856 = "60857",
v60857 = "60858",
v60858 = "60909",
v60909 = "60910",
v60910 = "60911",
v60911 = "60912",
v60912 = "60913",
v60913 = "60914",
v60914 = "60859",
v60859 = "60860",
v60860 = "60904",
v60904 = "60905",
v60905 = "60906",
v60906 = "60907",
v60907 = "60908",
v60908 = "60915",
v60915 = "60916",
v60916 = "60920",
v60920 = "60921",
v60921 = "60922",
v60922 = "60923",
v60923 = "60924",
v60924 = "60925",
v60925 = "60926",
v60926 = "60927",
v60927 = "60928",
v60928 = "60929",
v60929 = "19810",


--Kalydian Forest
v19810 = "19811",
v19811 = "19813",
v19813 = "19812",
v19812 = "19869",
v19869 = "19870",
v19870 = "19871",
v19871 = "19875",
v19875 = "19874",
v19874 = "19873",
v19873 = "19893",
v19893 = "19896",
v19896 = "19894",
v19894 = "19895",
v19895 = "19909",
v19909 = "19910",
v19910 = "19897",
v19897 = "19901",
v19901 = "19903",
v19903 = "19902",
v19902 = "19900",
v19900 = "19881",
v19881 = "19899",
v19899 = "19898",
v19898 = "19876",
v19876 = "19872",
v19872 = "19855",
v19855 = "19877",
v19877 = "19882",
v19882 = "19886",
v19886 = "19890",
v19890 = "19887",
v19887 = "19888",
v19888 = "19891",
v19891 = "19889",
v19889 = "19884",
v19884 = "19885",
v19885 = "19879",
v19879 = "19883",
v19883 = "19878",
v19878 = "19999",

--Ayhesa Cliffs
v19999 = "20000",
v20000 = "20001",
v20001 = "20002",
v20002 = "20003",
v20003 = "20004",
v20004 = "20005",
v20005 = "20006",
v20006 = "20007",
v20007 = "20008",
v20008 = "20009",
v20009 = "20010",
v20010 = "20011",
v20011 = "20012",
v20012 = "20013",
v20013 = "20014",
v20014 = "20015",
v20015 = "20016",
v20016 = "20018",
v20018 = "20019",
v20019 = "20020",
v20020 = "20021",
v20021 = "20022",
v20022 = "20023",
v20023 = "20024",
v20024 = "20025",
v20025 = "20026",
v20026 = "20027",
v20027 = "20028",
v20028 = "20029",
v20029 = "20030",
v20030 = "20031",
v20031 = "20032",
v20032 = "62996",

--Fractal Bloom
v62996 = "63002",
v63002 = "63003",
v63003 = "63004",
v63004 = "63009",
v63009 = "63026",
v63026 = "63027",
v63027 = "63028",
v63028 = "63029",
v63029 = "63030",
v63030 = "63035",
v63035 = "63036",
v63036 = "63037",
v63037 = "63038",
v63038 = "63039",
v63039 = "23113",


--Augerweald
v23113 = "23750",
v23750 = "23751",
v23751 = "23778",
v23778 = "23779",
v23779 = "23777",
v23777 = "23780",
v23780 = "23781",
v23781 = "23782",
v23782 = "23796",
v23796 = "23784",
v23784 = "23785",
v23785 = "23786",
v23786 = "23787",
v23787 = "23913",
v23913 = "23914",
v23914 = "23915",
v23915 = "23916",
v23916 = "23922",
v23922 = "24338",
v24338 = "24339",
v24339 = "24340",
v24340 = "24341",
v24341 = "23912",
v23912 = "23790",
v23790 = "23791",
v23791 = "23792",
v23792 = "23797",
v23797 = "23789",
v23789 = "23788",
v23788 = "23923",
v23923 = "23924",
v23924 = "23936",
v23936 = "23937",
v23937 = "23938",
v23938 = "23798",
v23798 = "23804",
v23804 = "23795",
v23795 = "23925",
v23925 = "23926",
v23926 = "23927",
v23927 = "23928",
v23928 = "23929",
v23929 = "23930",
v23930 = "23931",
v23931 = "23932",
v23932 = "23933",
v23933 = "23934",
v23934 = "23935",
v23935 = "23064",
v23064 = "23063",
v23063 = "23062",
v23062 = "23061",
v23061 = "23060",
v23060 = "23052",
v23052 = "23051",
v23051 = "23050",
v23050 = "23049",
v23049 = "23048",
v23048 = "23065",
v23065 = "23107",
v23107 = "23108",
v23108 = "23109",
v23109 = "23110",
v23110 = "23907",
v23907 = "23908",
v23908 = "23909",
v23909 = "23910",
v23910 = "23911",
v23911 = "20855",

--Mamashi Tunnels
v20855 = "20856",
v20856 = "20857",
v20857 = "20858",
v20858 = "20859",
v20859 = "20861",
v20861 = "20862",
v20862 = "20863",
v20863 = "20866",
v20866 = "20864",
v20864 = "20865",
v20865 = "20860",
v20860 = "20867",
v20867 = "20868",
v20868 = "20869",
v20869 = "20871",
v20871 = "20870",
v20870 = "20877",
v20877 = "20878",
v20878 = "20879",
v20879 = "20876",
v20876 = "20875",
v20875 = "20874",
v20874 = "20901",
v20901 = "20900",
v20900 = "20899",
v20899 = "20898",
v20898 = "20909",
v20909 = "20908",
v20908 = "20907",
v20907 = "20906",
v20906 = "20905",
v20905 = "20904",
v20904 = "20902",
v20902 = "20903",
v20903 = "20912",
v20912 = "20913",
v20913 = "20916",
v20916 = "20917",
v20917 = "20918",
v20918 = "20919",
v20919 = "20920",
v20920 = "20921",
v20921 = "71119",

--Isle of Ollin
 v71119 = "71523",
 v71523 = "71524",
 v71524 = "71686",
 v71686 = "71687",
 v71687 = "71696",
 v71696 = "71697",
 v71697 = "71711",
 v71711 = "71715",
 v71715 = "71906",
 v71906 = "71907",
 v71907 = "71908",
 v71908 = "71909",
 v71909 = "71910",
 v71910 = "71910",
 v71912 = "71913",
 v71913 = "71914",
 v71914 = "71915",
 v71915 = "71916",
 v71916 = "71919",
 v71919 = "71920",
 v71920 = "71921",
 v71921 = "71922",
 v71922 = "71923",
 v71923 = "71924",
 v71924 = "71925",
 v71925 = "71935",
 v71935 = "71936",
 v71936 = "71937",
 v71937 = "71939",
 v71939 = "71940",
 v71940 = "71956",
 v71956 = "71957",
 v71957 = "71958",
 v71958 = "71959",
 v71959 = "71960",
 v71960 = "71961",
 v71961 = "71962",
 v71962 = "71962",
 v71963 = "71964",
 v71964 = "71965",
 v71965 = "71966",
 v71966 = "71968",
 v71968 = "71969",
 v71969 = "71970",
 v71970 = "71971",
 v71971 = "71972",
 v71972 = "71973",
 v71973 = "71974",
 v71974 = "71975",
 v71975 = "71977",
 v71977 = "71979",
 v71979 = "71980",
 v71980 = "71981",
 v71981 = "71983",
 v71983 = "71984",
 v71984 = "71985",
 v71985 = "71986",
 v71986 = "71987",
 v71987 = "71988",
 v71988 = "71989",
 v71989 = "71990",
 v71990 = "71991",
 v71991 = "71992",
 v71992 = "71993",
 v71993 = "71994",
 v71994 = "71995",
 v71995 = "71996",
 v71996 = "71997",
 v71997 = "71998",
 v71998 = "71999",
 v71999 = "72000",
 v72000 = "72001",
 v72001 = "72002",
 v72002 = "72003",
 v72003 = "72004",
 v72004 = "72005",
 v72005 = "72006",
 v72006 = "72007",
 v72007 = "72008",
 v72008 = "72009",
 v72009 = "72555",
 v72555 = "71982",
 v71982 = "23202",

--the Torturers' Caverns
v23202 = "23203",
v23203 = "23204",
v23204 = "23205",
v23205 = "23206",
v23206 = "23207",
v23207 = "23208",
v23208 = "23209",
v23209 = "23210",
v23210 = "23211",
v23211 = "23212",
v23212 = "23213",
v23213 = "23214",
v23214 = "23215",
v23215 = "23216",
v23216 = "23217",
v23217 = "23218",
v23218 = "23219",
v23219 = "23220",
v23220 = "23221",
v23221 = "23222",
v23222 = "23223",
v23223 = "23224",
v23224 = "23225",
v23225 = "23226",
v23226 = "23227",
v23227 = "23228",
v23228 = "23229",
v23229 = "23230",
v23230 = "23231",
v23231 = "23232",
v23232 = "23233",
v23233 = "23234",
v23234 = "23235",
v23235 = "23236",
v23236 = "23237",
v23237 = "23238",
v23238 = "23257",
v23257 = "23256",
v23256 = "23255",
v23255 = "23254",
v23254 = "23253",
v23253 = "23243",
v23243 = "23245",
v23244 = "23245",
v23245 = "23246",
v23246 = "23247",
v23247 = "23248",
v23248 = "23249",
v23249 = "23250",
v23250 = "23251",
v23251 = "23252",
v23252 = "23242",
v23242 = "23241",
v23241 = "23240",
v23240 = "23239",
v23239 = "23265",
v23265 = "23266",
v23266 = "23267",
v23267 = "23268",
v23268 = "23269",
v23269 = "23270",
v23270 = "23271",
v23271 = "23272",
v23272 = "23279",
v23279 = "23280",
v23280 = "23273",
v23273 = "23284",
v23284 = "23283",
v23283 = "23282",
v23282 = "23274",
v23274 = "23281",
v23281 = "23275",
v23275 = "23276",
v23276 = "23277",
v23277 = "23285",
v23285 = "23278",
v23278 = "23286",
v23286 = "23287",
v23287 = "23288",
v23288 = "23289",
v23289 = "23291",
v23291 = "23290",
v23290 = "23292",
v23292 = "23293",
v23293 = "23294",
v23294 = "23295",
v23295 = "23296",
v23296 = "23297",
v23297 = "23298",
v23298 = "23300",
v23300 = "23301",
v23301 = "23302",
v23302 = "23303",
v23303 = "23304",
v23304 = "23305",
v23305 = "23306",
v23306 = "23307",
v23307 = "23308",
v23308 = "23309",
v23309 = "23310",
v23310 = "23311",
v23311 = "23312",
v23312 = "23313",
v23313 = "23314",
v23314 = "23315",
v23315 = "23316",
v23316 = "23317",
v23317 = "23318",
v23318 = "23319",
v23319 = "23321",
v23321 = "23322",
v23322 = "22866",

--the Lich Gardens
v22866 = "22867",
v22867 = "22868",
v22868 = "22869",
v22869 = "22870",
v22870 = "22871",
v22871 = "22872",
v22872 = "22873",
v22873 = "22874",
v22874 = "22875",
v22875 = "22876",
v22876 = "22877",
v22877 = "22878",
v22878 = "22879",
v22879 = "22880",
v22880 = "22881",
v22881 = "22882",
v22882 = "22884",
v22884 = "22885",
v22885 = "22886",
v22886 = "22911",
v22911 = "22912",
v22912 = "22913",
v22913 = "22914",
v22914 = "22915",
v22915 = "22916",
v22916 = "22917",
v22917 = "22918",
v22918 = "22919",
v22919 = "22920",
v22920 = "22921",
v22921 = "22922",
v22922 = "22923",
v22923 = "22924",
v22924 = "22925",
v22925 = "22890",
v22890 = "22891",
v22891 = "22892",
v22892 = "22893",
v22893 = "22894",
v22894 = "22895",
v22895 = "22896",
v22896 = "22897",
v22897 = "22898",
v22898 = "22899",
v22899 = "22900",
v22900 = "22901",
v22901 = "22902",
v22902 = "22903",
v22903 = "22904",
v22904 = "22905",
v22905 = "22906",
v22906 = "22907",
v22907 = "22908",
v22908 = "22909",
v22909 = "22910",
v22910 = "22883",
v22883 = "19854",

--Drakuum
v19854 = "20076",
v20076 = "20077",
v20077 = "20078",
v20078 = "20079",
v20079 = "20086",
v20086 = "20087",
v20087 = "20088",
v20088 = "20089",
v20089 = "20083",
v20083 = "20084",
v20084 = "20085",
v20085 = "20080",
v20080 = "20081",
v20081 = "20082",
v20082 = "20090",
v20090 = "20091",
v20091 = "20092",
v20092 = "20093",
v20093 = "20094",
v20094 = "20095",
v20095 = "20096",
v20096 = "20097",
v20097 = "20098",
v20098 = "20099",
v20099 = "20100",
v20100 = "20101",
v20101 = "20102",
v20102 = "20103",
v20103 = "20104",
v20104 = "20105",
v20105 = "20106",
v20106 = "20107",
v20107 = "20108",
v20108 = "20109",
v20109 = "20110",
v20110 = "20111",
v20111 = "20112",
v20112 = "20113",
v20113 = "20114",
v20114 = "20115",
v20115 = "20116",
v20116 = "20117",
v20117 = "20118",
v20118 = "20119",
v20119 = "20120",
v20120 = "20121",
v20121 = "20122",
v20122 = "20123",
v20123 = "20124",
v20124 = "20125",
v20125 = "20126",
v20126 = "20127",
v20127 = "20128",
v20128 = "20129",
v20129 = "20130",
v20130 = "20131",
v20131 = "20132",
v20132 = "20133",
v20133 = "20134",
v20134 = "20135",
v20135 = "20136",
v20136 = "20137",
v20137 = "20138",
v20138 = "20139",
v20139 = "20140",
v20140 = "20141",
v20141 = "20142",
v20142 = "20143",
v20143 = "20144",
v20144 = "20145",
v20145 = "20146",
v20146 = "20147",
v20147 = "20148",
v20148 = "20149",
v20149 = "20150",
v20150 = "20151",
v20151 = "20152",
v20152 = "55276",

--Teshen Caldera
v55276 = "55277",
v55277 = "55287",
v55287 = "55289",
v55289 = "55290",
v55290 = "55291",
v55291 = "55288",
v55288 = "55281",
v55281 = "55285",
v55285 = "55286",
v55286 = "55278",
v55278 = "55279",
v55279 = "55280",
v55280 = "55292",
v55292= "55294",
v55294= "55316",
v55316= "55315",
v55315= "55317",
v55317= "55318",
v55318= "55319",
v55319= "55326",
v55326= "55320",
v55320= "55321",
v55321= "55322",
v55322= "55323",
v55323= "55324",
v55324= "55325",
v55325= "55293",
v55293= "55327",
v55327= "55330",
v55330= "55341",
v55341= "55342",
v55342= "55343",
v55343= "55344",
v55344= "55328",
v55328= "55336",
v55336= "55331",
v55331= "55329",
v55329= "55337",
v55337= "55335",
v55335= "55338",
v55338= "55332",
v55332= "55340",
v55340= "55333",
v55333= "55334",
v55334= "55339",
v55339= "53178",
v53178= "53179",
v53179= "53180",
v53180= "53883",
v53883= "54203",
v54203= "54204",
v54204= "54205",
v54205= "54206",
v54206= "53181",
v53181= "53241",
v53241= "55356",
v55356= "55357",
v55357= "55358",
v55358= "55359",
v55359= "55360",
v55360= "55361",
v55361= "55362",
v55362= "55363",
v55363= "55364",
v55364= "55365",
v55365= "55366",
v55366= "55367",
v55367= "55368",
v55368= "55369",
v55369= "55370",
v55370= "54207",
v54207= "54209",
v54209= "54242",
v54242= "54243",
v54243= "54256",
v54256= "54257",
v54257= "54259",
v54259= "54260",
v54260= "54261",
v54261= "54244",
v54244= "54262",
v54262= "54270",
v54270= "54249",
v54249= "54271",
v54271= "54250",
v54250= "54253",
v54253= "54252",
v54252= "54251",
v54251= "54394",
v54394= "54395",
v54395= "54396",
v54396= "54397",
v54397= "54398",
v54398= "54399",
v54399= "54400",
v54400= "city",


}

elseif snd.which_path == "medium" then
check = {

--a snake pit
v56942 = "56790",
v56790 = "56793",
v56793 = "56795",
v56795 = "57174",
v57174 = "57176",
v57176 = "57177",
v57177 = "57178",
v57178 = "57179",
v57179 = "57180",
v57180 = "57181",
v57181 = "57182",
v57182 = "57183",
v57183 = "57184",
v57184 = "57175",
v57175 = "57185",
v57185 = "57186",
v57186 = "57187",
v57187 = "57188",
v57188 = "57246",
v57246 = "57247",
v57247 = "57252",
v57252 = "57253",
v57253 = "57244",
v57244 = "57245",
v57245 = "57251",
v57251 = "57248",
v57248 = "57249",
v57249 = "57250",
v57250 = "57243",
v57243 = "57052",
v57052 = "57049",
v57049 = "57050",
v57050 = "57051",
v57051 = "56796",
v56796 = "56797",
v56797 = "56808",
v56808 = "57042",
v57042 = "57043",
v57043 = "57044",
v57044 = "57045",
v57045 = "57046",
v57046 = "57047",
v57047 = "57048",
v57048 = "56807",
v56807 = "56794",
v56794 = "56792",
v56792 = "56791",
v56791 = "57242",
v57242 = "56786",
v56786 = "25408",

--Khauskin Mines
v25408 = "25409",
v25409 = "25411",
v25411 = "25410",
v25410 = "25412",
v25412 = "25413",
v25413 = "25414",
v25414 = "25415",
v25415 = "25416",
v25416 = "25417",
v25417 = "25418",
v25418 = "25419",
v25419 = "25420",
v25420 = "25421",
v25421 = "25422",
v25422 = "25426",
v25426 = "25423",
v25423 = "25424",
v25424 = "25425",
v25425 = "25427",
v25427 = "25428",
v25428 = "25429",
v25429 = "25430",
v25430 = "25431",
v25431 = "25432",
v25432 = "25433",
v25433 = "25434",
v25434 = "25435",
v25435 = "25436",
v25436 = "25437",
v25437 = "25438",
v25438 = "25439",
v25439 = "25440",
v25440 = "25441",
v25441 = "25447",
v25447 = "25448",
v25448 = "25449",
v25449 = "25450",
v25450 = "25451",
v25451 = "25452",
v25452 = "25453",
v25453 = "25454",
v25454 = "25455",
v25455 = "25456",
v25456 = "25457",
v25457 = "25458",
v25458 = "25459",
v25459 = "25460",
v25460 = "25461",
v25461 = "25462",
v25462 = "25463",
v25463 = "25464",
v25464 = "25465",
v25465 = "25466",
v25466 = "25467",
v25467 = "25468",
v25468 = "25469",
v25469 = "25470",
v25470 = "25471",
v25471 = "25472",
v25472 = "25473",
v25473 = "25474",
v25474 = "25475",
v25475 = "25476",
v25476 = "25477",
v25477 = "25478",
v25478 = "20281",

--Three Rock Outpost
v20281 = "20282",
v20282 = "20284",
v20284 = "20285",
v20285 = "20286",
v20286 = "20287",
v20287 = "20288",
v20288 = "20289",
v20289 = "20290",
v20290 = "20291",
v20291 = "20292",
v20292 = "20293",
v20293 = "20294",
v20294 = "20295",
v20295 = "20296",
v20296 = "20297",
v20297 = "20298",
v20298 = "20299",
v20299 = "20300",
v20300 = "20310",
v20310 = "20311",
v20311 = "20312",
v20312 = "20309",
v20309 = "20301",
v20301 = "20318",
v20318 = "20317",
v20317 = "20316",
v20316 = "20315",
v20315 = "20314",
v20314 = "20313",
v20313 = "20319",
v20319 = "20320",
v20320 = "20321",
v20321 = "20322",
v20322 = "20323",
v20323 = "20324",
v20324 = "20325",
v20325 = "20327",
v20327 = "20328",
v20328 = "20353",
v20353 = "20329",
v20329 = "20331",
v20331 = "20333",
v20333 = "20334",
v20334 = "20335",
v20335 = "20336",
v20336 = "20337",
v20337 = "20339",
v20339 = "20340",
v20340 = "20342",
v20342 = "20343",
v20343 = "20344",
v20344 = "20345",
v20345 = "20346",
v20346 = "20347",
v20347 = "20348",
v20348 = "20349",
v20349 = "48414",
v48414 = "48415",
v48415 = "48416",
v48416 = "48413",
v48413 = "48417",
v48417 = "48418",
v48418 = "48419",
v48419 = "19602",

--Salma
v19602 = "19603",
v19603 = "19608",
v19608 = "19609",
v19609 = "19610",
v19610 = "19611",
v19611 = "19613",
v19613 = "19672",
v19672 = "19671",
v19671 = "19679",
v19679 = "19681",
v19681 = "19683",
v19683 = "19685",
v19685 = "19687",
v19687 = "19686",
v19686 = "19684",
v19684 = "19682",
v19682 = "19680",
v19680 = "19674",
v19674 = "19675",
v19675 = "19677",
v19677 = "19678",
v19678 = "19676",
v19676 = "19673",
v19673 = "19669",
v19669 = "19670",
v19670 = "19688",
v19688 = "19689",
v19689 = "19690",
v19690 = "19668",
v19668 = "19667",
v19667 = "19666",
v19666 = "19665",
v19665 = "19664",
v19664 = "19663",
v19663 = "19662",
v19662 = "19661",
v19661 = "19657",
v19657 = "19656",
v19656 = "19659",
v19659 = "19655",
v19655 = "19653",
v19653 = "19654",
v19654 = "19658",
v19658 = "19660",
v19660 = "19652",
v19652 = "19651",
v19651 = "19650",
v19650 = "19649",
v19649 = "19646",
v19646 = "19647",
v19647 = "19648",
v19648 = "19636",
v19636 = "19637",
v19637 = "19638",
v19638 = "19639",
v19639 = "19640",
v19640 = "19639",
v19639 = "5128",

--Dun Fortress
v5128 = "5129",
v5129 = "5130",
v5130 = "5131",
v5131 = "3886",
v3886 = "city",

}

else


check = {

--Temple of Sonn
v16706 = "16707",
v16707 = "16716",
v16716 = "16715",
v16715 = "16714",
v16714 = "16713",
v16713 = "16708",
v16708 = "16709",
v16709 = "16710",
v16710 = "16712",
v16712 = "16711",
v16711 = "16717",
v16717 = "16718",
v16718 = "16719",
v16719 = "16720",
v16720 = "16721",
v16721 = "16724",
v16724 = "16725",
v16725 = "16726",
v16726 = "16727",
v16727 = "16728",
v16728 = "16729",
v16729 = "16730",
v16730 = "16731",
v16731 = "16732",
v16732 = "16733",
v16733 = "16734",
v16734 = "16735",
v16735 = "16736",
v16736 = "16722",
v16722 = "16723",
v16723 = "16740",
v16740 = "16741",
v16741 = "16742",
v16742 = "16743",
v16743 = "16744",
v16744 = "16745",
v16745 = "16746",
v16746 = "16747",
v16747 = "16748",
v16748 = "16749",
v16749 = "16750",
v16750 = "16751",
v16751 = "16752",
v16752 = "16753",
v16753 = "16754",
v16754 = "16755",
v16755 = "16756",
v16756 = "16757",
v16757 = "16758",
v16758 = "16944",
v16944 = "16945",
v16945 = "16946",
v16946 = "16947",
v16947 = "16948",
v16948 = "16939",
v16939 = "16949",
v16949 = "16956",
v16956 = "16958",
v16958 = "16959",
v16959 = "16957",
v16957 = "16953",
v16953 = "16954",
v16954 = "16955",
v16955 = "16951",
v16951 = "16952",
v16952 = "16943",
v16943 = "16942",
v16942 = "16940",
v16940 = "16941",
v16941 = "16979",
v16979 = "16980",
v16980 = "16981",
v16981 = "16982",
v16982 = "16983",
v16983 = "16984",
v16984 = "16985",
v16985 = "16986",
v16986 = "16987",
v16987 = "16988",
v16988 = "16989",
v16989 = "16990",
v16990 = "16991",
v16991 = "16992",
v16992 = "16993",
v16993 = "16994",
v16994 = "16995",
v16995 = "16996",
v16996 = "16997",
v16997 = "16998",
v16998 = "16999",
v16999 = "17000",
v17000 = "17001",
v17001 = "17002",
v17002 = "17003",
v17003 = "17004",
v17004 = "17005",
v17005 = "17006",
v17006 = "17007",
v17007 = "17008",
v17008 = "17009",
v17009 = "17010",
v17010 = "17011",
v17011 = "17012",
v17012 = "17013",
v17013 = "17014",
v17014 = "17015",
v17015 = "17016",
v17016 = "17017",
v17017 = "17018",
v17018 = "17019",
v17019 = "17020",
v17020 = "17021",
v17021 = "17022",
v17022 = "17023",
v17023 = "21365",

--Vilimo
v21365 = "21366",
v21366 = "21367",
v21367 = "21368",
v21368 = "21369",
v21369 = "21370",
v21370 = "21371",
v21371 = "21372",
v21372 = "21373",
v21373 = "21374",
v21374 = "21375",
v21375 = "21376",
v21376 = "21377",
v21377 = "21378",
v21378 = "21379",
v21379 = "21380",
v21380 = "21381",
v21381 = "21382",
v21382 = "21383",
v21383 = "21384",
v21384 = "21385",
v21385 = "21386",
v21386 = "21387",
v21387 = "21388",
v21388 = "21389",
v21389 = "21390",
v21390 = "21391",
v21391 = "21392",
v21392 = "21393",
v21393 = "21394",
v21394 = "21395",
v21395 = "21396",
v21396 = "21397",
v21397 = "21398",
v21398 = "21399",
v21399 = "21400",
v21400 = "21401",
v21401 = "21402",
v21402 = "21403",
v21403 = "21404",
v21404 = "21405",
v21405 = "21406",
v21406 = "21407",
v21407 = "21408",
v21408 = "21409",
v21409 = "21410",
v21410 = "21411",
v21411 = "21413",
v21413 = "21414",
v21414 = "21415",
v21415 = "21416",
v21416 = "21417",
v21417 = "21418",
v21418 = "21419",
v21419 = "21420",
v21420 = "21421",
v21421 = "21422",
v21422 = "21423",
v21423 = "19324",


--Dolbodi
v19324 = "19334",
v19334 = "19335",
v19335 = "19336",
v19336 = "19337",
v19337 = "19338",
v19338 = "19339",
v19339 = "19340",
v19340 = "19341",
v19341 = "19342",
v19342 = "19345",
v19345 = "19347",
v19347 = "19348",
v19348 = "19349",
v19349 = "19350",
v19350 = "19366",
v19366 = "19367",
v19367 = "19368",
v19368 = "19369",
v19369 = "19370",
v19370 = "19371",
v19371 = "19372",
v19372 = "19373",
v19373 = "19374",
v19374 = "19375",
v19375 = "19376",
v19376 = "19377",
v19377 = "19378",
v19378 = "19379",
v19379 = "19380",
v19380 = "19381",
v19381 = "19382",
v19382 = "19383",
v19383 = "19384",
v19384 = "19385",
v19385 = "19386",
v19386 = "19387",
v19387 = "19388",
v19388 = "19389",
v19389 = "19390",
v19390 = "19391",
v19391 = "19392",
v19392 = "19393",
v19393 = "19394",
v19394 = "19395",
v19395 = "19396",
v19396 = "19397",
v19397 = "19398",
v19398 = "19399",
v19399 = "19400",
v19400 = "19401",
v19401 = "19402",
v19402 = "19403",
v19403 = "19404",
v19404 = "19405",
v19405 = "19406",
v19406 = "19407",
v19407 = "19408",
v19408 = "19409",
v19409 = "19411",
v19411 = "19412",
v19412 = "19522",
v19522 = "19600",
v19600 = "19601",
v19601 = "19604",
v19604 = "19605",
v19605 = "19606",
v19606 = "19607",
v19607 = "19323",
v19323 = "19607",
v19607 = "22824",

--Centipede Caverns
v22824 = "22825",
v22825 = "22826",
v22826 = "22828",
v22828 = "22829",
v22829 = "22830",
v22830 = "22831",
v22831 = "22832",
v22832 = "22833",
v22833 = "22834",
v22834 = "22836",
v22836 = "22837",
v22837 = "22838",
v22838 = "22839",
v22839 = "22840",
v22840 = "22841",
v22841 = "22842",
v22842 = "22843",
v22843 = "22844",
v22844 = "22845",
v22845 = "22846",
v22846 = "22847",
v22847 = "22848",
v22848 = "22849",
v22849 = "22850",
v22850 = "22851",
v22851 = "22852",
v22852 = "60267",
v60267 = "60268",
v60268 = "60269",
v60269 = "60270",
v60270 = "60271",
v60271 = "60272",
v60272 = "60273",
v60273 = "60274",
v60274 = "21001",

--Maghuir Fissure
v21001 = "21168",
v21168 = "21169",
v21169 = "21170",
v21170 = "21171",
v21171 = "21172",
v21172 = "21173",
v21173 = "21174",
v21174 = "21175",
v21175 = "21176",
v21176 = "21177",
v21177 = "21178",
v21178 = "21179",
v21179 = "21180",
v21180 = "21181",
v21181 = "21182",
v21182 = "21183",
v21183 = "21184",
v21184 = "21185",
v21185 = "21186",
v21186 = "21187",
v21187 = "21188",
v21188 = "21189",
v21189 = "21190",
v21190 = "21191",
v21191 = "21192",
v21192 = "21193",
v21193 = "21194",
v21194 = "21195",
v21195 = "21196",
v21196 = "21197",
v21197 = "21198",
v21198 = "21199",
v21199 = "21200",
v21200 = "21201",
v21201 = "21202",
v21202 = "21203",
v21203 = "21204",
v21204 = "21205",
v21205 = "21206",
v21206 = "21210",
v21210 = "21211",
v21211 = "21209",
v21209 = "21208",
v21208 = "21207",
v21207 = "21212",
v21212 = "21213",
v21213 = "21214",
v21214 = "21215",
v21215 = "21216",
v21216 = "21217",
v21217 = "21218",
v21218 = "21219",
v21219 = "21220",
v21220 = "21221",
v21221 = "21222",
v21222 = "city",

--Mausoleum
--Endgame fengard, yuzurai, isle of despair
--High morgun, bihrkaen, siro tunnels, salma, raugol, morass,
--Medium mannaseh, masilia, gloaming, humgurd, azdun, dun, torston, telfinne, three widows, ivio, farsai, hubride, heylai
--Low raim, rotfang, riparium, kornar, alaqsii, scidve, rebels ridge, festering, tornos

--have: gloaming, raim, maus, tornos, yuzurai

}
end

return check

end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<Script isActive="yes" isFolder="no">
						<name>bashing variables</name>
						<packageName></packageName>
						<script>
snd.bashing_loaded = true

snd.room_clear = false

snd.bashing = {
target = "none",
target_type = "long",
target_word = "",
old_target = "",
target_number = "",
target_desc = "",
corpse_word = "",
corpse_number = "",
corpse_desc = "",
target_priority = 10000,
engaged = false,
targeted = false,
stopping = false
}

snd.area_found = false
snd.possible_targets = {}
snd.possible_items = {}
snd.corpses = {}
snd.gathering = {}
snd.have_items = false
snd.need_loot = false

snd.vermin = 0</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>bashing targets</name>
						<packageName></packageName>
						<script>
snd.areas = {

{area = "Bloodloch", level = "globes only", targets = {"a massive elemental"}},
{area = "Duiran", level = "globes only", targets = {"a massive elemental"}},
{area = "the city of Enorian", level = "globes only", targets = {"a massive elemental"}},
{area = "Esterport", level = "globes only", targets = {"a massive elemental"}},
{area = "Spinesreach", level = "globes only", targets = {"a massive elemental"}},
{area = "the neighborhoods of Enorian", level = "globes only", targets = {"a massive elemental"}},
{area = "the neighborhoods of Duiran", level = "globes only", targets = {"a massive elemental"}},
--{area = "Tainhelm", level = "30-40", targets = { "a stout Dwarven guard", "an elderly female Dwarf", "an elderly Dwarven man", "a calm Dwarven woman", "an elderly dwarf", "a tanned Dwarven farmer", "a female Dwarf", "an elderly Dwarven gardener", "a male Dwarf", "a Dwarven craftsman", "the Dwarven alemaster", "a Dwarven boy", "Gwenil, the Dwarven blacksmith", "Baruin, the Dwarven mason", "a Dwarven miner", "Tohrul, the Dwarven supervisor", "a Dwarven girl", "a Dwarven boy", "Nolid, the Dwarven fisherman", "the Dwarven miller", "Mayor Thurgil Redstein", "a liveried Dwarf servant"} },
{area = "the Holy Impire of Sehal", level = "newbie", targets = {"a soulless pixie", "a stern Imp warrior", "a boisterous Imp boy", "a charming Imp girl", "a fluffy white sheep", "a fuzzy grey rabbit"}, items = {}},
{area = "the Valley of Lodi", level = "newbie", targets = {"a cave bat", "a sheep", "a white hen", "a juvenile wildcat", "an adult wildcat"}, items = {}},
{area = "the village of Gorshire", level = "newbie", targets = {"a guard pig", "a portly gnome sentry", "a gnome man", "a gnome woman", "a little gnome boy", "a gnome sentry", "a little gnome girl", "a skinny gnome sentry", "a deputy constable", "a lithe weasel", "a large grey goose", "a large gray goose"}, items = {}},
{area = "the Tarean Caverns", level = "Newbie", targets = {"a small, black bat", "an unkempt Trog", "a chubby Trog woman", "a rambunctious young Trog", "a hulking Trog man", "a rotting rattlesnake", "an irritable, rabid zebra", "a blood-spattered leopard", "a frothing, manic buffalo", "a gigantic cave bear"}, items = {"a jagged stone shard"}},
{area = "the Crags", level = "Newbie", targets = {"a light grey stone worm", "a dark grey stone worm", "an infant-like cragling", "a steady cragling", "a vile snatcher", "a hulking snatcher"}, items = {"a dull, irregular gem"}},
{area = "the village of Rahveir", level = "Newbie", targets = {"a disgustingly warped missionary", "a malevolent poltergeist", "a corrupted spirit"}, items = {"a strange black sphere"}},
{area = "Forsaken Evlasu", level = "Newbie", targets = {"an unnaturally lithe, shadowy aberration", "a hideous winged aberration", "a grotesque, warped aberration", "a corrupted cultist"}, items = {"a cluster of pure white starflower", "a corrupted aberration's feather", "a blighted branch", "a minute, corrupted totem"}},
{area = "Yohanan Village", level = "Newbie", targets = {"a fleshless skeleton", "a female villager", "a villager", "an old guard", "a small girl", "a young village guard", "a mangy rat", "a cave bat"}, items = {}},
{area = "Difohr Passage", level = "Quest", targets = {"a skittering onyx eld"}},
{area = "Myesian Run", level = "Quest", targets = {"a skittering verdant eld"}},
{area = "Cinderbreach Mine", level = "Quest", targets = {"a fiery crimson fragmented eld", "a shattered eld monstrosity", "a skittering crimson eld"}, items = {}},
{area = "Radial Dig Shaft #15", level = "Quest", targets = {"a shattered eld monstrosity", "an icy azure fragmented eld", "a skittering azure eld"}, items = {}},
{area = "the Centipede Cave", level = "25-35", targets = {"a large centipede", "a skittering centipede", "a chitinous centipede", "a venomous centipede", "a juvenile centipede", "a massive centipede queen"}, items = {}},
{area = "Riparium", level = "25-50", targets = {"a large red crab", "a moray eel", "a mantaglow fish", "a large, deepwater salmon", "an angler fish"}, items = {}},
{area = "the Siroccian Mountains", level = "30+", targets = {"a vicious wolverine", "a powerful wolverine"}},
{area = "the Festering Wastes", level = "30-40", targets = {"a darkly patterned sand viper", "a gray, spotted bobcat", "a ragged brown coyote", "a tiny black scorpion", "a deep green lizard", "a shivering jackrabbit", "a small yellow rattlesnake"}, items = {}},
{area = "Halls of Tornos", level = "30-40", targets = {"a speckled tinyok", "a snowy armadilleon", "a malformed beast", "a botched phase-hound", "a rabid blood-fiend", "a crazed blood-fiend", "a mutated blood-fiend"}},
{area = "Rebels' Ridge", level = "30-40", targets = {"a tenacious tough", "a rebellious rancher", "a former farmer", "a naive neo-Ankyrean", "a seditious scholar", "a dingy dog", "a gamey goat", "a chittering chicken"}, items = {}},
{area = "Scidve", level = "30-45", targets = {"a large gray and black dugger", "a rock devil", "a Drakt guard"}},
{area = "the Central Wilderness", level = "35-50", targets = {"a mottled green bullfrog", "a dragonfly"}},
{area = "Mount Humgurd", level = "40+", targets = {"a black-spotted cow"}},
{area = "the Western Itzatl Rainforest", level = "40-50", targets = {"a xenosaurus lizard", "a razor nahuac", "a playful oniro", "a frilled lizard", "a lithe black panther", "a katydid", "a spunky white tamarin", "a serpentine couatl", "an ecru axolotl", "an energetic orangutan", "a rojalli cub", "a tiny aurivv bug", "a furry coatimundi", "an orange, black-striped tiger", "a colorful toucan", "an iridescent tizapez", "a poisonous purple lora", "an enormous anaconda", "a swarm of tsetse flies", "a striped tzatica", "a menacing black rojalli"}, items = {"a glistening iridescent pearl", "a beautiful rough sapphire"}},
{area = "the Azdun dungeon", level = "40-50", targets = {"a huge pulsating spider", "medium pulsating spider", "a large pulsating spider"}},
{area = "the Dolbodi Campsite", level = "45-60", targets = {"a brawny hunter", "a slender forager", "a burly lumberjack", "a grizzly foreman", "a lithe buckawn"}, items = {}},
{area = "Dun Fortress", level = "45-60", targets = {"an orc guard", "a demonic screamer", "a serpentine blademistress", "a slime-encrusted spitter", "a dangerous water snake", "a large catfish"},},
{area = "a snake pit", level = "50-60", targets = {"a venenigol snake", "an andragil snake", "a tiny hatchling", "a large sertag snake", "a grassel snake","a muselon snake", "Nandqua, mate of Namaqua", "Namaqua, Queen of Serpents"}, items = {"a small snake's egg",}},
{area = "Alaqsii Inlet", level = "50-60", targets = {"an arctic wolf", "a small, ruddy turnstone", "a rotund, white ptarmigan", "a white-collared lemming", "a white gyrfalcon"}},
{area = "the Ruins of Farsai", level = "50-60", targets = {"an unctuous creepling", "a shadowdrop", "a darkling", "a panther-like Rajamala", "a menacing black rojalli", "a shadow", }},
{area = "the Ruins of Masilia", level = "50-60", targets = {"a corrupted hackle", "a ravenous locust", "a mutated hare", "a Masilidean etherealist", "Fermian, excavation foreman", "a Masilidean mentalist", "a Dwarven archeologist", "a Dwarven excavator", "a Masilidean focus", "a Masilidean etherealist", "a Masilidean physicalist", "Head Archeologist, Dolus", "Fermian, excavation foreman", }},
{area = "Asper", level = "50-60", targets = {"a fearsome icewyrm", "a malevolent spectre", "a failed experiment", "an animated golem of flesh", "a wild bobcat", "a snowshoe hare"}, items = {}},
{area = "the Undercity of Djeir", level = "50+", targets = {"a gargantuan spider", "a mutated crawler fish", "a striped siriskal fish", "an electric eel", "an elusive black fish", "a giant squid", "a monstrous coelacanth", "a carnivorous weed", "a fearsome Suria serpent"}},
{area = "the Three Rock Outpost", level = "60+", targets = {"a huge, scarred wildcat","a beautiful wild horse","a mountain wildcat",  "a wildcat kitten", "a long-haired buffalo", "an enormous Troll bandit","a shifty bandit", "the cave bear, White Ghost"}},
{area = "the village of Bihrkaen", level = "60-80", targets = {"a grotesque snapping turtle", "a mire hound", "a bog hound", "a mire pup", "an alpha female hound", "a slender mud adder", "a speckled, brown turtle", "an alpha male hound"}},
{area = "the Augerweald", level = "65-80", targets = {"an agitated direwolf", "a large, snowy fox", "silver-feathered orel", "a large bhfaol", "a gargantuan Augerweald rabbit", "a tall, white elk", }},
{area = "the Fractal Bloom", level = "65+", targets = {"a towering crystalline entity", "a slender crystalline entity", "a radiant crystalline entity", "a squat crystalline entity", "a fractured crystalline entity", "a faceted crystalline entity"}}, 
{area = "the Kalydian Forest", level = "65+", targets = {"a gaunt elk",  "a rabid rabbit", "a ravenous squirrel"}},
{area = "the Salma Settlement", level = "70-80", targets = {"a busy mage", "a bemused artist", "an engrossed scholar", "an ordinary woman", "a dark-haired woman", "a Salmati guard", "a dark-furred bear", "a Salmati warrior", "a common man", "an energetic child", "an unclean miner", "a wild-eyed scientist"}},
{area = "the Maghuir Fissure", level = "65+", targets = {"an amorphous black umbra","a darkly robed priest"}},
{area = "the Torturers' Caverns", level = "70-80", targets = {"Mellias, an elegant Tsol'aa consanguine", "Tuera, the torturer", "Sentinel Rozhirr", "a rank ghoul", "a vampiric overseer", "a maggot-ridden skeleton", "a flesh golem sentry", "a vile inquisitor", "a hulking ghast", "a scheming terramancer"}},
{area = "the Caverns of Mor", level = "70-85", targets = {"a ravenous, shadowy ghast", "a robed, skeletal lich", "a stench-ridden ghoul", "a skeletal warrior", "a vampiric warrior", "a vampiric sentry"}, items = {}},
{area = "the Sparklight Rift", level = "75+", targets = {"an oversized efreeti","a churning fire elemental","a fire elemental minion","a greater fire elemental","a colossal elemental"}},
{area = "the Mamashi Tunnels", level = "75+", targets = {"a greater nalas", "a young nalas", "a mature nalas","a Mit'olk bladesman", "a Mit'olk axeman", "a Mit'olk illusionist"}},
{area = "the Lich Gardens", level = "75-90", targets = {"a commanding lich scientist", "a dark Cabalist scholar", "a monstrous Carnifex guard", "a mindless experiment", "a guardian wraith", "a tattered Bahkatu experiment", "a student of the lich"}, items = {}},
{area = "the Isle of Ollin", level = "80-90", targets = {"a ferocious Alpha Syll","a giant, rabid Syll", "a massive, verdant-furred Syll", "a young Syll cub", "a blackened, ravenous shark", "a massive black crab", "a dark-furred, rabid boar", "a towering Nazetu guard", "a stinking Nazetu soldier", "a rotting Nazetu ghoul", "a Nazetu comfort woman", "a boisterous Nazetu child", "a sharp-clawed Boru prowler", "a fiendish, tainted Syll", "a diligent Boru harvester"}, items = {}},
{area = "the Itzatl Morass", level = "80-90", targets = {"an oversized fly", "an oversized earthworm", "a capybara", "a poisonous water moccasin", "a green slime toad", "a silent reed cat", "a vicious snapping turtle", "a long-toothed beaver"}},
{area = "Saliltul Swamp", level = "80-90", targets = {"a rabid direwolf", "a mutilated humanoid", "a red-eyed water snake"}},
{area = "the Iernian Fracture", level = "80+", targets = {"an unstable white eld", "a colossal crystalline eld", "a churning, unstable eld", "an enormous, three-cored eld", "an effulgent platinum eld", "a discordant, buzzing eld", "a cacophonous cluster of eld", "a shrieking mass of eld", "a flickering green eld", "a coruscating swarm of eld"}},
{area = "Drakuum", level = "70+", targets = {"a savage shade", "a blackened darkwalker", "a hideous lich",  "a misty apparition","a gnarled spirit"}}, 
{area = "the Ia'shal Barrow", level = "85+", targets = { "a foul spiderling", "a ravenous cave spider", "a bulbous cave spider"}},
{area = "Arbothia", level = "85-95", targets = {"an enraged female servant", "an enraged male servant", "an enraged female villager", "an enraged male villager"}},
{area = "the Eresh Mines", level = "85-95", targets = {"an angry vampire bat", "a blind wolf spider", "a swarm of black beetles"}, items = {}},
{area = "the Fengard Keep", level = "85-95", targets = {"a massive argobole", "a fiery phenkyre", "an ogre berserker", "a horrid basilwyrm", "a shrieking grimshrill", "a vicious horned garwhol", "a brawny glaive knight", "a tall chempala", "a radiant lumore", "a pious invoker", "a pungent lichosphere"}, items = {}},
{area = "the Ayhesa Cliffs", level = "90-100", targets = {"a Spellshaper Archon", "a Spellshaper Master", "a Spellshaper Adept"}, items = {"a flat metal disc"}},
{area = "Yuzurai village", level = "90-100", targets = {"a massive rojalli matriarch", "a sleek black rojalli", "a savage rojalli"}},
{area = "the Dramedo Warrens", level = "90-100", targets = {"a vast ochre ooze", "a winged fungal horror", "a shambling fungal abomination", "a gigantic fungal strider", "a cloud of fungal spores"}}, 
{area = "the Isle of Despair", level = "90-100", targets = {"a darkened soul", "a severed male head"}},
{area = "the Shattered Vortex (Low Level)", level = "90-100", targets = {"a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone"}, items = {}},
{area = "the Shattered Vortex (Spirit)", level = "90-100", targets = {"a chaos worm", "a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a Sciomancer mage", "a warped indorani", "a strained indorani", "a crazed indorani", "a reinforcement warrior of the aztob", "a warrior of the Aztob", "a warped turtle", "a petrified treant", "a piece of an amalgamation"}, items = {"a finger", "a chunk grey stone", "a chunk of obsidian glass", "a chunk of green and blue stone", "a broken shard of ruby"}},
{area = "the Shattered Vortex (Shadow)", level = "90-100", targets = {"a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a warped turtle", "a warrior of the Demonsbane", "a reinforcement warrior of the demonsbane", "a fetish-decorated shaman", "a nimble sentinel", "a stalwart templar", "an agile Sentaari monk", "a battle-worn Ascendril", "an Ascendril mage", "a warped turtle", "a petrified treant", "a piece of an amalgamation"}, items = {"a finger", "a chunk grey stone", "a chunk of obsidian glass", "a chunk of green and blue stone", "a broken shard of ruby"}},
{area = "the Shattered Vortex (All)", level = "90-100", targets = {"a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a warped turtle", "a warrior of the Demonsbane", "a reinforcement warrior of the demonsbane", "a fetish-decorated shaman", "a guardian angel", "a nimble sentinel", "a stalwart templar", "an agile Sentaari monk", "a battle-worn Ascendril", "an Ascendril mage","a chaos worm", "a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a Sciomancer mage", "a warped indorani", "a strained indorani", "a crazed indorani", "a reinforcement warrior of the aztob", "a warrior of the Aztob", "a warped turtle", "a petrified treant", "a piece of an amalgamation"}, items = {"a finger", "a chunk grey stone", "a chunk of obsidian glass", "a chunk of green and blue stone", "a broken shard of ruby"}},
{area = "Arbothia", level = "85-95", targets = {"an enraged female servant", "an enraged male servant", "an enraged female villager", "an enraged male villager"}},
{area = "Tiyen Esityi", level = "95+", targets = {"Commander Marakhi", "Tirahl the Necromancer", "Lieutenant Gharvoi", "a ball of chitinous legs", "insubstantial whispers", "Quartermaster Kuius", "Lieutenant Chiakhi", "a crazed Nazetu cutter", "a mutated Nazetu intercessor", "a Nazetu cook", "a Nazetu provost", "a deformed Nazetu priest", "a Nazetu corrupter", "a Nazetu necromancer", "a supply officer", "a Nazetu captain", "a Nazetu crossbowman", "a Nazetu halberdier", "a bound shade", "a canerous stallion", "a tangible malevolence", "a victimised intruder", "a massive, sacred serpent"}},
{area = "the Nal'jin Depths", level = "95+", targets = {"an enormous spinelash fish", "a sinewy Nal'jin eel", "a shadow ray", "a serpentine jawsnapper"}},
{area = "the Forgotten Dome", level = "95+", targets = {"a gibbering kelki reaver", "a deformed kelki ravener", "a mutated kelki ravager", "a vile kelki prowler"}},
{area = "Luzith's Lair", level = "95+", targets = {"a mass of deadly trap spiders", "a deadly trap spider", "a monstrous arachnid", "a vicious little spider", "a large, crystalline spider", "a flying spider", "a sentinel spider", "a slender, female arachnoid"}},
{area = "the Bastion of Illdon", level = "95+", targets = {"a rabid plant", "a rabid hound", "a nightmare shadow", "a shadowy, mindless demon", "a mutated experiment"}},
{area = "Spiral of the Corrupt", level = "95+", targets = {"an ethereal, scarred jellyfish", "a rot-infested swordfish", "a five-tentacled octopus of jade", "a taint-infested shark", "a miasma-wreathed electric eel"}},
{area = "the Shastaan Warrens", level = "95+", targets = {"an aberrant, obscenely deformed Kelki", "a wild-eyed Kelki cultist", "a ragged Kelki cultist"}},
{area = "the Bloodwood", level = "95+", targets = {"a distressed spirit", "a wailing spirit", "a lingering spirit"}, items = {"spectral essence", "Spectral essence"}},
{area = "Dovan Hollow", level = "95+", targets = {"a gaunt Aslinn slaver", "a scarred Aslinn slaver", "a sinewy Aslinn slaver", "a haughty Caentoi slaver", "a hulking Ursal brute", "a grim Aslinn slaver"}},
{area = "the Feral Caves", level = "95+", targets = {"a small green blob", "a slimy green blob", "a massive green blob", "a gigantic green blob"}},
{area = "The Forgotten Mausoleum", level = "95+", targets = {"a reanimated Dwarf woman", "a rotting Dwarf archer", "a decomposing Dwarf", "a robed reanimated Dwarf"}},
{area = "Tcanna Island", level = "95+", targets = {"a massive elemental", "a brown and tan python", "a box jellyfish", "a vicious copperhead snake", "a white goose", "an oversized tortoise", "a dark green alligator", "a blue crab", "a black bear", "a white-tailed deer", "a lithe cougar", "a spotted jaguar", "a ragged coyote", "a great white stag", "a diseased raccoon", "a black and white badger", "a small ocelot", "a large capybara", "a howler monkey", "a spotted leopard", "a striped tiger", "an enormous elephant", "a water buffalo", "a Horkvali butcher", "a long billed toucan", "a scarlet macaw", "a bald eagle", "a gray wolf", "a Troll guard", "a Troll cook", "a Nazetu officer", "a thick boa constrictor", "a brown-furred bat", "an ebon crow", "a silverback gorilla", "a venomous bushmaster", "a long-billed toucan",}},
{area = "Xaanhal", level = "really high", targets = {"an arrogant Xorani master at arms", "a helpless Xorani nestling", "a suspicious Xorani patrol", "a wiry Xorani guard", "a cautious Xorani guard", "a merciless Xorani warrior", "a willowy nest guardian", "a bejeweled Xorani harem girl", "Caelakan, an arrogant prince", "Kithan, a young Xorani girl"}, items = {"a fragment of a mosaic"}},
{area = "Trapped within a mirror", level = "Quest", targets = {"a fragment of living glass"}},
{area = "the Teshen Caldera", level = "40-60? Maybe", targets  = {"a Teshen raider", "a Teshen scout", "a Teshen reaver", "a Teshen worker"}},
{area = "the Teshen Undercroft", level = "80-99", targets  = {"a Teshen raider", "a Teshen scout", "a Teshen reaver", "a Teshen worker", "a gargantuan Teshen drone"}},
{area = "the Temple of Sonn", level = "40+", targets = {"a menacing black rojalli", "a choke creeper", "a darkling", "a shadowdrop", "a giant mosquito", "an elongated black serpent", "a glossy black silk-spinner", "a giant fly"}},
{area = "Perilaus", level = "50+", targets = { "a school of spinebacks", "a striped sea krait", "a school of shadowy minnows", "a water viper", "a grey spider" }},
{area = "a volcano", level = "lolnope", targets = {"a large earth elemental", "a large smoke elemental", "a large fire elemental", "a lava daemon", "a glowing lava daemon" } },
{area = "Raim Vale", level = "20-30", targets = {"a misshapen woman", "a rabid dog", "Jehanne", "a deformed man", "a diseased man", "Midolo Raim", "a mutilated creature"} },
{area = "Raugol Fissure", level = "20-30", targets = {"a scything skitterer", "a stonescale ravager", "a stonescale mephit", "a splintering earthrager"} },
{area = "Chapel Garden", level = "90+", targets = {"a diminutive necromancer", "a zombie cleric", "a foul-smelling zombie", "Broondac, the vampire strategist"  } },
{area = "the Caverns of Telfinne", level = "40-60", targets = {"a cave-dwelling avisme", "a fanged lugore", "a slimy aryeim", "a tentacled morbol", "a draconic zogura", "a slender synicant",  } },
{area = "the Village of Kornar", level = "25-35", targets = {"a necromantic guard", "a Bloodloch soldier", "a conjured wraith", "a Bloodloch lich", "a female villager", "an undead villager", "Mala, the Artisan", "Firthar", "Hassik, the village elder", "an undead minion", "an undead child", "Moritsio, Owner of the Pub", "Igrar, Captain of the Gral", "a wealthy sailor"  } },
{area = "the Arurer Haven", level = "60", targets = {"a youthful priest", "a savvy priestess", "a budding priestess", "an aged priest", "Gunder, a retired sailor", "Father Garron, the priest", "Tisian, a young priest", "a young celestial angel" } },
{area = "the lost city of Iviofiyiedu", level = "45-55", targets = { "a ghost of a Mhun guard", "a ghost of a Mhun soldier", "General Abeshentesh", "a ghost of a male Mhun", "a ghost of a female Mhun", "a ghost of a young Mhun", "a mhun instructor", "Blacksmith Udhomentesh", "Fathientesh, a mhun crafter", "Dhemosh, a mhun miner" } },
{area = "the Village of Torston", level = "40+", targets = {"a mottled brown frog", "a venomous water snake", "a vicious snapping turtle", "a fierce crocodile", "an irritated crow", "a tall Horkvali woman", "a wary Xorani guard", "a stalwart Horkvali guard", "Estok, the guard captain", "a dusky-skinned Grook man", "a plump white grub", "a dark-skinned Grook woman", "a carefree Grook boy", "the impish outcast, Qezirath", "a frail Xorani man", "a little Grook girl", "Lesiv, the Torstonite chieftain"}},
{area = "the Cathedral of Gloaming", level = "35-40", targets = {"a Dwarven priest"}},
{area = "the Vilimo Fields", level = "35-40", targets = {"Nysaac", "a field harvester", "a field monitor", "a decaying donkey", "Laoghaire, the monitor", "Maeron, the Quartermaster", "Administrator Kamakshi", "a semi-conscious young woman", "a semi-conscious young man","a semi-conscious elderly man", "a semi-conscious elderly woman", "a semi-conscious man", "a semi-conscious woman", "an undead bloodhound", "a field hauler", "a spectral minion"}},
{area = "the Mannaseh Swamp", level = "99+", targets = {"a savage mutant pumpkin", "a skittering miscreation", "a malformed stalker", "a miscreated avian", "an ichorous miscreation", "an amphibious malformation",}},
{area = "the Village of Craneskull", level = "35-40", targets = {"a savage mutant pumpkin", "a muddy Trollish child", "a slender mud adder", "a rugged Trollish man", "a plump Trollish woman", "a lumbering Troll guard", "an elderly Troll priest", "a lean guard hound", "a traitorous Mitrine hunter","a black ram", "a militant Troll warrior", "a Troll ritualist", "an arachnid Chiav guard", "an arachnid Chiav enforcer", "an arachnid Chiav archer","an immense Trollish chieftain", "a lanky, Trollish witch doctor"}},
{area = "the Maestral Shoals", level = "99+", targets = {"a tattered skrell", "a leathery skrell", "an emaciated skrell","a sinewy skrell lurker", "a skittish sandpiper", "a large, ill-tempered crab", "a glossy red crab", "a mottled crab"}},
{area = "Maestral's Barrier Reef", level = "99+", targets = {"a school of long fin reef minnows", "a savage, scarred skrell","a sharp-toothed skrell", "a skrell hatchling","an Albedian codfish", "a bony Delvian boxfish", "a pot-bellied seahorse", "a school of neon tetra fish", "a hulking skrell matriarch", "a puffer fish", "a bottom-feeding flatfish"}},
{area = "Mejev Nider Nesve wo Ti, Matati wo Eja sota Aran wo Aransa", level = "99+", targets = {"a four-winged ayvarin", "a predatory kashnalda", "a swift vukon"}},
{area = "the Underbelly", level = "99+", targets ={"a pale skrell whelp", "a desiccated Utari zombie", "a massive grey rat", "a dire, plagued rat", "an erratic Tarpen cultist", "a mangy Caentoi cultist", "an Utari cultist with grim facial markings", "a glazed-eye zombie Aslinn", "a ravenous skrell", "a venomous skrell whelp", "a feral vakmut", "a malnourished vakmut", "a snarling vakmut hound", "a grey-skinned skrell whelp", "a simple peasant", "a drooling zombie Tarpen", "a massive, tan-shelled whelk", "a gigantic black rat", "a jagged Golban ghast", "a gigantic white rat", "a hunched, bone-fisted Golban zombie", "a hulking Ursal ghast", "a slavering vakmut", "a crawling, ravenous Aslinn ghast",}},
{area = "a deep underground cavern", level = "99+", targets = {"a Chaos-warped Chiav guard", "a Chaos-warped gargantuan carrier centipede", "a Chaos-warped egg-laying spider", "a demonic Chaos-warped spider"}},
{area = "Mount Hubride", level = "55-60", targets = {"a troll warrior", "a rugged roll miner", "a female troll villager", "a small, troll child", "a male troll villager"}},
{area = "Mount Heylai", level = "55-60", targets = {"a young dwarf", "an adolescent dwarf", "an armored dwarf", "a dwarf geared up for battle", "a dwarven warrior", "a dwarven miner", "a female dwarven villager", "a dwarven girl", "a dwarven boy"}},
{area = "the Siroccian Tunnels", level = "65-75", targets = {"a lurking shadow", "a spatial anomaly", "a crystal-encrusted golem", "a massive striped worm", "a disembodied soul", "a voracious blind-fish"}},
{area = "Rotfang Warren", level = "20-30", targets = {"a large rat", "a robed and cowled priest", "a spindly village alpha", "a white-nosed bat", "a large, juicy cavehopper", "a hunched villager", "a gaunt villager", "a drooling village child"}},
{area = "the Isle of Polyargos", level = "20-25", targets = {"a filthy harpy", "a barnacle-encrusted oyster", "a pathetic leper", "a leper child", "an old leper", "Kru'lax, the Harpy Queen", "a speckled, brown turtle"}},
{area = "the Khauskin Mines", level = "50-60", targets = {"a soft-shelled klikkin", "a grotesque fangtooth", "a burly Dwarven miner"}, items = {"a durable pickaxe", "a rough and jagged diamond", "a rough and jagged emerald", "a rough and jagged sapphire", "a small sack of black powder"}},
{area = "the Morgun Forest", level = "45+", targets = {"a sturdy oak", "a poisonous hemlock bush", "a pine sapling", "a strong pine", "a young beech tree", "a sinuous willow tree", "a willow sappling", "an enchanting meayan", "an oak sapling", "a prickly raspberry bush", "a handsom nayar", "a young willow tree", "a fluffy jambaali", "a young maple tree", "a young pine tree", "a young oak", "a wild boar", "a young beech tree"}},
{area = "Catacombs beneath Djeir", level = "40+", targets = {"a djeirani ghost",}},
{area = "the beaches of Liris", level = "5+", targets = {"a small, red crab", "a red hermit crab", "a slimy red-shelled snail", "a blue-shelled snail", "an orange-and-yellow stripped starfish", "a gargantuan crab", "a yellow-finned bream fish"}},
{area = "the Western Tundra", level = "40+", targets = {"a fur-clad troll worker", "a squat penguin", "a hunter clad in furs", "a massive orgyuk", "a bull mugyik", "a dusky mugyik", "a female mugyik", "a white mugyik calf"}},
{area = "the Ilhavon Forest", level = "40+", targets = {"a burrowing owl", "a golden scale rattlesnake", "a lumbering brown bear", "a plump duck", "a loosely clad Trollish woman", "a scarred Trollish man", "a blackbird", "a bear cub", "a giant pugnax crab", "a catfish", "a lake trout", "a school of fish", "an eerily glowing jellyfish", "a harpoon scorpion", "a dull brown lamprey", "a large buck", "a white tailed doe", "a young foal", "a moth", "a gargantuan cicada", "a magpie", "a frazzled-looking possum"}},
{area = "Siha Dylis", level = "30-35", targets = {"Krrtig, the goblin guard captain", "Tithy, the burial guard", "a goblin batrider",  "a goblin man", "a goblin woman", "a kobold male", "a kobold woman", "Head Foreman Cadric", "Foreman Dugan", "Lissta, a kobold spirit-mage",  "Deela, a kobold spirit-mage", "Mo, a kobold spirit-mage", "Riku, a goblin boy", "a disoriented cave bat", "a small red squirrel", "Maggie, a goblin woman", "Trak, a goblin boy"}},
{area = "the Barony of Dun Valley", level = "40-45", targets = {"a black and tan bloodhound", "a capybara", "an insignificant lime caterpillar",  "a dangerous water snake", "a male gorilla", "a spotted jaguar", "a poisonous snake", "a squirming white grub", "a tree frog", "a speckled, brown turtle",  "an opossum", "a slender mud adder", "a katydid", "a greyish green crocodile", "the Great Bull Elephant", "a crab", "a large red crab", "a school of piranha", "a raccoon", "a rune-covered lodestone golem", "a muscular mountain lion", "a bighorn sheep"}},
{area = "the Hlugnic Labyrinth", level = "70+", targets = {"a rune-covered lodestone golem", "an enormous spinelash fish", "a Hlugnic runeguard",  "a warden of the Hlugnic clans", "a boisterous Hlugna man", "Deorkaan, the Hlugna smithy", "a burly, stone-fisted laborer", "Foreman Grummosh"}},
{area = "the Valley of Kalebb", level = "1", targets = {"a long, thin grass snake", "Loraine, a village priestess", "Shanea, a village elder", "Morrid, a village elder", "a small child", "a female villager", "a villager", "a village farmer", "Lassorn, a village cooper", "a tower guard",  "Elenina, the astrologer", "a tower watchman", "the head scholar of Kalebb", "a scholar of Kalebb", "Muiran, a trapper", "a plump wild rabbit",  "a speckled, brown turtle", "a bald eagle", "a large, speckled turtle", "a small green water snake", "Edgar, the gardener", "Gaerath, the guard captain"}},
{area = "the Tarean Ice Caverns", level = "80+", targets = {"a ravenous ice fly", "a baby icewyrm", "a skilled Indyuk warrior", "an ornery frost gremlin", "a gigantic mother icewyrm", "an icy elemental guard", "a reanimated ice wolf"}},
{area = "Court of the Consortium", level = "50-60", targets = {"a shambling skeleton", "a spatial anomaly", "a crystal-encrusted golem", "a massive striped worm", "a disembodied soul"}},
{area = "Three Widows", level = "45", targets = {"a short-horned chamois", "a white-coated chinchilla", "a ruffled grouse"}},
{area = "the Mamashi Grasslands", level = "45", targets = {"a prairie dog", "a swiftly moving dragonfly", "a black rhinoceros", "a Mamashi lioness", "a Mamashi lion cub", "a banded scrubland racer", "a Mamashi lion"}},
{area = "the Ebon Basin", level = "Quest", targets = {"a speckled ash monitor"}},
{area = "the Squal", level ="99+", targets = {"a thuggish Keeper brute", "a camouflaged Keeper guerrilla", "a sly Keeper tamer", }},
{area = "the Karak Forest", level = "95+", targets = {"a speckled ptarmigan", "a regally-mantled red hart", "a black mountain hare", "a svelte red hind"}},
{area = "the Maul", level = "99", targets = {"a gaunt Aslinn guard", "an Aslinn slave catcher", "a snarling vakmut warhound", "a ravenous vakmut warhound", "a lithe Aslinn houndmaster", "a wary Aslinn slaver", "a wretched Aslinn slaver", "a cruel Aslinn guard", "a menacing Aslinn gladiator", "a scarred Aslinn gladiator"}},
{area = "the forgotten depths of Mount Helba", level = "99", targets = {"a towering fungal abomination", "a withered fungal abomination"}},
{area = "a basilisk lair", level = "100+", targets = {"a cave basilisk", "an Ursal elite guard", "a blindfolded Utari"}, items = {"the corpse of a Utari soldier", "a large piece of debris",}},
{area = "the Bakal Chasm", level = "100+", targets = {"an agitated basilisk", "an oversized, grey basilisk", "an armored, brown basilisk", "a spiked basilisk", "a grey and brown basilisk", "a blinded basilisk", "a juvenile basilisk", "a basilisk hatchling"}},
{area = "Clawhook Range", level = "100+", targets = {"an agitated basilisk", "an oversized, grey basilisk", "an armored, brown basilisk", "a spiked basilisk", "a grey and brown basilisk", "a blinded basilisk", "a juvenile basilisk", "a basilisk hatchling", "a spine-necked arrex", "a sabre-toothed abosvi", "a prowling barbed abosvi", "a mottled grey mountain goat"}},
{area = "the Welto Trench", level = "good luck", targets = {"a black hunter shark", "a spotted bull shark", "a scarred hunter shark", "a brown hunter shark", "a scarred welto shark", "a striped hunter shark", "a great white welto shark", "a brown bull shark", "a bronze tiger shark", "a black bull shark", "a spotted tiger shark", "a bronze tiger shark", "a grey hunter shark", "a bronze welto shark", "a brown tiger shark", "a storm-wing harpy", "a spotted welto shark", "a striped welto shark", "a striped tiger shark", "a striped bull shark", "a spotted hunter shark", "a black tiger shark", "a great white bull shark", "a menacing torvok", "a brown welto shark", "a great white tiger shark", "a menacing torvok", "a great white hunter shark", "a great white welto shark", "a bronze bull shark", "a grey tiger shark", "a bronze hunter shark", "a spotted hunter shark", "a scarred tiger shark", "a black welto shark", "a grey bull shark", "a striped welto shark", "a grey welto shark", "a black welto shark", "a scarred bull shark", "a blacktip shark", "a box jellyfish", "a giant manta ray", "a deep water serpent", "a stone crab"}},
{area = "Eftehl Island", level = "100+", targets = {"a vibrantly pink flamingo", "a large sea turtle", "a steel-grey barracuda", "a sleek hammerhead shark", "a ghost of a castle servant", "a ghost of a castle guard", "a lumbering ogre ghost", "a ghost of a castle kitchen worker"}, items = {},},{area = "Tak-re", level = "99+", targets = {"a vicious, mutated shark", "a vicious, mutated shark", "a hundred-strings jellyfish", "a horrifically deformed woodpecker", "a warped squirrel", "a mutated deer", }, items = {},},
{area = "Kkirrrr'shi Hive", level = "99+", targets = {"a feral Hokkali soldier", "a twisted Hokkali hunter", "a rabid Hokkali drone", "a hideous Hokkali Queensguard", "a freshly spawned Hokkali ambusher",}, items = {},},
{area = "within a deep mine", level = "Mining", targets = {"a bulbous direant bomber", "a sleek direant scout", "a chitinous direant soldier", "an agile direant worker", "a grimy bandit", "a bandit leader", "a dark-haired mole", "a stalagmite rat", "a massive, tunneling cave worm", "a many-eyed marionette slime", "a behemoth pit beast", "a floating cave manta", "a spotted cave salamander", "a fuzzy brown bat", "a rime-covered bear", "a long-jawed cave spider", "a bulbous, black spider", "a bristling, fanged bat", "a pale, eyeless amphibian", "a razor-finned eel", "a tiny blood worm", "a blue-streaked cave snail", "a luminous moth", "a writhing horsehair worm"}},
{area = "the Dyisen-Ashtan Memoryscape", level = "99+", targets = {"an incorporeal townsmen", "a ghastly beggar", "a spectral merchant", "an ethereal guardsman", "a spectral Balaton shark", "a fragmented, spectral memory", "a phantasmal mystic", "a disembodied soldier", "a ghostly seagull", "an eidolic, Seam-bound pilgrim",}},
{area = "Oblivion's Portent", level = "100+", targets = {"a singularly-focused defiler", "an otherworldly-shaped, gliding devourer", "a hungering voidwalker", "a writhing mass of voidspawn", "a many-legged, skittering aberration"}},
}

sunder_areaPaths = {
  ["Alaqsii Inlet"] = {
    v22477 = "22478",
    v22478 = "22481",
    v22481 = "22482",
    v22482 = "22483",
    v22483 = "22484",
    v22484 = "22566",
    v22485 = "22490",
    v22486 = "22485",
    v22487 = "22486",
    v22488 = "22487",
    v22490 = "22491",
    v22491 = "22492",
    v22492 = "22493",
    v22493 = "22494",
    v22494 = "22498",
    v22496 = "22497",
    v22497 = "22513",
    v22498 = "22499",
    v22499 = "22500",
    v22500 = "22501",
    v22501 = "22503",
    v22503 = "22504",
    v22504 = "22505",
    v22505 = "22506",
    v22506 = "22507",
    v22507 = "22508",
    v22508 = "22509",
    v22509 = "22510",
    v22510 = "22511",
    v22511 = "22512",
    v22512 = "22496",
    v22513 = "22515",
    v22515 = "22516",
    v22516 = "22517",
    v22517 = "22519",
    v22518 = "pthcity",
    v22519 = "22518",
    v22520 = "22488",
    v22521 = "22520",
    v22522 = "22521",
    v22523 = "22524",
    v22524 = "22522",
    v22525 = "22523",
    v22526 = "22527",
    v22527 = "22525",
    v22530 = "22531",
    v22531 = "22532",
    v22532 = "22526",
    v22533 = "22559",
    v22534 = "22535",
    v22535 = "22536",
    v22536 = "22533",
    v22537 = "22534",
    v22538 = "22537",
    v22539 = "22538",
    v22540 = "22539",
    v22541 = "22540",
    v22542 = "22551",
    v22543 = "22542",
    v22544 = "22543",
    v22545 = "22544",
    v22546 = "22545",
    v22547 = "22546",
    v22548 = "22547",
    v22549 = "22548",
    v22550 = "22549",
    v22551 = "22541",
    v22552 = "22550",
    v22553 = "22552",
    v22554 = "22553",
    v22555 = "22554",
    v22556 = "22557",
    v22557 = "22555",
    v22558 = "22530",
    v22559 = "22558",
    v22561 = "22556",
    v22562 = "22565",
    v22563 = "22564",
    v22564 = "22561",
    v22565 = "22563",
    v22566 = "22562"
  },
  Arbothia = {
    v15168 = "15409",
    v15409 = "15410",
    v15410 = "28115",
    v15411 = "27104",
    v15412 = "15417",
    v15413 = "15414",
    v15414 = "15418",
    v15415 = "15416",
    v15416 = "27119",
    v15417 = "15422",
    v15418 = "27107",
    v15419 = "27124",
    v15420 = "15421",
    v15421 = "15429",
    v15422 = "15420",
    v15427 = "15412",
    v15428 = "15419",
    v15429 = "15430",
    v15430 = "15428",
    v27100 = "27101",
    v27101 = "27102",
    v27102 = "27111",
    v27103 = "27120",
    v27104 = "15413",
    v27105 = "15411",
    v27106 = "27105",
    v27107 = "27109",
    v27108 = "pthcity",
    v27109 = "27108",
    v27110 = "15415",
    v27111 = "27110",
    v27112 = "27117",
    v27113 = "27103",
    v27114 = "27113",
    v27115 = "27114",
    v27116 = "27122",
    v27117 = "27118",
    v27118 = "27106",
    v27119 = "27115",
    v27120 = "27121",
    v27121 = "27116",
    v27122 = "27123",
    v27123 = "27112",
    v27124 = "27125",
    v27125 = "27100",
    v28115 = "15427"
  },
  Asper = {
    v13292 = "13294",
    v13293 = "13296",
    v13294 = "13295",
    v13295 = "13293",
    v13296 = "13297",
    v13297 = "13298",
    v13298 = "13299",
    v13299 = "13300",
    v13300 = "13301",
    v13301 = "13302",
    v13302 = "13322",
    v13303 = "13304",
    v13304 = "13305",
    v13305 = "13311",
    v13306 = "pthcity",
    v13308 = "13310",
    v13309 = "13317",
    v13310 = "13309",
    v13311 = "13312",
    v13312 = "13314",
    v13313 = "13315",
    v13314 = "13324",
    v13315 = "13316",
    v13316 = "13306",
    v13317 = "13319",
    v13318 = "13303",
    v13319 = "13320",
    v13320 = "13323",
    v13321 = "13308",
    v13322 = "13321",
    v13323 = "13325",
    v13324 = "13313",
    v13325 = "13326",
    v13326 = "13327",
    v13327 = "13328",
    v13328 = "13329",
    v13329 = "13332",
    v13330 = "13331",
    v13331 = "13337",
    v13332 = "13333",
    v13333 = "13334",
    v13334 = "13335",
    v13335 = "13336",
    v13336 = "13330",
    v13337 = "13338",
    v13338 = "13339",
    v13339 = "13340",
    v13340 = "13341",
    v13341 = "13342",
    v13342 = "13357",
    v13343 = "13358",
    v13344 = "13343",
    v13345 = "13344",
    v13346 = "13345",
    v13347 = "13346",
    v13348 = "13347",
    v13349 = "13348",
    v13350 = "13349",
    v13351 = "13350",
    v13352 = "13351",
    v13353 = "13352",
    v13354 = "13353",
    v13355 = "13354",
    v13356 = "13355",
    v13357 = "13356",
    v13358 = "13361",
    v13359 = "13362",
    v13360 = "13359",
    v13361 = "13364",
    v13362 = "13367",
    v13363 = "13360",
    v13364 = "13365",
    v13365 = "13366",
    v13366 = "13363",
    v13367 = "13379",
    v13368 = "13378",
    v13369 = "13374",
    v13370 = "13372",
    v13371 = "13369",
    v13372 = "13371",
    v13373 = "13370",
    v13374 = "13377",
    v13375 = "13380",
    v13376 = "13373",
    v13377 = "13368",
    v13378 = "13375",
    v13379 = "13376",
    v13380 = "13381",
    v13381 = "13382",
    v13382 = "13383",
    v13383 = "13384",
    v13384 = "13385",
    v13385 = "13386",
    v13386 = "13387",
    v13387 = "13388",
    v13388 = "19706",
    v13389 = "13390",
    v13390 = "13391",
    v13391 = "13318",
    v19706 = "13389"
  },
  ["the Dyisen-Ashtan Memoryscape"] = {
  v71126 = "72336",
  v71127 = "71126",
  v71215 = "72034",
  v71284 = "71286",
  v71285 = "72391",
  v71286 = "71285",
  v71381 = "72464",
  v71382 = "71381",
  v71389 = "71390",
  v71390 = "72505",
  v71393 = "71576",
  v71425 = "71426",
  v71426 = "71393",
  v71570 = "71595",
  v71572 = "71575",
  v71573 = "71599",
  v71575 = "71573",
  v71576 = "72371",
  v71577 = "71570",
  v71578 = "71577",
  v71579 = "71578",
  v71583 = "71596",
  v71584 = "71583",
  v71585 = "71584",
  v71586 = "71591",
  v71589 = "71586",
  v71590 = "71585",
  v71591 = "72440",
  v71595 = "71572",
  v71596 = "71589",
  v71598 = "71601",
  v71599 = "71600",
  v71600 = "71598",
  v71601 = "72064",
  v71606 = "71609",
  v71607 = "71606",
  v71608 = "71610",
  v71609 = "71608",
  v71610 = "72197",
  v71611 = "72284",
  v71616 = "71617",
  v71617 = "71425",
  v72024 = "72452",
  v72025 = "72217",
  v72029 = "72492",
  v72032 = "72136",
  v72033 = "72484",
  v72034 = "71382",
  v72035 = "72065",
  v72040 = "72245",
  v72041 = "72194",
  v72044 = "72180",
  v72048 = "72394",
  v72055 = "72232",
  v72056 = "72395",
  v72057 = "72330",
  v72059 = "72104",
  v72061 = "72441",
  v72064 = "72306",
  v72065 = "72308",
  v72066 = "72423",
  v72067 = "72228",
  v72080 = "72471",
  v72081 = "72353",
  v72083 = "72363",
  v72084 = "72431",
  v72088 = "72479",
  v72089 = "72477",
  v72092 = "72357",
  v72093 = "72411",
  v72094 = "72317",
  v72097 = "72138",
  v72104 = "71607",
  v72109 = "72425",
  v72110 = "72314",
  v72113 = "72212",
  v72120 = "72325",
  v72123 = "72488",
  v72127 = "72406",
  v72131 = "71579",
  v72132 = "72165",
  v72134 = "72249",
  v72135 = "72134",
  v72136 = "72140",
  v72137 = "72035",
  v72138 = "72145",
  v72140 = "72143",
  v72141 = "72474",
  v72142 = "72092",
  v72143 = "72142",
  v72145 = "72024",
  v72157 = "72366",
  v72159 = "72328",
  v72165 = "72048",
  v72180 = "72491",
  v72183 = "72427",
  v72189 = "72437",
  v72194 = "72123",
  v72197 = "72240",
  v72198 = "72268",
  v72204 = "72408",
  v72205 = "72025",
  v72208 = "72360",
  v72212 = "72418",
  v72217 = "72029",
  v72223 = "72414",
  v72224 = "72291",
  v72227 = "72242",
  v72228 = "72444",
  v72232 = "72433",
  v72236 = "72465",
  v72240 = "72204",
  v72242 = "72384",
  v72245 = "72459",
  v72247 = "72205",
  v72249 = "72113",
  v72258 = "72362",
  v72262 = "72131",
  v72268 = "72110",
  v72275 = "72258",
  v72276 = "72320",
  v72277 = "72285",
  v72279 = "72277",
  v72281 = "72159",
  v72284 = "72223",
  v72285 = "71611",
  v72291 = "72089",
  v72306 = "72468",
  v72307 = "72080",
  v72308 = "72044",
  v72312 = "72486",
  v72314 = "72422",
  v72315 = "72312",
  v72316 = "72066",
  v72317 = "72316",
  v72318 = "72094",
  v72319 = "72318",
  v72320 = "72059",
  v72322 = "72420",
  v72325 = "72476",
  v72326 = "72315",
  v72327 = "72336",
  v72328 = "72347",
  v72330 = "72141",
  v72336 = "72040",
  v72337 = "72157",
  v72344 = "72359",
  v72346 = "72032",
  v72347 = "72057",
  v72349 = "72354",
  v72353 = "72349",
  v72354 = "72367",
  v72357 = "72189",
  v72359 = "72370",
  v72360 = "72276",
  v72362 = "72326",
  v72363 = "72247",
  v72365 = "72061",
  v72366 = "72344",
  v72367 = "72368",
  v72368 = "72281",
  v72370 = "72120",
  v72371 = "72198",
  v72372 = "72416",
  v72381 = "72236",
  v72384 = "72434",
  v72388 = "72056",
  v72391 = "72033",
  v72394 = "72507",
  v72395 = "72346",
  v72401 = "72307",
  v72404 = "72365",
  v72406 = "71127",
  v72408 = "71389",
  v72411 = "72415",
  v72414 = "72127",
  v72415 = "72372",
  v72416 = "71284",
  v72418 = "71616",
  v72420 = "72055",
  v72422 = "72109",
  v72423 = "72208",
  v72425 = "72183",
  v72427 = "72388",
  v72431 = "72083",
  v72433 = "72475",
  v72434 = "72081",
  v72435 = "72503",
  v72437 = "72435",
  v72440 = "72322",
  v72441 = "72401",
  v72444 = "72327",
  v72445 = "72319",
  v72446 = "72041",
  v72452 = "72067",
  v72459 = "72460",
  v72460 = "72275",
  v72464 = "71590",
  v72465 = "72404",
  v72468 = "72481",
  v72469 = "72132",
  v72471 = "72224",
  v72474 = "72135",
  v72475 = "72227",
  v72476 = "72445",
  v72477 = "71215",
  v72479 = "72381",
  v72481 = "72097",
  v72484 = "72279",
  v72486 = "72137",
  v72488 = "72469",
  v72491 = "72337",
  v72492 = "72262",
  v72503 = "72084",
  v72505 = "72446",
  v72507 = "72088"
},
  Bloodloch = {
    v10011 = "5638",
    v11430 = "9139",
    v12636 = "8007",
    v1270 = "6821",
    v1331 = "1333",
    v1333 = "4974",
    v1336 = "5009",
    v1337 = "1336",
    v1338 = "1337",
    v14523 = "14524",
    v14524 = "14526",
    v14525 = "14523",
    v14526 = "14527",
    v14527 = "26974",
    v1537 = "1338",
    v1538 = "5451",
    v18278 = "24197",
    v24197 = "12636",
    v26974 = "4429",
    v28058 = "53831",
    v31044 = "9109",
    v3490 = "1538",
    v38564 = "9128",
    v42903 = "6817",
    v4400 = "3490",
    v4429 = "4400",
    v4680 = "5554",
    v4683 = "4680",
    v4690 = "18278",
    v4719 = "4690",
    v4963 = "42903",
    v4974 = "66512",
    v5009 = "5440",
    v53831 = "4719",
    v5440 = "5450",
    v5450 = "7678",
    v5451 = "5488",
    v5458 = "5461",
    v5461 = "10011",
    v5488 = "5458",
    v5554 = "14525",
    v5638 = "6157",
    v6157 = "9240",
    v6161 = "9145",
    v65045 = "68235",
    v66512 = "65045",
    v6817 = "6819",
    v6819 = "6823",
    v6821 = "9104",
    v6823 = "9134",
    v68235 = "4963",
    v7678 = "7679",
    v7679 = "9190",
    v8007 = "4683",
    v9104 = "9105",
    v9105 = "9106",
    v9106 = "9107",
    v9107 = "9118",
    v9108 = "31044",
    v9109 = "9115",
    v9115 = "28058",
    v9118 = "9121",
    v9119 = "9108",
    v9120 = "9123",
    v9121 = "9120",
    v9122 = "9126",
    v9123 = "9124",
    v9124 = "9125",
    v9125 = "9122",
    v9126 = "9129",
    v9127 = "9119",
    v9128 = "9127",
    v9129 = "38564",
    v9134 = "9135",
    v9135 = "9141",
    v9138 = "9160",
    v9139 = "6161",
    v9140 = "11430",
    v9141 = "9142",
    v9142 = "9140",
    v9145 = "9146",
    v9146 = "9138",
    v9160 = "1270",
    v9187 = "9216",
    v9190 = "",
    v9194 = "9195",
    v9195 = "9196",
    v9196 = "9197",
    v9197 = "9201",
    v9201 = "9202",
    v9202 = "9206",
    v9206 = "1331",
    v9216 = "1537",
    v9218 = "9187",
    v9219 = "9218",
    v9220 = "9219",
    v9221 = "9220",
    v9222 = "9221",
    v9225 = "9254",
    v9228 = "9229",
    v9229 = "9244",
    v9230 = "9253",
    v9231 = "9250",
    v9234 = "9241",
    v9235 = "9234",
    v9236 = "9235",
    v9237 = "9236",
    v9238 = "9237",
    v9239 = "9238",
    v9240 = "9239",
    v9241 = "9242",
    v9242 = "9243",
    v9243 = "9248",
    v9244 = "9245",
    v9245 = "9246",
    v9246 = "9247",
    v9247 = "9222",
    v9248 = "9251",
    v9249 = "9252",
    v9250 = "9228",
    v9251 = "9249",
    v9252 = "9225",
    v9253 = "9231",
    v9254 = "9230"
  },
  ["Catacombs beneath Djeir"] = {
    v12766 = "12776",
    v12767 = "12766",
    v12768 = "12767",
    v12769 = "pthcity",
    v12770 = "12769",
    v12771 = "12770",
    v12772 = "12771",
    v12773 = "12772",
    v12774 = "12773",
    v12775 = "12774",
    v12776 = "12775",
    v13098 = "13099",
    v13099 = "13102",
    v13100 = "13101",
    v13101 = "13104",
    v13102 = "13103",
    v13103 = "13100",
    v13104 = "13105",
    v13105 = "13106",
    v13106 = "13108",
    v13108 = "13109",
    v13109 = "13110",
    v13110 = "12768"
  },
  ["Chapel Garden"] = {
    v26562 = "26564",
    v26563 = "26565",
    v26564 = "26563",
    v26565 = "26566",
    v26566 = "26567",
    v26567 = "26568",
    v26568 = "26569",
    v26569 = "26570",
    v26570 = "26571",
    v26571 = "26573",
    v26572 = "26574",
    v26573 = "26572",
    v26574 = "26575",
    v26575 = "26576",
    v26576 = "26577",
    v26577 = "26578",
    v26578 = "26579",
    v26579 = "26580",
    v26580 = "26581",
    v26581 = "26582",
    v26582 = "26583",
    v26583 = "26584",
    v26584 = "26585",
    v26585 = "26586",
    v26586 = "26587",
    v26587 = "26588",
    v26588 = "26589",
    v26589 = "26590",
    v26590 = "26591",
    v26591 = "26592",
    v26592 = "26593",
    v26593 = "26594",
    v26594 = "26595",
    v26595 = "26596",
    v26596 = "26597",
    v26597 = "26598",
    v26598 = "26615",
    v26599 = "26600",
    v26600 = "26617",
    v26601 = "26602",
    v26602 = "26620",
    v26603 = "26604",
    v26604 = "26621",
    v26605 = "26606",
    v26606 = "26623",
    v26607 = "26608",
    v26608 = "26609",
    v26609 = "26610",
    v26610 = "26624",
    v26611 = "26612",
    v26612 = "26626",
    v26613 = "26614",
    v26614 = "26618",
    v26615 = "26616",
    v26616 = "26633",
    v26617 = "26627",
    v26618 = "26619",
    v26619 = "26611",
    v26620 = "26599",
    v26621 = "26622",
    v26622 = "26601",
    v26623 = "26603",
    v26624 = "26625",
    v26625 = "26605",
    v26626 = "26607",
    v26627 = "pthcity",
    v26633 = "26613",
    v26920 = "26562"
  },
  ["Cinderbreach Mine"] = {
    v41240 = "44155",
    v44155 = "44156",
    v44156 = "44157",
    v44157 = "44158",
    v44158 = "44159",
    v44159 = "44160",
    v44160 = "44171",
    v44161 = "44162",
    v44162 = "44163",
    v44163 = "44164",
    v44164 = "44165",
    v44165 = "44166",
    v44166 = "44167",
    v44167 = "44168",
    v44168 = "44169",
    v44169 = "58349",
    v44170 = "44172",
    v44171 = "44170",
    v44172 = "44173",
    v44173 = "44174",
    v44174 = "44175",
    v44175 = "44176",
    v44176 = "44177",
    v44177 = "44178",
    v44178 = "44179",
    v44179 = "44180",
    v44180 = "44182",
    v44181 = "44189",
    v44182 = "44184",
    v44183 = "44181",
    v44184 = "44185",
    v44185 = "44186",
    v44186 = "44187",
    v44187 = "44188",
    v44188 = "44183",
    v44189 = "44190",
    v44190 = "44191",
    v44191 = "44193",
    v44192 = "44161",
    v44193 = "44192",
    v58349 = ""
  },
  ["Clawhook Range"] ={
  v57863 = "57865", 
v57897 = "57899", 
v57882 = "57883", 
v57857 = "57858", 
v49582 = "49583", 
v50159 = "50158", 
v57856 = "57855", 
v57899 = "57900", 
v57880 = "57882", 
v57866 = "57869", 
v49965 = "49966", 
v49555 = "49559", 
v49632 = "49555", 
v49624 = "49621", 
v49598 = "49597", 
v49626 = "49627", 
v49573 = "49575", 
v49580 = "49568", 
v49576 = "49579", 
v50140 = "50141", 
v49597 = "49596", 
v57914 = "57915", 
v57921 = "57261", 
v57894 = "57895", 
v49622 = "49623", 
v49548 = "49549", 
v57892 = "57893", 
v57942 = "57943", 
v57873 = "57874", 
v49607 = "49608", 
v49562 = "49561", 
v49620 = "49622", 
v49584 = "49625", 
v49616 = "49611", 
v57865 = "57868", 
v57872 = "57873", 
v49600 = "49591", 
v57874 = "57875", 
v49572 = "49573", 
v49635 = "49631", 
v49960 = "49968", 
v50161 = "50162", 
v57918 = "57921", 
v57912 = "57913", 
v49609 = "49610", 
v57262 = "57263", 
v49604 = "49603", 
v49546 = "49547", 
v57868 = "57866", 
v49602 = "49600", 
v49592 = "49590", 
v57889 = "57888", 
v49946 = "49958", 
v57890 = "57885", 
v49611 = "49584", 
v49628 = "pthcity", 
v57893 = "57894", 
v49605 = "49606", 
v50139 = "50147", 
v49581 = "49582", 
v49968 = "49946", 
v57911 = "57912", 
v49566 = "49565", 
v50153 = "50154", 
v57888 = "57881", 
v49619 = "49617", 
v57895 = "57896", 
v57917 = "57919", 
v57919 = "57922", 
v57862 = "57864", 
v49567 = "57853", 
v57859 = "57860", 
v49610 = "50139", 
v57855 = "57857", 
v57886 = "57887", 
v49629 = "49570", 
v50155 = "50156", 
v50156 = "49967", 
v49612 = "49615", 
v49565 = "49564", 
v57861 = "57862", 
v57970 = "57972", 
v49627 = "49628", 
v57941 = "57942", 
v49959 = "50161", 
v49618 = "49619", 
v49630 = "49571", 
v57903 = "57905", 
v49631 = "49633", 
v49615 = "49620", 
v57913 = "57914", 
v57875 = "57876", 
v50141 = "49566", 
v49633 = "49599", 
v50147 = "49965", 
v57876 = "57877", 
v49967 = "50149", 
v50162 = "49961", 
v49593 = "49595", 
v49575 = "49576", 
v57860 = "57861", 
v49568 = "49567", 
v49571 = "49593", 
v49561 = "49569", 
v50149 = "49963", 
v57901 = "57902", 
v49621 = "49618", 
v57864 = "57863", 
v49585 = "49612", 
v49596 = "49572", 
v49549 = "49632", 
v57972 = "57944", 
v49570 = "49630", 
v49547 = "49548", 
v49579 = "49580", 
v57263 = "57941", 
v50148 = "50152", 
v49617 = "49616", 
v57915 = "57917", 
v57943 = "57948", 
v57881 = "57880", 
v57906 = "57908", 
v49961 = "50163", 
v49564 = "49563", 
v57858 = "57859", 
v49591 = "49592", 
v49563 = "49562", 
v49603 = "49602", 
v50163 = "49960", 
v50152 = "50157", 
v49625 = "49626", 
v50158 = "50160", 
v50154 = "50155", 
v57905 = "57906", 
v57900 = "57901", 
v57887 = "57891", 
v49595 = "49594", 
v49594 = "49604", 
v57877 = "57889", 
v49569 = "49629", 
v57853 = "57854", 
v57902 = "57903", 
v49606 = "49607", 
v50160 = "49959", 
v49560 = "49605", 
v57891 = "57892", 
v57883 = "57884", 
v49599 = "49598", 
v49963 = "50140", 
v57896 = "57897", 
v57261 = "57262", 
v49966 = "50148", 
v49608 = "49609", 
v57908 = "57911", 
v50157 = "50159", 
v57922 = "57918", 
v57948 = "57970", 
v49583 = "49585", 
v49559 = "49560", 
v50151 = "50150", 
v49623 = "49624", 
v57869 = "57872", 
v49958 = "50151", 
v49590 = "49635", 
v57854 = "57856", 
v57884 = "57890", 
v57885 = "57886", 
v50150 = "50153", 
v57944 = "49581"
  },
  ["Court of the Consortium"] = {
    v26994 = "26995",
    v26995 = "26996",
    v26996 = "26999",
    v26997 = "27000",
    v26998 = "26997",
    v26999 = "28005",
    v27000 = "27006",
    v27001 = "27005",
    v27002 = "27001",
    v27003 = "27004",
    v27004 = "27002",
    v27005 = "27012",
    v27006 = "27003",
    v27012 = "27816",
    v27013 = "27015",
    v27014 = "27013",
    v27015 = "27017",
    v27016 = "pthcity",
    v27017 = "27022",
    v27021 = "27016",
    v27022 = "27023",
    v27023 = "27029",
    v27024 = "27025",
    v27025 = "27030",
    v27029 = "27024",
    v27030 = "27031",
    v27031 = "27032",
    v27032 = "27033",
    v27033 = "27034",
    v27034 = "27035",
    v27035 = "27036",
    v27036 = "27037",
    v27037 = "27038",
    v27038 = "27040",
    v27040 = "27041",
    v27041 = "27021",
    v27816 = "27014",
    v28005 = "26998"
  },
  ["Difohr Passage"] = {
    v26522 = "",
    v44236 = "44237",
    v44237 = "44238",
    v44238 = "44239",
    v44239 = "44240",
    v44240 = "44241",
    v44241 = "44242",
    v44242 = "44243",
    v44243 = "44244",
    v44244 = "44245",
    v44245 = "44246",
    v44246 = "44247",
    v44247 = "44248",
    v44248 = "44249",
    v44249 = "44250",
    v44250 = "44251",
    v44251 = "44252",
    v44252 = "44253",
    v44253 = "44254",
    v44254 = "44255",
    v44255 = "44256",
    v44256 = "44257",
    v44257 = "44258",
    v44258 = "44259",
    v44259 = "44260",
    v44260 = "44261",
    v44261 = "44262",
    v44262 = "44264",
    v44263 = "44265",
    v44264 = "44263",
    v44265 = "44266",
    v44266 = "44267",
    v44267 = "44268",
    v44268 = "44270",
    v44269 = "44273",
    v44270 = "44269",
    v44273 = "44274",
    v44274 = "44275",
    v44275 = "44277",
    v44276 = "26522",
    v44277 = "44276"
  },
  ["Dovan Hollow"] = {
    v44515 = "49335",
    v45757 = "48405",
    v48405 = "49307",
    v48747 = "49287",
    v48748 = "48761",
    v48749 = "48748",
    v48750 = "48749",
    v48751 = "48755",
    v48752 = "48751",
    v48753 = "48752",
    v48754 = "48753",
    v48755 = "48750",
    v48761 = "48762",
    v48762 = "49333",
    v48763 = "49328",
    v48766 = "49314",
    v48767 = "49295",
    v48768 = "49305",
    v49286 = "48747",
    v49287 = "49288",
    v49288 = "49289",
    v49289 = "49290",
    v49290 = "49291",
    v49291 = "49292",
    v49292 = "49293",
    v49293 = "49294",
    v49294 = "48767",
    v49295 = "49296",
    v49296 = "49297",
    v49297 = "49299",
    v49298 = "49301",
    v49299 = "49300",
    v49300 = "49298",
    v49301 = "45757",
    v49302 = "48766",
    v49303 = "49304",
    v49304 = "49302",
    v49305 = "44515",
    v49306 = "49309",
    v49307 = "49306",
    v49308 = "48768",
    v49309 = "49310",
    v49310 = "49311",
    v49311 = "49308",
    v49312 = "49322",
    v49313 = "49312",
    v49314 = "49313",
    v49315 = "pthcity",
    v49316 = "49315",
    v49317 = "49316",
    v49318 = "49317",
    v49319 = "49318",
    v49320 = "49319",
    v49321 = "49320",
    v49322 = "49323",
    v49323 = "49321",
    v49328 = "49329",
    v49329 = "49303",
    v49330 = "48763",
    v49331 = "49330",
    v49332 = "49331",
    v49333 = "49332",
    v49334 = "48754",
    v49335 = "49334"
  },
  Drakuum = {
    v19854 = "20076",
    v20076 = "20077",
    v20077 = "20078",
    v20078 = "20079",
    v20079 = "20080",
    v20080 = "20081",
    v20081 = "20082",
    v20082 = "20083",
    v20083 = "20084",
    v20084 = "20085",
    v20085 = "20086",
    v20086 = "20087",
    v20087 = "20088",
    v20088 = "20089",
    v20089 = "20090",
    v20090 = "20091",
    v20091 = "20092",
    v20092 = "20093",
    v20093 = "20094",
    v20094 = "20095",
    v20095 = "20097",
    v20096 = "20098",
    v20097 = "20096",
    v20098 = "20099",
    v20099 = "20100",
    v20100 = "20101",
    v20101 = "20102",
    v20102 = "20103",
    v20103 = "20104",
    v20104 = "20105",
    v20105 = "20106",
    v20106 = "20107",
    v20107 = "20108",
    v20108 = "20109",
    v20109 = "20110",
    v20110 = "20116",
    v20111 = "20119",
    v20112 = "20113",
    v20113 = "20114",
    v20114 = "20115",
    v20115 = "20111",
    v20116 = "20117",
    v20117 = "20118",
    v20118 = "20112",
    v20119 = "20120",
    v20120 = "20121",
    v20121 = "20122",
    v20122 = "20123",
    v20123 = "20124",
    v20124 = "20125",
    v20125 = "20126",
    v20126 = "20127",
    v20127 = "20128",
    v20128 = "20129",
    v20129 = "20130",
    v20130 = "20131",
    v20131 = "20132",
    v20132 = "20133",
    v20133 = "20134",
    v20134 = "20135",
    v20135 = "20136",
    v20136 = "20137",
    v20137 = "20138",
    v20138 = "20139",
    v20139 = "20140",
    v20140 = "20141",
    v20141 = "20148",
    v20142 = "20152",
    v20143 = "20142",
    v20144 = "20143",
    v20145 = "20144",
    v20146 = "20145",
    v20147 = "20146",
    v20148 = "20147",
    v20149 = "pthcity",
    v20150 = "20149",
    v20151 = "20150",
    v20152 = "20151"
  },
  Duiran = {
    v43702 = "43890",
    v43703 = "43704",
    v43704 = "43705",
    v43705 = "43765",
    v43706 = "43707",
    v43707 = "43708",
    v43708 = "43709",
    v43709 = "43717",
    v43711 = "43712",
    v43712 = "43804",
    v43713 = "43702",
    v43714 = "43738",
    v43715 = "43720",
    v43716 = "43750",
    v43717 = "43729",
    v43719 = "43734",
    v43720 = "43724",
    v43721 = "43715",
    v43722 = "43721",
    v43723 = "43719",
    v43724 = "43725",
    v43725 = "43733",
    v43726 = "43727",
    v43727 = "43885",
    v43729 = "43730",
    v43730 = "43741",
    v43732 = "43746",
    v43733 = "43732",
    v43734 = "43714",
    v43737 = "43722",
    v43738 = "43726",
    v43741 = "43716",
    v43742 = "43723",
    v43743 = "43742",
    v43746 = "43743",
    v43750 = "43737",
    v43765 = "43769",
    v43767 = "43706",
    v43768 = "43771",
    v43769 = "43768",
    v43770 = "43773",
    v43771 = "43775",
    v43773 = "43767",
    v43774 = "43777",
    v43775 = "43774",
    v43777 = "43783",
    v43778 = "43800",
    v43779 = "43778",
    v43781 = "43779",
    v43782 = "43784",
    v43783 = "43786",
    v43784 = "43781",
    v43785 = "43782",
    v43786 = "43785",
    v43787 = "43770",
    v43788 = "43789",
    v43789 = "43787",
    v43790 = "43791",
    v43791 = "43788",
    v43792 = "43795",
    v43794 = "43790",
    v43795 = "43797",
    v43797 = "43794",
    v43800 = "43801",
    v43801 = "43802",
    v43802 = "43792",
    v43803 = "43713",
    v43804 = "43803",
    v43805 = "43711",
    v43806 = "43809",
    v43807 = "43808",
    v43808 = "43811",
    v43809 = "43810",
    v43810 = "43807",
    v43811 = "43829",
    v43813 = "43814",
    v43814 = "43806",
    v43815 = "43821",
    v43816 = "43813",
    v43817 = "43816",
    v43819 = "43817",
    v43821 = "43827",
    v43825 = "43819",
    v43826 = "43825",
    v43827 = "43826",
    v43829 = "43830",
    v43830 = "43837",
    v43835 = "43838",
    v43836 = "43835",
    v43837 = "43836",
    v43838 = "43841",
    v43840 = "43805",
    v43841 = "66589",
    v43842 = "66460",
    v43843 = "66459",
    v43845 = "43815",
    v43846 = "43845",
    v43885 = "",
    v43890 = "43893",
    v43891 = "43703",
    v43893 = "43891",
    v66459 = "43842",
    v66460 = "66547",
    v66547 = "43840",
    v66589 = "43843"
  },
  ["Dun Fortress"] = {
    v3833 = "3834",
    v3834 = "3888",
    v3863 = "3864",
    v3864 = "3866",
    v3866 = "3870",
    v3869 = "3876",
    v3870 = "3869",
    v3871 = "3872",
    v3872 = "3873",
    v3873 = "3833",
    v3874 = "3871",
    v3875 = "3874",
    v3876 = "3878",
    v3878 = "3879",
    v3879 = "3880",
    v3880 = "3875",
    v3886 = "3863",
    v3887 = "3886",
    v3888 = "5140",
    v3889 = "3891",
    v3890 = "3893",
    v3891 = "3890",
    v3893 = "5141",
    v3894 = "3895",
    v3895 = "3899",
    v3896 = "3902",
    v3897 = "3904",
    v3898 = "3906",
    v3899 = "3900",
    v3900 = "3896",
    v3902 = "3903",
    v3903 = "3897",
    v3904 = "3905",
    v3905 = "3898",
    v3906 = "3907",
    v3907 = "3908",
    v3908 = "3909",
    v3909 = "3910",
    v3910 = "3911",
    v3911 = "3912",
    v3912 = "3914",
    v3914 = "5155",
    v3915 = "3916",
    v3916 = "3917",
    v3917 = "3918",
    v3918 = "3919",
    v3919 = "3920",
    v3920 = "3991",
    v3921 = "5163",
    v3922 = "3924",
    v3923 = "3922",
    v3924 = "3926",
    v3925 = "3923",
    v3926 = "5168",
    v3928 = "5164",
    v3929 = "3928",
    v3930 = "3933",
    v3931 = "5166",
    v3932 = "3931",
    v3933 = "5165",
    v3934 = "3935",
    v3935 = "3936",
    v3936 = "3939",
    v3937 = "3988",
    v3938 = "3940",
    v3939 = "5172",
    v3940 = "3937",
    v3941 = "3963",
    v3942 = "3946",
    v3943 = "3948",
    v3944 = "3950",
    v3945 = "3952",
    v3946 = "3947",
    v3947 = "3943",
    v3948 = "3949",
    v3949 = "3944",
    v3950 = "3951",
    v3951 = "3945",
    v3952 = "3953",
    v3953 = "3961",
    v3954 = "3941",
    v3955 = "3956",
    v3956 = "3957",
    v3957 = "3954",
    v3958 = "3959",
    v3959 = "3960",
    v3960 = "3955",
    v3961 = "3964",
    v3962 = "3942",
    v3963 = "3962",
    v3964 = "3965",
    v3965 = "3987",
    v3987 = "5176",
    v3988 = "3989",
    v3989 = "3990",
    v3990 = "5174",
    v3991 = "3992",
    v3992 = "3993",
    v3993 = "3921",
    v3994 = "pthcity",
    v5140 = "3889",
    v5141 = "5143",
    v5142 = "5144",
    v5143 = "5142",
    v5144 = "5145",
    v5145 = "5148",
    v5147 = "5151",
    v5148 = "5149",
    v5149 = "5150",
    v5150 = "5153",
    v5151 = "5152",
    v5152 = "5154",
    v5153 = "5147",
    v5154 = "3894",
    v5155 = "5156",
    v5156 = "5158",
    v5157 = "3915",
    v5158 = "5161",
    v5159 = "5157",
    v5160 = "5159",
    v5161 = "5162",
    v5162 = "5160",
    v5163 = "3929",
    v5164 = "3930",
    v5165 = "3932",
    v5166 = "5167",
    v5167 = "3925",
    v5168 = "5171",
    v5171 = "5173",
    v5172 = "3938",
    v5173 = "3934",
    v5174 = "3958",
    v5176 = "5177",
    v5177 = "3994"
  },
    ["Eftehl Island"] = {
    v55777 = "59815",
    v55867 = "56476",
    v55868 = "55877",
    v55869 = "55867",
    v55875 = "56475",
    v55876 = "55875",
    v55877 = "55876",
    v55878 = "55868",
    v55883 = "55878",
    v55884 = "55883",
    v55885 = "55887",
    v55886 = "55885",
    v55887 = "55888",
    v55888 = "55890",
    v55890 = "55953",
    v55953 = "55954",
    v55954 = "55955",
    v55955 = "55956",
    v55956 = "55962",
    v55962 = "55884",
    v55964 = "55886",
    v56148 = "55964",
    v56149 = "56148",
    v56150 = "56151",
    v56151 = "56167",
    v56167 = "56149",
    v56168 = "56172",
    v56170 = "56168",
    v56172 = "56173",
    v56173 = "56150",
    v56174 = "56170",
    v56177 = "56174",
    v56178 = "56177",
    v56179 = "56180",
    v56180 = "56182",
    v56182 = "56178",
    v56475 = "55869",
    v56476 = "56478",
    v56477 = "56650",
    v56478 = "56477",
    v56650 = "69492",
    v59815 = "56179",
    v62766 = "62801",
    v62784 = "62800",
    v62785 = "62808",
    v62786 = "62785",
    v62787 = "62789",
    v62789 = "62791",
    v62791 = "62794",
    v62792 = "62806",
    v62793 = "63585",
    v62794 = "62795",
    v62795 = "63592",
    v62799 = "63595",
    v62800 = "62799",
    v62801 = "63586",
    v62806 = "62793",
    v62807 = "63591",
    v62808 = "63583",
    v62954 = "63105",
    v63105 = "63555",
    v63555 = "63567",
    v63556 = "63558",
    v63557 = "63556",
    v63558 = "63559",
    v63559 = "63560",
    v63560 = "63562",
    v63561 = "55777",
    v63562 = "63563",
    v63563 = "63564",
    v63564 = "63578",
    v63565 = "63557",
    v63566 = "63565",
    v63567 = "63568",
    v63568 = "63566",
    v63569 = "62954",
    v63570 = "63569",
    v63571 = "63570",
    v63572 = "63571",
    v63573 = "63574",
    v63574 = "63575",
    v63575 = "63588",
    v63576 = "63573",
    v63577 = "63576",
    v63578 = "63577",
    v63579 = "63561",
    v63580 = "63581",
    v63581 = "63579",
    v63582 = "62766",
    v63583 = "63582",
    v63584 = "63580",
    v63585 = "63584",
    v63586 = "62792",
    v63587 = "62807",
    v63588 = "63587",
    v63589 = "63590",
    v63590 = "62787",
    v63591 = "63589",
    v63592 = "62784",
    v63593 = "62786",
    v63594 = "63593",
    v63595 = "63594",
    v68952 = "68983",
    v68953 = "68986",
    v68983 = "70020",
    v68986 = "68988",
    v68988 = "68989",
    v68989 = "68992",
    v68992 = "68996",
    v68996 = "69073",
    v69073 = "69096",
    v69096 = "69097",
    v69097 = "68952",
    v69332 = "69585",
    v69334 = "69824",
    v69354 = "69451",
    v69368 = "69354",
    v69432 = "69368",
    v69451 = "69454",
    v69453 = "69457",
    v69454 = "69453",
    v69457 = "70284",
    v69492 = "69493",
    v69493 = "69571",
    v69495 = "70094",
    v69571 = "70408",
    v69572 = "69573",
    v69573 = "69575",
    v69575 = "70175",
    v69585 = "69586",
    v69586 = "69334",
    v69588 = "69590",
    v69590 = "69594",
    v69593 = "70096",
    v69594 = "69593",
    v69595 = "69596",
    v69596 = "69597",
    v69597 = "69598",
    v69598 = "70160",
    v69824 = "70205",
    v69825 = "69826",
    v69826 = "70134",
    v69827 = "70131",
    v69828 = "69827",
    v69853 = "69856",
    v69856 = "69958",
    v69857 = "69952",
    v69858 = "69953",
    v69952 = "69858",
    v69953 = "69495",
    v69954 = "69857",
    v69958 = "69954",
    v70020 = "69432",
    v70094 = "70100",
    v70095 = "70097",
    v70096 = "70098",
    v70097 = "69588",
    v70098 = "70099",
    v70099 = "69595",
    v70100 = "70141",
    v70126 = "69825",
    v70131 = "70132",
    v70132 = "70133",
    v70133 = "70470",
    v70134 = "70213",
    v70141 = "70095",
    v70159 = "70126",
    v70160 = "70162",
    v70161 = "70166",
    v70162 = "70161",
    v70166 = "70167",
    v70167 = "70168",
    v70168 = "69332",
    v70175 = "69853",
    v70205 = "70159",
    v70211 = "69828",
    v70213 = "70211",
    v70284 = "70325",
    v70325 = "70328",
    v70326 = "70327",
    v70327 = "70330",
    v70328 = "70331",
    v70329 = "70326",
    v70330 = "70334",
    v70331 = "70332",
    v70332 = "70333",
    v70333 = "70329",
    v70334 = "70335",
    v70335 = "70336",
    v70336 = "70337",
    v70337 = "pthcity",
    v70408 = "69572",
    v70470 = "70533",
    v70533 = "68953"
  },
  Enorian = {
    v11390 = "4581",
    v12471 = "56287",
    v14887 = "4583",
    v21899 = "12471",
    v22061 = "23776",
    v22063 = "4593",
    v22065 = "67804",
    v22066 = "11390",
    v22069 = "4586",
    v2284 = "4390",
    v2285 = "4396",
    v23776 = "4584",
    v2462 = "56525",
    v3419 = "21899",
    v3645 = "4585",
    v4390 = "3419",
    v4396 = "56407",
    v4409 = "2284",
    v4581 = "4582",
    v4582 = "22063",
    v4583 = "22069",
    v4584 = "3645",
    v4585 = "4587",
    v4586 = "22061",
    v4587 = "4588",
    v4588 = "22065",
    v4589 = "22066",
    v4593 = "14887",
    v51959 = "51960",
    v51960 = "51961",
    v51961 = "55003",
    v53722 = "53724",
    v53724 = "53728",
    v53725 = "54076",
    v53727 = "54073",
    v53728 = "53729",
    v53729 = "53727",
    v54073 = "54074",
    v54074 = "53725",
    v54075 = "54077",
    v54076 = "54078",
    v54077 = "53722",
    v54078 = "54087",
    v54079 = "54094",
    v54080 = "54079",
    v54081 = "54080",
    v54082 = "54097",
    v54083 = "54082",
    v54084 = "54083",
    v54085 = "54084",
    v54086 = "54085",
    v54087 = "54086",
    v54088 = "55820",
    v54089 = "54090",
    v54090 = "54091",
    v54091 = "54075",
    v54093 = "54110",
    v54094 = "54093",
    v54095 = "54081",
    v54096 = "54095",
    v54097 = "54098",
    v54098 = "51959",
    v54100 = "54101",
    v54101 = "54088",
    v54102 = "56262",
    v54103 = "54102",
    v54104 = "54103",
    v54105 = "54104",
    v54110 = "54105",
    v54111 = "54112",
    v54112 = "54113",
    v54113 = "54114",
    v54114 = "54115",
    v54115 = "54089",
    v55003 = "55146",
    v55146 = "55194",
    v55194 = "55347",
    v55347 = "55705",
    v55705 = "55759",
    v55738 = "55743",
    v55739 = "55744",
    v55740 = "55745",
    v55743 = "55739",
    v55744 = "55740",
    v55745 = "55754",
    v55746 = "55755",
    v55754 = "55746",
    v55755 = "58711",
    v55759 = "55738",
    v55766 = "54100",
    v55767 = "55766",
    v55768 = "56502",
    v55769 = "55767",
    v55770 = "55769",
    v55772 = "55770",
    v55773 = "55775",
    v55774 = "55776",
    v55775 = "55778",
    v55776 = "55773",
    v55778 = "56431",
    v55779 = "55780",
    v55780 = "55781",
    v55781 = "55784",
    v55784 = "55772",
    v55791 = "55792",
    v55792 = "55794",
    v55793 = "55795",
    v55794 = "55793",
    v55795 = "55800",
    v55800 = "55802",
    v55801 = "55804",
    v55802 = "55801",
    v55804 = "55816",
    v55807 = "55779",
    v55816 = "55807",
    v55820 = "55827",
    v55827 = "55833",
    v55828 = "55829",
    v55829 = "66545",
    v55830 = "55839",
    v55833 = "55834",
    v55834 = "55828",
    v55839 = "55866",
    v55866 = "56526",
    v56262 = "56263",
    v56263 = "56264",
    v56264 = "58601",
    v56266 = "56493",
    v56269 = "56270",
    v56270 = "56461",
    v56271 = "56269",
    v56274 = "56498",
    v56277 = "4409",
    v56282 = "56395",
    v56287 = "4589",
    v56395 = "56399",
    v56396 = "55768",
    v56399 = "56405",
    v56403 = "56516",
    v56405 = "56432",
    v56406 = "56409",
    v56407 = "56406",
    v56408 = "2285",
    v56409 = "56410",
    v56410 = "56411",
    v56411 = "56412",
    v56412 = "56413",
    v56413 = "56414",
    v56414 = "56417",
    v56416 = "56418",
    v56417 = "56416",
    v56418 = "56422",
    v56422 = "56424",
    v56423 = "56426",
    v56424 = "56423",
    v56426 = "56427",
    v56427 = "56428",
    v56428 = "56429",
    v56429 = "56430",
    v56430 = "56436",
    v56431 = "55791",
    v56432 = "56408",
    v56436 = "56271",
    v56437 = "54111",
    v56438 = "56439",
    v56439 = "56440",
    v56440 = "56437",
    v56441 = "56444",
    v56442 = "56448",
    v56443 = "56442",
    v56444 = "56445",
    v56445 = "56438",
    v56446 = "66563",
    v56447 = "56466",
    v56448 = "56449",
    v56449 = "56441",
    v56450 = "56464",
    v56451 = "56469",
    v56452 = "56451",
    v56453 = "56467",
    v56454 = "56452",
    v56455 = "56454",
    v56456 = "56457",
    v56457 = "56453",
    v56458 = "56456",
    v56459 = "56460",
    v56460 = "56458",
    v56461 = "56459",
    v56464 = "56465",
    v56465 = "56446",
    v56466 = "56443",
    v56467 = "56468",
    v56468 = "56455",
    v56469 = "56480",
    v56470 = "56473",
    v56471 = "56481",
    v56473 = "56474",
    v56474 = "56471",
    v56479 = "56470",
    v56480 = "56479",
    v56481 = "56482",
    v56482 = "56484",
    v56483 = "56485",
    v56484 = "56483",
    v56485 = "56487",
    v56486 = "56450",
    v56487 = "56486",
    v56488 = "54096",
    v56489 = "56488",
    v56490 = "56492",
    v56491 = "56489",
    v56492 = "56491",
    v56493 = "56490",
    v56494 = "56499",
    v56495 = "56266",
    v56496 = "56274",
    v56497 = "56496",
    v56498 = "56504",
    v56499 = "56495",
    v56500 = "56494",
    v56501 = "56396",
    v56502 = "56497",
    v56503 = "56506",
    v56504 = "56500",
    v56505 = "56501",
    v56506 = "56510",
    v56507 = "56503",
    v56508 = "56505",
    v56509 = "56507",
    v56510 = "56403",
    v56514 = "56508",
    v56516 = "56514",
    v56525 = "",
    v56526 = "2462",
    v58589 = "58595",
    v58590 = "58591",
    v58591 = "58708",
    v58592 = "58593",
    v58593 = "58715",
    v58595 = "55774",
    v58601 = "58602",
    v58602 = "58603",
    v58603 = "58855",
    v58707 = "58589",
    v58708 = "58709",
    v58709 = "60137",
    v58710 = "58707",
    v58711 = "58592",
    v58712 = "58716",
    v58714 = "58712",
    v58715 = "58714",
    v58716 = "58590",
    v58855 = "58989",
    v58989 = "65726",
    v58990 = "60943",
    v60137 = "58710",
    v60942 = "65847",
    v60943 = "60979",
    v60979 = "60985",
    v60985 = "60942",
    v65726 = "58990",
    v65847 = "65848",
    v65848 = "65971",
    v65971 = "56277",
    v66545 = "55830",
    v66563 = "56447",
    v67804 = "56282"
  },
  ["Forsaken Evlasu"] = {
    v53280 = "53281",
    v53281 = "53282",
    v53282 = "53285",
    v53283 = "53284",
    v53284 = "53290",
    v53285 = "53286",
    v53286 = "53288",
    v53287 = "53292",
    v53288 = "53293",
    v53289 = "53294",
    v53290 = "53322",
    v53291 = "53336",
    v53292 = "53283",
    v53293 = "53289",
    v53294 = "53287",
    v53295 = "53297",
    v53296 = "53309",
    v53297 = "53330",
    v53298 = "53311",
    v53300 = "53319",
    v53301 = "53317",
    v53302 = "53304",
    v53304 = "53306",
    v53306 = "53308",
    v53308 = "53321",
    v53309 = "53295",
    v53310 = "53325",
    v53311 = "53316",
    v53314 = "53315",
    v53315 = "pthcity",
    v53316 = "53314",
    v53317 = "53327",
    v53318 = "53310",
    v53319 = "53326",
    v53320 = "53328",
    v53321 = "53298",
    v53322 = "53329",
    v53324 = "53320",
    v53325 = "53300",
    v53326 = "53301",
    v53327 = "53334",
    v53328 = "53302",
    v53329 = "53291",
    v53330 = "53324",
    v53334 = "53296",
    v53336 = "53338",
    v53338 = "53318"
  },
  ["Halls of Tornos"] = {
    v21747 = "21748",
    v21748 = "21900",
    v21900 = "21901",
    v21901 = "21902",
    v21902 = "21903",
    v21903 = "21904",
    v21904 = "21905",
    v21905 = "21906",
    v21906 = "22083",
    v21907 = "21909",
    v21908 = "21907",
    v21909 = "21910",
    v21910 = "21999",
    v21989 = "21747",
    v21990 = "21994",
    v21991 = "21990",
    v21992 = "21991",
    v21993 = "21995",
    v21994 = "21989",
    v21995 = "21992",
    v21996 = "21993",
    v21997 = "21998",
    v21998 = "21996",
    v21999 = "21997",
    v22083 = "22084",
    v22084 = "22085",
    v22085 = "22784",
    v22086 = "22087",
    v22087 = "22795",
    v22088 = "22086",
    v22089 = "22684",
    v22684 = "22088",
    v22685 = "22089",
    v22686 = "22685",
    v22687 = "22688",
    v22688 = "22686",
    v22689 = "22687",
    v22690 = "22689",
    v22691 = "22692",
    v22692 = "22690",
    v22693 = "22691",
    v22784 = "22785",
    v22785 = "22786",
    v22786 = "22787",
    v22787 = "22788",
    v22788 = "22789",
    v22789 = "22790",
    v22790 = "22791",
    v22791 = "22792",
    v22792 = "22793",
    v22793 = "22794",
    v22794 = "22693",
    v22795 = "22818",
    v22818 = "22819",
    v22819 = "22827",
    v22827 = "22835",
    v22835 = "22854",
    v22854 = "23164",
    v23164 = "23165",
    v23165 = "23166",
    v23166 = "23167",
    v23167 = "23168",
    v23168 = "23169",
    v23169 = "23170",
    v23170 = "23171",
    v23171 = "23173",
    v23172 = "23177",
    v23173 = "23174",
    v23174 = "23175",
    v23175 = "23176",
    v23176 = "23172",
    v23177 = "23178",
    v23178 = "23179",
    v23179 = "23180",
    v23180 = "23181",
    v23181 = "23182",
    v23182 = "23183",
    v23183 = "pthcity"
  },
  ["Kkirrrr'shi Hive"] ={
  v33242 = "6049",
  v44083 = "54916",
  v54916 = "54920",
  v54919 = "54924",
  v54920 = "54958",
  v54923 = "54950",
  v54924 = "54976",
  v54950 = "54978",
  v54958 = "54964",
  v54964 = "54970",
  v54970 = "54975",
  v54974 = "54923",
  v54975 = "54974",
  v54976 = "54984",
  v54977 = "54983",
  v54978 = "54977",
  v54983 = "54919",
  v54984 = "54986",
  v54985 = "54987",
  v54986 = "54985",
  v54987 = "pthcity",
  v54988 = "54989",
  v54989 = "54991",
  v54990 = "55004",
  v54991 = "55002",
  v55002 = "54990",
  v55004 = "55005",
  v55005 = "6037",
  v55009 = "55010",
  v55010 = "55013",
  v55011 = "55014",
  v55012 = "55011",
  v55013 = "55012",
  v55014 = "6050",
  v6032 = "6033",
  v6033 = "6034",
  v6034 = "6035",
  v6035 = "6036",
  v6036 = "54988",
  v6037 = "6038",
  v6038 = "6039",
  v6039 = "6040",
  v6040 = "6042",
  v6041 = "33242",
  v6042 = "6066",
  v6043 = "6044",
  v6044 = "6045",
  v6045 = "6048",
  v6046 = "6047",
  v6047 = "6041",
  v6048 = "6046",
  v6049 = "55009",
  v6050 = "44083",
  v6066 = "6067",
  v6067 = "6068",
  v6068 = "6069",
  v6069 = "6043",
  v68869 = "68879",
  v68879 = "69094",
  v68922 = "70491",
  v68925 = "68922",
  v68928 = "68925",
  v68930 = "68928",
  v68931 = "68930",
  v69094 = "70165",
  v69127 = "69715",
  v69135 = "69208",
  v69137 = "69206",
  v69206 = "69207",
  v69207 = "69135",
  v69208 = "69219",
  v69219 = "69220",
  v69220 = "69223",
  v69223 = "69727",
  v69469 = "69470",
  v69470 = "69475",
  v69475 = "69477",
  v69477 = "69482",
  v69479 = "70164",
  v69480 = "69479",
  v69481 = "69480",
  v69482 = "69481",
  v69508 = "68869",
  v69715 = "69716",
  v69716 = "69717",
  v69717 = "69718",
  v69718 = "69722",
  v69721 = "69723",
  v69722 = "69721",
  v69723 = "69724",
  v69724 = "6032",
  v69727 = "69728",
  v69728 = "69736",
  v69736 = "69737",
  v69737 = "69740",
  v69740 = "69742",
  v69742 = "69744",
  v69743 = "69127",
  v69744 = "69743",
  v69831 = "70147",
  v70147 = "69508",
  v70163 = "68931",
  v70164 = "70492",
  v70165 = "70172",
  v70172 = "69469",
  v70491 = "69137",
  v70492 = "70163"
},
  ["Luzith's Lair"] = {
    v16282 = "16373",
    v16283 = "16286",
    v16284 = "16287",
    v16285 = "16290",
    v16286 = "16285",
    v16287 = "16288",
    v16288 = "16283",
    v16289 = "16294",
    v16290 = "16292",
    v16291 = "16293",
    v16292 = "16291",
    v16293 = "16311",
    v16294 = "16296",
    v16295 = "16297",
    v16296 = "16295",
    v16297 = "16298",
    v16298 = "16300",
    v16299 = "16302",
    v16300 = "16301",
    v16301 = "16303",
    v16302 = "16304",
    v16303 = "16305",
    v16304 = "16308",
    v16305 = "16306",
    v16306 = "16307",
    v16307 = "16299",
    v16308 = "16309",
    v16309 = "16359",
    v16311 = "16289",
    v16333 = "16335",
    v16334 = "16336",
    v16335 = "16366",
    v16336 = "16360",
    v16337 = "16338",
    v16338 = "16339",
    v16339 = "16357",
    v16340 = "16362",
    v16341 = "16342",
    v16342 = "16343",
    v16343 = "16361",
    v16344 = "16367",
    v16345 = "16346",
    v16346 = "16350",
    v16347 = "16370",
    v16348 = "16353",
    v16349 = "16369",
    v16350 = "16351",
    v16351 = "16347",
    v16352 = "16372",
    v16353 = "16368",
    v16354 = "16355",
    v16355 = "16371",
    v16356 = "16348",
    v16357 = "16341",
    v16358 = "16334",
    v16359 = "16358",
    v16360 = "16333",
    v16361 = "16344",
    v16362 = "16337",
    v16363 = "16364",
    v16364 = "16365",
    v16365 = "pthcity",
    v16366 = "16340",
    v16367 = "16345",
    v16368 = "16354",
    v16369 = "16363",
    v16370 = "16352",
    v16371 = "16349",
    v16372 = "16356",
    v16373 = "16374",
    v16374 = "16375",
    v16375 = "16383",
    v16376 = "16377",
    v16377 = "16379",
    v16378 = "16380",
    v16379 = "16378",
    v16380 = "16382",
    v16381 = "16386",
    v16382 = "16402",
    v16383 = "16385",
    v16384 = "16376",
    v16385 = "16384",
    v16386 = "16387",
    v16387 = "16394",
    v16388 = "16389",
    v16389 = "16403",
    v16390 = "16400",
    v16391 = "16392",
    v16392 = "16393",
    v16393 = "16395",
    v16394 = "16388",
    v16395 = "16396",
    v16396 = "16397",
    v16397 = "16398",
    v16398 = "16399",
    v16399 = "16407",
    v16400 = "16401",
    v16401 = "16391",
    v16402 = "16381",
    v16403 = "16404",
    v16404 = "16405",
    v16405 = "16406",
    v16406 = "16390",
    v16407 = "16408",
    v16408 = "16409",
    v16409 = "16410",
    v16410 = "16411",
    v16411 = "16412",
    v16412 = "16284"
  },
  ["Mount Heylai"] = {
    v54482 = "59186",
    v58664 = "59274",
    v59186 = "59187",
    v59187 = "59188",
    v59188 = "59189",
    v59189 = "59190",
    v59190 = "59191",
    v59191 = "59192",
    v59192 = "59193",
    v59193 = "59194",
    v59194 = "59195",
    v59195 = "58664",
    v59274 = "59468",
    v59275 = "59278",
    v59276 = "59277",
    v59277 = "pthcity",
    v59278 = "59279",
    v59279 = "59280",
    v59280 = "59360",
    v59281 = "59276",
    v59360 = "59361",
    v59361 = "59281",
    v59467 = "59469",
    v59468 = "59467",
    v59469 = "59470",
    v59470 = "59275"
  },
  ["Mount Hubride"] = {
    v13425 = "13426",
    v13426 = "13427",
    v13427 = "13428",
    v13428 = "13431",
    v13431 = "13460",
    v13460 = "14075",
    v13461 = "13462",
    v13462 = "13463",
    v13463 = "13464",
    v13464 = "14070",
    v14047 = "14048",
    v14048 = "14053",
    v14049 = "14050",
    v14050 = "14051",
    v14051 = "pthcity",
    v14052 = "16113",
    v14053 = "14057",
    v14054 = "14055",
    v14055 = "14052",
    v14056 = "16116",
    v14057 = "14058",
    v14058 = "14059",
    v14059 = "14069",
    v14060 = "14061",
    v14061 = "16115",
    v14069 = "14060",
    v14070 = "14073",
    v14071 = "14072",
    v14072 = "14047",
    v14073 = "4546",
    v14074 = "14071",
    v14075 = "14076",
    v14076 = "14077",
    v14077 = "14079",
    v14079 = "14080",
    v14080 = "14081",
    v14081 = "14082",
    v14082 = "13461",
    v16113 = "16114",
    v16114 = "14056",
    v16115 = "16118",
    v16116 = "16117",
    v16117 = "14049",
    v16118 = "14054",
    v4546 = "14074"
  },
  ["Mount Humgurd"] = {
    v23128 = "23129",
    v23129 = "23130",
    v23130 = "23145",
    v23131 = "23132",
    v23132 = "23138",
    v23138 = "23139",
    v23139 = "23707",
    v23140 = "23131",
    v23141 = "23140",
    v23142 = "23141",
    v23143 = "23142",
    v23144 = "23143",
    v23145 = "23144",
    v23147 = "23156",
    v23149 = "23159",
    v23150 = "23149",
    v23151 = "23150",
    v23152 = "23151",
    v23153 = "23158",
    v23154 = "23153",
    v23155 = "23154",
    v23156 = "23155",
    v23157 = "23162",
    v23158 = "23152",
    v23159 = "23160",
    v23160 = "23161",
    v23161 = "23157",
    v23162 = "23163",
    v23163 = "23645",
    v23642 = "23644",
    v23643 = "23708",
    v23644 = "23643",
    v23645 = "23646",
    v23646 = "23647",
    v23647 = "23648",
    v23648 = "23649",
    v23649 = "23650",
    v23650 = "23651",
    v23651 = "23652",
    v23652 = "23653",
    v23653 = "23654",
    v23654 = "23655",
    v23655 = "23715",
    v23707 = "23642",
    v23708 = "23710",
    v23709 = "23711",
    v23710 = "23712",
    v23711 = "23147",
    v23712 = "23713",
    v23713 = "23709",
    v23715 = "23716",
    v23716 = "23774",
    v23717 = "23752",
    v23718 = "23775",
    v23752 = "23753",
    v23753 = "23718",
    v23754 = "23759",
    v23755 = "23754",
    v23756 = "23757",
    v23757 = "23758",
    v23758 = "23755",
    v23759 = "23760",
    v23760 = "23762",
    v23761 = "23768",
    v23762 = "23763",
    v23763 = "23764",
    v23764 = "23765",
    v23765 = "23767",
    v23766 = "23761",
    v23767 = "23766",
    v23768 = "23769",
    v23769 = "23770",
    v23770 = "23771",
    v23771 = "23772",
    v23772 = "23773",
    v23773 = "pthcity",
    v23774 = "23717",
    v23775 = "23756"
  },
  ["Myesian Run"] = {
    v44194 = "44203",
    v44195 = "44196",
    v44196 = "44197",
    v44197 = "44198",
    v44198 = "44199",
    v44199 = "44200",
    v44200 = "44202",
    v44201 = "44205",
    v44202 = "44201",
    v44203 = "44195",
    v44204 = "44206",
    v44205 = "44204",
    v44206 = "44207",
    v44207 = "44208",
    v44208 = "44209",
    v44209 = "44210",
    v44210 = "44211",
    v44211 = "44212",
    v44212 = "44213",
    v44213 = "44214",
    v44214 = "44216",
    v44215 = "44219",
    v44216 = "44217",
    v44217 = "44215",
    v44218 = "44220",
    v44219 = "44218",
    v44220 = "44221",
    v44221 = "44222",
    v44222 = "44223",
    v44223 = "44224",
    v44224 = "44225",
    v44225 = "44226",
    v44226 = "44228",
    v44228 = "44229",
    v44229 = "44231",
    v44231 = "44232",
    v44232 = "44233",
    v44233 = "44234",
    v44234 = "44235",
    v44235 = "58759"
  },
  Perilaus = {
    v11962 = "11964",
    v11964 = "11965",
    v11965 = "11966",
    v11966 = "11967",
    v11967 = "11968",
    v11968 = "11970",
    v11970 = "11971",
    v11971 = "11972",
    v11972 = "11973",
    v11973 = "11974",
    v11974 = "11975",
    v11975 = "11976",
    v11976 = "11977",
    v11977 = "11979",
    v11979 = "11980",
    v11980 = "11995",
    v11981 = "11982",
    v11982 = "11983",
    v11983 = "11984",
    v11984 = "11985",
    v11985 = "11986",
    v11986 = "11987",
    v11987 = "11988",
    v11988 = "11989",
    v11989 = "11990",
    v11990 = "11991",
    v11991 = "11992",
    v11992 = "11993",
    v11993 = "pthcity",
    v11995 = "11981"
  },
  ["Radial Dig Shaft #15"] = {
    v44353 = "44354",
    v44354 = "44356",
    v44355 = "44357",
    v44356 = "44355",
    v44357 = "44358",
    v44358 = "44359",
    v44359 = "44360",
    v44360 = "44361",
    v44361 = "44362",
    v44362 = "44363",
    v44363 = "44364",
    v44364 = "44365",
    v44365 = "44366",
    v44366 = "44492",
    v44367 = "44368",
    v44368 = "44369",
    v44369 = "44370",
    v44370 = "44371",
    v44371 = "44372",
    v44372 = "44490",
    v44373 = "44374",
    v44374 = "44375",
    v44375 = "44376",
    v44376 = "44377",
    v44377 = "44378",
    v44378 = "44379",
    v44379 = "44487",
    v44380 = "44486",
    v44481 = "58576",
    v44482 = "44481",
    v44483 = "44485",
    v44484 = "44483",
    v44485 = "44482",
    v44486 = "44484",
    v44487 = "44489",
    v44488 = "44380",
    v44489 = "44488",
    v44490 = "44491",
    v44491 = "44373",
    v44492 = "44367",
    v58576 = ""
  },
  ["Raim Vale"] = {
    v20389 = "20390",
    v20390 = "20391",
    v20391 = "20666",
    v20666 = "20704",
    v20667 = "20668",
    v20668 = "20669",
    v20669 = "20670",
    v20670 = "20671",
    v20671 = "20672",
    v20672 = "20673",
    v20673 = "48242",
    v20674 = "20675",
    v20675 = "20676",
    v20676 = "20677",
    v20677 = "20678",
    v20678 = "20679",
    v20679 = "20680",
    v20680 = "20681",
    v20681 = "20682",
    v20682 = "20683",
    v20683 = "21041",
    v20684 = "20685",
    v20685 = "20686",
    v20686 = "20705",
    v20687 = "20698",
    v20688 = "20689",
    v20689 = "20690",
    v20690 = "20691",
    v20691 = "20692",
    v20692 = "20693",
    v20693 = "20694",
    v20694 = "58699",
    v20695 = "20688",
    v20696 = "20695",
    v20697 = "20696",
    v20698 = "20699",
    v20699 = "20697",
    v20702 = "20667",
    v20703 = "20702",
    v20704 = "20703",
    v20705 = "20706",
    v20706 = "20707",
    v20707 = "20708",
    v20708 = "20709",
    v20709 = "20710",
    v20710 = "21010",
    v21010 = "21011",
    v21011 = "21012",
    v21012 = "21013",
    v21013 = "21014",
    v21014 = "21015",
    v21015 = "21016",
    v21016 = "21017",
    v21017 = "21018",
    v21018 = "21020",
    v21020 = "21021",
    v21021 = "21032",
    v21032 = "21033",
    v21033 = "21034",
    v21034 = "21036",
    v21035 = "21040",
    v21036 = "21039",
    v21037 = "21035",
    v21038 = "21037",
    v21039 = "21038",
    v21040 = "20687",
    v21041 = "20684",
    v48241 = "48243",
    v48242 = "48336",
    v48243 = "48337",
    v48336 = "48241",
    v48337 = "20674",
    v58697 = "58698",
    v58698 = "pthcity",
    v58699 = "58702",
    v58700 = "58697",
    v58701 = "58700",
    v58702 = "58701"
  },
  ["Raugol Fissure"] = {
    v49749 = "49752",
    v49750 = "49751",
    v49751 = "49756",
    v49752 = "49755",
    v49755 = "49750",
    v49756 = "49757",
    v49757 = "49759",
    v49759 = "49760",
    v49760 = "49761",
    v49761 = "49762",
    v49762 = "49763",
    v49763 = "49764",
    v49764 = "49765",
    v49765 = "49766",
    v49766 = "49767",
    v49767 = "49768",
    v49768 = "49769",
    v49769 = "49770",
    v49770 = "49771",
    v49771 = "49772",
    v49772 = "49773",
    v49773 = "49775",
    v49775 = "49776",
    v49776 = "49777",
    v49777 = "49778",
    v49778 = "49779",
    v49779 = "49780",
    v49780 = "49781",
    v49781 = "49782",
    v49782 = "49783",
    v49783 = "49784",
    v49784 = "49785",
    v49785 = "49786",
    v49786 = "49791",
    v49791 = "49793",
    v49793 = "49798",
    v49798 = "49799",
    v49799 = "49800",
    v49800 = "49802",
    v49802 = "49803",
    v49803 = "49804",
    v49804 = "49805",
    v49805 = "49806",
    v49806 = "49807",
    v49807 = "pthcity"
  },
  ["Rebels' Ridge"] = {
    v18462 = "19566",
    v19529 = "19557",
    v19530 = "19529",
    v19531 = "19532",
    v19532 = "19533",
    v19533 = "19530",
    v19534 = "19531",
    v19535 = "19534",
    v19536 = "19535",
    v19537 = "19536",
    v19538 = "19539",
    v19539 = "19537",
    v19540 = "19538",
    v19541 = "19546",
    v19542 = "19541",
    v19543 = "19542",
    v19544 = "19545",
    v19545 = "19543",
    v19546 = "19547",
    v19547 = "19548",
    v19548 = "19549",
    v19549 = "19550",
    v19550 = "19540",
    v19551 = "19558",
    v19552 = "19551",
    v19553 = "19554",
    v19554 = "19552",
    v19555 = "19553",
    v19556 = "19555",
    v19557 = "19556",
    v19558 = "19559",
    v19559 = "19560",
    v19560 = "19561",
    v19561 = "19562",
    v19562 = "19563",
    v19563 = "19564",
    v19564 = "19565",
    v19565 = "pthcity",
    v19566 = "19567",
    v19567 = "19568",
    v19568 = "19569",
    v19569 = "19570",
    v19570 = "19544"
  },
  Riparium = {
    v32908 = "32909",
    v32909 = "32910",
    v32910 = "32911",
    v32911 = "32912",
    v32912 = "32913",
    v32913 = "32917",
    v32914 = "32915",
    v32915 = "32916",
    v32916 = "5623",
    v32917 = "32919",
    v32919 = "32914",
    v32967 = "6571",
    v5599 = "5604",
    v5604 = "5605",
    v5605 = "5606",
    v5606 = "5612",
    v5612 = "5613",
    v5613 = "5669",
    v5614 = "5615",
    v5615 = "6235",
    v5616 = "5617",
    v5617 = "5622",
    v5618 = "5619",
    v5619 = "5620",
    v5620 = "32908",
    v5621 = "5631",
    v5622 = "5621",
    v5623 = "5624",
    v5624 = "5625",
    v5625 = "5626",
    v5626 = "5627",
    v5627 = "5630",
    v5630 = "pthcity",
    v5631 = "5618",
    v5669 = "5614",
    v6235 = "6236",
    v6236 = "6237",
    v6237 = "6238",
    v6238 = "6239",
    v6239 = "6240",
    v6240 = "6241",
    v6241 = "6242",
    v6242 = "6243",
    v6243 = "6244",
    v6244 = "6245",
    v6245 = "6246",
    v6246 = "6247",
    v6247 = "6248",
    v6248 = "6669",
    v6249 = "6561",
    v6250 = "6251",
    v6251 = "6252",
    v6252 = "6253",
    v6253 = "6254",
    v6254 = "6259",
    v6255 = "6256",
    v6256 = "6257",
    v6257 = "6263",
    v6258 = "6637",
    v6259 = "6260",
    v6260 = "6261",
    v6261 = "6262",
    v6262 = "6650",
    v6263 = "6264",
    v6264 = "6265",
    v6265 = "6266",
    v6266 = "6268",
    v6267 = "6269",
    v6268 = "6267",
    v6269 = "6270",
    v6270 = "6271",
    v6271 = "6272",
    v6272 = "6274",
    v6273 = "5616",
    v6274 = "6273",
    v6560 = "6563",
    v6561 = "6560",
    v6562 = "6250",
    v6563 = "6598",
    v6564 = "6562",
    v6565 = "6566",
    v6566 = "6569",
    v6567 = "6564",
    v6568 = "6570",
    v6569 = "6568",
    v6570 = "32967",
    v6571 = "6573",
    v6572 = "6581",
    v6573 = "6574",
    v6574 = "6575",
    v6575 = "6576",
    v6576 = "6577",
    v6577 = "6579",
    v6578 = "6572",
    v6579 = "6580",
    v6580 = "6578",
    v6581 = "6582",
    v6582 = "6583",
    v6583 = "6588",
    v6588 = "6590",
    v6589 = "6593",
    v6590 = "6591",
    v6591 = "6589",
    v6592 = "6596",
    v6593 = "6594",
    v6594 = "6592",
    v6595 = "6597",
    v6596 = "6595",
    v6597 = "6567",
    v6598 = "6599",
    v6599 = "6600",
    v6600 = "6601",
    v6601 = "6602",
    v6602 = "6603",
    v6603 = "6605",
    v6604 = "6565",
    v6605 = "6607",
    v6606 = "6604",
    v6607 = "6606",
    v6636 = "6641",
    v6637 = "6636",
    v6638 = "6255",
    v6639 = "6638",
    v6640 = "6645",
    v6641 = "6640",
    v6642 = "6639",
    v6643 = "6642",
    v6644 = "6646",
    v6645 = "6644",
    v6646 = "6648",
    v6647 = "6649",
    v6648 = "6647",
    v6649 = "6643",
    v6650 = "6651",
    v6651 = "6652",
    v6652 = "6653",
    v6653 = "6654",
    v6654 = "6655",
    v6655 = "6656",
    v6656 = "6657",
    v6657 = "6658",
    v6658 = "6660",
    v6660 = "6661",
    v6661 = "6662",
    v6662 = "6258",
    v6669 = "6249"
  },
  ["Rotfang Warren"] = {
    v63631 = "63635",
    v63633 = "63650",
    v63634 = "63656",
    v63635 = "63659",
    v63636 = "63661",
    v63637 = "63808",
    v63646 = "63678",
    v63647 = "63649",
    v63648 = "63647",
    v63649 = "63687",
    v63650 = "63646",
    v63651 = "63633",
    v63653 = "63654",
    v63654 = "63806",
    v63655 = "pthcity",
    v63656 = "63655",
    v63658 = "63634",
    v63659 = "63636",
    v63661 = "63662",
    v63662 = "63676",
    v63676 = "63637",
    v63678 = "63803",
    v63683 = "63658",
    v63684 = "63683",
    v63685 = "63688",
    v63687 = "63685",
    v63688 = "63689",
    v63689 = "63684",
    v63760 = "63762",
    v63762 = "63764",
    v63763 = "63631",
    v63764 = "63765",
    v63765 = "63804",
    v63766 = "63768",
    v63767 = "63648",
    v63768 = "63769",
    v63769 = "63770",
    v63770 = "63772",
    v63772 = "63773",
    v63773 = "63774",
    v63774 = "63767",
    v63792 = "63805",
    v63793 = "63797",
    v63794 = "63795",
    v63795 = "63799",
    v63796 = "63800",
    v63797 = "63792",
    v63798 = "63794",
    v63799 = "63796",
    v63800 = "63793",
    v63802 = "63766",
    v63803 = "63798",
    v63804 = "63802",
    v63805 = "63653",
    v63806 = "63807",
    v63807 = "63760",
    v63808 = "63651"
  },
  ["Saliltul Swamp"] = {
    v59254 = "61848",
    v59255 = "61887",
    v59256 = "61899",
    v59257 = "61882",
    v61848 = "61877",
    v61877 = "61878",
    v61878 = "61879",
    v61879 = "61880",
    v61880 = "61881",
    v61881 = "59257",
    v61882 = "61886",
    v61883 = "59256",
    v61884 = "61883",
    v61885 = "61884",
    v61886 = "61885",
    v61887 = "61890",
    v61890 = "61891",
    v61891 = "61892",
    v61892 = "61893",
    v61893 = "61894",
    v61894 = "pthcity",
    v61899 = "61900",
    v61900 = "61924",
    v61901 = "61902",
    v61902 = "61906",
    v61903 = "59255",
    v61904 = "61903",
    v61905 = "61904",
    v61906 = "61905",
    v61924 = "61925",
    v61925 = "61927",
    v61927 = "62097",
    v62097 = "62548",
    v62102 = "59254",
    v62548 = "61901"
  },
  Scidve = {
    v10056 = "10070",
    v10070 = "10071",
    v10071 = "10073",
    v10072 = "10075",
    v10073 = "10074",
    v10074 = "10072",
    v10075 = "10076",
    v10076 = "10077",
    v10077 = "10078",
    v10078 = "10081",
    v10079 = "10080",
    v10080 = "10083",
    v10081 = "10079",
    v10082 = "10084",
    v10083 = "10082",
    v10084 = "10085",
    v10085 = "10157",
    v10157 = "10158",
    v10158 = "10175",
    v10160 = "10161",
    v10161 = "10162",
    v10162 = "9826",
    v10175 = "10176",
    v10176 = "10177",
    v10177 = "10178",
    v10178 = "10179",
    v10179 = "10180",
    v10180 = "10181",
    v10181 = "10182",
    v10182 = "10183",
    v10183 = "10187",
    v10184 = "10189",
    v10185 = "10186",
    v10186 = "10243",
    v10187 = "10185",
    v10188 = "10184",
    v10189 = "10252",
    v10192 = "10193",
    v10193 = "10188",
    v10195 = "10196",
    v10196 = "10197",
    v10197 = "10192",
    v10198 = "10195",
    v10233 = "10234",
    v10234 = "10235",
    v10235 = "10237",
    v10236 = "10198",
    v10237 = "10236",
    v10238 = "10233",
    v10239 = "10241",
    v10240 = "10238",
    v10241 = "10240",
    v10242 = "10239",
    v10243 = "10242",
    v10244 = "pthcity",
    v10245 = "10244",
    v10246 = "10245",
    v10247 = "10246",
    v10248 = "10247",
    v10249 = "10248",
    v10250 = "10249",
    v10251 = "10253",
    v10252 = "10251",
    v10253 = "10271",
    v10271 = "10272",
    v10272 = "10273",
    v10273 = "10274",
    v10274 = "10276",
    v10275 = "10250",
    v10276 = "10275",
    v10813 = "9709",
    v18529 = "9836",
    v26213 = "9920",
    v26214 = "26213",
    v9700 = "9701",
    v9701 = "9816",
    v9702 = "9703",
    v9703 = "9704",
    v9704 = "9973",
    v9705 = "9706",
    v9706 = "9707",
    v9707 = "9824",
    v9709 = "9710",
    v9710 = "9711",
    v9711 = "9712",
    v9712 = "9721",
    v9721 = "9722",
    v9722 = "9723",
    v9723 = "9725",
    v9725 = "9726",
    v9726 = "9727",
    v9727 = "9762",
    v9728 = "9729",
    v9729 = "9730",
    v9730 = "9759",
    v9731 = "9732",
    v9732 = "9733",
    v9733 = "9734",
    v9734 = "9735",
    v9735 = "9736",
    v9736 = "9737",
    v9737 = "9738",
    v9738 = "9739",
    v9739 = "9740",
    v9740 = "9741",
    v9741 = "9756",
    v9756 = "9757",
    v9757 = "9758",
    v9758 = "9914",
    v9759 = "9760",
    v9760 = "9761",
    v9761 = "9731",
    v9762 = "9767",
    v9763 = "9764",
    v9764 = "9728",
    v9765 = "9766",
    v9766 = "9763",
    v9767 = "9768",
    v9768 = "9769",
    v9769 = "9770",
    v9770 = "9765",
    v9816 = "9819",
    v9817 = "9702",
    v9818 = "9821",
    v9819 = "9820",
    v9820 = "9818",
    v9821 = "9822",
    v9822 = "9823",
    v9823 = "9817",
    v9824 = "9828",
    v9825 = "9829",
    v9826 = "9825",
    v9827 = "9831",
    v9828 = "9830",
    v9829 = "10056",
    v9830 = "9837",
    v9831 = "9832",
    v9832 = "9833",
    v9833 = "9835",
    v9834 = "18529",
    v9835 = "9834",
    v9836 = "10160",
    v9837 = "9827",
    v9838 = "9906",
    v9904 = "9838",
    v9905 = "9907",
    v9906 = "9919",
    v9907 = "9904",
    v9908 = "9905",
    v9909 = "9910",
    v9910 = "9908",
    v9911 = "9909",
    v9912 = "9911",
    v9913 = "9912",
    v9914 = "9915",
    v9915 = "9916",
    v9916 = "9917",
    v9917 = "9923",
    v9918 = "9913",
    v9919 = "9921",
    v9920 = "9700",
    v9921 = "9925",
    v9922 = "9918",
    v9923 = "9924",
    v9924 = "9922",
    v9925 = "9927",
    v9926 = "26214",
    v9927 = "9926",
    v9973 = "9974",
    v9974 = "9981",
    v9981 = "9705"
  },
  ["Siha Dylis"] = {
    v3106 = "3107",
    v3107 = "3108",
    v3108 = "3109",
    v3109 = "3110",
    v3110 = "3147",
    v3111 = "3112",
    v3112 = "3113",
    v3113 = "3114",
    v3114 = "3115",
    v3115 = "3116",
    v3116 = "3117",
    v3117 = "3121",
    v3118 = "3119",
    v3119 = "3154",
    v3121 = "3118",
    v3134 = "3111",
    v3144 = "3134",
    v3146 = "3144",
    v3147 = "3182",
    v3154 = "3204",
    v3155 = "3156",
    v3156 = "3180",
    v3172 = "3175",
    v3175 = "3179",
    v3179 = "3181",
    v3180 = "3172",
    v3181 = "3193",
    v3182 = "3183",
    v3183 = "3146",
    v3184 = "3191",
    v3185 = "3184",
    v3186 = "3185",
    v3187 = "3188",
    v3188 = "3189",
    v3189 = "3239",
    v3190 = "3206",
    v3191 = "3205",
    v3192 = "3207",
    v3193 = "3195",
    v3194 = "3196",
    v3195 = "3194",
    v3196 = "3198",
    v3197 = "3199",
    v3198 = "3197",
    v3199 = "3200",
    v3200 = "3202",
    v3202 = "3186",
    v3204 = "3155",
    v3205 = "3192",
    v3206 = "3187",
    v3207 = "3213",
    v3211 = "3212",
    v3212 = "3216",
    v3213 = "3211",
    v3214 = "3215",
    v3215 = "3190",
    v3216 = "3218",
    v3217 = "3214",
    v3218 = "3240",
    v3219 = "3220",
    v3220 = "3217",
    v3226 = "62755",
    v3227 = "3226",
    v3228 = "49927",
    v3230 = "3228",
    v3239 = "3230",
    v3240 = "3241",
    v3241 = "3242",
    v3242 = "3243",
    v3243 = "36261",
    v36261 = "3219",
    v49927 = "3227",
    v62755 = "pthcity"
  },
  Spinesreach = {
    v11687 = "11695",
    v11695 = "11696",
    v11696 = "11698",
    v11698 = "66438",
    v11699 = "11944",
    v11701 = "11702",
    v11702 = "11703",
    v11703 = "11716",
    v11704 = "11715",
    v11705 = "11707",
    v11707 = "11708",
    v11708 = "12653",
    v11712 = "11942",
    v11713 = "11714",
    v11714 = "14480",
    v11715 = "11705",
    v11716 = "22661",
    v11886 = "11935",
    v11933 = "11886",
    v11935 = "11936",
    v11936 = "19291",
    v11937 = "14984",
    v11939 = "11940",
    v11940 = "11699",
    v11941 = "24344",
    v11942 = "11945",
    v11943 = "11939",
    v11944 = "11712",
    v11945 = "11713",
    v12401 = "11701",
    v12653 = "12656",
    v12654 = "66548",
    v12655 = "14393",
    v12656 = "66590",
    v12657 = "21061",
    v12658 = "66509",
    v12659 = "22627",
    v12668 = "12655",
    v12669 = "13834",
    v12670 = "14507",
    v12671 = "12682",
    v12672 = "12673",
    v12673 = "12678",
    v12674 = "14510",
    v12675 = "12684",
    v12676 = "12677",
    v12677 = "12689",
    v12678 = "13032",
    v12680 = "13030",
    v12682 = "12672",
    v12684 = "12676",
    v12686 = "12687",
    v12687 = "12688",
    v12688 = "18190",
    v12689 = "12690",
    v12690 = "12691",
    v12691 = "12680",
    v12803 = "12804",
    v12804 = "24350",
    v12805 = "12803",
    v12806 = "12805",
    v12807 = "12806",
    v12808 = "12807",
    v12809 = "12808",
    v12810 = "12811",
    v12811 = "12809",
    v12812 = "12810",
    v12817 = "12818",
    v12818 = "12819",
    v12819 = "12820",
    v12820 = "12821",
    v12821 = "12822",
    v12822 = "12823",
    v12823 = "12824",
    v12824 = "12825",
    v12825 = "12826",
    v12826 = "12827",
    v12827 = "12828",
    v12828 = "12829",
    v12829 = "12837",
    v12830 = "12836",
    v12831 = "12830",
    v12832 = "12831",
    v12833 = "12832",
    v12834 = "12838",
    v12835 = "12834",
    v12836 = "12835",
    v12837 = "12833",
    v12838 = "12885",
    v12839 = "12840",
    v12840 = "12841",
    v12841 = "12842",
    v12842 = "12843",
    v12843 = "12844",
    v12844 = "12845",
    v12845 = "12846",
    v12846 = "12847",
    v12847 = "12848",
    v12848 = "12849",
    v12849 = "12860",
    v12860 = "12861",
    v12861 = "12862",
    v12862 = "12863",
    v12863 = "12864",
    v12864 = "12865",
    v12865 = "12866",
    v12866 = "12867",
    v12867 = "12868",
    v12868 = "12869",
    v12869 = "12870",
    v12870 = "12871",
    v12871 = "12872",
    v12872 = "12873",
    v12873 = "12886",
    v12884 = "12839",
    v12885 = "12884",
    v12886 = "12893",
    v12887 = "12896",
    v12888 = "12887",
    v12889 = "16230",
    v12890 = "12889",
    v12891 = "12890",
    v12892 = "12891",
    v12893 = "12892",
    v12896 = "33218",
    v12997 = "25687",
    v13030 = "12812",
    v13032 = "12686",
    v13834 = "56870",
    v14393 = "14395",
    v14395 = "12654",
    v14480 = "17448",
    v14507 = "12671",
    v14510 = "12675",
    v14984 = "15126",
    v15126 = "44568",
    v16230 = "16231",
    v16231 = "16232",
    v16232 = "12888",
    v17448 = "17449",
    v17449 = "11704",
    v18190 = "24188",
    v19291 = "11937",
    v21055 = "12657",
    v21057 = "12659",
    v21059 = "32709",
    v21061 = "21059",
    v22627 = "24437",
    v22661 = "11933",
    v24188 = "12674",
    v24344 = "11943",
    v24350 = "12997",
    v24431 = "21055",
    v24437 = "12669",
    v25687 = "25688",
    v25688 = "25689",
    v25689 = "12817",
    v32709 = "12668",
    v33218 = "12401",
    v44568 = "44881",
    v44576 = "44577",
    v44577 = "44580",
    v44580 = "44585",
    v44585 = "",
    v44881 = "44576",
    v56870 = "12670",
    v66230 = "21057",
    v66438 = "11941",
    v66509 = "66786",
    v66548 = "12658",
    v66578 = "24431",
    v66590 = "66578",
    v66786 = "66230"
  },
  ["Spiral of the Corrupt"] = {
    v36271 = "36596",
    v36596 = "36622",
    v36598 = "36599",
    v36599 = "36600",
    v36600 = "36601",
    v36601 = "36602",
    v36602 = "36603",
    v36603 = "36604",
    v36604 = "36605",
    v36605 = "36606",
    v36606 = "36607",
    v36607 = "36608",
    v36608 = "36609",
    v36609 = "36610",
    v36610 = "36611",
    v36611 = "36612",
    v36612 = "36613",
    v36613 = "36614",
    v36614 = "36615",
    v36615 = "36616",
    v36616 = "36617",
    v36617 = "36618",
    v36618 = "36619",
    v36619 = "36620",
    v36620 = "36621",
    v36621 = "36623",
    v36622 = "36624",
    v36623 = "36626",
    v36624 = "36625",
    v36625 = "36634",
    v36626 = "36627",
    v36627 = "36628",
    v36628 = "36629",
    v36629 = "36630",
    v36630 = "36631",
    v36631 = "36632",
    v36632 = "36633",
    v36633 = "36635",
    v36634 = "36639",
    v36635 = "36636",
    v36636 = "36637",
    v36637 = "36638",
    v36638 = "36640",
    v36639 = "36648",
    v36640 = "36641",
    v36641 = "36642",
    v36642 = "36643",
    v36643 = "36644",
    v36644 = "36645",
    v36645 = "36647",
    v36646 = "pthcity",
    v36647 = "36649",
    v36648 = "36598",
    v36649 = "36650",
    v36650 = "36646"
  },
  Tainhelm = {
    v16438 = "16439",
    v16439 = "16440",
    v16440 = "16491",
    v16441 = "16492",
    v16442 = "16493",
    v16443 = "16494",
    v16444 = "16495",
    v16445 = "16496",
    v16446 = "16447",
    v16447 = "16448",
    v16448 = "16450",
    v16449 = "16461",
    v16450 = "16451",
    v16451 = "16521",
    v16452 = "16454",
    v16453 = "16552",
    v16454 = "24705",
    v16455 = "16453",
    v16456 = "16546",
    v16457 = "16458",
    v16458 = "16488",
    v16459 = "16489",
    v16460 = "16490",
    v16461 = "16457",
    v16462 = "16463",
    v16463 = "33240",
    v16464 = "16465",
    v16465 = "16466",
    v16466 = "16467",
    v16467 = "16468",
    v16468 = "16470",
    v16470 = "16471",
    v16471 = "16472",
    v16472 = "16473",
    v16473 = "16474",
    v16474 = "16475",
    v16475 = "16476",
    v16476 = "16477",
    v16477 = "16479",
    v16478 = "16480",
    v16479 = "16478",
    v16480 = "16481",
    v16481 = "16482",
    v16482 = "16484",
    v16483 = "16485",
    v16484 = "16483",
    v16485 = "16486",
    v16486 = "16487",
    v16487 = "16566",
    v16488 = "16459",
    v16489 = "16460",
    v16490 = "16462",
    v16491 = "16502",
    v16492 = "16442",
    v16493 = "16500",
    v16494 = "16444",
    v16495 = "16445",
    v16496 = "16446",
    v16497 = "16498",
    v16498 = "16499",
    v16499 = "16443",
    v16500 = "16506",
    v16501 = "16441",
    v16502 = "16508",
    v16503 = "16497",
    v16504 = "16503",
    v16505 = "16504",
    v16506 = "16512",
    v16507 = "16501",
    v16508 = "16514",
    v16509 = "16510",
    v16510 = "16511",
    v16511 = "16505",
    v16512 = "16518",
    v16513 = "16507",
    v16514 = "16520",
    v16515 = "16509",
    v16516 = "16515",
    v16517 = "16516",
    v16518 = "16517",
    v16519 = "16513",
    v16520 = "16519",
    v16521 = "16522",
    v16522 = "16523",
    v16523 = "16524",
    v16524 = "16525",
    v16525 = "16526",
    v16526 = "16532",
    v16527 = "16452",
    v16528 = "16527",
    v16529 = "16528",
    v16530 = "16529",
    v16531 = "16530",
    v16532 = "16531",
    v16545 = "16548",
    v16546 = "16547",
    v16547 = "16545",
    v16548 = "16549",
    v16549 = "16550",
    v16550 = "16554",
    v16551 = "16456",
    v16552 = "16553",
    v16553 = "16551",
    v16554 = "16449",
    v16566 = "pthcity",
    v17999 = "18000",
    v18000 = "18004",
    v18001 = "18445",
    v18002 = "16464",
    v18004 = "18001",
    v18005 = "18002",
    v18445 = "18005",
    v24705 = "16455",
    v33240 = "17999"
  },
  ["Tak-re"] = {
  v18530 = "5992",
  v5961 = "6884",
  v5962 = "5965",
  v5963 = "6054",
  v5964 = "5963",
  v5965 = "5964",
  v5966 = "5968",
  v5967 = "5961",
  v5968 = "5967",
  v5969 = "6060",
  v5970 = "6056",
  v5971 = "5973",
  v5972 = "5974",
  v5973 = "5972",
  v5974 = "5975",
  v5975 = "5978",
  v5976 = "5977",
  v5977 = "5986",
  v5978 = "5981",
  v5979 = "5985",
  v5980 = "5982",
  v5981 = "5979",
  v5982 = "5976",
  v5983 = "5980",
  v5984 = "5988",
  v5985 = "5984",
  v5986 = "5996",
  v5987 = "5983",
  v5988 = "5989",
  v5989 = "5987",
  v5990 = "5991",
  v5991 = "18530",
  v5992 = "5995",
  v5993 = "5990",
  v5994 = "5998",
  v5995 = "5994",
  v5996 = "6051",
  v5997 = "6012",
  v5998 = "6000",
  v5999 = "5997",
  v6000 = "6002",
  v6001 = "6058",
  v6002 = "6003",
  v6003 = "6001",
  v6004 = "5999",
  v6005 = "6007",
  v6006 = "6009",
  v6007 = "6008",
  v6008 = "6085",
  v6009 = "6004",
  v6010 = "5993",
  v6011 = "6010",
  v6012 = "6013",
  v6013 = "6014",
  v6014 = "6015",
  v6015 = "6016",
  v6016 = "6017",
  v6017 = "pthcity",
  v6051 = "6011",
  v6052 = "6055",
  v6053 = "6052",
  v6054 = "5969",
  v6055 = "6005",
  v6056 = "5971",
  v6057 = "5970",
  v6058 = "6053",
  v6059 = "6057",
  v6060 = "6070",
  v6070 = "6071",
  v6071 = "6059",
  v6085 = "6086",
  v6086 = "6006",
  v6884 = "5962"
},
  ["Tcanna Island"] = {
    v51244 = "54509",
    v52633 = "52634",
    v52634 = "52635",
    v52635 = "52636",
    v52636 = "54141",
    v53331 = "55001",
    v53339 = "53560",
    v53560 = "53566",
    v53566 = "54869",
    v53567 = "51244",
    v53592 = "53593",
    v53593 = "53567",
    v53618 = "53619",
    v53619 = "53633",
    v53633 = "53999",
    v53637 = "53643",
    v53643 = "53644",
    v53644 = "53645",
    v53645 = "54574",
    v53828 = "52633",
    v53996 = "54000",
    v53997 = "53996",
    v53998 = "53997",
    v53999 = "53998",
    v54000 = "54507",
    v54001 = "54002",
    v54002 = "54003",
    v54003 = "54004",
    v54004 = "54005",
    v54005 = "54006",
    v54006 = "54007",
    v54007 = "54008",
    v54008 = "54009",
    v54009 = "54030",
    v54030 = "54031",
    v54031 = "54060",
    v54044 = "53828",
    v54045 = "54044",
    v54046 = "54045",
    v54048 = "54052",
    v54049 = "54048",
    v54050 = "54049",
    v54052 = "54867",
    v54060 = "54062",
    v54062 = "54065",
    v54065 = "54069",
    v54069 = "53592",
    v54125 = "54486",
    v54126 = "54125",
    v54127 = "54126",
    v54128 = "54127",
    v54131 = "54128",
    v54132 = "54131",
    v54137 = "53637",
    v54140 = "54137",
    v54141 = "54357",
    v54142 = "54143",
    v54143 = "54144",
    v54144 = "54145",
    v54145 = "54593",
    v54146 = "54140",
    v54147 = "54146",
    v54148 = "54808",
    v54149 = "54401",
    v54150 = "54402",
    v54156 = "54150",
    v54157 = "54164",
    v54158 = "54156",
    v54159 = "54158",
    v54164 = "54165",
    v54165 = "54159",
    v54166 = "54713",
    v54223 = "54588",
    v54224 = "53618",
    v54225 = "54224",
    v54226 = "54225",
    v54230 = "54235",
    v54235 = "54236",
    v54236 = "54239",
    v54239 = "54240",
    v54240 = "54241",
    v54241 = "54226",
    v54258 = "54611",
    v54322 = "54825",
    v54356 = "54322",
    v54357 = "54358",
    v54358 = "54362",
    v54362 = "54363",
    v54363 = "54682",
    v54368 = "54356",
    v54371 = "54368",
    v54372 = "54371",
    v54373 = "54372",
    v54374 = "54373",
    v54375 = "54374",
    v54389 = "54390",
    v54390 = "54375",
    v54391 = "54389",
    v54392 = "54391",
    v54393 = "54392",
    v54401 = "54148",
    v54402 = "54149",
    v54447 = "54046",
    v54448 = "54453",
    v54453 = "54001",
    v54454 = "54525",
    v54455 = "54454",
    v54457 = "54455",
    v54458 = "54457",
    v54459 = "54458",
    v54460 = "54459",
    v54461 = "54462",
    v54462 = "54463",
    v54463 = "54464",
    v54464 = "54448",
    v54467 = "54488",
    v54468 = "54467",
    v54469 = "54475",
    v54475 = "54476",
    v54476 = "54468",
    v54477 = "54479",
    v54479 = "54480",
    v54480 = "54481",
    v54481 = "54484",
    v54484 = "54485",
    v54485 = "54469",
    v54486 = "54487",
    v54487 = "54477",
    v54488 = "54489",
    v54489 = "54490",
    v54490 = "54230",
    v54492 = "54529",
    v54496 = "54492",
    v54498 = "54496",
    v54502 = "54498",
    v54507 = "54502",
    v54509 = "54510",
    v54510 = "54511",
    v54511 = "54512",
    v54512 = "54447",
    v54524 = "53331",
    v54525 = "54524",
    v54529 = "54461",
    v54574 = "54575",
    v54575 = "54576",
    v54576 = "54577",
    v54577 = "54578",
    v54578 = "54583",
    v54580 = "54147",
    v54581 = "54580",
    v54582 = "54581",
    v54583 = "54584",
    v54584 = "54586",
    v54586 = "54587",
    v54587 = "54223",
    v54588 = "54809",
    v54593 = "54594",
    v54594 = "54595",
    v54595 = "54596",
    v54596 = "54623",
    v54597 = "54633",
    v54598 = "54597",
    v54599 = "54598",
    v54600 = "54599",
    v54601 = "54600",
    v54602 = "54601",
    v54603 = "54602",
    v54604 = "54603",
    v54605 = "54604",
    v54606 = "54605",
    v54608 = "54606",
    v54611 = "54608",
    v54623 = "54625",
    v54625 = "54157",
    v54627 = "54634",
    v54628 = "54627",
    v54629 = "54630",
    v54630 = "54631",
    v54631 = "54628",
    v54632 = "54629",
    v54633 = "54632",
    v54634 = "54635",
    v54635 = "54636",
    v54636 = "54460",
    v54682 = "54142",
    v54713 = "54714",
    v54714 = "54815",
    v54715 = "54132",
    v54716 = "54715",
    v54717 = "54716",
    v54718 = "54717",
    v54719 = "54718",
    v54720 = "54719",
    v54721 = "54720",
    v54722 = "54721",
    v54741 = "54742",
    v54742 = "54743",
    v54743 = "54872",
    v54744 = "54747",
    v54745 = "54744",
    v54747 = "54749",
    v54749 = "54750",
    v54750 = "54751",
    v54751 = "54752",
    v54752 = "54166",
    v54753 = "54745",
    v54754 = "54050",
    v54755 = "54756",
    v54756 = "54870",
    v54798 = "54393",
    v54799 = "54798",
    v54800 = "54799",
    v54801 = "54831",
    v54802 = "54722",
    v54803 = "54802",
    v54804 = "54803",
    v54806 = "54258",
    v54807 = "54806",
    v54808 = "54807",
    v54809 = "54810",
    v54810 = "54811",
    v54811 = "54804",
    v54812 = "54582",
    v54813 = "54812",
    v54814 = "54813",
    v54815 = "54814",
    v54819 = "54801",
    v54820 = "54858",
    v54822 = "54820",
    v54824 = "54822",
    v54825 = "54824",
    v54826 = "54819",
    v54827 = "54826",
    v54828 = "54827",
    v54829 = "54828",
    v54830 = "54829",
    v54831 = "54800",
    v54832 = "54830",
    v54833 = "54854",
    v54834 = "54832",
    v54835 = "54834",
    v54836 = "54835",
    v54844 = "54845",
    v54845 = "54833",
    v54847 = "54844",
    v54848 = "54847",
    v54849 = "54836",
    v54850 = "54849",
    v54851 = "54850",
    v54852 = "54851",
    v54853 = "54852",
    v54854 = "54853",
    v54855 = "54848",
    v54857 = "54864",
    v54858 = "53339",
    v54864 = "54855",
    v54865 = "54866",
    v54866 = "54874",
    v54867 = "54753",
    v54868 = "54755",
    v54869 = "54868",
    v54870 = "54871",
    v54871 = "54873",
    v54872 = "54754",
    v54873 = "54741",
    v54874 = "54857",
    v54875 = "54877",
    v54877 = "54865",
    v54878 = "54875",
    v54879 = "54878",
    v54880 = "54879",
    v54881 = "54880",
    v54992 = "54994",
    v54993 = "54996",
    v54994 = "54995",
    v54995 = "54993",
    v54996 = "54881",
    v54997 = "54992",
    v54998 = "54997",
    v54999 = "54998",
    v55000 = "54999",
    v55001 = "55000"
  },
  ["The Forgotten Mausoleum"] = {
    v59862 = "59863",
    v59863 = "59864",
    v59864 = "59865",
    v59865 = "59866",
    v59866 = "59870",
    v59867 = "59871",
    v59870 = "59867",
    v59871 = "59872",
    v59872 = "59873",
    v59873 = "60062",
    v59874 = "60088",
    v59875 = "59876",
    v59876 = "60070",
    v59877 = "59879",
    v59878 = "60066",
    v59879 = "60074",
    v60062 = "59878",
    v60063 = "59874",
    v60066 = "60069",
    v60067 = "59875",
    v60068 = "60067",
    v60069 = "60068",
    v60070 = "60071",
    v60071 = "60072",
    v60072 = "60073",
    v60073 = "59877",
    v60074 = "60075",
    v60075 = "60076",
    v60076 = "60077",
    v60077 = "60063",
    v60078 = "60079",
    v60079 = "60080",
    v60080 = "60081",
    v60081 = "60082",
    v60082 = "60083",
    v60083 = "60084",
    v60084 = "60085",
    v60085 = "60086",
    v60086 = "60087",
    v60087 = "pthcity",
    v60088 = "60092",
    v60089 = "60091",
    v60090 = "60078",
    v60091 = "60090",
    v60092 = "60094",
    v60094 = "60095",
    v60095 = "60096",
    v60096 = "60097",
    v60097 = "60098",
    v60098 = "60089"
  },
  ["Three Widows"] = {
    v21587 = "21590",
    v21588 = "21587",
    v21589 = "21588",
    v21590 = "21591",
    v21591 = "21592",
    v21592 = "21593",
    v21593 = "21594",
    v21594 = "21595",
    v21595 = "21596",
    v21596 = "21597",
    v21597 = "21598",
    v21598 = "21599",
    v21599 = "21647",
    v21601 = "21670",
    v21602 = "21589",
    v21603 = "21602",
    v21604 = "21603",
    v21605 = "21604",
    v21606 = "21605",
    v21607 = "21606",
    v21608 = "21607",
    v21609 = "21608",
    v21610 = "21609",
    v21611 = "21610",
    v21612 = "21611",
    v21613 = "21612",
    v21614 = "21613",
    v21615 = "21614",
    v21616 = "21617",
    v21617 = "21618",
    v21618 = "21619",
    v21619 = "21620",
    v21620 = "21621",
    v21621 = "21622",
    v21622 = "21615",
    v21623 = "21627",
    v21624 = "21623",
    v21625 = "21624",
    v21626 = "21625",
    v21627 = "21628",
    v21628 = "21631",
    v21629 = "21685",
    v21630 = "21629",
    v21631 = "21630",
    v21634 = "21626",
    v21636 = "21634",
    v21637 = "21636",
    v21638 = "21637",
    v21639 = "21638",
    v21641 = "21639",
    v21642 = "21641",
    v21644 = "21652",
    v21645 = "21646",
    v21646 = "21642",
    v21647 = "21648",
    v21648 = "21649",
    v21649 = "21650",
    v21650 = "21645",
    v21652 = "21653",
    v21653 = "21657",
    v21654 = "21644",
    v21655 = "21654",
    v21656 = "21655",
    v21657 = "21659",
    v21659 = "21660",
    v21660 = "21661",
    v21661 = "21688",
    v21662 = "21664",
    v21663 = "21676",
    v21664 = "21656",
    v21665 = "21666",
    v21666 = "21667",
    v21667 = "21668",
    v21668 = "21669",
    v21669 = "21601",
    v21670 = "21671",
    v21671 = "21672",
    v21672 = "21673",
    v21673 = "21675",
    v21674 = "21731",
    v21675 = "21674",
    v21676 = "21665",
    v21677 = "21663",
    v21679 = "21699",
    v21680 = "21679",
    v21681 = "21680",
    v21682 = "21677",
    v21683 = "21662",
    v21684 = "21687",
    v21685 = "21686",
    v21686 = "21684",
    v21687 = "21683",
    v21688 = "21689",
    v21689 = "21690",
    v21690 = "21682",
    v21699 = "21700",
    v21700 = "21701",
    v21701 = "21702",
    v21702 = "21703",
    v21703 = "21704",
    v21704 = "21705",
    v21705 = "21706",
    v21706 = "21707",
    v21707 = "21708",
    v21708 = "21709",
    v21709 = "21710",
    v21710 = "21711",
    v21711 = "21712",
    v21712 = "21713",
    v21713 = "21720",
    v21714 = "21715",
    v21715 = "21716",
    v21716 = "21717",
    v21717 = "21718",
    v21718 = "21719",
    v21719 = "pthcity",
    v21720 = "21721",
    v21721 = "21722",
    v21722 = "21723",
    v21723 = "21724",
    v21724 = "21714",
    v21725 = "21681",
    v21726 = "21725",
    v21727 = "21726",
    v21728 = "21727",
    v21729 = "21728",
    v21730 = "21729",
    v21731 = "21730",
    v54483 = "21616",
    v55147 = "54483",
    v58671 = "55147",
    v58672 = "58671",
    v58673 = "58672",
    v58675 = "58673"
  },
  ["Tiyen Esityi"] = {
    v38817 = "38818",
    v38818 = "38819",
    v38819 = "38820",
    v38820 = "38832",
    v38821 = "38822",
    v38822 = "38823",
    v38823 = "38824",
    v38824 = "38825",
    v38825 = "39028",
    v38826 = "38827",
    v38827 = "38828",
    v38828 = "38829",
    v38829 = "38835",
    v38830 = "39031",
    v38832 = "38821",
    v38833 = "39029",
    v38835 = "38830",
    v38836 = "38837",
    v38837 = "38838",
    v38838 = "38840",
    v38839 = "38867",
    v38840 = "38839",
    v38841 = "38877",
    v38842 = "38841",
    v38843 = "38842",
    v38844 = "38843",
    v38845 = "38887",
    v38846 = "38845",
    v38847 = "38844",
    v38848 = "38846",
    v38849 = "38847",
    v38850 = "38848",
    v38851 = "38849",
    v38852 = "38850",
    v38855 = "38851",
    v38856 = "38852",
    v38857 = "38855",
    v38858 = "38856",
    v38861 = "38857",
    v38862 = "38858",
    v38863 = "38861",
    v38864 = "38863",
    v38865 = "38862",
    v38866 = "38865",
    v38867 = "38864",
    v38868 = "38866",
    v38870 = "38868",
    v38871 = "39045",
    v38873 = "38870",
    v38877 = "38873",
    v38879 = "38871",
    v38880 = "38879",
    v38886 = "38880",
    v38887 = "38886",
    v38888 = "38892",
    v38892 = "38893",
    v38893 = "39041",
    v38894 = "38896",
    v38896 = "38897",
    v38897 = "38898",
    v38898 = "38899",
    v38899 = "38900",
    v38900 = "38901",
    v38901 = "38902",
    v38902 = "38903",
    v38903 = "38906",
    v38904 = "38907",
    v38905 = "38904",
    v38906 = "38905",
    v38907 = "38908",
    v38908 = "38909",
    v38909 = "38915",
    v38910 = "38913",
    v38911 = "38910",
    v38912 = "38911",
    v38913 = "38914",
    v38914 = "38916",
    v38915 = "38912",
    v38916 = "38918",
    v38918 = "38926",
    v38919 = "39070",
    v38920 = "38924",
    v38921 = "38927",
    v38922 = "38928",
    v38923 = "39021",
    v38924 = "38925",
    v38925 = "38919",
    v38926 = "38921",
    v38927 = "38922",
    v38928 = "38930",
    v38930 = "38936",
    v38935 = "38944",
    v38936 = "38937",
    v38937 = "38935",
    v38941 = "38946",
    v38943 = "38941",
    v38944 = "38943",
    v38945 = "38948",
    v38946 = "38958",
    v38947 = "38950",
    v38948 = "38947",
    v38949 = "38951",
    v38950 = "38949",
    v38951 = "38954",
    v38952 = "38957",
    v38954 = "38956",
    v38956 = "38952",
    v38957 = "38959",
    v38958 = "38945",
    v38959 = "38960",
    v38960 = "38961",
    v38961 = "38962",
    v38962 = "38963",
    v38963 = "38964",
    v38964 = "38994",
    v38965 = "38993",
    v38966 = "38965",
    v38967 = "38999",
    v38993 = "38967",
    v38994 = "38966",
    v38995 = "38996",
    v38996 = "38997",
    v38997 = "38998",
    v38998 = "39002",
    v38999 = "39000",
    v39000 = "39001",
    v39001 = "38995",
    v39002 = "39004",
    v39003 = "39005",
    v39004 = "39003",
    v39005 = "39007",
    v39006 = "39008",
    v39007 = "39006",
    v39008 = "39010",
    v39009 = "39011",
    v39010 = "39009",
    v39011 = "39014",
    v39014 = "39015",
    v39015 = "39016",
    v39016 = "39017",
    v39017 = "39019",
    v39019 = "39020",
    v39020 = "38923",
    v39021 = "39022",
    v39022 = "39023",
    v39023 = "39024",
    v39024 = "39025",
    v39025 = "38888",
    v39026 = "39027",
    v39027 = "38826",
    v39028 = "38836",
    v39029 = "39030",
    v39030 = "38817",
    v39031 = "39033",
    v39033 = "39034",
    v39034 = "38833",
    v39037 = "39038",
    v39038 = "39040",
    v39039 = "39037",
    v39040 = "39044",
    v39041 = "39043",
    v39042 = "39026",
    v39043 = "39039",
    v39044 = "39042",
    v39045 = "39063",
    v39046 = "39047",
    v39047 = "39048",
    v39048 = "39062",
    v39062 = "39067",
    v39063 = "39064",
    v39064 = "39065",
    v39065 = "39066",
    v39066 = "39046",
    v39067 = "39068",
    v39068 = "39069",
    v39069 = "38920",
    v39070 = "39071",
    v39071 = "39072",
    v39072 = "39073",
    v39073 = "39074",
    v39074 = "39077",
    v39075 = "39942",
    v39076 = "39075",
    v39077 = "39080",
    v39078 = "39967",
    v39079 = "39078",
    v39080 = "39101",
    v39081 = "39079",
    v39082 = "39081",
    v39083 = "39084",
    v39084 = "39085",
    v39085 = "39102",
    v39096 = "39083",
    v39097 = "39082",
    v39098 = "39096",
    v39099 = "39097",
    v39100 = "39098",
    v39101 = "39928",
    v39102 = "39099",
    v39927 = "39100",
    v39928 = "39930",
    v39929 = "39932",
    v39930 = "39933",
    v39931 = "39929",
    v39932 = "39927",
    v39933 = "39936",
    v39934 = "39931",
    v39935 = "39934",
    v39936 = "39937",
    v39937 = "39938",
    v39938 = "39935",
    v39939 = "39076",
    v39940 = "39939",
    v39941 = "39943",
    v39942 = "39941",
    v39943 = "39949",
    v39944 = "39946",
    v39945 = "39944",
    v39946 = "39948",
    v39947 = "39945",
    v39948 = "39950",
    v39949 = "39947",
    v39950 = "39953",
    v39951 = "39954",
    v39952 = "39951",
    v39953 = "39956",
    v39954 = "39957",
    v39955 = "39952",
    v39956 = "39958",
    v39957 = "39959",
    v39958 = "39955",
    v39959 = "39962",
    v39960 = "39963",
    v39961 = "pthcity",
    v39962 = "39965",
    v39963 = "39964",
    v39964 = "39961",
    v39965 = "39960",
    v39967 = "39969",
    v39968 = "39940",
    v39969 = "39971",
    v39970 = "39973",
    v39971 = "39975",
    v39972 = "39968",
    v39973 = "39977",
    v39974 = "39970",
    v39975 = "39979",
    v39976 = "39972",
    v39977 = "39980",
    v39978 = "39974",
    v39979 = "39982",
    v39980 = "39976",
    v39981 = "39978",
    v39982 = "39985",
    v39983 = "39988",
    v39984 = "39981",
    v39985 = "39989",
    v39986 = "39983",
    v39987 = "39986",
    v39988 = "39984",
    v39989 = "39991",
    v39990 = "39987",
    v39991 = "39990"
  },
  Xaanhal = {
    v36677 = "36678",
    v36678 = "36679",
    v36679 = "36680",
    v36680 = "36681",
    v36681 = "36682",
    v36682 = "36683",
    v36683 = "36684",
    v36684 = "36685",
    v36685 = "36686",
    v36686 = "36687",
    v36687 = "36689",
    v36688 = "36710",
    v36689 = "36690",
    v36690 = "36691",
    v36691 = "36692",
    v36692 = "36693",
    v36693 = "36694",
    v36694 = "36695",
    v36695 = "36696",
    v36696 = "36697",
    v36697 = "36698",
    v36698 = "36699",
    v36699 = "36700",
    v36700 = "36701",
    v36701 = "36705",
    v36702 = "36688",
    v36703 = "36702",
    v36704 = "36703",
    v36705 = "36706",
    v36706 = "36707",
    v36707 = "36708",
    v36708 = "36709",
    v36709 = "36704",
    v36710 = "36712",
    v36712 = "36713",
    v36713 = "36714",
    v36714 = "36715",
    v36715 = "36716",
    v36716 = "36717",
    v36717 = "36718",
    v36718 = "36719",
    v36719 = "36720",
    v36720 = "36721",
    v36721 = "36722",
    v36722 = "36723",
    v36723 = "36724",
    v36724 = "36745",
    v36725 = "36726",
    v36726 = "36727",
    v36727 = "36728",
    v36728 = "36786",
    v36729 = "36725",
    v36730 = "36729",
    v36731 = "36742",
    v36732 = "36731",
    v36733 = "36732",
    v36734 = "36733",
    v36735 = "36741",
    v36736 = "36735",
    v36737 = "36736",
    v36738 = "36737",
    v36739 = "36738",
    v36740 = "36739",
    v36741 = "36734",
    v36742 = "36743",
    v36743 = "36730",
    v36744 = "36746",
    v36745 = "36744",
    v36746 = "36740",
    v36752 = "36764",
    v36753 = "36784",
    v36754 = "pthcity",
    v36755 = "36754",
    v36756 = "36755",
    v36757 = "36756",
    v36758 = "36778",
    v36759 = "36758",
    v36760 = "36759",
    v36761 = "36765",
    v36762 = "36761",
    v36763 = "36762",
    v36764 = "36763",
    v36765 = "36766",
    v36766 = "36767",
    v36767 = "36768",
    v36768 = "36769",
    v36769 = "36770",
    v36770 = "36753",
    v36771 = "36783",
    v36772 = "36780",
    v36773 = "36772",
    v36774 = "36773",
    v36775 = "36777",
    v36776 = "36775",
    v36777 = "36757",
    v36778 = "36776",
    v36779 = "36774",
    v36780 = "36760",
    v36781 = "36779",
    v36782 = "36781",
    v36783 = "36782",
    v36784 = "36771",
    v36786 = "36752"
  },
  ["Yohanan Village"] = {
    v18903 = "19003",
    v18906 = "18907",
    v18907 = "18908",
    v18908 = "18909",
    v18909 = "18911",
    v18911 = "18912",
    v18912 = "18913",
    v18913 = "18914",
    v18914 = "18918",
    v18915 = "18995",
    v18916 = "18919",
    v18917 = "18921",
    v18918 = "18923",
    v18919 = "18915",
    v18921 = "18922",
    v18922 = "19808",
    v18923 = "18928",
    v18924 = "18926",
    v18925 = "18924",
    v18926 = "18927",
    v18927 = "18917",
    v18928 = "18929",
    v18929 = "18925",
    v18961 = "18916",
    v18962 = "18963",
    v18963 = "18965",
    v18964 = "18966",
    v18965 = "18964",
    v18966 = "18967",
    v18967 = "18961",
    v18995 = "18996",
    v18996 = "18997",
    v18997 = "18998",
    v18998 = "18999",
    v18999 = "19000",
    v19000 = "19001",
    v19001 = "19002",
    v19002 = "pthcity",
    v19003 = "18906",
    v19802 = "18903",
    v19808 = "18962"
  },
  ["Yuzurai village"] = {
    v59609 = "59610",
    v59610 = "59611",
    v59611 = "59620",
    v59613 = "59648",
    v59619 = "59613",
    v59620 = "59619",
    v59621 = "59921",
    v59647 = "59621",
    v59648 = "59647",
    v59694 = "59695",
    v59695 = "59698",
    v59697 = "59699",
    v59698 = "59697",
    v59699 = "pthcity",
    v59921 = "59988",
    v59988 = "60033",
    v59991 = "59995",
    v59992 = "59998",
    v59995 = "59996",
    v59996 = "59694",
    v59998 = "60005",
    v59999 = "59991",
    v60005 = "59999",
    v60030 = "60032",
    v60032 = "59992",
    v60033 = "60034",
    v60034 = "60030"
  },
  ["a basilisk lair"] = {
    v68354 = "69128",
    v68564 = "68597",
    v68597 = "68598",
    v68598 = "68617",
    v68604 = "68614",
    v68606 = "68564",
    v68607 = "68608",
    v68608 = "68609",
    v68609 = "68610",
    v68610 = "68612",
    v68611 = "68613",
    v68612 = "68611",
    v68613 = "68618",
    v68614 = "68616",
    v68615 = "68604",
    v68616 = "68607",
    v68617 = "68615",
    v68618 = "68619",
    v68619 = "68620",
    v68620 = "68622",
    v68621 = "68628",
    v68622 = "68623",
    v68623 = "68624",
    v68624 = "68625",
    v68625 = "68626",
    v68626 = "68627",
    v68627 = "68621",
    v68628 = "68629",
    v68629 = "68705",
    v68705 = "68706",
    v68706 = "68708",
    v68708 = "68712",
    v68709 = "68711",
    v68710 = "68709",
    v68711 = "pthcity",
    v68712 = "68713",
    v68713 = "68714",
    v68714 = "68710",
    v68715 = "68716",
    v68783 = "68787",
    v68784 = "68785",
    v68785 = "68783",
    v68786 = "68606",
    v68787 = "68786",
    v69128 = "69129",
    v69129 = "69130",
    v69130 = "69131",
    v69131 = "69132",
    v69132 = "69133",
    v69133 = "68784"
  },
  ["a snake pit"] = {
    v56346 = "56790",
    v56786 = "56792",
    v56790 = "56793",
    v56791 = "57242",
    v56792 = "56794",
    v56793 = "56795",
    v56794 = "56796",
    v56795 = "57174",
    v56796 = "56797",
    v56797 = "56807",
    v56807 = "57048",
    v56808 = "57050",
    v56942 = "56346",
    v57042 = "56808",
    v57043 = "57042",
    v57044 = "57043",
    v57045 = "57044",
    v57046 = "57045",
    v57047 = "57046",
    v57048 = "57047",
    v57049 = "57243",
    v57050 = "57051",
    v57051 = "57052",
    v57052 = "57049",
    v57174 = "57176",
    v57175 = "57184",
    v57176 = "57175",
    v57177 = "56791",
    v57178 = "57177",
    v57179 = "57178",
    v57180 = "57179",
    v57181 = "57180",
    v57182 = "57181",
    v57183 = "57182",
    v57184 = "57183",
    v57185 = "57186",
    v57186 = "57187",
    v57187 = "pthcity",
    v57188 = "57185",
    v57242 = "56786",
    v57243 = "57250",
    v57244 = "57252",
    v57245 = "57244",
    v57246 = "57188",
    v57247 = "57246",
    v57248 = "57251",
    v57249 = "57248",
    v57250 = "57249",
    v57251 = "57245",
    v57252 = "57253",
    v57253 = "57247"
  },
  ["a volcano"] = {
    v35217 = "35218",
    v35218 = "35219",
    v35219 = "35220",
    v35220 = "35221",
    v35221 = "35232",
    v35222 = "35223",
    v35223 = "35224",
    v35224 = "35225",
    v35225 = "35226",
    v35226 = "35253",
    v35227 = "35228",
    v35228 = "35229",
    v35229 = "35242",
    v35230 = "35231",
    v35231 = "35263",
    v35232 = "35233",
    v35233 = "35235",
    v35234 = "35236",
    v35235 = "35234",
    v35236 = "35238",
    v35237 = "35240",
    v35238 = "35239",
    v35239 = "35237",
    v35240 = "35241",
    v35241 = "35222",
    v35242 = "35243",
    v35243 = "35244",
    v35244 = "35245",
    v35245 = "35247",
    v35247 = "35249",
    v35248 = "35250",
    v35249 = "35252",
    v35250 = "35251",
    v35251 = "35230",
    v35252 = "35248",
    v35253 = "35255",
    v35254 = "35256",
    v35255 = "35254",
    v35256 = "35257",
    v35257 = "35258",
    v35258 = "35259",
    v35259 = "35260",
    v35260 = "35261",
    v35261 = "35262",
    v35262 = "35227",
    v35263 = "35264",
    v35264 = "35265",
    v35265 = "35266",
    v35266 = "35267",
    v35267 = "35268",
    v35268 = "35270",
    v35269 = "35272",
    v35270 = "35269",
    v35271 = "pthcity",
    v35272 = "35273",
    v35273 = "35274",
    v35274 = "35276",
    v35275 = "35271",
    v35276 = "35281",
    v35277 = "35275",
    v35281 = "35277"
  },
  ["the Arurer Haven"] = {
    v19320 = "19474",
    v19321 = "19476",
    v19443 = "19321",
    v19444 = "19443",
    v19445 = "19444",
    v19446 = "19445",
    v19447 = "19446",
    v19448 = "19447",
    v19449 = "19448",
    v19450 = "19449",
    v19451 = "19450",
    v19452 = "19451",
    v19453 = "19452",
    v19454 = "19453",
    v19455 = "19454",
    v19456 = "19504",
    v19457 = "19456",
    v19458 = "19457",
    v19459 = "19458",
    v19460 = "19459",
    v19461 = "19460",
    v19462 = "19461",
    v19463 = "19462",
    v19464 = "19463",
    v19465 = "19464",
    v19466 = "19465",
    v19467 = "19466",
    v19468 = "19467",
    v19469 = "19468",
    v19470 = "19469",
    v19471 = "19470",
    v19472 = "19471",
    v19473 = "19472",
    v19474 = "19473",
    v19475 = "19480",
    v19476 = "19477",
    v19477 = "19478",
    v19478 = "19479",
    v19479 = "19481",
    v19480 = "19483",
    v19481 = "19482",
    v19482 = "19475",
    v19483 = "19484",
    v19484 = "19485",
    v19485 = "19486",
    v19486 = "19488",
    v19487 = "19492",
    v19488 = "19487",
    v19489 = "19490",
    v19490 = "19491",
    v19491 = "19493",
    v19492 = "19489",
    v19493 = "19494",
    v19494 = "19495",
    v19495 = "19496",
    v19496 = "19497",
    v19497 = "19498",
    v19498 = "19499",
    v19499 = "19500",
    v19500 = "19502",
    v19501 = "pthcity",
    v19502 = "19503",
    v19503 = "19501",
    v19504 = "19505",
    v19505 = "19455"
  },
  ["the Augerweald"] = {
    v23048 = "23060",
    v23049 = "23048",
    v23050 = "23049",
    v23051 = "23050",
    v23052 = "23051",
    v23059 = "23052",
    v23060 = "23061",
    v23061 = "23062",
    v23062 = "23063",
    v23063 = "23064",
    v23064 = "23927",
    v23065 = "23107",
    v23107 = "23108",
    v23108 = "23109",
    v23109 = "23110",
    v23110 = "23907",
    v23111 = "23059",
    v23113 = "23111",
    v23781 = "23790",
    v23782 = "23796",
    v23784 = "23782",
    v23785 = "23786",
    v23786 = "23787",
    v23787 = "23784",
    v23788 = "23912",
    v23789 = "23798",
    v23790 = "23791",
    v23791 = "23792",
    v23792 = "23797",
    v23795 = "23928",
    v23796 = "23781",
    v23797 = "23789",
    v23798 = "23804",
    v23804 = "23795",
    v23907 = "23908",
    v23908 = "23909",
    v23909 = "23910",
    v23910 = "23911",
    v23911 = "pthcity",
    v23912 = "23913",
    v23913 = "23914",
    v23914 = "23915",
    v23915 = "23916",
    v23916 = "23922",
    v23922 = "24338",
    v23923 = "23788",
    v23924 = "23936",
    v23925 = "23924",
    v23926 = "23925",
    v23927 = "23926",
    v23928 = "23929",
    v23929 = "23930",
    v23930 = "23931",
    v23931 = "23932",
    v23932 = "23933",
    v23933 = "23934",
    v23934 = "23935",
    v23935 = "23065",
    v23936 = "23938",
    v23937 = "23923",
    v23938 = "23937",
    v24338 = "24339",
    v24339 = "24340",
    v24340 = "24341",
    v24341 = "23785"
  },
  ["the Ayhesa Cliffs"] = {
    v19987 = "19988",
    v19988 = "19989",
    v19989 = "19990",
    v19990 = "19997",
    v19997 = "19998",
    v19998 = "19999",
    v19999 = "20000",
    v20000 = "20001",
    v20001 = "20002",
    v20002 = "20003",
    v20003 = "20004",
    v20004 = "20005",
    v20005 = "20006",
    v20006 = "20007",
    v20007 = "20008",
    v20008 = "20009",
    v20009 = "20016",
    v20010 = "20012",
    v20011 = "20018",
    v20012 = "20013",
    v20013 = "20011",
    v20014 = "20010",
    v20016 = "20014",
    v20018 = "20019",
    v20019 = "20020",
    v20020 = "20021",
    v20021 = "20022",
    v20022 = "20023",
    v20023 = "20024",
    v20024 = "20030",
    v20025 = "pthcity",
    v20026 = "20027",
    v20027 = "20028",
    v20028 = "20029",
    v20029 = "20025",
    v20030 = "20031",
    v20031 = "20032",
    v20032 = "20026"
  },
  ["the Azdun dungeon"] = {
    v1773 = "1774",
    v1774 = "1775",
    v1775 = "1776",
    v1776 = "1777",
    v1777 = "1778",
    v1778 = "1779",
    v1779 = "1780",
    v1780 = "1781",
    v1781 = "1782",
    v1782 = "1783",
    v1783 = "1787",
    v1787 = "1788",
    v1788 = "1789",
    v1789 = "1790",
    v1790 = "1791",
    v1791 = "1793",
    v1792 = "pthcity",
    v1793 = "1792"
  },
  ["the Bakal Chasm"] = {
    v61011 = "61063",
    v61013 = "61014",
    v61014 = "61024",
    v61024 = "61025",
    v61025 = "61026",
    v61026 = "61027",
    v61027 = "61037",
    v61037 = "61062",
    v61040 = "61041",
    v61041 = "61043",
    v61043 = "61044",
    v61044 = "pthcity",
    v61045 = "61040",
    v61047 = "61048",
    v61048 = "61052",
    v61049 = "61051",
    v61051 = "61045",
    v61052 = "61049",
    v61055 = "61047",
    v61056 = "61055",
    v61057 = "61056",
    v61058 = "61057",
    v61059 = "61058",
    v61060 = "61059",
    v61061 = "61060",
    v61062 = "61061",
    v61063 = "61064",
    v61064 = "61065",
    v61065 = "61066",
    v61066 = "61067",
    v61067 = "61069",
    v61069 = "61117",
    v61073 = "61115",
    v61074 = "61013",
    v61075 = "61074",
    v61076 = "61128",
    v61077 = "61076",
    v61078 = "61131",
    v61079 = "61119",
    v61080 = "61079",
    v61112 = "61080",
    v61113 = "61121",
    v61114 = "61113",
    v61115 = "61114",
    v61116 = "61073",
    v61117 = "61116",
    v61118 = "61120",
    v61119 = "61118",
    v61120 = "61135",
    v61121 = "61122",
    v61122 = "61112",
    v61128 = "61075",
    v61131 = "61077",
    v61135 = "61136",
    v61136 = "61078"
  },
  ["the Barony of Dun Valley"] = {
    v34494 = "3800",
    v3795 = "3796",
    v3796 = "3799",
    v3798 = "3821",
    v3799 = "3801",
    v3800 = "3798",
    v3801 = "34494",
    v3802 = "3805",
    v3803 = "3802",
    v3804 = "3803",
    v3805 = "3806",
    v3806 = "3807",
    v3807 = "3809",
    v3808 = "3810",
    v3809 = "3808",
    v3810 = "3811",
    v3811 = "4695",
    v3821 = "3804",
    v4695 = "4696",
    v4696 = "4697",
    v4697 = "4698",
    v4698 = "4702",
    v4702 = "4709",
    v4709 = "4710",
    v4710 = "5109",
    v5029 = "5030",
    v5030 = "5031",
    v5031 = "5032",
    v5032 = "5033",
    v5033 = "5034",
    v5034 = "5035",
    v5035 = "5036",
    v5036 = "3795",
    v5062 = "pthcity",
    v5063 = "5062",
    v5064 = "5063",
    v5065 = "5064",
    v5066 = "5065",
    v5067 = "5066",
    v5068 = "5069",
    v5069 = "5070",
    v5070 = "5074",
    v5071 = "5072",
    v5072 = "5067",
    v5074 = "5071",
    v5075 = "5076",
    v5076 = "5068",
    v5077 = "5075",
    v5079 = "5077",
    v5080 = "5082",
    v5081 = "5079",
    v5082 = "5081",
    v5083 = "5080",
    v5084 = "5083",
    v5085 = "5084",
    v5086 = "5085",
    v5087 = "5086",
    v5088 = "5087",
    v5089 = "5088",
    v5090 = "5089",
    v5091 = "5092",
    v5092 = "5090",
    v5093 = "5094",
    v5094 = "5095",
    v5095 = "5096",
    v5096 = "5091",
    v5097 = "5093",
    v5098 = "5099",
    v5099 = "5097",
    v5100 = "5098",
    v5101 = "5100",
    v5102 = "5472",
    v5103 = "5104",
    v5104 = "5105",
    v5105 = "5101",
    v5106 = "5102",
    v5107 = "5106",
    v5108 = "5111",
    v5109 = "5108",
    v5110 = "5107",
    v5111 = "5110",
    v5472 = "5103"
  },
  ["the Bastion of Illdon"] = {
    v24410 = "24411",
    v24411 = "24412",
    v24412 = "24423",
    v24413 = "24424",
    v24414 = "24413",
    v24415 = "24414",
    v24416 = "24415",
    v24417 = "24416",
    v24418 = "24417",
    v24419 = "24418",
    v24420 = "24419",
    v24421 = "24420",
    v24422 = "24421",
    v24423 = "24422",
    v24424 = "24425",
    v24425 = "24426",
    v24426 = "24531",
    v24531 = "24532",
    v24532 = "24533",
    v24533 = "24534",
    v24534 = "24535",
    v24535 = "24536",
    v24536 = "24538",
    v24537 = "24926",
    v24538 = "24539",
    v24539 = "24540",
    v24540 = "24542",
    v24541 = "24537",
    v24542 = "24543",
    v24543 = "24544",
    v24544 = "24545",
    v24545 = "24541",
    v24546 = "24598",
    v24547 = "24546",
    v24598 = "24599",
    v24599 = "24614",
    v24600 = "24547",
    v24612 = "24615",
    v24613 = "24600",
    v24614 = "24612",
    v24615 = "24619",
    v24617 = "24621",
    v24619 = "24623",
    v24621 = "24622",
    v24622 = "24624",
    v24623 = "24617",
    v24624 = "24625",
    v24625 = "24884",
    v24626 = "24882",
    v24882 = "24887",
    v24883 = "24890",
    v24884 = "24885",
    v24885 = "24892",
    v24886 = "24906",
    v24887 = "24883",
    v24888 = "24889",
    v24889 = "24900",
    v24890 = "24888",
    v24891 = "24894",
    v24892 = "24891",
    v24893 = "24886",
    v24894 = "24896",
    v24895 = "24893",
    v24896 = "24897",
    v24897 = "24898",
    v24898 = "24899",
    v24899 = "24895",
    v24900 = "24901",
    v24901 = "24902",
    v24902 = "24903",
    v24903 = "24904",
    v24904 = "24905",
    v24905 = "pthcity",
    v24906 = "24911",
    v24907 = "24626",
    v24908 = "24909",
    v24909 = "24910",
    v24910 = "24907",
    v24911 = "24912",
    v24912 = "24913",
    v24913 = "24914",
    v24914 = "24915",
    v24915 = "24916",
    v24916 = "24917",
    v24917 = "24918",
    v24918 = "24920",
    v24919 = "24921",
    v24920 = "24919",
    v24921 = "24908",
    v24926 = "24927",
    v24927 = "24928",
    v24928 = "24613",
    v4964 = "24410"
  },
  ["the Bloodwood"] = {
    v57522 = "57524",
    v57523 = "57522",
    v57524 = "pthcity",
    v57525 = "57523",
    v57526 = "57525",
    v57527 = "57528",
    v57528 = "57532",
    v57529 = "57527",
    v57530 = "57526",
    v57532 = "57540",
    v57533 = "57529",
    v57537 = "57544",
    v57538 = "57537",
    v57539 = "57538",
    v57540 = "57539",
    v57541 = "57533",
    v57542 = "57541",
    v57543 = "57542",
    v57544 = "57549",
    v57545 = "57547",
    v57546 = "57545",
    v57547 = "57543",
    v57548 = "57546",
    v57549 = "57550",
    v57550 = "57559",
    v57552 = "57553",
    v57553 = "57554",
    v57554 = "57555",
    v57555 = "57573",
    v57556 = "57552",
    v57557 = "57556",
    v57558 = "57557",
    v57559 = "57558",
    v57560 = "57564",
    v57561 = "57560",
    v57562 = "57561",
    v57563 = "57562",
    v57564 = "57566",
    v57565 = "57567",
    v57566 = "57565",
    v57567 = "57568",
    v57568 = "57569",
    v57569 = "57570",
    v57570 = "57584",
    v57571 = "57563",
    v57572 = "57571",
    v57573 = "57572",
    v57574 = "57575",
    v57575 = "57530",
    v57576 = "57577",
    v57577 = "57574",
    v57578 = "57579",
    v57579 = "57576",
    v57580 = "57598",
    v57584 = "57585",
    v57585 = "57586",
    v57586 = "57587",
    v57587 = "57606",
    v57588 = "57589",
    v57589 = "57600",
    v57590 = "57580",
    v57591 = "57592",
    v57592 = "57593",
    v57593 = "57578",
    v57594 = "57591",
    v57595 = "57594",
    v57596 = "57597",
    v57597 = "57601",
    v57598 = "57595",
    v57599 = "57590",
    v57600 = "57602",
    v57601 = "57599",
    v57602 = "57613",
    v57603 = "57605",
    v57604 = "57588",
    v57605 = "57604",
    v57606 = "57608",
    v57607 = "57603",
    v57608 = "57607",
    v57609 = "57610",
    v57610 = "57596",
    v57611 = "57615",
    v57612 = "57611",
    v57613 = "57614",
    v57614 = "57612",
    v57615 = "57616",
    v57616 = "57609"
  },
  ["the Cathedral of Gloaming"] = {
    v22702 = "22703",
    v22703 = "22709",
    v22709 = "22710",
    v22710 = "22711",
    v22711 = "22796",
    v22796 = "22797",
    v22797 = "22798",
    v22798 = "22802",
    v22799 = "22800",
    v22800 = "22801",
    v22801 = "22803",
    v22802 = "24783",
    v22803 = "22804",
    v22804 = "22805",
    v22805 = "22812",
    v22806 = "22814",
    v22807 = "22809",
    v22808 = "22815",
    v22809 = "22808",
    v22810 = "pthcity",
    v22811 = "22810",
    v22812 = "22806",
    v22813 = "22807",
    v22814 = "22813",
    v22815 = "22820",
    v22816 = "22817",
    v22817 = "22811",
    v22820 = "22821",
    v22821 = "22822",
    v22822 = "22823",
    v22823 = "22816",
    v22853 = "24722",
    v24722 = "22799",
    v24723 = "22853",
    v24783 = "24723"
  },
  ["the Caverns of Mor"] = {
    v19344 = "19346",
    v19346 = "19351",
    v19351 = "19352",
    v19352 = "19353",
    v19353 = "19354",
    v19354 = "19355",
    v19355 = "19356",
    v19356 = "19357",
    v19357 = "19358",
    v19358 = "19360",
    v19359 = "19361",
    v19360 = "19359",
    v19361 = "19362",
    v19362 = "19363",
    v19363 = "19364",
    v19364 = "19365",
    v19365 = "19413",
    v19413 = "19414",
    v19414 = "19415",
    v19415 = "19416",
    v19416 = "19417",
    v19417 = "19418",
    v19418 = "19419",
    v19419 = "19424",
    v19420 = "19421",
    v19421 = "19422",
    v19422 = "19423",
    v19423 = "19429",
    v19424 = "19425",
    v19425 = "19426",
    v19426 = "19427",
    v19427 = "19420",
    v19429 = "19441",
    v19430 = "19506",
    v19431 = "19430",
    v19432 = "19433",
    v19433 = "19431",
    v19434 = "19435",
    v19435 = "19436",
    v19436 = "19432",
    v19437 = "19442",
    v19438 = "19437",
    v19439 = "19438",
    v19440 = "19439",
    v19441 = "19440",
    v19442 = "19434",
    v19506 = "19507",
    v19507 = "19508",
    v19508 = "19509",
    v19509 = "19510",
    v19510 = "19511",
    v19511 = "19512",
    v19512 = "19514",
    v19513 = "19515",
    v19514 = "19513",
    v19515 = "19516",
    v19516 = "19517",
    v19517 = "19518",
    v19518 = "19519",
    v19519 = "pthcity"
  },
  ["the Caverns of Telfinne"] = {
    v20932 = "20933",
    v20933 = "20934",
    v20934 = "20935",
    v20935 = "20936",
    v20936 = "20938",
    v20937 = "20939",
    v20938 = "20937",
    v20939 = "20940",
    v20940 = "20941",
    v20941 = "20942",
    v20942 = "20943",
    v20943 = "20944",
    v20944 = "20945",
    v20945 = "20946",
    v20946 = "20947",
    v20947 = "20948",
    v20948 = "20949",
    v20949 = "20950",
    v20950 = "20951",
    v20951 = "20952",
    v20952 = "20953",
    v20953 = "20954",
    v20954 = "20955",
    v20955 = "20956",
    v20956 = "20957",
    v20957 = "20958",
    v20958 = "20959",
    v20959 = "20960",
    v20960 = "20961",
    v20961 = "20962",
    v20962 = "20963",
    v20963 = "20964",
    v20964 = "20965",
    v20965 = "20966",
    v20966 = "20983",
    v20967 = "20974",
    v20968 = "20969",
    v20969 = "20971",
    v20970 = "20972",
    v20971 = "20970",
    v20972 = "20967",
    v20973 = "20978",
    v20974 = "20975",
    v20975 = "20973",
    v20976 = "20979",
    v20977 = "20984",
    v20978 = "20976",
    v20979 = "20980",
    v20980 = "20981",
    v20981 = "20982",
    v20982 = "20977",
    v20983 = "20968",
    v20984 = "20985",
    v20985 = "20986",
    v20986 = "20987",
    v20987 = "20988",
    v20988 = "20989",
    v20989 = "20990",
    v20990 = "20991",
    v20991 = "20992",
    v20992 = "20993",
    v20993 = "20994",
    v20994 = "20995",
    v20995 = "20996",
    v20996 = "20997",
    v20997 = "20999",
    v20998 = "21000",
    v20999 = "20998",
    v21000 = "22284",
    v22284 = "22285",
    v22285 = "22286",
    v22286 = "22287",
    v22287 = "22288",
    v22288 = "22289",
    v22289 = "22290",
    v22290 = "22291",
    v22291 = "22292",
    v22292 = "22293",
    v22293 = "22294",
    v22294 = "22297",
    v22295 = "22296",
    v22296 = "pthcity",
    v22297 = "22295"
  },
  ["the Centipede Cave"] = {
    v22824 = "22825",
    v22825 = "22826",
    v22826 = "22828",
    v22828 = "22829",
    v22829 = "22830",
    v22830 = "60267",
    v22831 = "22832",
    v22832 = "22833",
    v22833 = "22834",
    v22834 = "22836",
    v22836 = "22837",
    v22837 = "22838",
    v22838 = "22839",
    v22839 = "22850",
    v22840 = "22841",
    v22841 = "22842",
    v22842 = "22843",
    v22843 = "22844",
    v22844 = "22845",
    v22845 = "22847",
    v22846 = "pthcity",
    v22847 = "22848",
    v22848 = "22849",
    v22849 = "22846",
    v22850 = "22851",
    v22851 = "22852",
    v22852 = "22840",
    v60267 = "60268",
    v60268 = "60269",
    v60269 = "60270",
    v60270 = "60271",
    v60271 = "60272",
    v60272 = "60273",
    v60273 = "60274",
    v60274 = "22831"
  },
  ["the Central Wilderness"] = {
    v11312 = "11319",
    v11317 = "11312",
    v11318 = "11320",
    v11319 = "11335",
    v11320 = "11317",
    v11321 = "11322",
    v11322 = "11318",
    v11323 = "11321",
    v11324 = "11323",
    v11325 = "11324",
    v11326 = "11325",
    v11327 = "pthcity",
    v11328 = "11327",
    v11329 = "11331",
    v11330 = "11329",
    v11331 = "11328",
    v11332 = "11449",
    v11333 = "11330",
    v11334 = "11332",
    v11335 = "11338",
    v11338 = "11339",
    v11339 = "11340",
    v11340 = "11341",
    v11341 = "11334",
    v11449 = "11450",
    v11450 = "11452",
    v11451 = "11333",
    v11452 = "11453",
    v11453 = "11454",
    v11454 = "11451"
  },
  ["the Crags"] = {
    v19311 = "19317",
    v19312 = "21235",
    v19313 = "19312",
    v19317 = "19313",
    v19318 = "19325",
    v19325 = "19326",
    v19326 = "19343",
    v19343 = "19596",
    v19589 = "19907",
    v19590 = "19589",
    v19591 = "19590",
    v19596 = "19599",
    v19599 = "19708",
    v19708 = "19709",
    v19709 = "19710",
    v19710 = "19711",
    v19711 = "19803",
    v19803 = "19868",
    v19804 = "19805",
    v19805 = "20074",
    v19806 = "19804",
    v19867 = "19591",
    v19868 = "19806",
    v19907 = "20073",
    v19908 = "19867",
    v19914 = "19908",
    v19915 = "19914",
    v20073 = "pthcity",
    v20074 = "19915",
    v21234 = "19318",
    v21235 = "21234"
  },
  ["the Dakhota hills"] = {
    v1076 = "1077",
    v1077 = "1078",
    v1078 = "1085",
    v1079 = "1080",
    v1080 = "1076",
    v1082 = "1079",
    v1083 = "1098",
    v1085 = "1086",
    v1086 = "1088",
    v1088 = "56511",
    v1089 = "1090",
    v1090 = "56281",
    v1091 = "1095",
    v1092 = "1093",
    v1093 = "1094",
    v1094 = "1083",
    v1095 = "1092",
    v1096 = "1106",
    v1097 = "1096",
    v1098 = "1097",
    v1099 = "1082",
    v1101 = "1099",
    v1104 = "1105",
    v1105 = "1111",
    v1106 = "1104",
    v1111 = "1114",
    v1112 = "1123",
    v1113 = "1112",
    v1114 = "1113",
    v1121 = "1122",
    v1122 = "1147",
    v1123 = "1121",
    v1125 = "1101",
    v1126 = "1127",
    v1127 = "1125",
    v1133 = "1126",
    v1134 = "1133",
    v1135 = "1134",
    v1141 = "1135",
    v1142 = "1141",
    v1145 = "1151",
    v1146 = "1145",
    v1147 = "1146",
    v1148 = "1178",
    v1149 = "1148",
    v1150 = "1149",
    v1151 = "1150",
    v1153 = "1142",
    v1154 = "1153",
    v1155 = "1156",
    v1156 = "1165",
    v1165 = "1154",
    v1177 = "297",
    v1178 = "1177",
    v296 = "pthcity",
    v297 = "296",
    v56279 = "56280",
    v56280 = "1091",
    v56281 = "56279",
    v56511 = "1089"
  },
  ["the Dolbodi Campsite"] = {
    v19323 = "19324",
    v19324 = "19334",
    v19334 = "19335",
    v19335 = "19336",
    v19336 = "19337",
    v19337 = "19338",
    v19338 = "19339",
    v19339 = "19340",
    v19340 = "19341",
    v19341 = "19342",
    v19342 = "19349",
    v19345 = "19350",
    v19347 = "19345",
    v19348 = "19347",
    v19349 = "19348",
    v19350 = "19366",
    v19366 = "19367",
    v19367 = "19368",
    v19368 = "19370",
    v19369 = "19406",
    v19370 = "19378",
    v19371 = "19381",
    v19372 = "19371",
    v19373 = "19374",
    v19374 = "19375",
    v19375 = "19379",
    v19376 = "19373",
    v19377 = "19376",
    v19378 = "19377",
    v19379 = "19380",
    v19380 = "19372",
    v19381 = "19382",
    v19382 = "19384",
    v19383 = "19396",
    v19384 = "19386",
    v19385 = "19383",
    v19386 = "19388",
    v19387 = "19385",
    v19388 = "19393",
    v19389 = "19387",
    v19390 = "19389",
    v19391 = "19392",
    v19392 = "19390",
    v19393 = "19391",
    v19394 = "19369",
    v19395 = "19394",
    v19396 = "19395",
    v19397 = "19399",
    v19398 = "19400",
    v19399 = "19409",
    v19400 = "19401",
    v19401 = "pthcity",
    v19402 = "19398",
    v19403 = "19411",
    v19404 = "19403",
    v19405 = "19404",
    v19406 = "19405",
    v19407 = "19412",
    v19408 = "19407",
    v19409 = "19402",
    v19411 = "19408",
    v19412 = "19397"
  },
  ["the Dramedo Warrens"] = {
    v58207 = "58208",
    v58208 = "58209",
    v58209 = "58210",
    v58210 = "58211",
    v58211 = "58212",
    v58212 = "58213",
    v58213 = "58215",
    v58214 = "58236",
    v58215 = "58216",
    v58216 = "58217",
    v58217 = "58218",
    v58218 = "58214",
    v58236 = "58237",
    v58237 = "58240",
    v58238 = "58246",
    v58239 = "58242",
    v58240 = "58241",
    v58241 = "58238",
    v58242 = "58243",
    v58243 = "58244",
    v58244 = "58245",
    v58245 = "58247",
    v58246 = "58239",
    v58247 = "58248",
    v58248 = "58249",
    v58249 = "58250",
    v58250 = "58252",
    v58251 = "58258",
    v58252 = "58253",
    v58253 = "58254",
    v58254 = "58255",
    v58255 = "58256",
    v58256 = "58259",
    v58257 = "58251",
    v58258 = "58264",
    v58259 = "58260",
    v58260 = "58261",
    v58261 = "58262",
    v58262 = "58263",
    v58263 = "58257",
    v58264 = "58266",
    v58266 = "58267",
    v58267 = "58268",
    v58268 = "58269",
    v58269 = "58270",
    v58270 = "58272",
    v58271 = "58279",
    v58272 = "58273",
    v58273 = "58274",
    v58274 = "58271",
    v58275 = "58280",
    v58276 = "58275",
    v58277 = "58276",
    v58278 = "58277",
    v58279 = "58278",
    v58280 = "58281",
    v58281 = "58282",
    v58282 = "58283",
    v58283 = "58284",
    v58284 = "58288",
    v58285 = "58286",
    v58286 = "58287",
    v58287 = "58290",
    v58288 = "58289",
    v58289 = "58285",
    v58290 = "58291",
    v58291 = "58292",
    v58292 = "58293",
    v58293 = "58294",
    v58294 = "58295",
    v58295 = "58296",
    v58296 = "58297",
    v58297 = "58300",
    v58298 = "58303",
    v58299 = "58304",
    v58300 = "58306",
    v58301 = "58302",
    v58302 = "58299",
    v58303 = "58307",
    v58304 = "58298",
    v58305 = "pthcity",
    v58306 = "58301",
    v58307 = "58305"
  },
  ["the Eresh Mines"] = {
    v15344 = "15346",
    v15346 = "15347",
    v15347 = "15350",
    v15348 = "15369",
    v15349 = "15351",
    v15350 = "15349",
    v15351 = "15352",
    v15352 = "15353",
    v15353 = "15354",
    v15354 = "15355",
    v15355 = "15356",
    v15356 = "15368",
    v15367 = "15348",
    v15368 = "15367",
    v15369 = "15371",
    v15370 = "15404",
    v15371 = "15374",
    v15372 = "15373",
    v15373 = "15370",
    v15374 = "15390",
    v15375 = "15376",
    v15376 = "15377",
    v15377 = "15391",
    v15390 = "15375",
    v15391 = "15392",
    v15392 = "15393",
    v15393 = "15394",
    v15394 = "15372",
    v15395 = "15396",
    v15396 = "pthcity",
    v15404 = "15405",
    v15405 = "15395"
  },
  ["the Fengard Keep"] = {
    v19712 = "19713",
    v19713 = "19714",
    v19714 = "19715",
    v19715 = "19716",
    v19716 = "19717",
    v19717 = "19718",
    v19718 = "19719",
    v19719 = "19720",
    v19720 = "19721",
    v19721 = "19722",
    v19722 = "19723",
    v19723 = "19724",
    v19724 = "19725",
    v19725 = "19726",
    v19726 = "19727",
    v19727 = "19728",
    v19728 = "19729",
    v19729 = "19730",
    v19730 = "19731",
    v19731 = "19732",
    v19732 = "19733",
    v19733 = "19734",
    v19734 = "19775",
    v19735 = "19736",
    v19736 = "19737",
    v19737 = "19738",
    v19738 = "19739",
    v19739 = "19740",
    v19740 = "19741",
    v19741 = "19742",
    v19742 = "19753",
    v19743 = "19744",
    v19744 = "19745",
    v19745 = "19746",
    v19746 = "19747",
    v19747 = "19748",
    v19748 = "19749",
    v19749 = "19750",
    v19750 = "19751",
    v19751 = "19752",
    v19752 = "pthcity",
    v19753 = "19743",
    v19775 = "19776",
    v19776 = "19777",
    v19777 = "19778",
    v19778 = "19783",
    v19779 = "19780",
    v19780 = "19781",
    v19781 = "19782",
    v19782 = "19735",
    v19783 = "19784",
    v19784 = "19785",
    v19785 = "19787",
    v19786 = "19788",
    v19787 = "19786",
    v19788 = "19789",
    v19789 = "19797",
    v19790 = "19791",
    v19791 = "19792",
    v19792 = "19793",
    v19793 = "19794",
    v19794 = "19795",
    v19795 = "19796",
    v19796 = "19779",
    v19797 = "19790",
    v3273 = "3276",
    v3276 = "19712"
  },
  ["the Feral Caves"] = {
    v16271 = "16278",
    v16272 = "16277",
    v16273 = "16271",
    v16274 = "16275",
    v16275 = "16276",
    v16276 = "16272",
    v16277 = "16273",
    v16278 = "16280",
    v16279 = "16317",
    v16280 = "16281",
    v16281 = "16279",
    v16312 = "16329",
    v16317 = "16312",
    v16318 = "16433",
    v16319 = "16321",
    v16320 = "16322",
    v16321 = "16431",
    v16322 = "16323",
    v16323 = "16325",
    v16324 = "16568",
    v16325 = "16326",
    v16326 = "16324",
    v16327 = "16319",
    v16329 = "16430",
    v16430 = "16318",
    v16431 = "16432",
    v16432 = "16434",
    v16433 = "16327",
    v16434 = "16320",
    v16568 = "16569",
    v16569 = "16570",
    v16570 = "16571",
    v16571 = "16572",
    v16572 = "16574",
    v16573 = "16580",
    v16574 = "16577",
    v16575 = "16576",
    v16576 = "16573",
    v16577 = "16575",
    v16580 = "pthcity"
  },
  ["the Festering Wastes"] = {
    v20713 = "20714",
    v20714 = "20716",
    v20715 = "20713",
    v20716 = "20717",
    v20717 = "20731",
    v20718 = "20719",
    v20719 = "20715",
    v20720 = "20723",
    v20721 = "20718",
    v20722 = "20721",
    v20723 = "20724",
    v20724 = "20726",
    v20726 = "20722",
    v20729 = "20817",
    v20730 = "20729",
    v20731 = "20732",
    v20732 = "20730",
    v20733 = "20720",
    v20734 = "20733",
    v20735 = "20734",
    v20736 = "20735",
    v20737 = "20736",
    v20738 = "20737",
    v20739 = "20835",
    v20740 = "20741",
    v20741 = "20739",
    v20742 = "pthcity",
    v20743 = "20744",
    v20744 = "20740",
    v20745 = "20742",
    v20748 = "20749",
    v20749 = "20750",
    v20750 = "20743",
    v20751 = "20748",
    v20752 = "20753",
    v20753 = "20745",
    v20754 = "20757",
    v20755 = "20751",
    v20756 = "20755",
    v20757 = "20756",
    v20758 = "20752",
    v20759 = "20758",
    v20760 = "20759",
    v20761 = "20760",
    v20762 = "20763",
    v20763 = "20761",
    v20764 = "20762",
    v20765 = "20764",
    v20766 = "20765",
    v20767 = "20766",
    v20768 = "20767",
    v20769 = "20768",
    v20770 = "20769",
    v20771 = "20770",
    v20772 = "20797",
    v20773 = "20772",
    v20777 = "20773",
    v20778 = "20779",
    v20779 = "20780",
    v20780 = "20777",
    v20784 = "20778",
    v20785 = "20784",
    v20787 = "20785",
    v20788 = "20787",
    v20789 = "20793",
    v20790 = "20788",
    v20791 = "20790",
    v20792 = "20800",
    v20793 = "20791",
    v20794 = "20795",
    v20795 = "20789",
    v20796 = "20771",
    v20797 = "20796",
    v20798 = "20794",
    v20800 = "20801",
    v20801 = "20802",
    v20802 = "20809",
    v20804 = "20798",
    v20805 = "20804",
    v20806 = "20805",
    v20807 = "20806",
    v20808 = "20807",
    v20809 = "20810",
    v20810 = "20811",
    v20811 = "20808",
    v20812 = "20792",
    v20813 = "20814",
    v20814 = "20815",
    v20815 = "20812",
    v20816 = "20813",
    v20817 = "20816",
    v20835 = "20738"
  },
  ["the Forgotten Dome"] = {
    v54770 = "55120",
    v55015 = "56071",
    v55120 = "55123",
    v55123 = "55137",
    v55137 = "55138",
    v55138 = "55151",
    v55151 = "55153",
    v55153 = "55154",
    v55154 = "55187",
    v55187 = "56107",
    v55706 = "55707",
    v55707 = "56245",
    v55708 = "55709",
    v55709 = "55706",
    v55711 = "56247",
    v55712 = "56232",
    v56070 = "56075",
    v56071 = "56070",
    v56072 = "56073",
    v56073 = "56074",
    v56074 = "56081",
    v56075 = "56076",
    v56076 = "56077",
    v56077 = "56083",
    v56078 = "55015",
    v56079 = "56078",
    v56081 = "56082",
    v56082 = "56079",
    v56083 = "56084",
    v56084 = "56085",
    v56085 = "56091",
    v56086 = "56087",
    v56087 = "56088",
    v56088 = "56072",
    v56091 = "56093",
    v56092 = "56095",
    v56093 = "56094",
    v56094 = "56101",
    v56095 = "56096",
    v56096 = "56086",
    v56097 = "56092",
    v56098 = "56097",
    v56099 = "56098",
    v56100 = "56106",
    v56101 = "55711",
    v56102 = "56100",
    v56103 = "56102",
    v56104 = "56103",
    v56105 = "56099",
    v56106 = "56105",
    v56107 = "56108",
    v56108 = "56110",
    v56109 = "56186",
    v56110 = "56197",
    v56186 = "56187",
    v56187 = "56188",
    v56188 = "56189",
    v56189 = "56221",
    v56190 = "56200",
    v56191 = "56201",
    v56192 = "56193",
    v56193 = "56195",
    v56194 = "56205",
    v56195 = "56194",
    v56196 = "56213",
    v56197 = "56217",
    v56198 = "56109",
    v56199 = "56198",
    v56200 = "56199",
    v56201 = "56204",
    v56202 = "56190",
    v56203 = "56202",
    v56204 = "56203",
    v56205 = "56208",
    v56206 = "56209",
    v56207 = "56206",
    v56208 = "56207",
    v56209 = "56210",
    v56210 = "56212",
    v56211 = "56191",
    v56212 = "56211",
    v56213 = "56216",
    v56214 = "56192",
    v56215 = "56214",
    v56216 = "56215",
    v56217 = "56218",
    v56218 = "56219",
    v56219 = "56220",
    v56220 = "56196",
    v56221 = "56104",
    v56222 = "pthcity",
    v56223 = "56224",
    v56224 = "56222",
    v56225 = "56223",
    v56226 = "55712",
    v56227 = "56230",
    v56228 = "56229",
    v56229 = "56226",
    v56230 = "56231",
    v56231 = "56228",
    v56232 = "56233",
    v56233 = "56236",
    v56234 = "56235",
    v56235 = "56225",
    v56236 = "56237",
    v56237 = "56234",
    v56238 = "56243",
    v56239 = "56238",
    v56240 = "56239",
    v56241 = "56242",
    v56242 = "56227",
    v56243 = "56244",
    v56244 = "56241",
    v56245 = "56246",
    v56246 = "56240",
    v56247 = "55708"
  },
  ["the Fractal Bloom"] = {
    v62996 = "63002",
    v63002 = "63003",
    v63003 = "63009",
    v63004 = "63026",
    v63009 = "63004",
    v63026 = "63027",
    v63027 = "63028",
    v63028 = "63030",
    v63029 = "63035",
    v63030 = "63029",
    v63035 = "63036",
    v63036 = "63037",
    v63037 = "63038",
    v63038 = "63039",
    v63039 = "pthcity"
  },
  ["the Hlugnic Labyrinth"] = {
    v11976 = "pthcity",
    v56354 = "56355",
    v56355 = "57420",
    v56356 = "56358",
    v56358 = "57636",
    v57334 = "57335",
    v57335 = "57336",
    v57336 = "57337",
    v57337 = "57338",
    v57338 = "57339",
    v57339 = "57340",
    v57340 = "57342",
    v57341 = "56356",
    v57342 = "56354",
    v57420 = "57341",
    v57625 = "57628",
    v57626 = "57625",
    v57627 = "57626",
    v57628 = "57629",
    v57629 = "57630",
    v57630 = "57631",
    v57631 = "57632",
    v57632 = "58265",
    v57633 = "57634",
    v57634 = "57635",
    v57635 = "11976",
    v57636 = "57627",
    v58265 = "57633"
  },
  ["the Holy Impire of Sehal"] = {
    v24475 = "24476",
    v24476 = "24477",
    v24477 = "24478",
    v24478 = "24479",
    v24479 = "24480",
    v24480 = "24481",
    v24481 = "24485",
    v24482 = "24483",
    v24483 = "24484",
    v24484 = "24487",
    v24485 = "24486",
    v24486 = "24482",
    v24487 = "24488",
    v24488 = "24489",
    v24489 = "24490",
    v24490 = "24491",
    v24491 = "24502",
    v24492 = "24493",
    v24493 = "24494",
    v24494 = "24495",
    v24495 = "24505",
    v24496 = "24492",
    v24497 = "24496",
    v24498 = "24499",
    v24499 = "24497",
    v24500 = "24501",
    v24501 = "24498",
    v24502 = "24504",
    v24503 = "24500",
    v24504 = "24503",
    v24505 = "24513",
    v24506 = "24507",
    v24507 = "24512",
    v24508 = "24509",
    v24509 = "24510",
    v24510 = "pthcity",
    v24511 = "24508",
    v24512 = "24511",
    v24513 = "24514",
    v24514 = "24515",
    v24515 = "24516",
    v24516 = "24517",
    v24517 = "24522",
    v24518 = "24519",
    v24519 = "24506",
    v24520 = "24518",
    v24521 = "24520",
    v24522 = "24521"
  },
  ["the Ia'shal Barrow"] = {
    v4410 = "8671",
    v48869 = "48870",
    v48870 = "48871",
    v48871 = "8685",
    v49031 = "49032",
    v49032 = "49033",
    v49033 = "49034",
    v49034 = "49035",
    v49035 = "49037",
    v49036 = "49038",
    v49037 = "49036",
    v49038 = "48869",
    v5513 = "8684",
    v5514 = "6826",
    v5517 = "8670",
    v5518 = "5517",
    v5519 = "5521",
    v5520 = "5513",
    v5521 = "6818",
    v6818 = "8760",
    v6826 = "8761",
    v6841 = "6843",
    v6843 = "7670",
    v6867 = "5519",
    v7670 = "4410",
    v8670 = "6841",
    v8671 = "8673",
    v8672 = "6867",
    v8673 = "8674",
    v8674 = "8672",
    v8676 = "49031",
    v8677 = "8679",
    v8678 = "8676",
    v8679 = "8682",
    v8680 = "8677",
    v8681 = "8678",
    v8682 = "8681",
    v8683 = "8680",
    v8684 = "8683",
    v8685 = "5514",
    v8760 = "8765",
    v8761 = "pthcity",
    v8765 = "5520"
  },
  ["the Iernian Fracture"] = {
    v45631 = "45641",
    v45632 = "45631",
    v45633 = "45632",
    v45634 = "45636",
    v45636 = "45633",
    v45637 = "45634",
    v45638 = "45637",
    v45639 = "45638",
    v45640 = "45639",
    v45641 = "45678",
    v45642 = "45643",
    v45643 = "45644",
    v45644 = "45645",
    v45645 = "45646",
    v45646 = "45647",
    v45647 = "45648",
    v45648 = "45649",
    v45649 = "45696",
    v45650 = "45652",
    v45651 = "45650",
    v45652 = "45653",
    v45653 = "45654",
    v45654 = "45655",
    v45655 = "45656",
    v45656 = "45657",
    v45657 = "45658",
    v45658 = "45659",
    v45659 = "45660",
    v45660 = "45662",
    v45662 = "45663",
    v45663 = "45664",
    v45664 = "45687",
    v45665 = "45666",
    v45666 = "45667",
    v45667 = "pthcity",
    v45668 = "45669",
    v45669 = "45672",
    v45672 = "45673",
    v45673 = "45674",
    v45674 = "45675",
    v45675 = "45676",
    v45676 = "45677",
    v45677 = "45640",
    v45678 = "45679",
    v45679 = "45680",
    v45680 = "45681",
    v45681 = "45682",
    v45682 = "45683",
    v45683 = "45684",
    v45684 = "45685",
    v45685 = "45686",
    v45686 = "45642",
    v45687 = "45689",
    v45688 = "45665",
    v45689 = "45690",
    v45690 = "45692",
    v45691 = "45688",
    v45692 = "45693",
    v45693 = "45691",
    v45695 = "45699",
    v45696 = "45698",
    v45697 = "45651",
    v45698 = "45695",
    v45699 = "45700",
    v45700 = "45702",
    v45701 = "45703",
    v45702 = "45701",
    v45703 = "45704",
    v45704 = "45705",
    v45705 = "45697"
  },
  ["the Ilhavon Forest"] = {
    v12556 = "21237",
    v12557 = "12556",
    v12558 = "12557",
    v12559 = "12558",
    v12560 = "12559",
    v21237 = "21238",
    v21238 = "21241",
    v21239 = "21244",
    v21240 = "12560",
    v21241 = "21242",
    v21242 = "21239",
    v21243 = "21240",
    v21244 = "21245",
    v21245 = "21247",
    v21246 = "21243",
    v21247 = "21248",
    v21248 = "55409",
    v21249 = "21246",
    v21250 = "21249",
    v21254 = "21250",
    v21255 = "21254",
    v21256 = "21255",
    v21257 = "21256",
    v21258 = "21257",
    v21259 = "21258",
    v21260 = "21263",
    v21261 = "21262",
    v21262 = "21260",
    v21263 = "21259",
    v21264 = "21265",
    v21265 = "21266",
    v21266 = "21261",
    v21267 = "21268",
    v21268 = "21264",
    v21269 = "21267",
    v21270 = "21271",
    v21271 = "21272",
    v21272 = "26279",
    v21273 = "21274",
    v21274 = "21269",
    v21275 = "21270",
    v21276 = "21275",
    v21277 = "21276",
    v21278 = "21277",
    v21279 = "21280",
    v21280 = "21281",
    v21281 = "21278",
    v21282 = "21279",
    v21283 = "21282",
    v21284 = "21283",
    v21304 = "21284",
    v21305 = "21306",
    v21306 = "21307",
    v21307 = "21320",
    v21308 = "21309",
    v21309 = "21310",
    v21310 = "21313",
    v21311 = "21312",
    v21312 = "21304",
    v21313 = "21314",
    v21314 = "21311",
    v21315 = "21305",
    v21316 = "21315",
    v21317 = "21316",
    v21318 = "21317",
    v21319 = "21318",
    v21320 = "21325",
    v21321 = "21322",
    v21322 = "21323",
    v21323 = "21324",
    v21324 = "21308",
    v21325 = "21321",
    v21348 = "31006",
    v21349 = "21348",
    v21350 = "21349",
    v21351 = "21350",
    v21352 = "21351",
    v21353 = "21352",
    v21354 = "21353",
    v21355 = "21354",
    v21356 = "21355",
    v26279 = "26280",
    v26280 = "26281",
    v26281 = "26557",
    v26282 = "26558",
    v26283 = "21273",
    v26284 = "26286",
    v26286 = "26287",
    v26287 = "26288",
    v26288 = "26283",
    v26342 = "26284",
    v26557 = "26282",
    v26558 = "26559",
    v26559 = "26560",
    v26560 = "26342",
    v26688 = "21356",
    v26689 = "26688",
    v26690 = "26689",
    v31006 = "31007",
    v31007 = "21319",
    v50887 = "50888",
    v50888 = "pthcity",
    v55400 = "55401",
    v55401 = "55402",
    v55402 = "55407",
    v55403 = "55400",
    v55404 = "55410",
    v55405 = "55404",
    v55406 = "55405",
    v55407 = "55408",
    v55408 = "55413",
    v55409 = "55403",
    v55410 = "55411",
    v55411 = "55418",
    v55413 = "55414",
    v55414 = "55421",
    v55415 = "55422",
    v55416 = "55415",
    v55417 = "55416",
    v55418 = "55419",
    v55419 = "55417",
    v55421 = "55424",
    v55422 = "55423",
    v55423 = "50887",
    v55424 = "55406"
  },
  ["the Isle of Despair"] = {
    v13201 = "13202",
    v13202 = "13203",
    v13203 = "13204",
    v13204 = "13205",
    v13205 = "13206",
    v13206 = "13207",
    v13207 = "13208",
    v13208 = "13209",
    v13209 = "13234",
    v13210 = "13212",
    v13212 = "13214",
    v13213 = "14865",
    v13214 = "14863",
    v13216 = "15092",
    v13234 = "13210",
    v13491 = "13492",
    v13492 = "13500",
    v13495 = "15068",
    v13496 = "13495",
    v13497 = "13216",
    v13500 = "13506",
    v13501 = "14864",
    v13506 = "13501",
    v14863 = "13491",
    v14864 = "13213",
    v14865 = "13496",
    v15068 = "13497",
    v15092 = "15093",
    v15093 = "15094",
    v15094 = "15100",
    v15100 = "15101",
    v15101 = "15104",
    v15102 = "15103",
    v15103 = "15107",
    v15104 = "15105",
    v15105 = "15106",
    v15106 = "15102",
    v15107 = "15108",
    v15108 = "15113",
    v15109 = "15112",
    v15110 = "15111",
    v15111 = "15174",
    v15112 = "15110",
    v15113 = "15109",
    v15114 = "15115",
    v15115 = "15116",
    v15116 = "pthcity",
    v15174 = "15114"
  },
  ["the Isle of Ollin"] = {
    v71119 = "71924",
    v71523 = "71999",
    v71697 = "71523",
    v71715 = "71697",
    v71907 = "71909",
    v71908 = "71907",
    v71909 = "71971",
    v71910 = "71912",
    v71912 = "71913",
    v71913 = "71915",
    v71914 = "71996",
    v71915 = "71916",
    v71916 = "71914",
    v71919 = "71925",
    v71920 = "71921",
    v71921 = "71922",
    v71922 = "71923",
    v71923 = "71119",
    v71924 = "71963",
    v71925 = "71937",
    v71935 = "71998",
    v71936 = "71935",
    v71937 = "71962",
    v71939 = "71940",
    v71940 = "71956",
    v71956 = "71957",
    v71957 = "71958",
    v71958 = "71961",
    v71959 = "71960",
    v71960 = "71936",
    v71961 = "71959",
    v71962 = "71939",
    v71963 = "71964",
    v71964 = "71965",
    v71965 = "71966",
    v71966 = "71919",
    v71968 = "71972",
    v71969 = "71968",
    v71970 = "71969",
    v71971 = "71970",
    v71972 = "71973",
    v71973 = "71974",
    v71974 = "71975",
    v71975 = "71910",
    v71977 = "71980",
    v71979 = "71977",
    v71980 = "72555",
    v71981 = "71982",
    v71982 = "71987",
    v71983 = "71984",
    v71984 = "71985",
    v71985 = "71986",
    v71986 = "71979",
    v71987 = "71983",
    v71988 = "71981",
    v71989 = "71988",
    v71990 = "71989",
    v71991 = "71990",
    v71992 = "72005",
    v71993 = "71992",
    v71994 = "71993",
    v71995 = "71994",
    v71996 = "71920",
    v71997 = "71991",
    v71998 = "71995",
    v71999 = "72001",
    v72000 = "71997",
    v72001 = "72000",
    v72002 = "72004",
    v72003 = "72002",
    v72004 = "72006",
    v72005 = "72003",
    v72006 = "72007",
    v72007 = "71715",
    v72008 = "72009",
    v72009 = "71908",
    v72555 = "pthcity",
  },
  
  ["the Isle of Polyargos"] = {
    v18537 = "5893",
    v5477 = "5774",
    v5478 = "5477",
    v5479 = "5478",
    v5654 = "5479",
    v5655 = "5654",
    v5656 = "5657",
    v5657 = "5655",
    v5658 = "5656",
    v5752 = "5775",
    v5753 = "5752",
    v5756 = "5753",
    v5757 = "5756",
    v5758 = "5757",
    v5759 = "5758",
    v5760 = "5762",
    v5761 = "5760",
    v5762 = "5765",
    v5763 = "5759",
    v5764 = "5763",
    v5765 = "5764",
    v5766 = "5761",
    v5767 = "5766",
    v5768 = "5767",
    v5769 = "5768",
    v5770 = "5769",
    v5771 = "5770",
    v5772 = "5771",
    v5773 = "5772",
    v5774 = "5773",
    v5775 = "5776",
    v5776 = "5777",
    v5777 = "5778",
    v5778 = "5882",
    v5882 = "5883",
    v5883 = "5884",
    v5884 = "5885",
    v5885 = "5886",
    v5886 = "5887",
    v5887 = "5888",
    v5888 = "5889",
    v5889 = "5890",
    v5890 = "5891",
    v5891 = "5892",
    v5892 = "18537",
    v5893 = "5894",
    v5894 = "5895",
    v5895 = "5898",
    v5896 = "5899",
    v5897 = "5896",
    v5898 = "5897",
    v5899 = "5900",
    v5900 = "5901",
    v5901 = "5902",
    v5902 = "5903",
    v5903 = "5904",
    v5904 = "5907",
    v5907 = "5908",
    v5908 = "5909",
    v5909 = "5910",
    v5910 = "5911",
    v5911 = "5912",
    v5912 = "5913",
    v5913 = "5914",
    v5914 = "5915",
    v5915 = "5916",
    v5916 = "5917",
    v5917 = "5918",
    v5918 = "pthcity"
  },
  ["the Itzatl Morass"] = {
    v15714 = "15718",
    v15715 = "16148",
    v15716 = "15714",
    v15717 = "15724",
    v15718 = "15719",
    v15719 = "15720",
    v15720 = "15717",
    v15721 = "15715",
    v15722 = "16147",
    v15723 = "15722",
    v15724 = "15723",
    v15725 = "15730",
    v15728 = "15725",
    v15729 = "15728",
    v15730 = "15731",
    v15731 = "15733",
    v15732 = "15734",
    v15733 = "15732",
    v15734 = "16146",
    v15735 = "pthcity",
    v16146 = "15735",
    v16147 = "15729",
    v16148 = "15716",
    v60716 = "15721",
    v60717 = "60716",
    v60718 = "60717",
    v60719 = "60718",
    v60720 = "60719",
    v60721 = "60720",
    v60722 = "60721",
    v60723 = "60722",
    v60725 = "60723",
    v60726 = "60725"
  },
  ["the Kalydian Forest"] = {
    v19810 = "pthcity",
    v19811 = "19810",
    v19812 = "19813",
    v19813 = "19811",
    v19855 = "19872",
    v19869 = "19812",
    v19870 = "19869",
    v19871 = "19870",
    v19872 = "19876",
    v19873 = "19874",
    v19874 = "19875",
    v19875 = "19871",
    v19876 = "19878",
    v19877 = "19855",
    v19878 = "19879",
    v19879 = "19898",
    v19880 = "19884",
    v19881 = "19900",
    v19882 = "19877",
    v19883 = "19882",
    v19884 = "19883",
    v19885 = "19880",
    v19886 = "19892",
    v19887 = "19886",
    v19888 = "19889",
    v19889 = "19885",
    v19890 = "19891",
    v19891 = "19888",
    v19892 = "19890",
    v19893 = "19873",
    v19894 = "19904",
    v19895 = "19909",
    v19896 = "19893",
    v19897 = "19895",
    v19898 = "19899",
    v19899 = "19881",
    v19900 = "19902",
    v19901 = "19897",
    v19902 = "19903",
    v19903 = "19901",
    v19904 = "19896",
    v19909 = "19910",
    v19910 = "19894"
  },
  ["the Khauskin Mines"] = {
    v25447 = "25448",
    v25448 = "25449",
    v25449 = "25453",
    v25450 = "25452",
    v25451 = "pthcity",
    v25452 = "25451",
    v25453 = "25454",
    v25454 = "25455",
    v25455 = "25456",
    v25456 = "25457",
    v25457 = "25458",
    v25458 = "25459",
    v25459 = "25460",
    v25460 = "25461",
    v25461 = "25462",
    v25462 = "25463",
    v25463 = "25465",
    v25464 = "25450",
    v25465 = "25466",
    v25466 = "25469",
    v25467 = "25474",
    v25468 = "25464",
    v25469 = "25472",
    v25470 = "25467",
    v25471 = "25468",
    v25472 = "25475",
    v25473 = "25470",
    v25474 = "25471",
    v25475 = "25476",
    v25476 = "25477",
    v25477 = "25478",
    v25478 = "25473"
  },
  ["the Lich Gardens"] = {
    v22866 = "22867",
    v22867 = "22868",
    v22868 = "22869",
    v22869 = "22870",
    v22870 = "22871",
    v22871 = "22881",
    v22872 = "22873",
    v22873 = "22874",
    v22874 = "22875",
    v22875 = "22882",
    v22876 = "22883",
    v22877 = "22876",
    v22878 = "22877",
    v22879 = "22878",
    v22880 = "22879",
    v22881 = "22872",
    v22882 = "22880",
    v22883 = "22884",
    v22884 = "22885",
    v22885 = "22886",
    v22886 = "22887",
    v22887 = "22888",
    v22888 = "22889",
    v22889 = "22911",
    v22890 = "22891",
    v22891 = "22892",
    v22892 = "22893",
    v22893 = "22894",
    v22894 = "22895",
    v22895 = "22896",
    v22896 = "22897",
    v22897 = "22898",
    v22898 = "22899",
    v22899 = "22900",
    v22900 = "22901",
    v22901 = "22902",
    v22902 = "22903",
    v22903 = "22904",
    v22904 = "22905",
    v22905 = "22906",
    v22906 = "22907",
    v22907 = "22908",
    v22908 = "22909",
    v22909 = "22910",
    v22910 = "pthcity",
    v22911 = "22912",
    v22912 = "22913",
    v22913 = "22914",
    v22914 = "22915",
    v22915 = "22916",
    v22916 = "22917",
    v22917 = "22918",
    v22918 = "22919",
    v22919 = "22925",
    v22920 = "22890",
    v22921 = "22920",
    v22922 = "22921",
    v22923 = "22922",
    v22924 = "22923",
    v22925 = "22924"
  },
  ["the Maghuir Fissure"] = {
    v21001 = "21168",
    v21168 = "21169",
    v21169 = "21170",
    v21170 = "21173",
    v21171 = "21176",
    v21172 = "21171",
    v21173 = "21172",
    v21175 = "21180",
    v21176 = "21177",
    v21177 = "21178",
    v21178 = "21179",
    v21179 = "21175",
    v21180 = "21181",
    v21181 = "21182",
    v21182 = "21183",
    v21183 = "21184",
    v21184 = "21185",
    v21185 = "21186",
    v21186 = "21187",
    v21187 = "21190",
    v21190 = "21192",
    v21191 = "21193",
    v21192 = "21191",
    v21193 = "21194",
    v21194 = "21195",
    v21195 = "21196",
    v21196 = "21197",
    v21197 = "21198",
    v21198 = "21199",
    v21199 = "21200",
    v21200 = "21201",
    v21201 = "21202",
    v21202 = "21203",
    v21203 = "21204",
    v21204 = "21205",
    v21205 = "21206",
    v21206 = "21210",
    v21207 = "21212",
    v21208 = "21207",
    v21209 = "21208",
    v21210 = "21211",
    v21211 = "21209",
    v21212 = "21213",
    v21213 = "21214",
    v21214 = "21215",
    v21215 = "21216",
    v21216 = "21217",
    v21217 = "21218",
    v21218 = "21219",
    v21219 = "21220",
    v21220 = "21221",
    v21221 = "21222",
    v21222 = "pthcity"
  },
  ["the Mamashi Grasslands"] = {
    v1019 = "19110",
    v14463 = "8855",
    v14464 = "8862",
    v19107 = "19108",
    v19108 = "19111",
    v19110 = "19107",
    v19111 = "19112",
    v19112 = "19113",
    v19113 = "19117",
    v19114 = "19120",
    v19115 = "19114",
    v19116 = "19115",
    v19117 = "19116",
    v19118 = "68323",
    v19119 = "19123",
    v19120 = "19119",
    v19121 = "19127",
    v19122 = "19121",
    v19123 = "19122",
    v19124 = "19125",
    v19125 = "19126",
    v19126 = "19118",
    v19127 = "19128",
    v19128 = "19129",
    v19129 = "19132",
    v19130 = "19124",
    v19131 = "19130",
    v19132 = "19131",
    v68323 = "68326",
    v68326 = "68327",
    v68327 = "68328",
    v68328 = "68330",
    v68329 = "8813",
    v68330 = "68329",
    v8809 = "8810",
    v8810 = "8811",
    v8811 = "8812",
    v8812 = "1019",
    v8813 = "8814",
    v8814 = "8815",
    v8815 = "8816",
    v8816 = "8817",
    v8817 = "8818",
    v8818 = "8840",
    v8826 = "8828",
    v8827 = "8826",
    v8828 = "8829",
    v8829 = "8838",
    v8830 = "8837",
    v8831 = "8830",
    v8832 = "8831",
    v8833 = "8832",
    v8834 = "8833",
    v8835 = "8834",
    v8836 = "8845",
    v8837 = "8836",
    v8838 = "8839",
    v8839 = "8843",
    v8840 = "8841",
    v8841 = "8827",
    v8843 = "8844",
    v8844 = "8835",
    v8845 = "8846",
    v8846 = "14463",
    v8848 = "pthcity",
    v8849 = "8848",
    v8850 = "8849",
    v8851 = "8850",
    v8852 = "8851",
    v8853 = "8852",
    v8854 = "8860",
    v8855 = "8856",
    v8856 = "8857",
    v8857 = "8858",
    v8858 = "8859",
    v8859 = "8854",
    v8860 = "8861",
    v8861 = "14464",
    v8862 = "8863",
    v8863 = "8853"
  },
  ["the Mamashi Tunnels"] = {
    v20855 = "20856",
    v20856 = "20857",
    v20857 = "20858",
    v20858 = "20859",
    v20859 = "20861",
    v20860 = "20867",
    v20861 = "20862",
    v20862 = "20863",
    v20863 = "20866",
    v20864 = "20865",
    v20865 = "20860",
    v20866 = "20864",
    v20867 = "20868",
    v20868 = "20869",
    v20869 = "20871",
    v20870 = "20877",
    v20871 = "20870",
    v20872 = "20873",
    v20873 = "20901",
    v20874 = "20872",
    v20875 = "20874",
    v20876 = "20875",
    v20877 = "20878",
    v20878 = "20879",
    v20879 = "20876",
    v20880 = "20881",
    v20881 = "20882",
    v20882 = "20883",
    v20883 = "20884",
    v20884 = "20885",
    v20885 = "20887",
    v20886 = "20918",
    v20887 = "20888",
    v20888 = "20889",
    v20889 = "pthcity",
    v20890 = "20880",
    v20891 = "20890",
    v20892 = "20910",
    v20893 = "20892",
    v20894 = "20893",
    v20895 = "20894",
    v20896 = "20895",
    v20897 = "20896",
    v20898 = "20897",
    v20899 = "20898",
    v20900 = "20899",
    v20901 = "20902",
    v20902 = "20903",
    v20903 = "20904",
    v20904 = "20905",
    v20905 = "20906",
    v20906 = "20912",
    v20907 = "20908",
    v20908 = "20909",
    v20909 = "20900",
    v20910 = "20911",
    v20911 = "20891",
    v20912 = "20913",
    v20913 = "20916",
    v20916 = "20917",
    v20917 = "20886",
    v20918 = "20919",
    v20919 = "20920",
    v20920 = "20921",
    v20921 = "20907"
  },
  ["the Village of Craneskull"] = {
    v33243 = "pthcity",
    v3491 = "3492",
    v3492 = "3494",
    v3493 = "3496",
    v3494 = "3493",
    v3496 = "3502",
    v3497 = "3498",
    v3498 = "3499",
    v3499 = "3515",
    v3501 = "3497",
    v3502 = "3503",
    v3503 = "3504",
    v3504 = "3505",
    v3505 = "3514",
    v3506 = "3501",
    v3507 = "3508",
    v3508 = "3506",
    v3513 = "3507",
    v3514 = "3513",
    v3515 = "3518",
    v3516 = "3680",
    v3517 = "3698",
    v3518 = "3519",
    v3519 = "3520",
    v3520 = "3516",
    v3521 = "3681",
    v3553 = "3554",
    v3554 = "3555",
    v3555 = "3556",
    v3556 = "3662",
    v3662 = "3663",
    v3663 = "3664",
    v3664 = "3665",
    v3665 = "3666",
    v3666 = "3667",
    v3667 = "3668",
    v3668 = "3673",
    v3669 = "3670",
    v3670 = "3674",
    v3671 = "3669",
    v3672 = "33243",
    v3673 = "3675",
    v3674 = "3676",
    v3675 = "3671",
    v3676 = "3678",
    v3677 = "3491",
    v3678 = "3677",
    v3679 = "3521",
    v3680 = "3679",
    v3681 = "3682",
    v3682 = "3517",
    v3698 = "3699",
    v3699 = "3700",
    v3700 = "3701",
    v3701 = "3702",
    v3702 = "3703",
    v3703 = "3704",
    v3704 = "3705",
    v3705 = "3706",
    v3706 = "3672",
    v4733 = "4735",
  },
  ["the Mannaseh Swamp"] = {
  v1745 = "74904",
  v73209 = "73211",
  v73211 = "73213",
  v73213 = "74560",
  v73214 = "73729",
  v73218 = "73214",
  v73222 = "73218",
  v73226 = "73222",
  v73232 = "73764",
  v73728 = "73731",
  v73729 = "74555",
  v73730 = "75147",
  v73731 = "73763",
  v73734 = "73738",
  v73735 = "73736",
  v73736 = "73761",
  v73738 = "74055",
  v73739 = "73740",
  v73740 = "73734",
  v73741 = "73747",
  v73742 = "73744",
  v73744 = "73745",
  v73745 = "73754",
  v73747 = "73790",
  v73748 = "74437",
  v73754 = "73741",
  v73758 = "73972",
  v73761 = "73758",
  v73762 = "73226",
  v73763 = "73762",
  v73764 = "73772",
  v73770 = "73785",
  v73771 = "73783",
  v73772 = "73739",
  v73783 = "73209",
  v73784 = "73771",
  v73785 = "73822",
  v73786 = "75387",
  v73787 = "75342",
  v73789 = "73742",
  v73790 = "75346",
  v73817 = "73829",
  v73822 = "73817",
  v73829 = "73784",
  v73972 = "74614",
  v74055 = "74056",
  v74056 = "74058",
  v74057 = "74097",
  v74058 = "74057",
  v74097 = "pthcity",
  v74166 = "73735",
  v74172 = "73728",
  v74187 = "73232",
  v74437 = "74172",
  v74469 = "74187",
  v74547 = "74166",
  v74555 = "74469",
  v74560 = "73730",
  v74614 = "73770",
  v74827 = "75344",
  v74904 = "74988",
  v74988 = "74827",
  v75147 = "75148",
  v75148 = "73748",
  v75342 = "75345",
  v75343 = "73786",
  v75344 = "75343",
  v75345 = "73789",
  v75346 = "74547",
  v75387 = "75441",
  v75441 = "73787",
  },
  ["the Maestral Shoals"] = {
  v48770 = "48771",
  v48771 = "48772",
  v48772 = "48775",
  v48773 = "48776",
  v48774 = "48773",
  v48775 = "48780",
  v48776 = "48779",
  v48777 = "48774",
  v48778 = "48783",
  v48779 = "48778",
  v48780 = "48794",
  v48781 = "48777",
  v48782 = "48781",
  v48783 = "48787",
  v48784 = "48785",
  v48785 = "48782",
  v48786 = "48790",
  v48787 = "49003",
  v48789 = "50862",
  v48790 = "49434",
  v48791 = "48796",
  v48792 = "48791",
  v48793 = "48792",
  v48794 = "48795",
  v48795 = "48793",
  v48796 = "48797",
  v48797 = "50861",
  v49003 = "48786",
  v49434 = "48789",
  v49436 = "48784",
  v49437 = "49479",
  v49479 = "49436",
  v49480 = "49437",
  v49481 = "49480",
  v49482 = "49481",
  v49483 = "49482",
  v49484 = "49921",
  v49485 = "49556",
  v49487 = "49488",
  v49488 = "49557",
  v49556 = "49484",
  v49557 = "49558",
  v49558 = "49656",
  v49656 = "49901",
  v49657 = "49487",
  v49737 = "49657",
  v49901 = "49902",
  v49902 = "49905",
  v49903 = "50848",
  v49905 = "49908",
  v49906 = "49737",
  v49907 = "49906",
  v49908 = "49987",
  v49919 = "49988",
  v49920 = "49986",
  v49921 = "49483",
  v49922 = "49903",
  v49923 = "50847",
  v49985 = "49922",
  v49986 = "49985",
  v49987 = "49923",
  v49988 = "49907",
  v50449 = "50450",
  v50450 = "50552",
  v50552 = "50553",
  v50553 = "50554",
  v50554 = "50557",
  v50555 = "50556",
  v50556 = "50558",
  v50557 = "50555",
  v50558 = "pthcity",
  v50559 = "50449",
  v50840 = "49920",
  v50841 = "50840",
  v50842 = "50841",
  v50843 = "50842",
  v50844 = "49919",
  v50846 = "50843",
  v50847 = "50846",
  v50848 = "50849",
  v50849 = "50850",
  v50850 = "50853",
  v50852 = "49485",
  v50853 = "50852",
  v50854 = "50844",
  v50855 = "50858",
  v50856 = "50854",
  v50857 = "50855",
  v50858 = "50856",
  v50859 = "50857",
  v50861 = "50859",
  v50862 = "50864",
  v50863 = "50865",
  v50864 = "50863",
  v50865 = "50866",
  v50866 = "50868",
  v50868 = "50559"
  },
  ["Maestral's Barrier Reef"] = {
  v29384 = "29385",
  v29385 = "29387",
  v29386 = "29384",
  v29387 = "29390",
  v29388 = "29386",
  v29389 = "29388",
  v29390 = "29393",
  v29391 = "29389",
  v29392 = "29391",
  v29393 = "pthcity",
  v29394 = "29397",
  v29396 = "29394",
  v29397 = "29392",
  v29398 = "29396",
  v29399 = "29402",
  v29400 = "29399",
  v29401 = "29400",
  v29402 = "29398",
  v29403 = "29401",
  v29405 = "29403",
  v29406 = "29408",
  v29407 = "29406",
  v29408 = "29405",
  v29409 = "29410",
  v29410 = "29412",
  v29411 = "29409",
  v29412 = "29418",
  v29413 = "29411",
  v29414 = "29413",
  v29415 = "29414",
  v29416 = "29415",
  v29417 = "29416",
  v29418 = "29407",
  v29419 = "29417",
  v29420 = "29419",
  v29428 = "29420",
  v29429 = "29428",
  v29430 = "29429",
  v29431 = "29430",
  v29432 = "29431",
  v35528 = "29432",
  v35529 = "35528",
  v35530 = "35529",
  v35531 = "35530",
  v35532 = "35531",
  v35533 = "35532",
  v35534 = "35536",
  v35535 = "35534",
  v35536 = "35537",
  v35537 = "35533",
  v35539 = "35535",
  v35540 = "35539",
  v35541 = "35540"
  },
  ["Mejev Nider Nesve wo Ti, Matati wo Eja sota Aran wo Aransa"] = {
    v73321 = "74269",
    v73345 = "73353",
    v73353 = "73357",
    v73357 = "73358",
    v73358 = "73369",
    v73369 = "74414",
    v73372 = "73321",
    v73374 = "73372",
    v73417 = "73374",
    v73482 = "73417",
    v73518 = "74366",
    v73838 = "73938",
    v73839 = "73935",
    v73935 = "73838",
    v73936 = "74520",
    v73938 = "73936",
    v74164 = "74165",
    v74165 = "74167",
    v74167 = "74168",
    v74168 = "74177",
    v74177 = "74272",
    v74188 = "74859",
    v74189 = "74188",
    v74192 = "74189",
    v74193 = "74192",
    v74269 = "74193",
    v74272 = "73518",
    v74343 = "74345",
    v74345 = "74356",
    v74346 = "73482",
    v74356 = "74527",
    v74361 = "74393",
    v74363 = "74367",
    v74366 = "74363",
    v74367 = "74674",
    v74368 = "74462",
    v74369 = "74389",
    v74389 = "74391",
    v74391 = "74392",
    v74392 = "73345",
    v74393 = "74464",
    v74394 = "74466",
    v74397 = "74394",
    v74414 = "74164",
    v74462 = "74397",
    v74463 = "74368",
    v74464 = "74463",
    v74466 = "74467",
    v74467 = "74472",
    v74470 = "74369",
    v74471 = "74564",
    v74472 = "74678",
    v74477 = "74478",
    v74478 = "74479",
    v74479 = "74480",
    v74480 = "74471",
    v74519 = "74522",
    v74520 = "74525",
    v74521 = "74343",
    v74522 = "74521",
    v74525 = "74519",
    v74527 = "74346",
    v74564 = "74618",
    v74618 = "74669",
    v74669 = "73839",
    v74674 = "74361",
    v74678 = "74679",
    v74679 = "74680",
    v74680 = "74477",
    v74856 = "75023",
    v74857 = "74856",
    v74858 = "74857",
    v74859 = "74858",
    v75023 = "pthcity"
  },
  ["the Maul"] = {
    v50236 = "50237",
    v50237 = "50238",
    v50238 = "50239",
    v50239 = "50240",
    v50240 = "50246",
    v50241 = "50247",
    v50242 = "50241",
    v50243 = "50242",
    v50246 = "50243",
    v50247 = "50248",
    v50248 = "50249",
    v50249 = "50250",
    v50250 = "50251",
    v50251 = "50252",
    v50252 = "50253",
    v50253 = "50254",
    v50254 = "50255",
    v50255 = "50256",
    v50256 = "50257",
    v50257 = "57980",
    v50260 = "50261",
    v50261 = "50262",
    v50262 = "50263",
    v50263 = "50264",
    v50264 = "50265",
    v50265 = "50268",
    v50266 = "50269",
    v50267 = "50266",
    v50268 = "57979",
    v50269 = "50270",
    v50270 = "50271",
    v50271 = "50272",
    v50272 = "50273",
    v50273 = "50274",
    v50274 = "50277",
    v50275 = "pthcity",
    v50276 = "50275",
    v50277 = "50276",
    v57979 = "50267",
    v57980 = "50260"
  },
  ["the Morgun Forest"] = {
    v1030 = "4776",
    v1033 = "4786",
    v4739 = "4741",
    v4740 = "4739",
    v4741 = "4743",
    v4742 = "4744",
    v4743 = "4742",
    v4744 = "4745",
    v4745 = "4746",
    v4746 = "4747",
    v4747 = "4748",
    v4748 = "4749",
    v4749 = "4750",
    v4750 = "4751",
    v4751 = "4752",
    v4752 = "4753",
    v4753 = "4754",
    v4754 = "4755",
    v4755 = "4756",
    v4756 = "4759",
    v4757 = "4758",
    v4758 = "4761",
    v4759 = "4760",
    v4760 = "4805",
    v4761 = "4762",
    v4762 = "4763",
    v4763 = "4764",
    v4764 = "4765",
    v4765 = "4766",
    v4766 = "4768",
    v4767 = "4770",
    v4768 = "4769",
    v4769 = "4767",
    v4770 = "4771",
    v4771 = "4772",
    v4772 = "4773",
    v4773 = "4774",
    v4774 = "4775",
    v4775 = "4789",
    v4776 = "4777",
    v4777 = "4778",
    v4778 = "4804",
    v4779 = "4780",
    v4780 = "4781",
    v4781 = "4782",
    v4782 = "4784",
    v4783 = "4803",
    v4784 = "4785",
    v4785 = "1033",
    v4786 = "4787",
    v4787 = "pthcity",
    v4789 = "4783",
    v4790 = "4791",
    v4791 = "4792",
    v4792 = "4793",
    v4793 = "4795",
    v4795 = "4796",
    v4796 = "4797",
    v4797 = "4798",
    v4798 = "4799",
    v4799 = "1030",
    v4803 = "4790",
    v4804 = "4779",
    v4805 = "4757"
  },
  ["the Nal'jin Depths"] = {
    v38090 = "38091",
    v38091 = "38092",
    v38092 = "38093",
    v38093 = "38096",
    v38094 = "38095",
    v38095 = "38099",
    v38096 = "38094",
    v38097 = "38109",
    v38099 = "38097",
    v38100 = "38103",
    v38101 = "38102",
    v38102 = "38100",
    v38103 = "38104",
    v38104 = "38107",
    v38105 = "38101",
    v38106 = "38112",
    v38107 = "38111",
    v38108 = "38105",
    v38109 = "38108",
    v38110 = "38106",
    v38111 = "38110",
    v38112 = "38145",
    v38113 = "38116",
    v38114 = "38121",
    v38115 = "38114",
    v38116 = "38115",
    v38118 = "38113",
    v38119 = "38126",
    v38120 = "38119",
    v38121 = "38129",
    v38122 = "38123",
    v38123 = "38124",
    v38124 = "38163",
    v38125 = "38118",
    v38126 = "38125",
    v38127 = "38120",
    v38128 = "38130",
    v38129 = "38128",
    v38130 = "38122",
    v38132 = "38127",
    v38133 = "38134",
    v38134 = "38132",
    v38135 = "38136",
    v38136 = "38137",
    v38137 = "38138",
    v38138 = "38139",
    v38139 = "38146",
    v38140 = "38141",
    v38141 = "38148",
    v38142 = "38135",
    v38143 = "38142",
    v38144 = "38143",
    v38145 = "38149",
    v38146 = "38147",
    v38147 = "38140",
    v38148 = "38133",
    v38149 = "38144",
    v38150 = "38152",
    v38151 = "38154",
    v38152 = "38156",
    v38153 = "38150",
    v38154 = "38158",
    v38155 = "38151",
    v38156 = "38160",
    v38157 = "38153",
    v38158 = "38165",
    v38159 = "38155",
    v38160 = "38167",
    v38161 = "38157",
    v38162 = "38161",
    v38163 = "38162",
    v38164 = "pthcity",
    v38165 = "38172",
    v38166 = "38159",
    v38167 = "38174",
    v38168 = "38169",
    v38169 = "38176",
    v38170 = "38171",
    v38171 = "38178",
    v38172 = "38164",
    v38173 = "38166",
    v38174 = "38181",
    v38175 = "38168",
    v38176 = "38177",
    v38177 = "38170",
    v38178 = "38179",
    v38179 = "38183",
    v38180 = "38173",
    v38181 = "38185",
    v38182 = "38175",
    v38183 = "38187",
    v38184 = "38180",
    v38185 = "38189",
    v38186 = "38182",
    v38187 = "38190",
    v38188 = "38184",
    v38189 = "38186",
    v38190 = "38188"
  },
  ["the Putoran Hills"] = {
    v10041 = "10043",
    v10042 = "10041",
    v10043 = "10044",
    v10044 = "10045",
    v10045 = "10046",
    v10046 = "10047",
    v10047 = "10048",
    v10048 = "1846",
    v10050 = "10156",
    v10156 = "pthcity",
    v1846 = "10050",
    v28511 = "28514",
    v28514 = "10042"
  },
  ["the Ruins of Farsai"] = {
    v17032 = "17052",
    v17052 = "17145",
    v17053 = "17054",
    v17054 = "17055",
    v17055 = "17056",
    v17056 = "17057",
    v17057 = "17058",
    v17058 = "17068",
    v17059 = "17138",
    v17060 = "17059",
    v17061 = "17060",
    v17062 = "17061",
    v17063 = "17062",
    v17064 = "17063",
    v17065 = "17064",
    v17066 = "17065",
    v17067 = "17066",
    v17068 = "17069",
    v17069 = "17147",
    v17070 = "17125",
    v17071 = "17070",
    v17072 = "17071",
    v17073 = "17124",
    v17074 = "17073",
    v17075 = "17076",
    v17076 = "17077",
    v17077 = "17074",
    v17078 = "17079",
    v17079 = "17128",
    v17080 = "17087",
    v17081 = "17080",
    v17082 = "17094",
    v17083 = "17082",
    v17084 = "17083",
    v17085 = "17067",
    v17086 = "17085",
    v17087 = "17086",
    v17088 = "17084",
    v17089 = "17088",
    v17090 = "17089",
    v17091 = "17137",
    v17092 = "17091",
    v17093 = "17149",
    v17094 = "17095",
    v17095 = "17096",
    v17096 = "17131",
    v17097 = "17108",
    v17098 = "17099",
    v17099 = "17100",
    v17100 = "17101",
    v17101 = "17102",
    v17102 = "17103",
    v17103 = "17104",
    v17104 = "17116",
    v17105 = "17151",
    v17107 = "17097",
    v17108 = "17109",
    v17109 = "17110",
    v17110 = "17093",
    v17111 = "17144",
    v17112 = "17111",
    v17113 = "17112",
    v17114 = "17113",
    v17115 = "17114",
    v17116 = "17115",
    v17117 = "17122",
    v17118 = "17123",
    v17119 = "17120",
    v17120 = "17118",
    v17121 = "17119",
    v17122 = "17121",
    v17123 = "17296",
    v17124 = "17072",
    v17125 = "17127",
    v17126 = "17078",
    v17127 = "17126",
    v17128 = "17130",
    v17129 = "17098",
    v17130 = "17129",
    v17131 = "17132",
    v17132 = "17133",
    v17133 = "17136",
    v17134 = "17081",
    v17135 = "17134",
    v17136 = "17135",
    v17137 = "17090",
    v17138 = "17139",
    v17139 = "17140",
    v17140 = "17141",
    v17141 = "17143",
    v17142 = "17201",
    v17143 = "17142",
    v17144 = "17117",
    v17145 = "17053",
    v17146 = "17075",
    v17147 = "17146",
    v17149 = "17092",
    v17150 = "17107",
    v17151 = "17150",
    v17201 = "17203",
    v17203 = "17204",
    v17204 = "17205",
    v17205 = "17206",
    v17206 = "17207",
    v17207 = "17208",
    v17208 = "17209",
    v17209 = "17210",
    v17210 = "17211",
    v17211 = "17212",
    v17212 = "17213",
    v17213 = "17214",
    v17214 = "17215",
    v17215 = "17216",
    v17216 = "17217",
    v17217 = "17220",
    v17218 = "17219",
    v17219 = "17229",
    v17220 = "17221",
    v17221 = "17222",
    v17222 = "17223",
    v17223 = "17224",
    v17224 = "17227",
    v17225 = "17226",
    v17226 = "17218",
    v17227 = "17228",
    v17228 = "17225",
    v17229 = "17230",
    v17230 = "17231",
    v17231 = "pthcity",
    v17296 = "17298",
    v17297 = "17299",
    v17298 = "17297",
    v17299 = "17300",
    v17300 = "17301",
    v17301 = "17303",
    v17303 = "17309",
    v17309 = "17310",
    v17310 = "17314",
    v17311 = "17105",
    v17312 = "17311",
    v17313 = "17312",
    v17314 = "17313"
  },
  ["the Ruins of Masilia"] = {
    v20421 = "20423",
    v20422 = "20424",
    v20423 = "pthcity",
    v20424 = "20425",
    v20425 = "20427",
    v20426 = "20421",
    v20427 = "20426",
    v20428 = "20422",
    v20445 = "20488",
    v20446 = "20448",
    v20447 = "20449",
    v20448 = "20428",
    v20449 = "20445",
    v20450 = "20451",
    v20451 = "20452",
    v20452 = "20474",
    v20453 = "20454",
    v20454 = "20455",
    v20455 = "20456",
    v20456 = "20457",
    v20457 = "20458",
    v20458 = "20485",
    v20460 = "20461",
    v20461 = "20462",
    v20462 = "20463",
    v20463 = "20480",
    v20464 = "20465",
    v20465 = "20466",
    v20466 = "20467",
    v20467 = "20496",
    v20470 = "20473",
    v20473 = "20453",
    v20474 = "20470",
    v20477 = "20460",
    v20478 = "20482",
    v20479 = "20478",
    v20480 = "20479",
    v20481 = "20477",
    v20482 = "20483",
    v20483 = "20484",
    v20484 = "20446",
    v20485 = "20489",
    v20486 = "20481",
    v20487 = "20486",
    v20488 = "20487",
    v20489 = "20493",
    v20490 = "20491",
    v20491 = "20492",
    v20492 = "20447",
    v20493 = "20464",
    v20494 = "20490",
    v20495 = "20494",
    v20496 = "20495"
  },
  ["the Salma Settlement"] = {
    v19602 = "19603",
    v19603 = "19608",
    v19608 = "19609",
    v19609 = "19610",
    v19610 = "19611",
    v19611 = "19612",
    v19612 = "19615",
    v19613 = "19681",
    v19614 = "19661",
    v19615 = "19636",
    v19628 = "19614",
    v19629 = "19630",
    v19630 = "19633",
    v19631 = "19629",
    v19632 = "19664",
    v19633 = "19632",
    v19634 = "19628",
    v19635 = "19634",
    v19636 = "19637",
    v19637 = "19638",
    v19638 = "19639",
    v19639 = "19640",
    v19640 = "19642",
    v19641 = "19646",
    v19642 = "19643",
    v19643 = "19644",
    v19644 = "19645",
    v19645 = "19641",
    v19646 = "19647",
    v19647 = "19648",
    v19648 = "19649",
    v19649 = "19650",
    v19650 = "19652",
    v19651 = "19654",
    v19652 = "19651",
    v19653 = "19655",
    v19654 = "19653",
    v19655 = "19656",
    v19656 = "19659",
    v19657 = "19658",
    v19658 = "19660",
    v19659 = "19657",
    v19660 = "19635",
    v19661 = "19662",
    v19662 = "19663",
    v19663 = "19631",
    v19664 = "19665",
    v19665 = "19666",
    v19666 = "19667",
    v19667 = "19668",
    v19668 = "19669",
    v19669 = "19688",
    v19670 = "19673",
    v19671 = "19670",
    v19672 = "19613",
    v19673 = "19674",
    v19674 = "19675",
    v19675 = "19677",
    v19677 = "19678",
    v19678 = "19680",
    v19679 = "19672",
    v19680 = "19679",
    v19681 = "19682",
    v19682 = "19683",
    v19683 = "19684",
    v19684 = "19685",
    v19685 = "19686",
    v19686 = "19687",
    v19687 = "pthcity",
    v19688 = "19689",
    v19689 = "19690",
    v19690 = "19671"
  },
  ["the Shastaan Warrens"] = {
    v45483 = "45484",
    v45484 = "45485",
    v45485 = "45486",
    v45486 = "45487",
    v45487 = "45488",
    v45488 = "45489",
    v45489 = "45491",
    v45491 = "45497",
    v45493 = "45496",
    v45494 = "45495",
    v45495 = "45500",
    v45496 = "45499",
    v45497 = "45498",
    v45498 = "45493",
    v45499 = "45494",
    v45500 = "45501",
    v45501 = "45502",
    v45502 = "45503",
    v45503 = "45504",
    v45504 = "45505",
    v45505 = "45546",
    v45507 = "45515",
    v45508 = "45509",
    v45509 = "45511",
    v45511 = "45512",
    v45512 = "pthcity",
    v45514 = "45508",
    v45515 = "45516",
    v45516 = "45517",
    v45517 = "45514",
    v45546 = "45548",
    v45548 = "45549",
    v45549 = "45507"
  },
  ["the Shattered Vortex"] = {
    v36079 = "36087",
    v36080 = "36079",
    v36081 = "36080",
    v36082 = "36081",
    v36083 = "36082",
    v36084 = "36083",
    v36085 = "36084",
    v36086 = "36085",
    v36087 = "36091",
    v36088 = "36086",
    v36089 = "36295",
    v36090 = "36088",
    v36091 = "36096",
    v36092 = "36089",
    v36093 = "36092",
    v36094 = "36090",
    v36095 = "36094",
    v36096 = "36093",
    v36097 = "36095",
    v36098 = "36104",
    v36099 = "36098",
    v36100 = "36099",
    v36101 = "36100",
    v36102 = "36101",
    v36103 = "36102",
    v36104 = "36105",
    v36105 = "36106",
    v36106 = "36107",
    v36107 = "36272",
    v36272 = "36273",
    v36273 = "36278",
    v36276 = "36282",
    v36277 = "36276",
    v36278 = "36281",
    v36279 = "36277",
    v36280 = "36279",
    v36281 = "36280",
    v36282 = "36283",
    v36283 = "36284",
    v36284 = "36285",
    v36285 = "36286",
    v36286 = "36287",
    v36287 = "36288",
    v36288 = "36289",
    v36289 = "36290",
    v36290 = "36291",
    v36291 = "36292",
    v36292 = "36294",
    v36293 = "36315",
    v36294 = "36336",
    v36295 = "36335",
    v36296 = "36103",
    v36297 = "36296",
    v36298 = "36300",
    v36299 = "36297",
    v36300 = "36301",
    v36301 = "36308",
    v36302 = "36299",
    v36303 = "36302",
    v36304 = "36305",
    v36305 = "36303",
    v36306 = "36298",
    v36307 = "36304",
    v36308 = "36307",
    v36309 = "36306",
    v36310 = "36309",
    v36311 = "36310",
    v36312 = "36311",
    v36313 = "36312",
    v36314 = "36313",
    v36315 = "36329",
    v36316 = "36328",
    v36317 = "36314",
    v36318 = "36317",
    v36319 = "36318",
    v36320 = "36319",
    v36321 = "36320",
    v36322 = "36321",
    v36323 = "36325",
    v36324 = "36293",
    v36325 = "36324",
    v36326 = "36323",
    v36327 = "36322",
    v36328 = "36333",
    v36329 = "36334",
    v36330 = "36326",
    v36331 = "36327",
    v36332 = "36331",
    v36333 = "36332",
    v36334 = "36316",
    v36335 = "36330",
    v36336 = "36339",
    v36337 = "36338",
    v36338 = "36341",
    v36339 = "36340",
    v36340 = "36337",
    v36341 = "36343",
    v36342 = "36351",
    v36343 = "36342",
    v36344 = "36345",
    v36345 = "36346",
    v36346 = "36347",
    v36347 = "36097",
    v36349 = "36354",
    v36350 = "36344",
    v36351 = "36349",
    v36352 = "36350",
    v36353 = "36368",
    v36354 = "36357",
    v36355 = "36352",
    v36356 = "36446",
    v36357 = "36358",
    v36358 = "36360",
    v36359 = "36419",
    v36360 = "36361",
    v36361 = "36362",
    v36362 = "36363",
    v36363 = "36364",
    v36364 = "36365",
    v36365 = "36455",
    v36366 = "36367",
    v36367 = "36379",
    v36368 = "36369",
    v36369 = "36462",
    v36370 = "36371",
    v36371 = "36464",
    v36372 = "36373",
    v36373 = "36466",
    v36374 = "36375",
    v36375 = "36468",
    v36376 = "36377",
    v36377 = "36378",
    v36378 = "36380",
    v36379 = "36401",
    v36380 = "36470",
    v36381 = "36382",
    v36382 = "36472",
    v36383 = "36384",
    v36384 = "36385",
    v36385 = "36386",
    v36386 = "36474",
    v36387 = "36388",
    v36388 = "36479",
    v36389 = "36390",
    v36390 = "36481",
    v36391 = "36392",
    v36392 = "36483",
    v36393 = "36394",
    v36394 = "36454",
    v36395 = "36396",
    v36396 = "36445",
    v36397 = "36441",
    v36398 = "36437",
    v36399 = "36420",
    v36400 = "36353",
    v36401 = "36432",
    v36402 = "36403",
    v36403 = "36430",
    v36404 = "36405",
    v36405 = "36428",
    v36406 = "36407",
    v36407 = "36408",
    v36408 = "36409",
    v36409 = "36410",
    v36410 = "36411",
    v36411 = "36412",
    v36412 = "36413",
    v36413 = "36414",
    v36414 = "36415",
    v36415 = "36508",
    v36416 = "36399",
    v36417 = "36438",
    v36418 = "36417",
    v36419 = "36418",
    v36420 = "36421",
    v36421 = "36422",
    v36422 = "36423",
    v36423 = "36424",
    v36424 = "36425",
    v36425 = "36426",
    v36426 = "36427",
    v36427 = "36433",
    v36428 = "36406",
    v36429 = "36404",
    v36430 = "36429",
    v36431 = "36402",
    v36432 = "36431",
    v36433 = "36434",
    v36434 = "36435",
    v36435 = "36436",
    v36436 = "36366",
    v36437 = "36416",
    v36438 = "36439",
    v36439 = "36440",
    v36440 = "36356",
    v36441 = "36442",
    v36442 = "36443",
    v36443 = "36444",
    v36444 = "36355",
    v36445 = "36398",
    v36446 = "36450",
    v36447 = "36448",
    v36448 = "36452",
    v36449 = "36395",
    v36450 = "36451",
    v36451 = "36447",
    v36452 = "36453",
    v36453 = "36400",
    v36454 = "36449",
    v36455 = "36456",
    v36456 = "36457",
    v36457 = "36458",
    v36458 = "36459",
    v36459 = "36460",
    v36460 = "36461",
    v36461 = "36359",
    v36462 = "36463",
    v36463 = "36370",
    v36464 = "36465",
    v36465 = "36372",
    v36466 = "36467",
    v36467 = "36374",
    v36468 = "36376",
    v36469 = "36475",
    v36470 = "36469",
    v36471 = "36381",
    v36472 = "36476",
    v36473 = "36383",
    v36474 = "36478",
    v36475 = "36471",
    v36476 = "36477",
    v36477 = "36473",
    v36478 = "36387",
    v36479 = "36480",
    v36480 = "36389",
    v36481 = "36482",
    v36482 = "36391",
    v36483 = "36484",
    v36484 = "36393",
    v36508 = "36510",
    v36509 = "36397",
    v36510 = "36511",
    v36511 = "36513",
    v36512 = "36509",
    v36513 = "36514",
    v36514 = "36522",
    v36515 = "36516",
    v36516 = "36524",
    v36517 = "36529",
    v36518 = "36512",
    v36519 = "36518",
    v36520 = "36519",
    v36521 = "36520",
    v36522 = "36523",
    v36523 = "36515",
    v36524 = "36525",
    v36525 = "36517",
    v36526 = "36521",
    v36527 = "36526",
    v36528 = "36527",
    v36529 = "36533",
    v36530 = "36528",
    v36531 = "36541",
    v36532 = "36531",
    v36533 = "36532",
    v36534 = "36530",
    v36535 = "36534",
    v36536 = "36535",
    v36537 = "36540",
    v36538 = "36536",
    v36539 = "36538",
    v36540 = "36539",
    v36541 = "36537"
  },
  ["the Siroccian Mountains"] = {
    v16436 = "16437",
    v16437 = "3020",
    v18528 = "2998",
    v2977 = "2991",
    v2979 = "2980",
    v2980 = "2981",
    v2981 = "2983",
    v2982 = "35208",
    v2983 = "2982",
    v2984 = "2985",
    v2985 = "2986",
    v2986 = "2987",
    v2987 = "2988",
    v2988 = "2989",
    v2989 = "3005",
    v2990 = "2977",
    v2991 = "2992",
    v2992 = "2993",
    v2993 = "2994",
    v2994 = "2995",
    v2995 = "2996",
    v2996 = "pthcity",
    v2997 = "2990",
    v2998 = "2997",
    v2999 = "3000",
    v3000 = "3001",
    v3001 = "18528",
    v3002 = "3021",
    v3003 = "3010",
    v3004 = "3006",
    v3005 = "3004",
    v3006 = "3007",
    v3007 = "3008",
    v3008 = "3009",
    v3009 = "3003",
    v3010 = "3022",
    v3011 = "3002",
    v3012 = "4533",
    v3013 = "3012",
    v3014 = "2999",
    v3015 = "3013",
    v3016 = "3015",
    v3017 = "3018",
    v3018 = "3016",
    v3019 = "3391",
    v3020 = "3019",
    v3021 = "16436",
    v3022 = "3011",
    v3389 = "3017",
    v3390 = "3389",
    v3391 = "3390",
    v3420 = "3421",
    v3421 = "3422",
    v3422 = "3423",
    v3423 = "3424",
    v3424 = "3425",
    v3425 = "3426",
    v3426 = "3427",
    v3427 = "3428",
    v3428 = "3429",
    v3429 = "2984",
    v35208 = "35209",
    v35209 = "35210",
    v35210 = "35211",
    v35211 = "35212",
    v35212 = "35213",
    v35213 = "35214",
    v35214 = "35215",
    v35215 = "35216",
    v35216 = "3420",
    v4354 = "2979",
    v4533 = "3014"
  },
  ["the Siroccian Tunnels"] = {
    v26820 = "26821",
    v26821 = "26822",
    v26822 = "26823",
    v26823 = "26824",
    v26824 = "26825",
    v26825 = "26828",
    v26826 = "26829",
    v26828 = "26826",
    v26829 = "26838",
    v26838 = "26839",
    v26839 = "26840",
    v26840 = "26841",
    v26841 = "26842",
    v26842 = "26843",
    v26843 = "26846",
    v26846 = "26847",
    v26847 = "26848",
    v26848 = "26882",
    v26854 = "26856",
    v26856 = "26865",
    v26865 = "26866",
    v26866 = "26867",
    v26867 = "26868",
    v26868 = "26869",
    v26869 = "26870",
    v26870 = "26873",
    v26872 = "26874",
    v26873 = "26872",
    v26874 = "pthcity",
    v26875 = "26854",
    v26876 = "26875",
    v26877 = "26876",
    v26882 = "26877"
  },
  ["the Sparklight Rift"] = {
    v60844 = "60855",
    v60845 = "60846",
    v60846 = "60847",
    v60847 = "60848",
    v60848 = "60844",
    v60849 = "60851",
    v60850 = "60853",
    v60851 = "60850",
    v60852 = "60856",
    v60853 = "60852",
    v60854 = "60849",
    v60855 = "60854",
    v60856 = "60857",
    v60857 = "60858",
    v60858 = "60909",
    v60859 = "60860",
    v60860 = "60904",
    v60904 = "60905",
    v60905 = "60906",
    v60906 = "60908",
    v60907 = "60915",
    v60908 = "60907",
    v60909 = "60910",
    v60910 = "60911",
    v60911 = "60912",
    v60912 = "60913",
    v60913 = "60914",
    v60914 = "60859",
    v60915 = "60916",
    v60916 = "60920",
    v60920 = "60921",
    v60921 = "60922",
    v60922 = "60923",
    v60923 = "60924",
    v60924 = "60925",
    v60925 = "60926",
    v60926 = "60927",
    v60927 = "60928",
    v60928 = "60929",
    v60929 = "pthcity"
  },
  ["the Squal"] = {
    v14926 = "54732",
    v54705 = "54725",
    v54706 = "55086",
    v54707 = "54729",
    v54710 = "55083",
    v54711 = "54712",
    v54712 = "54723",
    v54723 = "64803",
    v54724 = "54706",
    v54725 = "54724",
    v54726 = "54727",
    v54727 = "54728",
    v54728 = "54705",
    v54729 = "54730",
    v54730 = "54731",
    v54731 = "54738",
    v54732 = "54726",
    v54733 = "68153",
    v54734 = "54737",
    v54735 = "68159",
    v54736 = "54735",
    v54737 = "54736",
    v54738 = "54739",
    v54739 = "54740",
    v54740 = "54758",
    v54757 = "54759",
    v54758 = "54757",
    v54759 = "54760",
    v54760 = "54761",
    v54761 = "54762",
    v54762 = "54763",
    v54763 = "54764",
    v54764 = "54765",
    v54765 = "54710",
    v55083 = "55084",
    v55084 = "55085",
    v55085 = "54711",
    v55086 = "55087",
    v55087 = "54733",
    v64803 = "65154",
    v65154 = "65243",
    v65243 = "65579",
    v65579 = "68140",
    v65879 = "66794",
    v66115 = "66775",
    v66775 = "66791",
    v66791 = "68141",
    v66794 = "66115",
    v67695 = "67699",
    v67696 = "68150",
    v67697 = "67824",
    v67698 = "67697",
    v67699 = "67698",
    v67712 = "67713",
    v67713 = "67846",
    v67824 = "67712",
    v67846 = "67848",
    v67848 = "68388",
    v68140 = "65879",
    v68141 = "68145",
    v68145 = "68147",
    v68147 = "67696",
    v68150 = "67695",
    v68153 = "68365",
    v68159 = "68160",
    v68160 = "68162",
    v68162 = "68164",
    v68163 = "54707",
    v68164 = "68163",
    v68365 = "68366",
    v68366 = "68367",
    v68367 = "68370",
    v68368 = "54734",
    v68369 = "68372",
    v68370 = "68369",
    v68372 = "68368",
    v68388 = "68389",
    v68389 = "68391",
    v68391 = "68392",
    v68392 = "68393",
    v68393 = "pthcity"
  },
  ["the Tarean Caverns"] = {
    v22305 = "22306",
    v22306 = "22307",
    v22307 = "22308",
    v22308 = "22309",
    v22309 = "22310",
    v22310 = "22311",
    v22311 = "22312",
    v22312 = "22314",
    v22313 = "22315",
    v22314 = "22313",
    v22315 = "22316",
    v22316 = "22317",
    v22317 = "22318",
    v22318 = "22319",
    v22319 = "22321",
    v22321 = "22322",
    v22322 = "22323",
    v22323 = "22324",
    v22324 = "22325",
    v22325 = "22326",
    v22326 = "22327",
    v22327 = "22328",
    v22328 = "22329",
    v22329 = "22330",
    v22330 = "22331",
    v22331 = "22332",
    v22332 = "22333",
    v22333 = "22334",
    v22334 = "22335",
    v22335 = "22336",
    v22336 = "22337",
    v22337 = "22338",
    v22338 = "22347",
    v22339 = "22340",
    v22340 = "22341",
    v22341 = "22342",
    v22342 = "22344",
    v22343 = "22345",
    v22344 = "22346",
    v22345 = "pthcity",
    v22346 = "22343",
    v22347 = "22348",
    v22348 = "22349",
    v22349 = "22339"
  },
  ["the Tarean Ice Caverns"] = {
    v22567 = "22568",
    v22568 = "22569",
    v22569 = "22570",
    v22570 = "22571",
    v22571 = "22572",
    v22572 = "22573",
    v22573 = "22574",
    v22574 = "22575",
    v22575 = "22576",
    v22576 = "22584",
    v22577 = "22589",
    v22578 = "22577",
    v22579 = "22578",
    v22580 = "22579",
    v22581 = "22580",
    v22582 = "22581",
    v22583 = "22582",
    v22584 = "22583",
    v22586 = "22622",
    v22587 = "22586",
    v22588 = "22587",
    v22589 = "22590",
    v22590 = "22591",
    v22591 = "22592",
    v22592 = "22593",
    v22593 = "22594",
    v22594 = "22599",
    v22595 = "22588",
    v22596 = "22595",
    v22597 = "22596",
    v22598 = "22603",
    v22599 = "22601",
    v22600 = "22607",
    v22601 = "22600",
    v22602 = "22598",
    v22603 = "22606",
    v22604 = "22597",
    v22605 = "22608",
    v22606 = "22605",
    v22607 = "22602",
    v22608 = "22604",
    v22609 = "pthcity",
    v22610 = "22609",
    v22611 = "22610",
    v22612 = "22613",
    v22613 = "22611",
    v22614 = "22612",
    v22615 = "22614",
    v22616 = "22615",
    v22617 = "22616",
    v22618 = "22617",
    v22619 = "22618",
    v22620 = "22623",
    v22621 = "22620",
    v22622 = "22621",
    v22623 = "22624",
    v22624 = "22625",
    v22625 = "22626",
    v22626 = "22619"
  },
  ["the Temple of Sonn"] = {
    v16706 = "16715",
    v16707 = "16708",
    v16708 = "16709",
    v16709 = "16710",
    v16710 = "16711",
    v16711 = "16712",
    v16712 = "16713",
    v16713 = "16714",
    v16714 = "16717",
    v16715 = "16716",
    v16716 = "16707",
    v16717 = "16718",
    v16718 = "16719",
    v16719 = "16720",
    v16720 = "16721",
    v16721 = "16724",
    v16722 = "16723",
    v16723 = "16746",
    v16724 = "16725",
    v16725 = "16726",
    v16726 = "16727",
    v16727 = "16728",
    v16728 = "16729",
    v16729 = "16730",
    v16730 = "16731",
    v16731 = "16732",
    v16732 = "16733",
    v16733 = "16734",
    v16734 = "16735",
    v16735 = "16736",
    v16736 = "16722",
    v16740 = "16741",
    v16741 = "16742",
    v16742 = "16745",
    v16743 = "16747",
    v16744 = "16743",
    v16745 = "16744",
    v16746 = "16740",
    v16747 = "16748",
    v16748 = "16749",
    v16749 = "16750",
    v16750 = "16751",
    v16751 = "16752",
    v16752 = "16753",
    v16753 = "16754",
    v16754 = "16755",
    v16755 = "16756",
    v16756 = "16757",
    v16757 = "16758",
    v16758 = "16939",
    v16939 = "16940",
    v16940 = "16941",
    v16941 = "16942",
    v16942 = "16943",
    v16943 = "16949",
    v16944 = "16945",
    v16945 = "16948",
    v16946 = "16947",
    v16947 = "pthcity",
    v16948 = "16946",
    v16949 = "16956",
    v16950 = "16951",
    v16951 = "16952",
    v16952 = "16953",
    v16953 = "16954",
    v16954 = "16955",
    v16955 = "16944",
    v16956 = "16958",
    v16957 = "16950",
    v16958 = "16959",
    v16959 = "16957"
  },
  ["the Teshen Caldera"] = {
    v53178 = "53179",
    v53179 = "53181",
    v53180 = "54205",
    v53181 = "53241",
    v53241 = "53180",
    v53883 = "55356",
    v54203 = "53883",
    v54204 = "54203",
    v54205 = "54206",
    v54206 = "54204",
    v54207 = "54209",
    v54209 = "54242",
    v54242 = "54243",
    v54243 = "54256",
    v54244 = "54262",
    v54249 = "54271",
    v54250 = "54253",
    v54251 = "54394",
    v54252 = "54251",
    v54253 = "54252",
    v54256 = "54257",
    v54257 = "54259",
    v54259 = "54260",
    v54260 = "54261",
    v54261 = "54244",
    v54262 = "54270",
    v54270 = "54249",
    v54271 = "54250",
    v54394 = "54395",
    v54395 = "54396",
    v54396 = "54397",
    v54397 = "54398",
    v54398 = "54399",
    v54399 = "54400",
    v54400 = "pthcity",
    v55276 = "55277",
    v55277 = "55287",
    v55278 = "55279",
    v55279 = "55280",
    v55280 = "55292",
    v55281 = "55285",
    v55285 = "55286",
    v55286 = "55278",
    v55287 = "55289",
    v55288 = "55281",
    v55289 = "55290",
    v55290 = "55291",
    v55291 = "55288",
    v55292 = "55294",
    v55293 = "55327",
    v55294 = "55316",
    v55315 = "55317",
    v55316 = "55315",
    v55317 = "55318",
    v55318 = "55319",
    v55319 = "55326",
    v55320 = "55321",
    v55321 = "55322",
    v55322 = "55323",
    v55323 = "55324",
    v55324 = "55325",
    v55325 = "55293",
    v55326 = "55320",
    v55327 = "55334",
    v55328 = "55336",
    v55329 = "55337",
    v55330 = "55341",
    v55331 = "55332",
    v55332 = "55340",
    v55333 = "53178",
    v55334 = "55339",
    v55335 = "55338",
    v55336 = "55330",
    v55337 = "55328",
    v55338 = "55329",
    v55339 = "55335",
    v55340 = "55333",
    v55341 = "55342",
    v55342 = "55343",
    v55343 = "55344",
    v55344 = "55331",
    v55356 = "55357",
    v55357 = "55358",
    v55358 = "55359",
    v55359 = "55360",
    v55360 = "55361",
    v55361 = "55362",
    v55362 = "55363",
    v55363 = "55364",
    v55364 = "55365",
    v55365 = "55366",
    v55366 = "55367",
    v55367 = "55368",
    v55368 = "55369",
    v55369 = "55370",
    v55370 = "54207"
  },
  ["the Three Rock Outpost"] = {
    v20281 = "20282",
    v20282 = "20284",
    v20284 = "20285",
    v20285 = "20286",
    v20286 = "20287",
    v20287 = "20288",
    v20288 = "20289",
    v20289 = "20290",
    v20290 = "20291",
    v20291 = "20292",
    v20292 = "20293",
    v20293 = "20294",
    v20294 = "20295",
    v20295 = "20318",
    v20296 = "20297",
    v20297 = "20298",
    v20298 = "20299",
    v20299 = "20300",
    v20300 = "20301",
    v20301 = "20310",
    v20309 = "20311",
    v20310 = "20309",
    v20311 = "20312",
    v20312 = "20319",
    v20313 = "20296",
    v20314 = "20313",
    v20315 = "20314",
    v20316 = "20315",
    v20317 = "20316",
    v20318 = "20317",
    v20319 = "20320",
    v20320 = "20321",
    v20321 = "20322",
    v20322 = "20323",
    v20323 = "20337",
    v20324 = "20325",
    v20325 = "20327",
    v20327 = "20328",
    v20328 = "20353",
    v20329 = "20330",
    v20330 = "20331",
    v20331 = "20339",
    v20333 = "20352",
    v20334 = "20335",
    v20335 = "20333",
    v20336 = "20334",
    v20337 = "20336",
    v20339 = "20340",
    v20340 = "20342",
    v20342 = "20343",
    v20343 = "20344",
    v20344 = "20345",
    v20345 = "20346",
    v20346 = "20347",
    v20347 = "20348",
    v20348 = "20349",
    v20349 = "48414",
    v20352 = "20324",
    v20353 = "20329",
    v48413 = "48417",
    v48414 = "48415",
    v48415 = "48416",
    v48416 = "48413",
    v48417 = "48418",
    v48418 = "48419",
    v48419 = "pthcity"
  },
  ["the Torturers' Caverns"] = {
    v23202 = "23203",
    v23203 = "23204",
    v23204 = "23205",
    v23205 = "23206",
    v23206 = "23207",
    v23207 = "23208",
    v23208 = "23209",
    v23209 = "23210",
    v23210 = "23211",
    v23211 = "23212",
    v23212 = "23213",
    v23213 = "23214",
    v23214 = "23215",
    v23215 = "23216",
    v23216 = "23217",
    v23217 = "23218",
    v23218 = "23219",
    v23219 = "23220",
    v23220 = "23221",
    v23221 = "23222",
    v23222 = "23223",
    v23223 = "23224",
    v23224 = "23225",
    v23225 = "23265",
    v23226 = "23230",
    v23227 = "23226",
    v23228 = "23227",
    v23229 = "23228",
    v23230 = "23231",
    v23231 = "23232",
    v23232 = "23233",
    v23233 = "23234",
    v23234 = "23235",
    v23235 = "23238",
    v23236 = "pthcity",
    v23237 = "23236",
    v23238 = "23237",
    v23239 = "23240",
    v23240 = "23241",
    v23241 = "23242",
    v23242 = "23243",
    v23243 = "23244",
    v23244 = "23245",
    v23245 = "23249",
    v23246 = "23250",
    v23247 = "23246",
    v23248 = "23247",
    v23249 = "23248",
    v23250 = "23251",
    v23251 = "23252",
    v23252 = "23253",
    v23253 = "23254",
    v23254 = "23255",
    v23255 = "23256",
    v23256 = "23257",
    v23257 = "23229",
    v23265 = "23266",
    v23266 = "23267",
    v23267 = "23268",
    v23268 = "23269",
    v23269 = "23270",
    v23270 = "23271",
    v23271 = "23272",
    v23272 = "23284",
    v23273 = "23283",
    v23274 = "23281",
    v23275 = "23276",
    v23276 = "23277",
    v23277 = "23278",
    v23278 = "23285",
    v23279 = "23280",
    v23280 = "23273",
    v23281 = "23275",
    v23282 = "23274",
    v23283 = "23282",
    v23284 = "23279",
    v23285 = "23286",
    v23286 = "23287",
    v23287 = "23288",
    v23288 = "23289",
    v23289 = "23291",
    v23290 = "23292",
    v23291 = "23290",
    v23292 = "23293",
    v23293 = "23294",
    v23294 = "23295",
    v23295 = "23296",
    v23296 = "23297",
    v23297 = "23298",
    v23298 = "23300",
    v23300 = "23301",
    v23301 = "23302",
    v23302 = "23303",
    v23303 = "23304",
    v23304 = "23305",
    v23305 = "23306",
    v23306 = "23307",
    v23307 = "23310",
    v23308 = "23311",
    v23309 = "23308",
    v23310 = "23309",
    v23311 = "23312",
    v23312 = "23313",
    v23313 = "23314",
    v23314 = "23315",
    v23315 = "23319",
    v23316 = "23321",
    v23317 = "23316",
    v23318 = "23317",
    v23319 = "23322",
    v23321 = "23239",
    v23322 = "23318"
  },
  ["the Undercity of Djeir"] = {
    v11994 = "12053",
    v12053 = "12056",
    v12054 = "12057",
    v12055 = "12060",
    v12056 = "12054",
    v12057 = "12058",
    v12058 = "12059",
    v12059 = "12055",
    v12060 = "12066",
    v12061 = "12067",
    v12062 = "12061",
    v12063 = "12062",
    v12064 = "12063",
    v12065 = "12064",
    v12066 = "12065",
    v12067 = "12068",
    v12068 = "12069",
    v12069 = "12070",
    v12070 = "12071",
    v12071 = "12072",
    v12072 = "12074",
    v12073 = "12076",
    v12074 = "12075",
    v12075 = "12078",
    v12076 = "12080",
    v12077 = "12073",
    v12078 = "12079",
    v12079 = "12082",
    v12080 = "12084",
    v12081 = "12077",
    v12082 = "12083",
    v12083 = "12089",
    v12084 = "53622",
    v12085 = "12081",
    v12086 = "12090",
    v12087 = "12091",
    v12088 = "12092",
    v12089 = "12088",
    v12090 = "12085",
    v12091 = "12086",
    v12092 = "12094",
    v12093 = "12095",
    v12094 = "12093",
    v12095 = "12087",
    v12097 = "12103",
    v12099 = "12097",
    v12100 = "12102",
    v12101 = "12100",
    v12102 = "12111",
    v12103 = "12114",
    v12104 = "12106",
    v12105 = "12107",
    v12106 = "12105",
    v12107 = "12101",
    v12111 = "12112",
    v12112 = "12113",
    v12113 = "12117",
    v12114 = "12116",
    v12115 = "12104",
    v12116 = "12115",
    v12117 = "12226",
    v12118 = "12099",
    v12226 = "12227",
    v12227 = "12228",
    v12228 = "12229",
    v12229 = "12230",
    v12230 = "12231",
    v12231 = "12253",
    v12232 = "12233",
    v12233 = "12234",
    v12234 = "12235",
    v12235 = "12236",
    v12236 = "12237",
    v12237 = "12238",
    v12238 = "12239",
    v12239 = "12118",
    v12240 = "12241",
    v12241 = "12242",
    v12242 = "12243",
    v12243 = "12244",
    v12244 = "12245",
    v12245 = "12246",
    v12246 = "12247",
    v12247 = "12232",
    v12248 = "12240",
    v12249 = "12248",
    v12250 = "12249",
    v12251 = "12250",
    v12252 = "12251",
    v12253 = "12254",
    v12254 = "12255",
    v12255 = "pthcity",
    v12256 = "12307",
    v12289 = "12256",
    v12290 = "12291",
    v12291 = "12292",
    v12292 = "12337",
    v12293 = "12342",
    v12294 = "12363",
    v12297 = "12289",
    v12298 = "12297",
    v12299 = "12298",
    v12300 = "12299",
    v12301 = "12300",
    v12302 = "12252",
    v12303 = "12302",
    v12304 = "12303",
    v12305 = "12304",
    v12306 = "12305",
    v12307 = "12308",
    v12308 = "12327",
    v12309 = "12310",
    v12310 = "12311",
    v12311 = "12312",
    v12312 = "12313",
    v12313 = "12314",
    v12314 = "12319",
    v12315 = "12306",
    v12319 = "12320",
    v12320 = "12323",
    v12321 = "12322",
    v12322 = "12325",
    v12323 = "12324",
    v12324 = "12321",
    v12325 = "12326",
    v12326 = "12315",
    v12327 = "13126",
    v12328 = "12590",
    v12329 = "12330",
    v12330 = "12589",
    v12337 = "12338",
    v12338 = "12339",
    v12339 = "12341",
    v12340 = "12293",
    v12341 = "12340",
    v12342 = "12343",
    v12343 = "12344",
    v12344 = "12347",
    v12345 = "12346",
    v12346 = "12294",
    v12347 = "12345",
    v12348 = "12358",
    v12358 = "12359",
    v12359 = "12360",
    v12360 = "12361",
    v12361 = "12362",
    v12362 = "17677",
    v12363 = "12348",
    v12589 = "12290",
    v12590 = "12591",
    v12591 = "12329",
    v13126 = "12328",
    v17677 = "17911",
    v17903 = "17904",
    v17904 = "17905",
    v17905 = "17907",
    v17906 = "12309",
    v17907 = "17909",
    v17908 = "17906",
    v17909 = "17910",
    v17910 = "17908",
    v17911 = "17903",
    v53622 = "53623",
    v53623 = "53624",
    v53624 = "53625",
    v53625 = "53626",
    v53626 = "53627",
    v53627 = "53629",
    v53629 = "53630",
    v53630 = "53631",
    v53631 = "53632",
    v53632 = "12301"
  },
  ["the Valley of Kalebb"] = {
    v5340 = "6720",
    v5341 = "5340",
    v6162 = "6165",
    v6165 = "8756",
    v6718 = "8758",
    v6719 = "8746",
    v6720 = "9090",
    v8694 = "8700",
    v8700 = "8701",
    v8701 = "8702",
    v8702 = "8703",
    v8703 = "8704",
    v8704 = "8713",
    v8705 = "8706",
    v8706 = "8707",
    v8707 = "8711",
    v8709 = "8710",
    v8710 = "8715",
    v8711 = "8709",
    v8712 = "8705",
    v8713 = "8731",
    v8714 = "8712",
    v8715 = "8727",
    v8726 = "8729",
    v8727 = "8728",
    v8728 = "8743",
    v8729 = "8730",
    v8730 = "8753",
    v8731 = "8734",
    v8732 = "8735",
    v8733 = "8714",
    v8734 = "8740",
    v8735 = "8741",
    v8736 = "8742",
    v8737 = "8738",
    v8738 = "8739",
    v8739 = "8732",
    v8740 = "8737",
    v8741 = "8736",
    v8742 = "8733",
    v8743 = "8726",
    v8744 = "pthcity",
    v8745 = "8749",
    v8746 = "8757",
    v8747 = "5341",
    v8748 = "8745",
    v8749 = "6162",
    v8750 = "8747",
    v8751 = "8748",
    v8753 = "8754",
    v8754 = "8755",
    v8755 = "8751",
    v8756 = "6719",
    v8757 = "6718",
    v8758 = "8750",
    v9090 = "9091",
    v9091 = "9092",
    v9092 = "9093",
    v9093 = "8744"
  },
  ["the Valley of Lodi"] = {
    v3883 = "3884",
    v3884 = "4178",
    v3901 = "3966",
    v3966 = "3967",
    v3967 = "3968",
    v3968 = "7606",
    v3971 = "3972",
    v3972 = "3973",
    v3973 = "3975",
    v3974 = "3983",
    v3975 = "3976",
    v3976 = "3978",
    v3977 = "3980",
    v3978 = "3979",
    v3979 = "3977",
    v3980 = "3981",
    v3981 = "3982",
    v3982 = "3974",
    v3983 = "3984",
    v3984 = "3985",
    v3985 = "3986",
    v3986 = "4092",
    v4092 = "4093",
    v4093 = "4094",
    v4094 = "4095",
    v4095 = "4096",
    v4096 = "4097",
    v4097 = "4098",
    v4098 = "4099",
    v4099 = "pthcity",
    v4178 = "3901",
    v7606 = "3971"
  },
  ["the Vilimo Fields"] = {
    v21365 = "21366",
    v21366 = "21368",
    v21367 = "24630",
    v21368 = "21367",
    v21372 = "21373",
    v21373 = "21376",
    v21374 = "21375",
    v21375 = "21389",
    v21376 = "21377",
    v21377 = "21374",
    v21378 = "21409",
    v21384 = "21385",
    v21385 = "21386",
    v21386 = "21387",
    v21387 = "21388",
    v21388 = "pthcity",
    v21389 = "21390",
    v21390 = "21392",
    v21391 = "21395",
    v21392 = "21393",
    v21393 = "21391",
    v21394 = "21399",
    v21395 = "21396",
    v21396 = "21398",
    v21397 = "21384",
    v21398 = "21397",
    v21399 = "21401",
    v21400 = "21372",
    v21401 = "21402",
    v21402 = "21403",
    v21403 = "21400",
    v21404 = "21405",
    v21405 = "21406",
    v21406 = "21420",
    v21407 = "21378",
    v21408 = "21407",
    v21409 = "21410",
    v21410 = "21411",
    v21411 = "21539",
    v21412 = "21394",
    v21413 = "21423",
    v21414 = "21413",
    v21415 = "21416",
    v21416 = "21417",
    v21417 = "21414",
    v21418 = "21415",
    v21419 = "21418",
    v21420 = "21419",
    v21421 = "21408",
    v21422 = "21421",
    v21423 = "21422",
    v21535 = "21536",
    v21536 = "21537",
    v21537 = "21538",
    v21538 = "21412",
    v21539 = "21535",
    v24628 = "24629",
    v24629 = "21365",
    v24630 = "21404"
  },
  ["the Village of Kornar"] = {
    v21286 = "21291",
    v21287 = "21297",
    v21288 = "21300",
    v21289 = "21357",
    v21290 = "21431",
    v21291 = "21292",
    v21292 = "21293",
    v21293 = "21295",
    v21294 = "21287",
    v21295 = "21296",
    v21296 = "21294",
    v21297 = "21299",
    v21298 = "21288",
    v21299 = "21298",
    v21300 = "21301",
    v21301 = "21302",
    v21302 = "21289",
    v21357 = "21358",
    v21358 = "21359",
    v21359 = "21361",
    v21360 = "21430",
    v21361 = "21362",
    v21362 = "21363",
    v21363 = "21364",
    v21364 = "21360",
    v21425 = "21427",
    v21426 = "21436",
    v21427 = "21426",
    v21428 = "21425",
    v21430 = "21290",
    v21431 = "21433",
    v21432 = "21434",
    v21433 = "21432",
    v21434 = "21435",
    v21435 = "21428",
    v21436 = "21437",
    v21437 = "21438",
    v21438 = "21439",
    v21439 = "21440",
    v21440 = "24640",
    v21442 = "21443",
    v21443 = "21444",
    v21444 = "21445",
    v21445 = "21447",
    v21446 = "21448",
    v21447 = "21446",
    v21448 = "21449",
    v21449 = "21450",
    v21450 = "21457",
    v21451 = "21452",
    v21452 = "21453",
    v21453 = "21459",
    v21454 = "21451",
    v21455 = "21454",
    v21456 = "21455",
    v21457 = "21458",
    v21458 = "21456",
    v21459 = "21460",
    v21460 = "21461",
    v21461 = "21462",
    v21462 = "21463",
    v21463 = "21464",
    v21464 = "21465",
    v21465 = "pthcity",
    v24640 = "21442"
  },
  ["the Village of Torston"] = {
    v17428 = "17600",
    v17429 = "17428",
    v17430 = "17432",
    v17431 = "17430",
    v17432 = "17549",
    v17526 = "17431",
    v17527 = "17528",
    v17528 = "17529",
    v17529 = "17530",
    v17530 = "17531",
    v17531 = "17535",
    v17532 = "17533",
    v17533 = "20278",
    v17534 = "17532",
    v17535 = "17534",
    v17536 = "17527",
    v17537 = "17632",
    v17538 = "17539",
    v17539 = "17540",
    v17540 = "17541",
    v17541 = "17543",
    v17542 = "17547",
    v17543 = "17542",
    v17544 = "17545",
    v17545 = "17546",
    v17546 = "17537",
    v17547 = "17544",
    v17548 = "17429",
    v17549 = "17615",
    v17551 = "17552",
    v17552 = "pthcity",
    v17553 = "17551",
    v17554 = "17553",
    v17555 = "17556",
    v17556 = "17554",
    v17594 = "17596",
    v17595 = "17597",
    v17596 = "17555",
    v17597 = "17599",
    v17598 = "17595",
    v17599 = "17594",
    v17600 = "17598",
    v17612 = "17613",
    v17613 = "17616",
    v17614 = "17548",
    v17615 = "17614",
    v17616 = "17538",
    v17626 = "17536",
    v17628 = "17629",
    v17629 = "17626",
    v17630 = "17628",
    v17632 = "17630",
    v20278 = "17526"
  },
  ["the Western Itzatl Rainforest"] = {
    v10279 = "10280",
    v10280 = "9870",
    v10949 = "10959",
    v10950 = "10949",
    v10951 = "10950",
    v10952 = "10951",
    v10953 = "10954",
    v10954 = "10952",
    v10955 = "10953",
    v10956 = "10955",
    v10957 = "10956",
    v10958 = "11118",
    v10959 = "10958",
    v11118 = "11119",
    v11119 = "11128",
    v11120 = "11123",
    v11121 = "11120",
    v11122 = "11121",
    v11123 = "11124",
    v11124 = "11125",
    v11125 = "11126",
    v11126 = "11127",
    v11127 = "11201",
    v11128 = "11129",
    v11129 = "17912",
    v11130 = "11132",
    v11131 = "11130",
    v11132 = "11133",
    v11133 = "11135",
    v11134 = "11161",
    v11135 = "11134",
    v11136 = "11137",
    v11137 = "11138",
    v11138 = "11139",
    v11139 = "11140",
    v11140 = "11141",
    v11141 = "11142",
    v11142 = "11143",
    v11143 = "11122",
    v11144 = "11145",
    v11145 = "11146",
    v11146 = "11147",
    v11147 = "11148",
    v11148 = "11149",
    v11149 = "11150",
    v11150 = "11151",
    v11151 = "11152",
    v11152 = "11153",
    v11153 = "11202",
    v11154 = "11136",
    v11155 = "11164",
    v11156 = "11163",
    v11157 = "11156",
    v11158 = "11159",
    v11159 = "11157",
    v11160 = "11158",
    v11161 = "11160",
    v11162 = "11155",
    v11163 = "11162",
    v11164 = "11165",
    v11165 = "11166",
    v11166 = "11154",
    v11167 = "11144",
    v11170 = "11167",
    v11171 = "11170",
    v11172 = "11171",
    v11175 = "11172",
    v11176 = "11175",
    v11177 = "11178",
    v11178 = "11179",
    v11179 = "11180",
    v11180 = "11181",
    v11181 = "11183",
    v11183 = "11184",
    v11184 = "11185",
    v11185 = "11186",
    v11186 = "11187",
    v11187 = "11188",
    v11188 = "11189",
    v11189 = "11190",
    v11190 = "11191",
    v11191 = "11192",
    v11192 = "11176",
    v11193 = "11194",
    v11194 = "11195",
    v11195 = "11196",
    v11196 = "11197",
    v11197 = "11198",
    v11198 = "11177",
    v11199 = "11193",
    v11200 = "11199",
    v11201 = "11200",
    v11202 = "11203",
    v11203 = "11204",
    v11204 = "11206",
    v11205 = "11207",
    v11206 = "11205",
    v11207 = "11208",
    v11208 = "11209",
    v11209 = "11213",
    v11210 = "11211",
    v11211 = "11214",
    v11213 = "11210",
    v11214 = "11215",
    v11215 = "11216",
    v11216 = "11217",
    v11217 = "11218",
    v11218 = "11219",
    v11219 = "11220",
    v11220 = "11221",
    v11221 = "11223",
    v11223 = "11230",
    v11224 = "11225",
    v11225 = "9878",
    v11226 = "11224",
    v11227 = "11226",
    v11228 = "11227",
    v11229 = "11228",
    v11230 = "11229",
    v17912 = "11131",
    v9853 = "9887",
    v9854 = "9857",
    v9855 = "9854",
    v9856 = "9855",
    v9857 = "9858",
    v9858 = "9859",
    v9859 = "9860",
    v9860 = "9861",
    v9861 = "9862",
    v9862 = "9898",
    v9863 = "9897",
    v9864 = "9863",
    v9866 = "9871",
    v9867 = "9866",
    v9868 = "9867",
    v9869 = "9868",
    v9870 = "9869",
    v9871 = "9872",
    v9872 = "9873",
    v9873 = "9874",
    v9874 = "9875",
    v9875 = "9876",
    v9876 = "9877",
    v9877 = "10957",
    v9878 = "9879",
    v9879 = "9880",
    v9880 = "9881",
    v9881 = "9882",
    v9882 = "9883",
    v9883 = "9884",
    v9884 = "9885",
    v9885 = "pthcity",
    v9887 = "9888",
    v9888 = "9889",
    v9889 = "9890",
    v9890 = "9856",
    v9891 = "9892",
    v9892 = "9902",
    v9893 = "9891",
    v9894 = "9893",
    v9895 = "9894",
    v9896 = "9895",
    v9897 = "9896",
    v9898 = "9899",
    v9899 = "9900",
    v9900 = "9901",
    v9901 = "9864",
    v9902 = "9903",
    v9903 = "10279"
  },
  ["the Western Tundra"] = {
    v18082 = "18083",
    v18083 = "18128",
    v18084 = "18085",
    v18085 = "18089",
    v18086 = "18090",
    v18087 = "18084",
    v18088 = "18086",
    v18089 = "18088",
    v18090 = "18091",
    v18091 = "18092",
    v18092 = "18094",
    v18093 = "18095",
    v18094 = "18093",
    v18095 = "18096",
    v18096 = "18097",
    v18097 = "18098",
    v18098 = "18101",
    v18100 = "18087",
    v18101 = "18104",
    v18102 = "18127",
    v18103 = "18102",
    v18104 = "18105",
    v18105 = "18106",
    v18106 = "18107",
    v18107 = "18108",
    v18108 = "18109",
    v18109 = "18111",
    v18111 = "18114",
    v18112 = "18113",
    v18113 = "18121",
    v18114 = "18115",
    v18115 = "18116",
    v18116 = "18118",
    v18117 = "18112",
    v18118 = "18119",
    v18119 = "18117",
    v18120 = "18103",
    v18121 = "18122",
    v18122 = "18123",
    v18123 = "18120",
    v18124 = "18125",
    v18125 = "18132",
    v18126 = "18124",
    v18127 = "18126",
    v18128 = "18100",
    v18129 = "pthcity",
    v18130 = "18136",
    v18132 = "67759",
    v18133 = "18169",
    v18134 = "18135",
    v18135 = "18130",
    v18136 = "18143",
    v18138 = "18129",
    v18140 = "18142",
    v18141 = "18179",
    v18142 = "18141",
    v18143 = "18144",
    v18144 = "18150",
    v18145 = "18163",
    v18146 = "18147",
    v18147 = "18134",
    v18148 = "18146",
    v18149 = "18145",
    v18150 = "18149",
    v18151 = "18140",
    v18152 = "18151",
    v18153 = "18152",
    v18155 = "18156",
    v18156 = "18153",
    v18157 = "18155",
    v18160 = "18157",
    v18161 = "18162",
    v18162 = "18160",
    v18163 = "18164",
    v18164 = "18166",
    v18165 = "18161",
    v18166 = "18165",
    v18167 = "18170",
    v18168 = "18167",
    v18169 = "18168",
    v18170 = "18171",
    v18171 = "18148",
    v18172 = "18138",
    v18173 = "18174",
    v18174 = "18172",
    v18175 = "18173",
    v18176 = "18175",
    v18177 = "18176",
    v18178 = "18180",
    v18179 = "18178",
    v18180 = "18181",
    v18181 = "18182",
    v18182 = "18187",
    v18183 = "18184",
    v18184 = "18177",
    v18185 = "18186",
    v18186 = "18183",
    v18187 = "18189",
    v18188 = "18185",
    v18189 = "18188",
    v67759 = "18133"
  },
  ["the beaches of Liris"] = {
    v19814 = "19815",
    v19815 = "19816",
    v19816 = "19817",
    v19817 = "19818",
    v19818 = "19819",
    v19819 = "19820",
    v19820 = "19821",
    v19821 = "19822",
    v19822 = "19823",
    v19823 = "19824",
    v19824 = "19825",
    v19825 = "19827",
    v19827 = "19828",
    v19828 = "19829",
    v19829 = "19830",
    v19830 = "19831",
    v19831 = "19832",
    v19832 = "19833",
    v19833 = "19834",
    v19834 = "19835",
    v19835 = "19841",
    v19836 = "19837",
    v19837 = "19842",
    v19838 = "19836",
    v19839 = "19838",
    v19840 = "19839",
    v19841 = "19840",
    v19842 = "19843",
    v19843 = "19844",
    v19844 = "19845",
    v19845 = "pthcity"
  },
  ["the forgotten depths of Mount Helba"] = {
    v57086 = "57087",
    v57087 = "57088",
    v57088 = "57089",
    v57089 = "57090",
    v57090 = "57091",
    v57091 = "57092",
    v57092 = "57093",
    v57093 = "57094",
    v57094 = "57095",
    v57095 = "57096",
    v57096 = "57097",
    v57097 = "57098",
    v57098 = "57099",
    v57099 = "57100",
    v57100 = "57101",
    v57101 = "57102",
    v57102 = "57103",
    v57103 = "57105",
    v57104 = "57106",
    v57105 = "57104",
    v57106 = "57107",
    v57107 = "57108",
    v57108 = "57109",
    v57109 = "57110",
    v57110 = "57111",
    v57111 = "57112",
    v57112 = "57113",
    v57113 = "57114",
    v57114 = "57115",
    v57115 = "57116",
    v57116 = "57117",
    v57117 = "57118",
    v57118 = "57119",
    v57119 = "pthcity"
  },
  ["the lost city of Iviofiyiedu"] = {
    v55190 = "55747",
    v55653 = "55654",
    v55654 = "55656",
    v55655 = "55676",
    v55656 = "55657",
    v55657 = "55659",
    v55658 = "55660",
    v55659 = "55658",
    v55660 = "55661",
    v55661 = "55662",
    v55662 = "55664",
    v55663 = "55665",
    v55664 = "55671",
    v55665 = "55666",
    v55666 = "55667",
    v55667 = "55668",
    v55668 = "55669",
    v55669 = "55670",
    v55670 = "55689",
    v55671 = "55672",
    v55672 = "55673",
    v55673 = "55674",
    v55674 = "55675",
    v55675 = "55663",
    v55676 = "55677",
    v55677 = "55678",
    v55678 = "55679",
    v55679 = "55680",
    v55680 = "55681",
    v55681 = "55682",
    v55682 = "55684",
    v55683 = "55685",
    v55684 = "55683",
    v55685 = "55688",
    v55686 = "55852",
    v55687 = "55686",
    v55688 = "55687",
    v55689 = "55690",
    v55690 = "55691",
    v55691 = "55692",
    v55692 = "55693",
    v55693 = "55695",
    v55694 = "55844",
    v55695 = "55694",
    v55696 = "55848",
    v55747 = "55748",
    v55748 = "55889",
    v55844 = "55845",
    v55845 = "55846",
    v55846 = "55847",
    v55847 = "55696",
    v55848 = "55851",
    v55849 = "55850",
    v55850 = "55655",
    v55851 = "55849",
    v55852 = "56570",
    v55889 = "56433",
    v56138 = "56139",
    v56139 = "56140",
    v56140 = "56141",
    v56141 = "56142",
    v56142 = "56519",
    v56153 = "56155",
    v56154 = "55653",
    v56155 = "56156",
    v56156 = "56157",
    v56157 = "56158",
    v56158 = "56160",
    v56159 = "56161",
    v56160 = "56159",
    v56161 = "56162",
    v56162 = "56163",
    v56163 = "56164",
    v56164 = "56166",
    v56165 = "56154",
    v56166 = "56165",
    v56278 = "56357",
    v56357 = "56153",
    v56433 = "56434",
    v56434 = "56435",
    v56435 = "56512",
    v56512 = "56513",
    v56513 = "56138",
    v56519 = "56520",
    v56520 = "56278",
    v56550 = "56551",
    v56551 = "56553",
    v56552 = "56550",
    v56553 = "56554",
    v56554 = "56556",
    v56555 = "56557",
    v56556 = "56559",
    v56557 = "56558",
    v56558 = "pthcity",
    v56559 = "56555",
    v56564 = "56552",
    v56565 = "56566",
    v56566 = "56568",
    v56567 = "56565",
    v56568 = "56564",
    v56569 = "56567",
    v56570 = "56569"
  },
  ["the mines of Mount Helba"] = {
    v23358 = "23359",
    v23359 = "23360",
    v23360 = "23361",
    v23361 = "23362",
    v23362 = "23363",
    v23363 = "23364",
    v23364 = "23365",
    v23365 = "23366",
    v23366 = "23367",
    v23367 = "23368",
    v23368 = "23369",
    v23369 = "23370",
    v23370 = "23371",
    v23371 = "23372",
    v23372 = "23373",
    v23373 = "52356",
    v51824 = "51825",
    v51825 = "51827",
    v51827 = "51828",
    v51828 = "58025",
    v52356 = "52357",
    v52357 = "52358",
    v52358 = "52359",
    v52359 = "52360",
    v52360 = "52612",
    v52612 = "52613",
    v52613 = "52615",
    v52614 = "52616",
    v52615 = "52614",
    v52616 = "51824",
    v58021 = "58022",
    v58022 = "58023",
    v58023 = "58024",
    v58024 = "58029",
    v58025 = "58027",
    v58026 = "58030",
    v58027 = "58028",
    v58028 = "58021",
    v58029 = "58032",
    v58030 = "58042",
    v58031 = "58033",
    v58032 = "58038",
    v58033 = "58034",
    v58034 = "58035",
    v58035 = "58036",
    v58036 = "58037",
    v58037 = "pthcity",
    v58038 = "58039",
    v58039 = "58040",
    v58040 = "58041",
    v58041 = "58026",
    v58042 = "58043",
    v58043 = "58044",
    v58044 = "58045",
    v58045 = "58031"
  },
  ["the Underbelly"] = {
    v49440 = "48072",
    v48072 = "48071",
v48071 = 	"48070",
v48070 = 	"49438",
v49438 = 	"49439",
v49439 = 	"48073",
v48073 = 	"48074",
v48074 = 	"48075",
v48075 = 	"48076",
v48076 = 	"48081",
v48081 = 	"48077",
v48077 = 	"48079",
v48079 = 	"48080",
v48080 = 	"49445",
v49445 = 	"49446",
v49446 = 	"49444",
v49444 = 	"49443",
v49443 = 	"49447",
v49447 = 	"49448",
v49448 = 	"49449",
v49449 = 	"49450",
v49450 = 	"48082",
v48082 = 	"48078",
v48078 = 	"48083",
v48083 = 	"48084",
v48084 = 	"49454",
v49454 = 	"49452",
v49452 = 	"49451",
v49451 = 	"48086",
v48086 = 	"73432",
v73432 = 	"54133",
v54133 = 	"54134",
v54134 = 	"53730",
v53730 = 	"54135",
v54135 = 	"53733",
v53733 = 	"53735",
v53735 = 	"53740",
v53740 = 	"53741",
v53741 = 	"53742",
v53742 = 	"53744",
v53744 = 	"53745",
v53745 = 	"53746",
v53746 = 	"53984",
v53984 = 	"53985",
v53985 = 	"53986",
v53986 = 	"53748",
v53748 = 	"53987",
v53987 = 	"53988",
v53988 = 	"53989",
v53989 = 	"53990",
v53990 = 	"53991",
v53991 = 	"53993",
v53993 = 	"53992",
v53992 = 	"53994",
v53994 = 	"53995",
v53995 = 	"49453",
v49453 = 	"48085",
v48085 = 	"48087",
v48087 = 	"48088",
v48088 = 	"48089",
v48089 = 	"48090",
v48090 = 	"48091",
v48091 = 	"48092",
v48092 = 	"48093",
v48093 = 	"48094",
v48094 = 	"48095",
v48095 = 	"49469",
v49469 = 	"49468",
v49468 = 	"49470",
v49470 = 	"49471",
v49471 = 	"49472",
v49472 = 	"49473",
v49473 = 	"49474",
v49474 = 	"49475",
v49475 = 	"49476",
v49476 = 	"49478",
v49478 = 	"49477",
v49477 = 	"48096",
v48096 = 	"48097",
v48097 = 	"48098",
v48098 = 	"48099",
v48099 = 	"49456",
v49456 = 	"49457",
v49457 = 	"49459",
v49459 = 	"74076",
v74076 = 	"49460",
v49460 = 	"49461",
v49461 = 	"49462",
v49462 = 	"49463",
v49463 = 	"49464",
v49464 = 	"48100",
v48100 = 	"48101",
v48101 = 	"48102",
v48102 = 	"48103",
v48103 = 	"48104",
v48104 = 	"49465",
v49465 = 	"49466",
v49466 = 	"49467",
v49467 = 	"38271",
v38271 = 	"52593",
v52593 = 	"52592",
v52592 = 	"52590",
v52590 = 	"49537",
v49537 = 	"50790",
v50790 = 	"51785",
v51785 = 	"52225",
v52225 = 	"52591",
v52591 = 	"52589",
v52589 = 	"52587",
v52587 = 	"52588",
v52588 = 	"52226",
v52226 = 	"52228",
v52228 = 	"52230",
v52230 = 	"52231",
v52231 = 	"52232",
v52232 = 	"52233",
v52233 = 	"52234",
v52234 = 	"52586",
v52586 = 	"52594",
v52594 = 	"52596",
v52596 = 	"52597",
v52597 = 	"52610",
v52610 = 	"52595",
v52595 = 	"51354",
v51354 = 	"51353",
v51353 = 	"51351",
v51351 = 	"51352",
v51352 = 	"51349",
v51349 = 	"51348",
v51348 = 	"51344",
v51344 = 	"51346",
v51346 = 	"51347",
v51347 = 	"51345",
v51345 = 	"51336",
v51336 = 	"51343",
v51343 = 	"51350",
v51350 = 	"51339",
v51339 = 	"51341",
v51341 = 	"51342",
v51342 = 	"51340",
v51340 = 	"51338",
v51338 = 	"51337",
v51337 = 	"74070",
v74070 = 	"51332",
v51332 = 	"51311",
v51311 = 	"51310",
v51310 = 	"51312",
v51312 = 	"51308",
v51308 = 	"51309",
v51309 = 	"51331",
v51331 = 	"51329",
v51329 = 	"51330",
v51330 = 	"51328",
v51328 = 	"51325",
v51325 = 	"51307",
v51307 = 	"51306",
v51306 = 	"51305",
v51305 = 	"51301",
v51301 = 	"51302",
v51302 = 	"51303",
v51303 = 	"51304",
v51304 = 	"51300",
v51300 = 	"51289",
v51289 = 	"51290",
v51290 = 	"51291",
v51291 = 	"51292",
v51292 = 	"51293",
v51293 = 	"51294",
v51294 = 	"51295",
v51295 = 	"51296",
v51296 = 	"51297",
v51297 = 	"51299",
v51299 = 	"51288",
v51288 = 	"51287",
v51287 = 	"49441",
v49441 = 	"49442",
v49442 = 	"49440",
v49440 = 	"pthcity"

  
  },
  ["the village of Bihrkaen"] = {
    v3846 = "56892",
    v56647 = "56648",
    v56648 = "56649",
    v56649 = "56775",
    v56774 = "56781",
    v56775 = "56783",
    v56781 = "56782",
    v56782 = "pthcity",
    v56783 = "56784",
    v56784 = "56835",
    v56835 = "56839",
    v56839 = "56848",
    v56848 = "56872",
    v56851 = "56856",
    v56856 = "56774",
    v56871 = "56874",
    v56872 = "56894",
    v56873 = "56871",
    v56874 = "56875",
    v56875 = "56876",
    v56876 = "56891",
    v56891 = "3846",
    v56892 = "56893",
    v56893 = "56851",
    v56894 = "57260",
    v56897 = "56898",
    v56898 = "56873",
    v56899 = "56897",
    v56930 = "56981",
    v56931 = "56930",
    v56932 = "56933",
    v56933 = "56934",
    v56934 = "56899",
    v56935 = "56984",
    v56936 = "58065",
    v56943 = "57033",
    v56944 = "56943",
    v56945 = "56944",
    v56946 = "56976",
    v56976 = "56936",
    v56978 = "57030",
    v56979 = "56980",
    v56980 = "56978",
    v56981 = "56932",
    v56982 = "56979",
    v56983 = "57034",
    v56984 = "56983",
    v57030 = "57031",
    v57031 = "58055",
    v57032 = "56946",
    v57033 = "56931",
    v57034 = "56982",
    v57259 = "56935",
    v57260 = "57930",
    v57930 = "57259",
    v58055 = "57032",
    v58065 = "58318",
    v58318 = "58319",
    v58319 = "58323",
    v58320 = "58324",
    v58321 = "58327",
    v58322 = "58325",
    v58323 = "58326",
    v58324 = "56945",
    v58325 = "58321",
    v58326 = "58322",
    v58327 = "58320"
  },
  ["the village of Gorshire"] = {
    v12702 = "2930",
    v12740 = "12741",
    v12741 = "12744",
    v12742 = "12745",
    v12744 = "12747",
    v12745 = "12746",
    v12746 = "12702",
    v12747 = "12742",
    v2930 = "66326",
    v6182 = "7661",
    v6206 = "65856",
    v6214 = "pthcity",
    v6215 = "6214",
    v6216 = "6215",
    v65851 = "65852",
    v65852 = "65853",
    v65853 = "65854",
    v65854 = "65855",
    v65855 = "6206",
    v65856 = "65926",
    v65858 = "65903",
    v65896 = "66003",
    v65899 = "66108",
    v65900 = "65899",
    v65901 = "65900",
    v65902 = "65901",
    v65903 = "65896",
    v65904 = "65953",
    v65926 = "65927",
    v65927 = "66107",
    v65953 = "66059",
    v66003 = "66007",
    v66007 = "66008",
    v66008 = "66341",
    v66009 = "65904",
    v66059 = "66142",
    v66076 = "66077",
    v66077 = "65851",
    v66078 = "66076",
    v66095 = "66009",
    v66101 = "65902",
    v66106 = "65858",
    v66107 = "66106",
    v66108 = "66109",
    v66109 = "66110",
    v66110 = "66111",
    v66111 = "66112",
    v66112 = "66117",
    v66117 = "12740",
    v66142 = "66101",
    v66228 = "66095",
    v66326 = "66327",
    v66327 = "66328",
    v66328 = "66329",
    v66329 = "66406",
    v66341 = "66228",
    v66406 = "66407",
    v66407 = "6182",
    v7661 = "7662",
    v7662 = "7663",
    v7663 = "7664",
    v7664 = "6216"
  },
  ["the village of Rahveir"] = {
    v18968 = "18969",
    v18969 = "18970",
    v18970 = "18971",
    v18971 = "18973",
    v18972 = "18974",
    v18973 = "19015",
    v18974 = "19006",
    v18975 = "18976",
    v18976 = "18977",
    v18977 = "18978",
    v18978 = "18979",
    v18979 = "19020",
    v19005 = "19008",
    v19006 = "19005",
    v19007 = "19009",
    v19008 = "19010",
    v19009 = "18975",
    v19010 = "19013",
    v19011 = "19012",
    v19012 = "19428",
    v19013 = "19014",
    v19014 = "19011",
    v19015 = "19016",
    v19016 = "19017",
    v19017 = "18972",
    v19020 = "19021",
    v19021 = "19022",
    v19022 = "19024",
    v19023 = "19025",
    v19024 = "19023",
    v19025 = "19027",
    v19026 = "19028",
    v19027 = "19026",
    v19028 = "19029",
    v19029 = "19030",
    v19030 = "19031",
    v19031 = "19036",
    v19032 = "19033",
    v19033 = "19034",
    v19034 = "19035",
    v19035 = "pthcity",
    v19036 = "19032",
    v19428 = "19007"
  }
}

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>load targets</name>
						<packageName></packageName>
						<script>
function snd.load_targets(area)	
 snd.my.area = area
 snd.area_found = false
 snd.possible_targets = {}
 snd.possible_items = {}
 for i in ipairs(snd.areas) do
  if snd.areas[i].area == area then
   snd.area_found = true
   snd.bashing.target_type = "long"
   snd.possible_targets = snd.areas[i].targets
   echo("\n Level Range: "..snd.areas[i].level)
   cecho("\n&lt;green&gt;Possible Targets:")
   for h in ipairs(snd.possible_targets) do
    echo("\n "..snd.possible_targets[h])
   end
   if snd.areas[i].items then
    snd.possible_items = snd.areas[i].items
   end
   if snd.areas[i].items then
    snd.possible_items = snd.areas[i].items
    cecho("\n&lt;green&gt;Gathering Items:")
    for k in ipairs(snd.possible_items) do
     echo("\n "..snd.possible_items[k])
    end
   end
  end
 end
 if not snd.area_found then
  cecho("\n&lt;green&gt;Unknown Area.")
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>looting</name>
						<packageName></packageName>
						<script>
function snd.do_loot()
 if #snd.gathering &gt;= 1 then
  if snd.can_cast() and not snd.waiting.loot then
   snd.loot_it()
  end
 end
end

function snd.loot_it()
 for i in ipairs(snd.corpses) do
  snd.send("get 50 corpse")
 end
 for h in ipairs(snd.gathering) do
  snd.send("get "..snd.gathering[h])
 end
 snd.corpses = {}
 snd.gathering = {}
 snd.have_items = false
 snd.need_loot = false
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>global items</name>
						<packageName></packageName>
						<script>
snd.global_items = {
"an antipsychotic pill",
"a decongestant pill",
"a steroid pill",
"an opiate pill",
"an ototoxin pill",
"an amaurosis pill",
"a panacea pill",
"a thanatonin pill",
"a hardening paste",
"a stimulant pill",
"a kawhe pill",
"a waterbreathing pill",
"a coagulation pill",
"an anabiotic pill",
"an euphoriant pill",
"an eucrasia pill",
"an depressant pill",
"a reishi mushroom",
"a yarrow root",
"some willow bark",
"a stack of 2 reishis",
"a stack of 2 yarrows",
"a stack of 2 willows",
"a stack of 2 steroid pills",
"a stack of 2 eucrasia pills",
"a stack of 2 panacea pills",
"a stack of 2 thanatonin pills",
"a stack of 2 antipsychotic pills",
"a stack of 2 decongestant pills",
"a stack of 2 opiate pills",
"a stack of 2 ototoxin pills",
"a stack of 2 amaurosis pills",
"a stack of 2 hardening pastes",
"a stack of 2 stimulant pills",
"a stack of 2 kawhe pills",
"a stack of 2 waterbreathing pills",
"a stack of 2 coagulation pills",
"a stack of 2 anabiotic pills",
"a stack of 2 euphoriant pills",
"a stack of 2 depressant pills",
"a stack of 3 reishis",
"a stack of 3 yarrows",
"a stack of 3 willows",
"a stack of 3 steroid pills",
"a stack of 3 eucrasia pills",
"a stack of 3 panacea pills",
"a stack of 3 thanatonin pills",
"a stack of 3 antipsychotic pills",
"a stack of 3 decongestant pills",
"a stack of 3 opiate pills",
"a stack of 3 ototoxin pills",
"a stack of 3 amaurosis pills",
"a stack of 3 hardening pastes",
"a stack of 3 stimulant pills",
"a stack of 3 kawhe pills",
"a stack of 3 waterbreathing pills",
"a stack of 3 coagulation pills",
"a stack of 3 anabiotic pills",
"a stack of 3 euphoriant pills",
"a stack of 3 depressant pills",
"a stack of 4 reishis",
"a stack of 4 yarrows",
"a stack of 4 willows",
"a stack of 4 steroid pills",
"a stack of 4 eucrasia pills",
"a stack of 4 panacea pills",
"a stack of 4 thanatonin pills",
"a stack of 4 antipsychotic pills",
"a stack of 4 decongestant pills",
"a stack of 4 opiate pills",
"a stack of 4 ototoxin pills",
"a stack of 4 amaurosis pills",
"a stack of 4 hardening pastes",
"a stack of 4 stimulant pills",
"a stack of 4 kawhe pills",
"a stack of 4 waterbreathing pills",
"a stack of 4 coagulation pills",
"a stack of 4 anabiotic pills",
"a stack of 4 euphoriant pills",
"a stack of 4 depressant pills",
"a stack of 5 reishis",
"a stack of 5 yarrows",
"a stack of 5 willows",
"a stack of 5 steroid pills",
"a stack of 5 eucrasia pills",
"a stack of 5 panacea pills",
"a stack of 5 thanatonin pills",
"a stack of 5 antipsychotic pills",
"a stack of 5 decongestant pills",
"a stack of 5 opiate pills",
"a stack of 5 ototoxin pills",
"a stack of 5 amaurosis pills",
"a stack of 5 hardening pastes",
"a stack of 5 stimulant pills",
"a stack of 5 kawhe pills",
"a stack of 5 waterbreathing pills",
"a stack of 5 coagulation pills",
"a stack of 5 anabiotic pills",
"a stack of 5 euphoriant pills",
"a stack of 5 depressant pills",
"a stack of 6 reishis",
"a stack of 6 yarrows",
"a stack of 6 willows",
"a stack of 6 steroid pills",
"a stack of 6 eucrasia pills",
"a stack of 6 panacea pills",
"a stack of 6 thanatonin pills",
"a stack of 6 antipsychotic pills",
"a stack of 6 decongestant pills",
"a stack of 6 opiate pills",
"a stack of 6 ototoxin pills",
"a stack of 6 amaurosis pills",
"a stack of 6 hardening pastes",
"a stack of 6 stimulant pills",
"a stack of 6 kawhe pills",
"a stack of 6 waterbreathing pills",
"a stack of 6 coagulation pills",
"a stack of 6 anabiotic pills",
"a stack of 6 euphoriant pills",
"a stack of 6 depressant pills",
}

snd.global_targets = {
--elds
"a massive flame-covered eld",
"a vibrating black eld",
"a skittering onyx eld",
"a fragmented eld of shadowy onyx",
"a shattered eld monstrosity",
"a billowing dust eld",
"an oozing magma eld",
"a silvery pink salmon",
"a pulsating amber eld",
"a shimmering azure eld",
"a whirling violet eld",
"a shadow-laden grey eld",
"a sinuous eld of rust",
"a vicious crimson eld",
"a corrosive shadow eld",
"a consuming shadow eld",
"a vibrating black eld",
"a shimmering azure eld",
"a stalwart iron eld",
"a towering translucent eld",
"a spherical armored eld",
"a dominating frostbound eld",
"a tenebrous ash eld",
"a massive flame-covered eld",
"a jagged citrine eld",
"a crackling lightning eld",
"a crystalline opal eld",
"a crudely formed silver eld",
"an amorphous red eld",
"an immature jade eld",
"a meager golden eld",
"a shattered eld monstrosity",
"a fiery crimson fragmented eld",
"a skittering verdant eld",
"a division of ten Bloodlochian soldiers",
"a division of nine Bloodlochian soldiers",
"a division of eight Bloodlochian soldiers",
"a division of seven Bloodlochian soldiers",
"a division of six Bloodlochian soldiers",
"a division of five Bloodlochian soldiers",
"a division of four Bloodlochian soldiers",
"a division of three Bloodlochian soldiers",
"a division of two Bloodlochian soldiers",
"a division of one Bloodlochian soldiers",

--survivor
"a living puppet",
"a sorcerous puppetmaster",
"a fearsome bone dragon",
"a deep purple hydra",
"a monstrous sandman ",
"a fearsome wyvern",
"a silver being of flame",
"a towering treant",
"an unctuous creepling",
"a blood-drenched succubus",
"an  ethereal construct",
"a black hell-hound",
"a goblin soldier",
"a ravenous, shadowy ghast",
"a warlockapprentice",
"a large, venomous tarantula",
"a massive elemental",
"a muscular mountain lion",
"a skeletal soldier",
"a Troll sentry",
"a mind flayer",
"a foul-smelling orc",
"a dwarf guard",
"a horrendous abomination",
"an enormous black scorpion",
"a Mhun warrior",
"a black cobra",
"a white imp",
"a large reindeer",
"an evil snowman ",
"a dark nightmare",
"a reaper of death",
"a headless dullahan ",
"a thin-skinned wendigo",
"a shadow being",
"a giant centipede",
"a black rat",

--sterion event
"a tendriled shadowwisp",
"a sinuous umbral creeper",
"a many-winged shadowghast",
"a spider-like shadowspinner",
"a massive tenebrous horror",
"a monstrous shadow beast",
"a dragonling shadowspawn",
"a massive shadowworm",
"a shadowy anomaly",

--misc hunting
"a massive elemental",

--quests
"a menacing Caentoi cutthroat",
"a grimy bandit",
"a wounded bandit",



}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>run basher</name>
						<packageName></packageName>
						<script>local function getTarget(tab)
  for _, targ in pairs(snd.possible_targets) do
    if tab[targ] and tab[targ][1] then
      return tab[targ][1], targ
    end
  end
  for _, targ in pairs(snd.global_targets) do
    if tab[targ] and tab[targ][1] then
      return tab[targ][1], targ
    end
  end
end

function snd.runBasher()
  snd.gathering = {}
  snd.bashing.targeted = false
  snd.bashing.target_priority = 10000
  snd.bashing.target = "none"
  for item in pairs(snd.items) do
    if item == "some gold sovereigns" and #snd.items[item] &gt;= 1 then
      table.insert(snd.gathering, "sovereigns")
    elseif table.contains(snd.possible_items, item) or table.contains(snd.global_items, item) then
      for id in pairs(snd.items[item]) do
        table.insert(snd.gathering, snd.items[item][id])
      end
    --elseif
      --(string.find(item, "the corpse of") and not string.find(item, "staked")) or
     -- (string.find(item, "the remains of") and not string.find(item, "staked"))
    --then
      --for id in pairs(snd.items[item]) do
      --  table.insert(snd.corpses, snd.items[item][id])
      --end
    end
  end
  local targetID, targetName = getTarget(snd.agros)
  if not targetID then
    targetID, targetName = getTarget(snd.items)
  end
  if not targetID then
    --if snd.toggles.bashing then snd.toggle("bashing") end
    snd.toggles.bashing = false
    if bot.going then
      expandAlias("move", false)
      --  tempTimer(1.5, [[expandAlias("move")]])
    end
    snd.core()
    return
  end
    
  --target acquired!
  snd.bashing.targeted = true
  if snd.toggles.generics then
    --generic logic
    snd.bashing.target = generic_bashing_name(targetName)
    if snd.bashing.target ~= snd.bashing.old_target then
      --if snd.toggles.calling then snd.send("wt target: "..snd.bashing.target) end --comment this out to keep from calling web targets
      snd.bashing.old_target = snd.bashing.target
    end
  else
    --non generic logic
    snd.bashing.target = targetID
  end
  --if #snd.gathering &gt;= 1 then
  -- snd.loot_it()
  --end
  snd.counterattack_active = false
  snd.probed = false
  snd.punisher = false
  if
    snd.toggles.calling and
    snd.bashing.old_target ~= snd.bashing.target and
    snd.bashing.target ~= "none"
  then
    --snd.send("wt target: " .. snd.bashing.target)  -- comment this out to keep from calling web targets
  end
  snd.core()
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>class bashing functions</name>
						<packageName></packageName>
						<script>
snd.class_list = {
{class = "Templar", func = function(current) snd.templar_bash() end},
{class = "Luminary", func = function(current) snd.luminary_bash() end}, 
{class = "Earthcaller", func = function(current) snd.earthcaller_bash() end}, 
{class = "Ascendril", func = function(current) snd.ascendril_bash() end},
{class = "Bloodborn", func = function(current) snd.bloodborn_bash() end},
{class = "Zealot", func = function(current) snd.zealot_bash() end}, 
{class = "Ravager", func = function(current) snd.ravager_bash() end}, 
{class = "Shaman", func = function(current) snd.shaman_bash() end}, 
{class = "Sentinel", func = function(current) snd.sentinel_bash() end}, 
{class = "Monk", func = function(current) snd.monk_bash() end}, 
{class = "Wayfarer", func = function(current) snd.wayfarer_bash() end},
{class = "Syssin", func = function(current) snd.syssin_bash() end}, 
{class = "Shapeshifter", func = function(current) snd.shapeshifter_bash() end}, 
{class = "Archivist", func = function(current) snd.archivist_bash() end}, 
{class = "Sciomancer", func = function(current) snd.sciomancer_bash() end}, 
{class = "Teradrim", func = function(current) snd.teradrim_bash() end}, 
{class = "Tidesage", func = function(current) snd.tidesage_bash() end}, 
{class = "Praenomen", func = function(current) snd.praenomen_bash() end},  
{class = "Akkari", func = function(current) snd.akkari_bash() end},
{class = "Indorani", func = function(current) snd.indorani_bash() end}, 
{class = "Oneiromancer", func = function(current) snd.oneiromancer_bash() end}, 
{class = "Carnifex", func = function(current) snd.carnifex_bash() end},
{class = "Revenant", func = function(current) snd.revenant_bash() end},
{class = "Warden", func = function(current) snd.warden_bash() end},
{class = "Bard", func = function(current) snd.bard_bash() end},
{class = "Alchemist", func = function(current) snd.alchemist_bash() end},
{class = "Runecarver", func = function(current) snd.runecarver_bash() end},
{class = "None", func = function(current) snd.astral_bash() end},
}

function snd.bashing_function()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

  if not snd.room_clear then return end
    if not snd.waiting.queue then
      if not snd.bashing.targeted then
        snd.runBasher()
      else
        battack = ""
        for k,v in pairs(snd.class_list) do
          if snd.class_list[k].class == snd.class then
            v.func()
            if snd.have_aff("shock") then
                battack = "overdrive"..snd.sep..battack
            end
          end
        end
        if tonumber(snd.toggles.gauntlet_level) &gt;= 2 and snd.balance.barrier and not snd.liarstrummed then 
          if snd.elementalcount &lt; 50 then
            battack = battack..snd.sep.."absorb ylem" ..snd.sep       
          else
            battack = "sacrifice corpses"..snd.sep..battack..snd.sep.."absorb ylem"..snd.sep
          end
        else
          if snd.elementalcount &lt; 50 then
            battack = battack
          else
            battack = "sacrifice corpses"..snd.sep..battack
          end
        end
        if snd.probed then
        else
          if gmcp.Room.Info.area == "Tcanna Island" or gmcp.Room.Info.area == "Drakuum"  or gmcp.Room.Info.area == "the Torturers' Caverns" then   
            battack = "probe "..snd.bashing.target..snd.sep..battack
          end
        end
        if tonumber(gmcp.Char.Vitals.bleeding) &gt; 500 and hasSkill("Clotting") then
          if mp &gt;= 50 then
            battack = battack..snd.sep.."clot 500"..snd.sep
          end  
        end          
             
        if battack ~= snd.last_attack and snd.ylem_check == false then
        snd.last_attack = battack
        snd.send("qeb stand"..snd.sep..snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end
end



function snd.templar_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

  if snd.counterattack_active then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."touch shield"
    end
  elseif hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.wielded.left.name:find("warhammer") or snd.wielded.left.name:find("bastard") then
      battack = battack..snd.sep.."battlefury dsw "..snd.bashing.target.." sacrifice sacrifice"
    else
      battack = battack..snd.sep.."battlefury dsk "..snd.bashing.target.." sacrifice sacrifice"
    end
	elseif snd.pushattack then
		battack = battack.. "push "..snd.bashing.target
		snd.pushattack = false
	elseif snd.toggles.newbie then
		battack = battack.. "strikebash "..snd.bashing.target
  elseif snd.wielded.left.name:find("warhammer") or snd.wielded.left.name:find("bastard") then
    battack = battack.. "dsw "..snd.bashing.target
  else
  	battack = battack.. "dsk "..snd.bashing.target
	end
  
end

function snd.revenant_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

  if snd.counterattack_active then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."touch shield"
    end
  elseif hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then  
    if snd.wielded.left.name:find("warhammer") or snd.wielded.left.name:find("bastard") then
      battack = battack..snd.sep.."fell "..snd.bashing.target.." duskosa duskosa"
    else
      battack = battack..snd.sep.."dpl "..snd.bashing.target.." duskosa duskosa"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
	elseif snd.toggles.newbie then
		battack = battack..snd.sep.."rivebash "..snd.bashing.target
  elseif snd.wielded.left.name:find("warhammer") or snd.wielded.left.name:find("bastard") then
    battack = battack..snd.sep.."fell "..snd.bashing.target
  else
  	battack = battack..snd.sep.."dpl "..snd.bashing.target
	end
 
end

function snd.luminary_bash()

hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."angel aura me"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
	elseif snd.toggles.lightning then
  	battack = battack..snd.sep.."evoke lightning "..snd.bashing.target
 	else
  	battack = battack..snd.sep.."smite "..snd.bashing.target
 	end
  
end

function snd.earthcaller_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."OSSO RIBCAGE me"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  elseif snd.toggles.lightning then
  	battack = battack..snd.sep.."TECTONIC ASHFALL "..snd.bashing.target
 	else
  	battack = battack..snd.sep.."quash "..snd.bashing.target.." secret"
 	end
  
end

function snd.monk_bash()

hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

  if mp &gt;= 30 and hp &lt;= 75 and snd.transmutation then
    battack = battack..snd.sep.."transmute mana 1000"..snd.sep
    tempTimer(2,[[snd.transmutation = true]])
  end
  
  if not snd.numbness_used then
    if hp &lt;= 70 then
        battack = battack..snd.sep.."numb"..snd.sep
    end
  end

  if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  elseif snd.stance ~= "scorpion" and not snd.toggles.cobra then
    battack = battack..snd.sep.."scs"..snd.sep
  elseif snd.toggles.cobra then
    if snd.stance ~= "cobra" then
      battack = battack..snd.sep.."cbs"
    else
      battack = battack..snd.sep.."combo "..snd.bashing.target.." sdk sdk"
    end
  else 
    battack = battack..snd.sep.."combo "..snd.bashing.target.." sdk ucp ucp"
  end

end

function snd.shaman_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)

  if snd.familiar and snd.balance.morph then
    if snd.shamanpet == "bear" then
      battack = battack..snd.sep.."order spirit passive"..snd.sep.."familiar morph spider"..snd.sep
    elseif snd.shamanpet == "spider" then
      battack = battack..snd.sep.."order spirit passive"..snd.sep.."familiar morph bear"..snd.sep
    else
      battack = battack..snd.sep.."order spirit passive"..snd.sep.."familiar morph bear"..snd.sep
    end
  else
    battack = battack..snd.sep.."familiar recall"..snd.sep.."order spirit passive"..snd.sep.."order spirit follow me"..snd.sep
  end

  if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  else
    if wp&gt;=45 and tonumber(gmcp.Char.Vitals.energy) &gt; 3 then
      battack = battack..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.bashing.target
    else
      battack = battack..snd.sep.."commune lightning "..snd.bashing.target
    end 
  end
  
end

function snd.sentinel_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

  if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  elseif snd.toggles.newbie then
  	battack = battack..snd.sep.."dhuriv combo "..snd.bashing.target.." slash stab"
 	else
  	battack = battack..snd.sep.."dhuriv combo "..snd.bashing.target.." crosscut thrust"
 	end
  
end

function snd.wayfarer_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

  if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."fury sustain"
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  else
    battack = battack..snd.sep.."fury sustain"..snd.sep.."axe chop "..snd.bashing.target
	end
  
end

function snd.syssin_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  elseif not snd.toggles.newbie then
 		if snd.defenses.def_hiding.state == "deffed" then
	 		battack = battack..snd.sep.."backstab "..snd.bashing.target
		else
   		battack = battack..snd.sep.."bite "..snd.bashing.target.." camus"
		end
 	else
  	if snd.defenses.def_hiding.state == "deffed" then
	 		if snd.wielding("dirk") then
	  		battack = battack..snd.sep.."backstab "..snd.bashing.target
	 		else
	  		battack = battack..snd.sep.."quickwield right dirk"..snd.sep.."backstab "..snd.bashing.target
	 		end
		else
	 		if snd.wielding("whip") then
	  		battack = battack..snd.sep.."garrote "..snd.bashing.target
	 		else
    		battack = battack..snd.sep.."quickwield left whip"..snd.sep.."garrote "..snd.bashing.target
	 		end
		end
 	end
  
end

function snd.shapeshifter_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

  if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  else
    battack = battack..snd.sep.."combo "..snd.bashing.target.." slash slash"
	end
  
end

function snd.indorani_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    elseif hp &lt;= 55 then
      battack = "fling priestess at me"..snd.sep.."recoup"
    else
      battack = battack..snd.sep.."touch shield"..snd.sep.."recoup"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target..snd.sep.."recoup"
		snd.pushattack = false
  else
    if snd.wielded.left.name =="bonedagger" or snd.wielded.right.name == "bonedagger" then
      battack = battack..snd.sep.."flick bonedagger at "..snd.bashing.target..snd.sep.."recoup"
    else
      battack = "decay "..snd.bashing.target..snd.sep.."recoup"
    end
	end
  
end

function snd.oneiromancer_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    elseif hp &lt;= 55 then
      battack = "unfurl flower at me"..snd.sep.."recoup"
    else
      battack = battack..snd.sep.."touch shield"..snd.sep.."recoup"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target..snd.sep.."recoup"
		snd.pushattack = false
  else
    if snd.wielded.left.name == "athame" or snd.wielded.right.name == "athame" then
      battack = battack..snd.sep.."impel athame at "..snd.bashing.target..snd.sep.."recoup"
    else
      battack = "starlight "..snd.bashing.target..snd.sep.."recoup"
    end
	end
  
end

function snd.carnifex_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

  if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  else
    battack = battack..snd.sep.."hammer doublebash "..snd.bashing.target
  end
  
end

function snd.warden_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  else
    battack = battack..snd.sep.."warden maul "..snd.bashing.target
  end
  
end

function snd.archivist_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
bioessence = tonumber(gmcp.Char.Vitals.bio) 
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if not snd.knit then
      battack = battack..snd.sep.."bio knitting"
		elseif not snd.balance.ethereal then
			battack = battack..snd.sep.."bio ethereal"
    elseif snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
	else
    battack = battack..snd.sep.."incite crux "..snd.bashing.target
	end
end

function snd.zealot_bash()

hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)

  if tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 and snd.cauterize and mp &gt;= 15 then
    if not snd.punisher and snd.shield_check then
      battack = "touch shield"..snd.sep
    else
      battack = "enact cauterize me"..snd.sep
      snd.cauterize = false
      tempTimer(2,[[snd.cauterize = true]])
    end
  end
  
  if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			   battack = battack..snd.sep.."point wand at me"
      elseif wp &gt;= 35 and mp &gt;= 30 then
        battack = battack..snd.sep.."respiration"
      else
        battack = battack..snd.sep.."jig"
      end
    else
      if wp &gt;= 35 and mp &gt;= 30 then
        battack = battack..snd.sep.."respiration"
      else
        battack = battack..snd.sep.."touch shield"
      end
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  else
    battack = battack.."flow "..snd.bashing.target.." pummel pummel"
  end

end

function snd.ravager_bash()

hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)

  if tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 and snd.cauterize and mp &gt;= 15 then
    battack = "enact prolong me"..snd.sep
    snd.cauterize = false
    tempTimer(2,[[snd.cauterize = true]])
  end

  if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 then
    if snd.punisher then
      if wp &gt;= 35 and mp &gt;= 30 then
        battack = battack..snd.sep.."seethe"
      else
        battack = battack..snd.sep.."jig"
      end
    else
      if wp &gt;= 35 and mp &gt;= 30 then
        battack = battack..snd.sep.."seethe"
      else
        battack = battack..snd.sep.."touch shield"
      end
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  else
    battack = battack..snd.sep.."onslaught "..snd.bashing.target.." bully bully"
  end

end

function snd.praenomen_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      if wp &gt;= 45 and mp &gt;= 50 and snd.balance.mend and hasSkill("Mending") then
        battack = battack..snd.sep.."mend"
      else
        battack = battack..snd.sep.."jig"
      end
    elseif wp &gt;= 45 and mp &gt;= 50 and snd.balance.mend and hasSkill("Mending") then
			battack = battack..snd.sep.."mend"
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
	else
		battack = battack..snd.sep.."frenzy "..snd.bashing.target
	end
  
end

function snd.akkari_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			   battack = battack..snd.sep.."point wand at me"
      elseif wp &gt;= 45 and mp &gt;= 50 and snd.balance.mend and hasSkill("Vivify") then
        battack = battack..snd.sep.."vivify"
      else
        battack = battack..snd.sep.."jig"
      end
    else
      if wp &gt;= 45 and mp &gt;= 50 and snd.balance.mend and hasSkill("Vivify") then
        battack = battack..snd.sep.."vivify"
      else
        battack = battack..snd.sep.."touch shield"
      end
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
	else
		battack = battack..snd.sep.."denounce "..snd.bashing.target
	end
  
end

function snd.teradrim_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
endur = 100*(gmcp.Char.Vitals.ep/gmcp.Char.Vitals.maxep)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."sand shield me"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  elseif snd.balance.momentum and endur&lt;=45 then
    battack = battack..snd.sep.."earth momentum "..snd.sep.."earth batter "..snd.bashing.target..snd.sep.."golem recover"
  else 
    battack = battack..snd.sep.."earth batter "..snd.bashing.target..snd.sep.."golem recover"
  end
end

function snd.ascendril_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  if snd.reflection_charge == 3 then
    snd.reflected = false
  end
  
	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			   battack = battack..snd.sep.."cast reflection"
      else
        battack = battack..snd.sep.."jig"
      end
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  else
    if gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "" or gmcp.Char.Vitals.resonance == "air"  then
   		battack = battack..snd.sep.."cast frostblade "..snd.bashing.target
    elseif gmcp.Char.Vitals.resonance == "water" then
   		battack = battack..snd.sep.."cast firelash "..snd.bashing.target
    elseif gmcp.Char.Vitals.resonance == "fire" then
    	battack = battack..snd.sep.."cast windlance "..snd.bashing.target
    end
	end
  
end
function snd.bloodborn_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  if snd.reflection_charge == 3 then
    snd.reflected = false
  end
  
	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			   battack = battack..snd.sep.."unleash geminate"
      else
        battack = battack..snd.sep.."jig"
      end
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  else
    if gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "" or gmcp.Char.Vitals.resonance == "yellow"  then
   		battack = battack..snd.sep.."humour flense "..snd.bashing.target
    elseif gmcp.Char.Vitals.resonance == "phlegm" then
   		battack = battack..snd.sep.."humour disgorge "..snd.bashing.target
    elseif gmcp.Char.Vitals.resonance == "black" then
    	battack = battack..snd.sep.."humour befoul "..snd.bashing.target
    end
	end
  
end

function snd.sciomancer_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  if snd.reflection_charge == 3 then
    snd.reflected = false
  end
  
  if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			   battack = battack..snd.sep.."cast reflection"
      else
        battack = battack..snd.sep.."jig"
      end
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
	elseif snd.toggles.newbie then
  	  battack = battack..snd.sep.."cast ruin "..snd.bashing.target
 	else
		if table.contains(gmcp.Char.Defences.List, "shadow_mantle") then
      if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
        battack = battack..snd.sep.."shadowprice gloom " ..snd.bashing.target..snd.sep.."cast fever "..snd.bashing.target
      else
        battack = battack..snd.sep.."cast fever " ..snd.bashing.target
      end
    else
      if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 2 then
        battack = battack..snd.sep.."shadowprice gloom " ..snd.bashing.target..snd.sep.."cast fever "..snd.bashing.target
      else
        battack = battack..snd.sep.."cast fever " ..snd.bashing.target
      end
    end
 	end
  
end

function snd.bard_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."sing song of youth"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
	else
    if tonumber(gmcp.Char.Vitals.dithering) &gt; 0 then
		  battack = battack..snd.sep.."tempo "..snd.bashing.target
    else
      battack = battack..snd.sep.."weave tearing "..snd.bashing.target
    end
	end
  
end

function snd.tidesage_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."fog harden me"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  else
    battack = battack..snd.sep.."tide clobber "..snd.bashing.target
    if snd.defenses.def_hightide.state == "down" then
      battack = battack..snd.sep.."synth recuperate"
    end
  end
  
end

function snd.alchemist_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

	if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      battack = battack..snd.sep.."jig"
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
  else
		battack = battack..snd.sep.."alchemy catalyse"..snd.sep.."alchemy virulent "..snd.bashing.target
	end
  
end

function snd.astral_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  if snd.reflection_charge == 3 then
    snd.reflected = false
  end

  if tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if mp &gt;= 50 then
      if snd.shield_check and not snd.punisher then
        battack = "clot 500"..snd.sep.."touch shield"
      else
        battack = "clot 500"
      end
    end
	elseif snd.counterattack_active or snd.have_aff("blackout") then
    if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			   battack = "point wand at me"
      else
        if snd.balance.barrier and not snd.liarstrummed then
          battack = "strum lyre"
          snd.liarstrummed = true
          tempTimer(1.5,[[snd.liarstrummed = false]])
        else
          battack = "jig"
        end
      end
    else
      battack = "touch shield"
    end
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
  elseif (hp &lt;= 75 or snd.have_aff("paresis") or snd.have_aff("asthma") or snd.have_aff("slickness") or snd.have_aff("aeon")) and not snd.self_prone() then
    battack = "astral ambrosia"
	else
    if snd.counterattack_active then
      battack = battack.."jig"
    else
    	battack = "astral evert "..snd.bashing.target
    end
 	end
end

function snd.runecarver_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  if snd.reflection_charge == 3 then
    snd.reflected = false
  end
  
  if snd.counterattack_active or snd.have_aff("blackout") or hp &lt;= 75 or tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			   battack = battack..snd.sep.."runecarve branch"
      else
        battack = battack..snd.sep.."jig"
      end
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.pushattack then
		battack = battack..snd.sep.."push "..snd.bashing.target
		snd.pushattack = false
	elseif snd.toggles.newbie then
  	  battack = battack..snd.sep.."hex enervate "..snd.bashing.target
 	else
		if table.contains(gmcp.Char.Defences.List, "hex_preservation") then
      if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
        battack = battack..snd.sep.."spiritpact despair " ..snd.bashing.target..snd.sep.."hex fever "..snd.bashing.target
      else
        battack = battack..snd.sep.."hex fever " ..snd.bashing.target
      end
    else
      if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 2 then
        battack = battack..snd.sep.."spiritpact despair " ..snd.bashing.target..snd.sep.."hex fever "..snd.bashing.target
      else
        battack = battack..snd.sep.."hex fever " ..snd.bashing.target
      end
    end
 	end
  
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="no" isFolder="no">
						<name>Rock Runner</name>
						<packageName></packageName>
						<script>function snd.runRock()

   if bot.going then
      expandAlias("move", false)
    end

  snd.core()
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Generic bashing targets</name>
						<packageName></packageName>
						<script>
function generic_bashing_name(mob)

  local area = gmcp.Room.Info.area
  local target = ""
  if snd.generic_bashing_table_by_area[area] then 
    target = snd.generic_bashing_table_by_area[area] 
  elseif snd.generic_bashing_table_specific_names[mob] then
    target = snd.generic_bashing_table_specific_names[mob]
  else
    for k, v in ipairs(snd.generic_bashing_table_duplicate_names) do
     if string.match(' '.. mob:lower() ..' ', '%A'.. v ..'%A') ~= nil then
      target = v
     end
    end
  end
  
  return target
end


snd.generic_bashing_table_by_area = {
  ["the Forgotten Dome"] = "kelki",
  ["Xaanhal"] = "xorani",
  ["Luzith's Lair"] = "spider",
  ["the Bloodwood"] = "spirit",
  ["the Fractal Bloom"] = "entity",
  ["the Ayhesa Cliffs"] = "spellshaper",
  ["the Caverns of Mor"] = "undead",
  ["the Sparklight Rift"] = "elemental",
  ["the Centipede Cave"] = "centipede",
  ["the Teshen Caldera"] = "teshen",
  ["a snake pit"] = "snake",
}


snd.generic_bashing_table_specific_names = {
  ["a monstrous Carnifex guard"] = "carnifex",
  ["a fluffy jambaali"] = "jambaali",
  ["a howler monkey"] = "monkey",
  ["a spunky white tamarin"] = "tamarin",
  ["a beautiful wild horse"] = "horse",
  ["a white-tailed deer"] = "deer",
  ["a tiny hatchling"] = "hatchling",
  ["a school of spinebacks"] = "spinebacks",
  ["a Masilidean physicalist"] = "physicalist",
  ["a bemused artist"] = "artist",
  ["a deputy constable"] = "constable",
  ["a stonescale mephit"] = "mephit",
  ["a soulless pixie"] = "pixie",
  ["a playful oniro"] = "oniro",
  ["a Dwarven craftsman"] = "craftsman",
  ["a petrified treant"] = "treant",
  ["a fanged lugore"] = "lugore",
  ["a white hen"] = "hen",
  ["a piece of an amalgamation"] = "piece",
  ["a ball of chitinous legs"] = "legs",
  ["a rabid plant"] = "plant",
  ["a pungent lichosphere"] = "lichosphere",
  ["Igrar, Captain of the Gral"] = "igrar",
  ["the impish outcast, Qezirath"] = "qezirath",
  ["a large, snowy fox"] = "fox",
  ["a scything skitterer"] = "skitterer",
  ["a stonescale ravager"] = "ravager",
  ["a shambling fungal abomination"] = "abomination",
  ["a stalwart templar"] = "templar",
  ["a horrid basilwyrm"] = "basilwyrm",
  ["a chittering chicken"] = "chicken",
  ["a Dwarven boy"] = "dwarf",
  ["a lanky, Trollish witch doctor"] = "troll",
  ["a massive orgyuk"] = "orgyuk",
  ["an energetic orangutan"] = "orangutan",
  ["a rot-infested swordfish"] = "swordfish",
  ["a vast ochre ooze"] = "ooze",
  ["an ogre berserker"] = "ogre",
  ["a giant squid"] = "squid",
  ["an amorphous black umbra"] = "umbra",
  ["a swarm of tsetse flies"] = "flies",
  ["a male gorilla"] = "gorilla",
  ["a naive neo-Ankyrean"] = "neo-ankyrean",
  ["a bald eagle"] = "eagle",
  ["a vicious horned garwhol"] = "garwhol",
  ["a Masilidean etherealist"] = "etherealist",
  ["a guard pig"] = "pig",
  ["an irritated crow"] = "crow",
  ["a black and white badger"] = "badger",
  ["a lithe cougar"] = "cougar",
  ["a serpentine couatl"] = "couatl",
  ["a barnacle-encrusted oyster"] = "oyster",
  ["a long-toothed beaver"] = "beaver",
  ["a tentacled morbol"] = "morbol",
  ["a frazzled-looking possum"] = "possum",
  ["a battle-worn Ascendril"] = "ascendril",
  ["a fetish-decorated shaman"] = "shaman",
  ["a burly, stone-fisted laborer"] = "laborer",
  ["Mellias, an elegant Tsol'aa consanguine"] = "consanguine",
  ["a boisterous Imp boy"] = "imp",
  ["a slender, female arachnoid"] = "arachnoid",
  ["a moth"] = "moth",
  ["a chaos storm"] = "storm",
  ["a large gray and black dugger"] = "dugger",
  ["a black-spotted cow"] = "cow",
  ["a black ram"] = "ram",
  ["a gnat"] = "gnat",
  ["a splintering earthrager"] = "earthrager",
  ["a willowy nest guardian"] = "guardian",
  ["Gwenil, the Dwarven blacksmith"] = "dwarf",
  ["a tree frog"] = "frog",
  ["a Masilidean mentalist"] = "mentalist",
  ["a spindly village alpha"] = "alpha",
  ["a corrupted hackle"] = "hackle",
  ["a poisonous purple lora"] = "lora",
  ["an iridescent tizapez"] = "tizapez",
  ["Sentinel Rozhirr"] = "rozhirr",
  ["a panther-like Rajamala"] = "rajamala",
  ["a chaos orb"] = "orb",
  ["Muiran, a trapper"] = "muiran",
  ["a handsom nayar"] = "nayar",
  ["a lava daemon"] = "daemon",
  ["a glowing lava daemon"] = "daemon",
  ["a long billed toucan"] = "toucan",
  ["a shadowy, mindless demon"] = "demon",
  ["a chimera"] = "chimera",
  ["an enchanting meayan"] = "meayan",
  ["a slimy aryeim"] = "aryeim",
  ["a malevolent spectre"] = "spectre",
  ["an enormous anaconda"] = "anaconda",
  ["a rebellious rancher"] = "rancher",
  ["a rabid blood-fiend"] = "blood-fiend",
  ["a strong pine"] = "pine",
  ["insubstantial whispers"] = "whispers",
  ["a Dwarven archeologist"] = "dwarf",
  ["Head Foreman Cadric"] = "cadric",
  ["an ethereal firelord"] = "firelord",
  ["Quartermaster Kuius"] = "kuius",
  ["a foul-smelling zombie"] = "zombie",
  ["a shrieking grimshrill"] = "grimshrill",
  ["a cloud of fungal spores"] = "spores",
  ["a spatial anomaly"] = "anomoly",
  ["a Troll cook"] = "cook",
  ["a swarm of black beetles"] = "beetles",
  ["an opossum"] = "opossum",
  ["Blacksmith Udhomentesh"] = "udhomentesh",
  ["a banded scrubland racer"] = "racer",
  ["a black rhinoceros"] = "rhinoceros",
  ["a ruffled grouse"] = "grouse",
  ["Tuera, the torturer"] = "tuera",
  ["a willow sappling"] = "willow",
  ["Tohrul, the Dwarven supervisor"] = "dwarf",
  ["a demonic screamer"] = "screamer",
  ["Edgar, the gardener"] = "edgar",
  ["a silent reed cat"] = "cat",
  ["a monstrous arachnid"] = "arachnid",
  ["a tower watchman"] = "watchman",
  ["Elenina, the astrologer"] = "elenina",
  ["a field hauler"] = "hauler",
  ["Morrid, a village elder"] = "morrid",
  ["a bloodleech"] = "bloodleech",
  ["silver-feathered orel"] = "orel",
  ["a victimised intruder"] = "intruder",
  ["Foreman Grummosh"] = "grummosh",
  ["Deorkaan, the Hlugna smithy"] = "deorkaan",
  ["a warden of the Hlugnic clans"] = "warden",
  ["a blackened darkwalker"] = "darkwalker",
  ["a school of piranha"] = "piranha",
  Jehanne = "jehanne",
  ["an insignificant lime caterpillar"] = "caterpillar",
  ["a humbug"] = "humbug",
  ["a ravenous locust"] = "locust",
  ["a shadowdrop"] = "shadowdrop",
  ["a mire pup"] = "pup",
  ["Commander Marakhi"] = "marakhi",
  ["Foreman Dugan"] = "dugan",
  ["a monstrous coelacanth"] = "coelacanth",
  ["a brown rockling"] = "rockling",
  ["a magpie"] = "magpie",
  ["a severed male head"] = "head",
  ["Lassorn, a village cooper"] = "lassorn",
  ["a large buck"] = "buck",
  ["a soft-shelled klikkin"] = "klikkin",
  ["a green slime"] = "slime",
  ["a lake trout"] = "trout",
  ["a blackbird"] = "blackbird",
  ["a Hlugnic runeguard"] = "runeguard",
  ["a crazed blood-fiend"] = "blood-fiend",
  ["a mutated blood-fiend"] = "blood-fiend",
  ["a Mamashi lioness"] = "lioness",
  ["a large bhfaol"] = "bhfaol",
  ["a spotted jaguar"] = "jaguar",
  ["a winged fungal horror"] = "horror",
  ["a burrowing owl"] = "owl",
  ["a squat penguin"] = "penguin",
  ["an agile Sentaari monk"] = "monk",
  ["a grotesque fangtooth"] = "fangtooth",
  ["a dark green alligator"] = "alligator",
  ["a colorful toucan"] = "toucan",
  ["a Bloodloch soldier"] = "soldier",
  ["a djeirani ghost"] = "ghost",
  ["a striped tzatica"] = "tzatica",
  ["a cave-dwelling avisme"] = "avisme",
  ["a pious invoker"] = "invoker",
  ["a brawny glaive knight"] = "knight",
  ["a vile inquisitor"] = "inquisitor",
  ["a student of the lich"] = "student",
  ["a fragment of living glass"] = "fragment",
  ["the Dwarven alemaster"] = "alemaster",
  ["a bubonis"] = "bubonis",
  ["a dull brown lamprey"] = "lamprey",
  ["a burly lumberjack"] = "lumberjack",
  ["a fiery phenkyre"] = "phenkyre",
  ["a large, juicy cavehopper"] = "cavehopper",
  ["Nolid, the Dwarven fisherman"] = "fisherman",
  ["a voracious blind-fish"] = "blind-fish",
  ["a disembodied soul"] = "soul",
  ["a lithe weasel"] = "weasel",
  ["a lurking shadow"] = "shadow",
  ["a dwarven boy"] = "boy",
  ["a mottled green bullfrog"] = "bullfrog",
  ["a tenacious tough"] = "tough",
  ["a glossy black silk-spinner"] = "silk-spinner",
  ["a gigantic fungal strider"] = "strider",
  ["a Masilidean focus"] = "focus",
  ["a five-tentacled octopus of jade"] = "octopus",
  ["a Dwarven excavator"] = "excavator",
  ["a zombie cleric"] = "cleric",
  ["a draconic zogura"] = "zogura",
  ["Head Archeologist, Dolus"] = "dolus",
  ["Lieutenant Chiakhi"] = "chiakhi",
  ["an immense Trollish chieftain"] = "chieftain",
  ["a sering Sycophant"] = "sycophant",
  ["a field monitor"] = "monitor",
  ["a white-coated chinchilla"] = "chinchilla",
  ["a pathfinder"] = "pathfinder",
  ["a brown and tan python"] = "python",
  ["an unctuous creepling"] = "creepling",
  ["Moritsio, Owner of the Pub"] = "moritsio",
  ["Baruin, the Dwarven mason"] = "baruin",
  ["Maeron, the Quartermaster"] = "maeron",
  ["a decaying donkey"] = "donkey",
  ["a field harvester"] = "harvester",
  ["a gamey goat"] = "goat",
  ["Lesiv, the Torstonite chieftain"] = "lesiv",
  ["a malevolent poltergeist"] = "poltergeist",
  ["a short-horned chamois"] = "chamois",
  ["Laoghaire, the monitor"] = "laoghaire",
  ["Lieutenant Gharvoi"] = "gharvoi",
  ["a rock devil"] = "devil",
  ["the Dwarven miller"] = "miller",
  ["a tall chempala"] = "chempala",
  ["Administrator Kamakshi"] = "kamakshi",
  ["a carefree Grook boy"] = "boy",
  ["an oversized efreeti"] = "efreeti",
  ["a gargantuan cicada"] = "cicada",
  ["a large, deepwater salmon"] = "salmon",
  ["Midolo Raim"] = "midolo",
  ["General Abeshentesh"] = "abeshentesh",
  ["a mutilated creature"] = "creature",
  ["a corrupted cultist"] = "cultist",
  ["a diminutive necromancer"] = "necromancer",
  ["a choke creeper"] = "creeper",
  ["a wealthy sailor"] = "sailor",
  ["a savage mutant pumpkin"] = "pumpkin",
  ["a white-collared lemming"] = "lemming",
  ["Hassik, the village elder"] = "elder",
  Firthar = "firthar",
  ["Mala, the Artisan"] = "mala",
  ["a darkened soul"] = "soul",
  ["a mass of deadly trap spiders"] = "spider",
  ["a darkling"] = "darkling",
  ["Broondac, the vampire strategist"] = "broondac",
  ["a radiant lumore"] = "lumore",
  ["an irritable, rabid zebra"] = "zebra",
  ["a snowy armadilleon"] = "armadilleon",
  ["a lithe buckawn"] = "buckawn",
  ["a furry coatimundi"] = "coatimundi",
  ["Gunder, a retired sailor"] = "gunder",
  ["Fermian, excavation foreman"] = "fermian",
  ["a poisonous water moccasin"] = "moccasin",
  ["a serpentine blademistress"] = "blademistress",
  ["a shadow ray"] = "ray",
  ["a rotund, white ptarmigan"] = "ptarmigan",
  ["a mutilated humanoid"] = "humanoid",
  ["a grizzly foreman"] = "foreman",
  ["a razor nahuac"] = "nahuac",
  ["a young foal"] = "foal",
  ["a school of shadowy minnows"] = "minnows",
  ["a striped sea krait"] = "krait",
  ["a tiny aurivv bug"] = "bug",
  ["a shivering jackrabbit"] = "jackrabbit",
  ["a soulmaster"] = "soulmaster",
  ["a vampiric overseer"] = "vampire",
  ["a carnivorous weed"] = "weed",
  ["a scarlet macaw"] = "macaw",
  ["a great white stag"] = "stag",
  ["a lithe black panther"] = "panther",
  ["an orange-and-yellow stripped starfish"] = "starfish",
  ["an oversized tortoise"] = "tortoise",
  ["a bound shade"] = "shade",
  ["a small ocelot"] = "ocelot",
  ["a suspicious Xorani patrol"] = "xorani",
  ["a slime-encrusted spitter"] = "spitter",
  ["an ecru axolotl"] = "axolotl",
  ["a serpentine jawsnapper"] = "jawsnapper",
  ["a foul spiderling"] = "spiderling",
  ["a slender synicant"] = "synicant",
  ["a giant mosquito"] = "mosquito",
  ["a katydid"] = "katydid",
  ["a malformed beast"] = "beast",
  ["a nightmare shadow"] = "shadow",
  ["a white gyrfalcon"] = "gyrfalcon",
  ["a dervish"] = "dervish",
  ["Tirahl the Necromancer"] = "tirahl",
  ["a savage shade"] = "shade",
  ["a scheming terramancer"] = "terramancer",
  ["a plump duck"] = "duck",
  ["a nimble sentinel"] = "sentinel",
  ["a massive argobole"] = "argobole",
  ["Shanea, a village elder"] = "shanea",
  ["a withered crone"] = "crone",
  ["an elderly Dwarven gardener"] = "gardener",
  ["a slender mud adder"] = "adder",
  ["a white tailed doe"] = "doe",
  ["a disgustingly warped missionary"] = "missionary",
  ["a speckled tinyok"] = "tinyok",
  ["a misty apparition"] = "apparition",
  ["a wild-eyed scientist"] = "scientist",
  ["a slender forager"] = "forager",
  ["a green slime toad"] = "toad",
  ["a small, ruddy turnstone"] = "turnstone",
  ["a shadow"] = "shadow",
  ["Mayor Thurgil Redstein"] = "thurgil",
  ["an oversized earthworm"] = "earthworm",
  ["a warden of the Hlugnic clans"] = "warden",
  ["an enormous Troll bandit"] = "bandit",
  ["Nysaac"] = "nysaac",
  ["a cave basilisk"] = "basilisk",
  ["an Ursal elite guard"] = "ursal",
  ["a blindfolded Utari"] = "utari",
  ["an agitated basilisk"] = "basilisk",
  ["an Utari warrior"] = "utari",
  ["an Ursal swordsman"] = "swordsman",
  ["a Caentoi rogue"] = "rogue",
  ["a Tarpen bombardier"] = "bombardier", 
  ["a Golba brute"] = "brute",
  ["a skulking Golban scout"] = "scout",
  ["a fleet-footed Caentoi scout"] = "scout", 
  ["an oversized, grey basilisk"] = "basilisk", 
  ["an armored, brown basilisk"] = "basilisk", 
  ["a spiked basilisk"] = "basilisk", 
  ["a grey and brown basilisk"] = "basilisk", 
  ["a blinded basilisk"] = "basilisk", 
  ["a juvenile basilisk"] = "basilisk", 
  ["a basilisk hatchling"] = "basilisk", 
  ["a spine-necked arrex"] = "arrex", 
  ["a sabre-toothed abosvi"] = "abosvi",
  ["a prowling barbed abosvi"] = "abosvi", 
  ["a gaunt Aslinn guard"] = "aslinn",
  ["an Aslinn slave catcher"] = "aslinn",
  ["a snarling vakmut warhound"] = "vakmut",
  ["a ravenous vakmut warhound"] = "vakmut", 
  ["a lithe Aslinn houndmaster"] = "aslinn",
  ["a wary Aslinn slaver"] = "aslinn", 
  ["a wretched Aslinn slaver"] = "aslinn",
  ["a cruel Aslinn guard"] = "aslinn",
  ["a menacing Aslinn gladiator"] = "aslinn",
  ["a scarred Aslinn gladiator"] = "aslinn",
  ["a gaunt Aslinn slaver"] = "slaver",
  ["a scarred Aslinn slaver"] = "slaver",
  ["a sinewy Aslinn slaver"] = "slaver",
  ["a haughty Caentoi slaver"] = "slaver",
  ["a hulking Ursal brute"] = "brute",
  ["a grim Aslinn slaver"] = "slaver",
  ["a large earth elemental"] = "elemental", 
  ["a large smoke elemental"] = "elemental", 
  ["a large fire elemental"] = "elemental",
  ["a mottled brown frog"] = "frog",
  ["a monstrous pike"] = "pike",
  ["a vibrantly pink flamingo"] = "flamingo", 
  ["a large sea turtle"] = "turtle", 
  ["a steel-grey barracuda"] = "barracuda", 
  ["a sleek hammerhead shark"] = "shark",
  ["a vicious, mutated shark"] = "shark",
  ["a hundred-strings jellyfish"] = "jellyfish",
  ["a horrifically deformed woodpecker"] = "woodpecker",
  ["a warped squirrel"] = "squirrel",
  ["a mutated deer"] = "deer",
  ["a rabid Hokkali drone"] = "drone",
  ["a feral Hokkali soldier"] = "soldier",
  ["a twisted Hokkali hunter"] = "hunter",
  ["a hideous Hokkali Queensguard"] = "guard",
  ["a freshly spawned Hokkali ambusher"] = "ambusher",
  ["a bulbous direant bomber"] = "bomber",
  ["a sleek direant scout"] = "scout",
  ["a chitinous direant soldier"] = "soldier",
  ["an agile direant worker"] = "worker",
  ["a grimy bandit"] = "bandit",
  ["a bandit leader"] = "leader",
  ["a dark-haired mole"] = "mole",
  ["a stalagmite rat"] = "rat",
  ["a massive, tunneling cave worm"] = "worm",
  ["a many-eyed marionette slime"] = "slime",
  ["a behemoth pit beast"] = "beast",
  ["a floating cave manta"] = "manta",
  ["a spotted cave salamander"] = "salamander",
  ["a fuzzy brown bat"] = "bat", 
  ["a rime-covered bear"] = "bear", 
  ["a long-jawed cave spider"] = "spider",
  ["a tangible malevolence"] = "malevolence",
}

snd.generic_bashing_table_duplicate_names = {
  "keeper",
  "eld",
  "snake",
  "bandit",
  "syll",
  "coyote",
  "kobold",
  "xorani",
  "gnome",
  "angel",
  "wildcat",
  "entity",
  "lion",
  "cragling",
  "woman",
  "centipede",
  "leper",
  "dwarf",
  "snail",
  "sheep",
  "dog",
  "sapling",
  "ghast",
  "priest",
  "priestess",
  "leopard",
  "blob",
  "slaver",
  "hound",
  "viper",
  "hunter",
  "scholar",
  "indorani",
  "experiment",
  "gremlin",
  "sycophant",
  "teshen",
  "wolf",
  "direwolf",
  "girl",
  "tiger",
  "hound",
  "bloodhound",
  "child",
  "officer",
  "spirit",
  "spellshaper",
  "warrior",
  "miner",
  "mhun",
  "kelki",
  "villager",
  "worm",
  "nazetu",
  "malevolence",
  "lich",
  "goblin",
  "fly",
  "dragonfly",
  "guard",
  "boru",
  "skeleton",
  "scorpion",
  "sentry",
  "capybara",
  "elemental",
  "snatcher",
  "tree",
  "eel",
  "boar",
  "shark",
  "bear",
  "buffalo", 
  "raccoon",
  "fish",
  "ghoul",
  "jellyfish",
  "lizard",
  "spider",
  "rattlesnake",
  "wolverine",
  "chiav",
  "squirrel",
  "trog",
  "catfish",
  "golem",
  "hare",
  "grub",
  "mit'olk",
  "harpy",
  "bat",
  "nalas",
  "mage",
  "mugyik",

  "troll",
  "rat",
  "bush",
  "farmer",
  "oak",
  "serpent",
  "minion",
  "crocodile",
  "bobcat",
  "servant",
  "blood-fiend",
  "elephant",
  "rojalli",
  "aberration",
  "goose",
  "turtle",
  "crab",
  "icewyrm",
  "man",
  "rabbit",
  "wraith",
  "elk",
  }</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Adv bashing route making + using</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Custom Basher Paths</name>
							<packageName></packageName>
							<script>function snd_createPather()
  local n = gmcp.Room.Info.num 
  sap_List = {}
  sap_Area = gmcp.Room.Info.area 
  snd.message("Path creation enabled for "..sap_Area.."; starting from v"..n..".")
  table.insert(sap_List, n)
end

function snd_patherAdd()
  local n = gmcp.Room.Info.num 
  if not sap_List then
    snd.message("Can't add rooms if you don't enable pather first. Use 'path create' to begin.")
  elseif not table.contains(sap_List, n) then
    table.insert(sap_List, n)
    snd.message("Added v"..n.." to path list. Total rooms thus far: "..#sap_List..".")
  else
    snd.message("Room is already in the list.")
  end
end

function snd_patherCompile()
  if #sap_List &lt; 10 then
    snd.message("The path size is far too small to be useful. Try making it bigger than 10 rooms, at least.")
    return
  end
  
  sunder_areaPaths = sunder_areaPaths or {}
  sunder_areaPaths[sap_Area] = {}
  
  local str = ""
  for x, n in pairs(sap_List) do
    if x == #sap_List then
      sunder_areaPaths[sap_Area]["v"..n] = "pthcity"
    else
      sunder_areaPaths[sap_Area]["v"..n] = ""..sap_List[x+1]..""
    end
  end
  snd.message("Created path for "..sap_Area..". You can now use it with 'goarea' if you want.")
  snd_saveAreas(true)
end

function snd_bashArea()
  local area = gmcp.Room.Info.area 
  if not sunder_areaPaths then
    snd.message("Area table not found.")
  elseif not sunder_areaPaths[area] then
    snd.message("Path not found for current area.")
  else
    snd.message("Let's bash out "..area.."!")
    bot.going = true
    bot.path = sunder_areaPaths[area]
    if not snd.toggles.fasthunt then
      expandAlias("ff")
    end    
    expandAlias("aa") 
  end
end

function snd_saveAreas(disp)
  sunder_areaPaths = sunder_areaPaths or {}

	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local paths_loc = getMudletHomeDir() .. separator .. "sunderBasherPaths"

	table.save(paths_loc, sunder_areaPaths)
	
	if disp then
		snd.message("Saved autopath information successfully.")
	end	
end

function snd_loadAreas()
	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local paths_loc = getMudletHomeDir() .. separator .. "sunderBasherPaths"

	if not io.exists(paths_loc) then 
		snd.message("Autopather table not found; will create the next time you try to make a path, or load mudlet.")
		return
	end

	--sunder_areaPaths = {}
	--table.load(paths_loc, sunder_areaPaths)
	snd.message("Autopather table found and successfully loaded in.")

end

--registerAnonymousEventHandler("sysDisconnectionEvent", "snd_saveAreas", true)
--registerAnonymousEventHandler("sysLoadEvent", "snd_loadAreas")

function snd_walkArea()
  local area = gmcp.Room.Info.area 
  if not sunder_areaPaths then
    snd.message("Area table not found.")
  elseif not sunder_areaPaths[area] then
    snd.message("Path not found for current area.")
  else
    snd.message("Walking through "..area.."!")
    bot.going = true
    bot.path = sunder_areaPaths[area]
  end
end

</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Custom bashing route making</name>
							<packageName></packageName>
							<script>function snd_bashAreas(areas_chosen)
  local areas = string.split(areas_chosen, ", ")
  local num_areas = #areas - 1
  local full_list_of_areas = mmp.deepcopy(sunder_areaPaths)
  if not sunder_areaPaths then
    snd.message("Area table not found.")
  else
    local path_being_constructed = {}
    cecho("\n&lt;CadetBlue&gt;We are checking your area request:")
    for _, v in pairs(areas) do
      for x, y in pairs(full_list_of_areas) do
        area_being_checked = x:lower()
        if area_being_checked:find(v) then
        cecho("\n&lt;MediumSeaGreen&gt;Found: "..x)
          local area_to_be_added = full_list_of_areas[x]
          if #path_being_constructed ~= 0 then
            for l, m in pairs(path_being_constructed) do
              local areas_added = 0
              for a, b in pairs(m) do
                if b == "pthcity" and areas_added &lt; num_areas then 
                  display(x)
                  path_being_constructed[l][a] = snd.bashing_area_beginning_rooms[x]
                  areas_added = areas_added + 1
                end --21
              end--20
            end--18
          end--17
          table.insert(path_being_constructed, area_to_be_added)
          break
        end
      end
    end
    
    local final_path = {}
    
    for myareastobash, roomsinthoseareas in pairs(path_being_constructed) do
      for first_room, next_room in pairs(roomsinthoseareas) do
        final_path[first_room] = next_room
      end
    end
  
    snd.message("If that's right, "..gmcp.Char.Status.name..", head on over to the first area!")
    bot.going = true
    bot.path = final_path
    if not snd.toggles.fasthunt then
      expandAlias("ff")
    end    
    expandAlias("aa") 
  end

end

snd.bashing_area_beginning_rooms ={
  ["the Village of Craneskull"] = "3553",
  ["the Dolbodi Campsite"] = "19323",
  ["the Khauskin Mines"] = "25408",
  ["the Feral Caves"] = "16274",
  ["Spiral of the Corrupt"] = "36271",
  ["Forsaken Evlasu"] = "53280",
  ["the Maghuir Fissure"] = "pthmaghuir",
  ["the Village of Torston"] = "17612",
  ["the Kalydian Forest"] = "19810",
  ["the Torturers' Caverns"] = "23202",
  ["the Forgotten Dome"] = "54770",
  ["the Tarean Ice Caverns"] = "22226",
  ["the Eresh Mines"] = "15344",
  ["Yohanan Village"] = "19802",
  ["the Salma Settlement"] = "19602",
  ["Arbothia"] = "15168",
  ["Mount Heylai"] = "54482",
  ["Raim Vale"] = "20389",
  ["Three Widows"] = "58675",
  ["the Valley of Kalebb"] = "8694",
  ["Court of the Consortium"] = "27704",
  ["the Dakhota hills"] = "1155",
  ["the Augerweald"] = "23791",
  ["a snake pit"] = "56942",
  ["Catacombs beneath Djeir"] = "12332",
  ["Tcanna Island"] = "36824",
  ["the Mannaseh Swamp"] = "1745",
  ["the Arurer Haven"] = "19320",
  [" Dovan Hollow"] = "49286",
  ["the Mamashi Tunnels"] = "20855",
  ["the Itzatl Morass"] = "15714",
  ["Scidve"] = "10813",
  ["the Bastion of Illdon"] = "4964",
  ["Rebels' Ridge"] = "18462",
  ["Mount Hubride"] = "13425",
  ["Asper"] = "13292",
  ["the Lich Gardens"] = "22866",
  ["the Shastaan Warrens"] = "45483",
  ["the Three Rock Outpost"] = "20281",
  ["the Shattered Vortex"] = "56731",
  ["Alaqsii Inlet"] = "22477",
  ["the lost city of Iviofiyiedu"] = "55190",
  ["Siha Dylis"] = "3106",
  ["Rotfang Warren"] = "63763",
  ["the Ruins of Farsai"] = "17032",
  ["the Caverns of Telfinne"] = "20932",
  ["the Valley of Lodi"] = "3883",
  ["the Ruins of Masilia"] = "20450",
  ["The Forgotten Mausoleum"] = "59862",
  ["the Ilhavon Forest"] = "26690",
  ["the Bloodwood"] = "57521",
  ["the Isle of Polyargos"] = "36824",
  ["Mount Humgurd"] = "23128",
  ["the Teshen Caldera"] = "55276",
  ["the Nal'jin Depths"] = "38090",
  ["Drakuum"] = "19854",
  ["the Fengard Keep"] = "3273",
  ["the Isle of Ollin"] = "71119",
  ["Raugol Fissure"] = "49749",
  ["the village of Bihrkaen"] = "56647",
  ["the Barony of Dun Valley"] = "5029",
  ["Luzith's Lair"] = "16282",
  ["the Morgun Forest"] = "4740",
  ["the Western Tundra"] = "18082",
  ["the beaches of Liris"] = "19814",
  ["Yuzurai village"] = "59609",
  ["Halls of Tornos"] = "21908",
  ["the Ayhesa Cliffs"] = "19987",
  ["the Village of Kornar"] = "21286",
  ["the Iernian Fracture"] = "10046",
  ["the Hlugnic Labyrinth"] = "57334",
  ["Xaanhal"] = "36677",
  ["the Sparklight Rift"] = "60845",
  ["a volcano"] = "35217",
  ["Tainhelm"] = "16437",
  ["the Dramedo Warrens"] = "58207",
  ["Dun Fortress"] = "3887",
  ["the Temple of Sonn"] = "16706",
  ["Riparium"] = "5599",
  ["the Azdun dungeon"] = "1773",
  ["the Festering Wastes"] = "20754",
  ["Tiyen Esityi"] = "38894",
  ["the Siroccian Tunnels"] = "26820",
  ["the Centipede Cave"] = "22824",
  ["the Holy Impire of Sehal"] = "24475",
  ["the Isle of Despair"] = "2030",
  ["the Tarean Caverns"] = "22305",
  ["Chapel Garden"] = "26920",
  ["the Vilimo Fields"] = "24628",
  ["the Crags"] = "19311",
  ["the village of Rahveir"] = "18968",
  ["the Caverns of Mor"] = "19344",
  ["the village of Gorshire"] = "66078",
  ["the Undercity of Djeir"] = "11994",
  ["the Cathedral of Gloaming"] = "22702",
  ["Three Widows"] = "58675",
  ["Court of the Consortium"] = "pthcourt",
  ["the Siroccian Mountains"] = "4354",
  ["the Central Wilderness"] = "11326",
  ["the Western Itzatl Rainforest"] = "9853",
  ["the Fractal Bloom"] = "ptfractal",
  ["Saliltul Swamp"] = "62102",
  ["the Ia'shal Barrow"] = "pthis'shal",
  ["the Isle of Despair"] = "pthdespair",
  ["Trapped within a mirror"] = "n/a",
  ["Perilaus"] = "11962",
  ["Dovan Hollow"] = "49286",
  ["the Squal"] = "14926",
  [ "the Maul"] = "50236",
  ["the forgotten depths of Mount Helba"] = "57086",
  ["the Bakal Chasm"] = "61011",
  ["a basilisk lair"] = "68354",
  ["Clawhook Range"] = "49546",
  ["the Maestral Shoals"] = "48770",
  ["Maestral's Barrier Reef"] = "29384",
  ["the Underbelly"] = "49440",
  ["Mejev Nider Nesve wo Ti, Matati wo Eja sota Aran wo Aransa"] = "73321",
}</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<Script isActive="yes" isFolder="no">
						<name>Comma for math</name>
						<packageName></packageName>
						<script>function format_thousand(v)
    local s = string.format("%d", math.floor(v))
    local pos = string.len(s) % 3
    if pos == 0 then pos = 3 end
    return string.sub(s, 1, pos)
    .. string.gsub(string.sub(s, pos+1), "(...)", ",%1")
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Rainbow colors</name>
						<packageName></packageName>
						<script>function rainbow(args)
local str = ""
local colours = { "|cFF0000", "|cFF6600", "|cFFEE00", "|c00FF00", "|c0099FF", "|c4400FF", "|c9900FF" }
local pass = math.random(7)

for char in args:gmatch"." do
if char == " " then
str = str .. char
else
str = str .. colours[pass] .. char
if pass == #colours then pass = 1 end
pass = pass + 1
end
end

return hecho(str)
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Xp Checker</name>
						<packageName></packageName>
						<script>xpcheck = xpcheck or {}
xpcheck.xp_ranks = { 0, 5001, 5500, 10050, 14655, 15320, 20052, 24466, 26957, 30000, 33000, 40000, 42000, 45000, 47000, 48000, 49000, 50000, 55000, 60000, 70000, 70000, 75000, 80000, 85000, 90000, 95000, 100000, 105000, 110000, 115000, 120000, 125000, 125000, 130000, 135000, 140000, 145000, 150000, 255000, 155000, 160000, 160000, 165000, 165000, 170000, 234000, 203395, 440987, 485086, 533594, 586954, 645649, 710214, 781236, 859359, 945295, 1039825, 1143807, 1258188, 1384007, 1522408, 1674649, 1842113, 2026325, 2228957, 2451853, 2697038, 2966000, 3263417, 3589758, 3948734, 4343608, 4777969, 7499575, 10000000, 13000000, 17000000, 20000000, 30000000, 35000000, 40000000, 45000000, 50000000, 55000000, 60000000, 65000000, 70000000, 75000000, 80000000, 85000000, 90000000, 95000000, 100000000, 105000000, 110000000, 115000000, 120000000, 125000000, 330000000, 346500000, 363825000, 382016200, 401117000, 421172800, 442231400, 464342900, 487560000, 511938000, 537534900, 564411600, 592632100, 622263700, 653376800, 686045600, 720347800, 756365100, 794183300, 833892400, 875587000, 919366300, 965334600, 1013601300, 1064281300, 1117495300, 1173370000, 1232038500, 1293640400, 1358322400, 1426238500, 1497550400, 1572427900, 1651049200, 1733601600, 1820281600, 1911295600, 2006860300, 2107203300, 2212563400, 2323191500, 2439351000, 2561318500, 2689384400, 2823853600, 2965046200, 3113298500, 3268963400, 3432411500, 3604032000, 3784233600, 3973445200, 4172117400, 4380723200, 4599759300, 4829747200, 5071234500, 5324796200, 5591036000, 5870587800, 6164117100, 6472322900, 6795939000, 7135735900, 7492522600, 7867148700, 8260506100, 8673531400, 9107207900, 9562568200, 10040696600, 10542731400, 11069867900, 11623361200, 12204529200, 12814755600, 13455493300, 14128267900, 14834681200, 15576415200, 16355235900, 17172997600, 18031647400, 18933229700, 19879891100, 20873885600, 21917579800, 23013458700, 24164131600, 25372338100, 26640955000, 27973002700, 29371652800, 30840235400, 32382247100, 34001359400, 35701427300, 37486498600, 39360823500, 41328864600, 43395307800}


function xpcheck.tolevel(num)
  local tolvl, current = num, tonumber(string.match(gmcp.Char.Status.level, "%d+ "))
  local curxp, to100 = tonumber(gmcp.Char.Vitals.xp), 2000000001
  --if current &gt; 99 then curxp = curxp * 100 end

  if tolvl &lt; current then cecho("\n&lt;red&gt; You're already past that level, dingus."); send(" ") return end
  local xpgained, xpneeded, totalreq = 0, 0, 0

  for lvl, tonext in pairs(xpcheck.xp_ranks) do
    if lvl &gt; tolvl then break end

    if lvl &lt;= tolvl then
      totalreq = totalreq + tonext
    end
    if lvl &lt;= current then
      xpgained = xpgained + tonext
    elseif lvl == (current+1) then
      xpgained = xpgained + curxp
      xpneeded = xpneeded + (tonext - curxp)    
    elseif lvl &gt; current then
      xpneeded = xpneeded + tonext
    end
  end

  cecho("\n&lt;green&gt;  Target Lv: &lt;NavajoWhite&gt;"..tolvl)
  cecho("\n&lt;gold&gt; Current Lv: &lt;NavajoWhite&gt;"..current)
  cecho("\n &lt;SeaGreen&gt; Target XP: "..totalreq)
  cecho("\n &lt;goldenrod&gt;Current XP: "..xpgained)
  cecho("\n   &lt;sienna&gt;Progress: &lt;LightSkyBlue&gt;" .. string.format("%2.2f", (xpgained/totalreq)*100).."%")
  cecho("\n &lt;sienna&gt;Left to go: &lt;tomato&gt;" .. string.format("%2.2f", (xpneeded/totalreq)*100).."%")
  send(" ",false)
end

function xpcheck.bashedto(num)
  local tolvl, current = num, tonumber(string.match(gmcp.Char.Status.level, "%d+ "))
  
  if tolvl &gt; current then
    cecho("\n&lt;red&gt; You haven't even bashed to that level -once- you lazy shit.")
    send(" ")
    return
  end
  
  local xptolvl, xpcurrent = xpcheck.xpneeded(tolvl), xpcheck.totalxp()
  cecho("\n &lt;NavajoWhite&gt;You have bashed to level &lt;green&gt;"..tolvl.." &lt;NavajoWhite&gt;approximately &lt;red&gt;"..string.format("%2.2f", (xpcurrent/xptolvl)).."&lt;NavajoWhite&gt; times!")
  send(" ")
end

function xpcheck.xpneeded(num)
  local xp = 0
  for lvl, xptonext in pairs(xpcheck.xp_ranks) do
    if lvl &gt; num then break end    
    xp = xp + xptonext
  end
  return xp
end

function xpcheck.totalxp()
  local xp, current = 0, tonumber(string.match(gmcp.Char.Status.level, "%d+ "))
  local currentxp = tonumber(gmcp.Char.Vitals.xp)
--  if current &gt; 99 then currentxp = currentxp * 100 end
  
  for lvl, xptonext in pairs(xpcheck.xp_ranks) do

    if lvl &lt;= current then
      xp = xp + xptonext
    elseif lvl == (current+1) then
      xp = xp + currentxp
    end       
  end
  return xp  
end

function xpcheck.fromto(start, finish)
  local from, to = tonumber(start), tonumber(finish)
  local requiredxp = xpcheck.xpneeded(finish) - xpcheck.xpneeded(start)
  
  cecho("\n &lt;NavajoWhite&gt;Going from level &lt;green&gt;"..from.."&lt;NavajoWhite&gt; to level &lt;red&gt;"..to.." &lt;NavajoWhite&gt;requires &lt;goldenrod&gt;"..requiredxp.."&lt;SeaGreen&gt;xp.")
  if requiredxp &gt; xpcheck.xpneeded(100) then
    cecho("\n &lt;NavajoWhite&gt;This requires bashing from 1 - 100 approximately &lt;red&gt;"..string.format("%2.2f", (requiredxp/2000000000)).."&lt;NavajoWhite&gt; times!")
  end
  send(" ")
end

--[[
Why is Tetchta on your mind? — 08/14/2022
@ᴬᵏʳᶦᵒˢ if you're bored ever and take requests, I thought of fun ways your current xp to script could be tweaked to demoralize people further.
 A you have bashed to [chosen level] n times thing where if you're, say, level 190 and wanna know how many times you've bashed to level 140. It has no 
 real purpose other than to be funny. The second one is xp from [level] to [level] which is basically the same script you have now but you set the starting point. 
 This is a fun one to do for folk considering the bump but don't have the script installed.
 ]]--</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Healing</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Methods</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>balance</name>
							<packageName></packageName>
							<script>

function snd.do_special(current)
 if snd.afflictions[current] ~= nil then
  if snd.afflictions[current].state == "afflicted" then
   snd.send(snd.afflictions[current].cures.special)
   echo("("..snd.afflictions[current].cures.special..")")
   snd.last_type = "special"
   snd.last_item = snd.afflictions[current].cures.special
   snd.afflictions[current].state = "waiting"
   startStopWatch(snd.afflictions[current].timer)
  end
 elseif snd.defenses[current] ~= nil then
  if current == "def_fangbarrier" and snd.have_aff("slickness") then
	 return
	else
   if snd.defenses[current].state == "down" then
    if current == "def_fangbarrier" then snd.send("outc paste"); snd.send(snd.defenses[current].balance.special) 
    else snd.send(snd.defenses[current].balance.special) end
    echo("("..snd.defenses[current].balance.special..")")
    snd.last_type = "special"
    snd.last_item = snd.defenses[current].balance.special
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
	 end
  end
 end
end

function snd.do_balance_need(current)
 if gmcp.Char.Vitals.balance == "1" and not snd.waiting.balance and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.balanceneed)
  echo("("..snd.defenses[current].balance.balanceneed..")")
  snd.last_type = "balanceneed"
  snd.last_item = snd.defenses[current].balance.balanceneed
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
 end
end

function snd.do_equilibrium_need(current)
 if gmcp.Char.Vitals.equilibrium == "1" and not snd.waiting.equilibrium and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.equilibriumneed)
  echo("("..snd.defenses[current].balance.equilibriumneed..")")
  snd.last_type = "equilibriumneed"
  snd.last_item = snd.defenses[current].balance.equilibriumneed
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
 end
end

function snd.do_balance_equilibrium_need(current)
 if snd.can_cast() then
  if snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" and snd.defenses[current].needit then
    if current:find("chameleon") then
      local cham_check = math.random(#snd.shadow)
      snd.send(snd.defenses[current].balance.balanceequilibrium..cham_check..snd.sep.."chameleon "..snd.shadow[cham_check])
    else
      snd.send(snd.defenses[current].balance.balanceequilibrium)
    end
    echo("("..snd.defenses[current].balance.balanceequilibrium..")")
    snd.last_type = "balanceequilibrium"
    snd.last_item = snd.defenses[current].balance.balanceequilibrium
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  elseif snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send(snd.afflictions[current].cures.balanceequilibrium)
    echo("("..snd.afflictions[current].cures.balanceequilibrium..")")
    snd.last_type = "balanceequilibrium"
    snd.last_item = snd.afflictions[current].cures.balanceequilibrium
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  end
 end
end

function snd.do_balance_take(current)
 if gmcp.Char.Vitals.balance == "1" and not snd.waiting.balance and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.balancetake)
  echo("("..snd.defenses[current].balance.balancetake..")")
  snd.last_type = "balancetake"
  snd.last_item = snd.defenses[current].balance.balancetake
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end

function snd.do_equilibrium_take(current)
 if gmcp.Char.Vitals.equilibrium == "1" and not snd.waiting.equilibrium and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.equilibriumtake)
  echo("("..snd.defenses[current].balance.equilibriumtake..")")
  snd.last_type = "equilibriumtake"
  snd.last_item = snd.defenses[current].balance.equilibriumtake
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.equilibrium = true
  tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
 end
end

function snd.do_needy_balance_take(current)
  if snd.can_cast() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
    snd.send(snd.defenses[current].balance.needybalancetake)
    echo("("..snd.defenses[current].balance.needybalancetake..")")
    snd.last_type = "needybalancetake"
    snd.last_item = snd.defenses[current].balance.needybalancetake
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
    snd.waiting.balance = true
    tempTimer(snd.delay(), [[snd.waiting.balance = false]])
  end
end

function snd.do_needy_equilibrium_take(current)
 if snd.can_cast() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.needyequilibriumtake)
  echo("("..snd.defenses[current].balance.needyequilibriumtake..")")
  snd.last_type = "needyequilibriumtake"
  snd.last_item = snd.defenses[current].balance.needyequilibriumtake
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.equilibrium = true
  tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
 end
end

function snd.do_balance_equilibrium_take(current)
  if snd.can_cast() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
    
    if snd.class == "Teradrim" and current:find("swelter") then
      if not table.isMember(gmcp.Room.Info.details, "sandy") then
        snd.send("sand flood")
        snd.waiting.balance = true
        tempTimer(snd.delay(), [[snd.waiting.balance = false]])
        snd.waiting.equilibrium = true
        tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
      end
    end

    if snd.class == "Tidesage" and current:find("sirensong") then
      if not table.isMember(gmcp.Room.Info.details, "fogged") then
        snd.send("sand flood")
        snd.waiting.balance = true
        tempTimer(snd.delay(), [[snd.waiting.balance = false]])
        snd.waiting.equilibrium = true
        tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
      end
    end
        
    snd.send(snd.defenses[current].balance.balanceequilibriumtake)
    echo("("..snd.defenses[current].balance.balanceequilibriumtake..")")
    snd.last_type = "balanceequilibriumtake"
    snd.last_item = snd.defenses[current].balance.balanceequilibriumtake
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
    snd.waiting.balance = true
    tempTimer(snd.delay(), [[snd.waiting.balance = false]])
    snd.waiting.equilibrium = true
    tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>tattoo</name>
							<packageName></packageName>
							<script>
function snd.do_tattoo(current)
 if snd.can_cast() and snd.can_tattoo() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send("touch "..snd.defenses[current].balance.tattoo.." tattoo")
  echo("(touch "..snd.defenses[current].balance.tattoo.." tattoo)")
  snd.last_type = "tattoo"
  snd.last_item = snd.defenses[current].balance.tattoo
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.equilibrium = true
  tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>eat</name>
							<packageName></packageName>
							<script>
function snd.do_eat(current)
 if snd.defenses[current] ~= nil then
  if snd.defenses[current].state == "down" and snd.defenses[current].needit and snd.can_eat() then
   snd.cur.herb = snd.defenses[current].balance.eat
   if snd.have_slow() then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.eat(current)
     return
    elseif snd.not_entangled() then
     snd.send("outc "..snd.cur.herb)
     return
    else
     return
    end
   elseif snd.not_entangled() then
    if snd.defenses[current] ~= nil then
     snd.send("outc "..snd.cur.herb)
     snd.eat(current)
    end
   else
    if snd.defenses[current] ~= nil then
     if snd.outred[snd.cur.herb] &gt;= 1 then
      snd.eat(current)
     end
    end
   end
  end
 end
end

function snd.eat(current)
 snd.send("eat "..snd.cur.herb)
 echo("(eat "..snd.cur.herb..")")
 snd.defenses[current].state = "waiting"
 startStopWatch(snd.defenses[current].timer)
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>drink</name>
							<packageName></packageName>
							<script>
function snd.do_drink(current)
 if snd.can_eat() then
  if snd.afflictions[current] ~= nil then
   snd.cur.drink = snd.afflictions[current].cures.drink
  else
   snd.cur.drink = snd.defenses[current].balance.drink
  end
  if snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" and snd.defenses[current].needit then
    snd.send("drink "..snd.cur.drink)
    echo(" (drink "..snd.cur.drink..")")
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  elseif snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send("drink "..snd.cur.drink)
    echo(" (drink "..snd.cur.drink..")")
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  end
 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>herb</name>
							<packageName></packageName>
							<script>
function snd.do_herb(current)
 if gmcp.Char.Vitals.herb == "1" and not snd.waiting.herb and snd.can_eat() then
  if snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.cur.herb = snd.afflictions[current].cures.herb
   else
    return
   end
  else
   if snd.defenses[current].state == "down" and snd.defenses[current].needit then
    snd.cur.herb = snd.defenses[current].balance.herb
   else
    return
   end
  end
  if snd.have_slow() then
   if snd.afflictions[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.herb(current)
     return
    elseif snd.not_entangled() then
     snd.send("outr "..snd.cur.herb)
     return
    else
     return
    end
   elseif snd.defenses[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.herb(current)
     return
    elseif snd.not_entangled() then
     snd.send("outr "..snd.cur.herb)
     return
    else
     return
    end
   end
  elseif snd.not_entangled() then
   if snd.afflictions[current] ~= nil then
    snd.send("outr "..snd.cur.herb)
    snd.herb(current)
   elseif snd.defenses[current] ~= nil then
    snd.send("outr "..snd.cur.herb)
    snd.herb(current)
   end
  else
   if snd.afflictions[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.herb(current)
    end
   elseif snd.defenses[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.herb(current)
    end
   end
  end
 end
end

function snd.herb(current)
 if snd.afflictions[current] ~= nil then
  snd.cur.herb = snd.afflictions[current].cures.herb
 else
  snd.cur.herb = snd.defenses[current].balance.herb
 end
 if snd.afflictions[current] ~= nil then
  snd.send("eat "..snd.cur.herb)
  echo("(eat "..snd.cur.herb..")")
  snd.last_type = "herb"
  snd.last_item = snd.cur.herb
  snd.waiting.herb = true
  tempTimer(snd.delay(), [[snd.waiting.herb = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 elseif snd.defenses[current] ~= nil then
  snd.send("eat "..snd.cur.herb)
  echo("(eat "..snd.cur.herb..")")
  snd.last_type = "herb"
  snd.last_item = snd.cur.herb
  snd.waiting.herb = true
  tempTimer(snd.delay(), [[snd.waiting.herb = false]])
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>vial</name>
							<packageName></packageName>
							<script>
function snd.do_vial(current)
 if gmcp.Char.Vitals.elixir == "1" and not snd.waiting.vial and snd.can_eat() then
  if snd.afflictions[current] ~= nil then
   snd.cur.vial = snd.afflictions[current].cures.vial
  else
   snd.cur.vial = snd.defenses[current].balance.vial
  end
  if snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" and snd.defenses[current].needit then
    snd.send("drink "..snd.cur.vial)
    echo(" (drink "..snd.cur.vial..")")
    snd.waiting.vial = true
    tempTimer(snd.delay(), [[snd.waiting.vial = false]])
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  elseif snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send("drink "..snd.cur.vial)
    echo(" (drink "..snd.cur.vial..")")
    snd.waiting.vial = true
    tempTimer(snd.delay(), [[snd.waiting.vial = false]])
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  end
 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>salve</name>
							<packageName></packageName>
							<script>
function snd.do_salve(current)
 if gmcp.Char.Vitals.salve == "1" and not snd.waiting.salve and snd.can_apply() then
  if snd.afflictions[current] ~= nil then
   snd.cur.salve = snd.afflictions[current].cures.salve
  else
   snd.cur.salve = snd.defenses[current].balance.salve
  end
  if snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send("apply "..snd.cur.salve)
    echo("(apply "..snd.cur.salve..")")
    snd.last_type = "salve"
    snd.last_item = snd.cur.salve
    snd.waiting.salve = true
    tempTimer(snd.delay(), [[snd.waiting.salve = false]])
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  elseif snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" then
    snd.send("apply "..snd.cur.salve.." to body")
    echo("(apply "..snd.cur.salve.." to body)")
    snd.last_type = "salve"
    snd.last_item = snd.cur.salve
    snd.waiting.salve = true
    tempTimer(snd.delay(), [[snd.waiting.salve = false]])
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  end
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>elixir</name>
							<packageName></packageName>
							<script>
function snd.do_elixir(current)
 if gmcp.Char.Vitals.elixir == "1" and not snd.waiting.elixir and snd.can_eat() then
  snd.send("sip "..snd.afflictions[current].cures.elixir)
  snd.waiting.elixir = true
  tempTimer(snd.delay(), [[snd.waiting.elixir = false]] )
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>moss</name>
							<packageName></packageName>
							<script>
function snd.do_moss(current)
 if gmcp.Char.Vitals.moss == "1" and not snd.waiting.moss and snd.can_eat() then
  snd.cur.herb = "moss"
  if snd.have_slow() then
   if snd.afflictions[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.send("eat "..snd.cur.herb)
     return
    elseif snd.not_entangled() then
     snd.send("outr "..snd.cur.herb)
     return
    else
     return
    end
   end
  elseif snd.not_entangled() then
   if snd.afflictions[current] ~= nil then
    snd.send("outr "..snd.cur.herb)
    snd.send("eat "..snd.cur.herb)
   elseif snd.defenses[current] ~= nil then
    snd.send("outr "..snd.cur.herb)
    snd.send("eat "..snd.cur.herb)
   end
  else
   if snd.afflictions[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.send("eat "..snd.cur.herb)
    end
   end
  end
  snd.waiting.moss = true
  tempTimer(snd.delay(), [[snd.waiting.moss = false]] )
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>writhe</name>
							<packageName></packageName>
							<script>
function snd.do_writhe(current)
 if snd.afflictions[current].state == "afflicted" and gmcp.Char.Vitals.writhing == "0" and (not snd.waiting.writhe) and (not string.find(current, "impale") or snd.full_balance()) then
  snd.send("writhe")
  echo("(writhe)")
  snd.last_type = "writhe"
  snd.last_item = "send"
  snd.waiting.writhe = true
  tempTimer(snd.delay(), [[snd.waiting.writhe = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>concentrate</name>
							<packageName></packageName>
							<script>
function snd.do_concentrate(current)
 if snd.afflictions[current].state == "afflicted" and not snd.waiting.concentrate then
  snd.send("concentrate")
  echo("(concentrate)")
  snd.last_type = "concentrate"
  snd.last_item = "send"
  snd.waiting.concentrate = true
  tempTimer(snd.delay(), [[snd.waiting.concentrate = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>other</name>
							<packageName></packageName>
							<script>
function snd.do_tree(current)
 limb = false
 if string.find(current, "_broken") then
  x = string.gsub(current, "_broken", "_damaged")
  y = string.gsub(current, "_broken", "_mangled")
  if snd.have_aff(x) or snd.have_aff(y) then
   limb = true
  end
 end
 if not limb and snd.afflictions[current].state == "afflicted" and gmcp.Char.Vitals.tree == "1" and not snd.waiting.tree and snd.can_tattoo() and not snd.have_aff("frostbrand") then
  snd.send("touch tree tattoo")
  echo("(touch tree tattoo)")
  snd.last_type = "tree"
  snd.last_item = "send"
  snd.waiting.tree = true
  tempTimer(snd.delay(), [[snd.waiting.tree = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end

function snd.do_focus(current)
 if snd.afflictions[current].state == "afflicted" and gmcp.Char.Vitals.focus == "1" and not snd.waiting.focus and snd.can_focus() then
  snd.send("focus")
  echo("(focus)")
  snd.last_type = "focus"
  snd.last_item = "send"
  snd.waiting.focus = true
  tempTimer(snd.delay(), [[snd.waiting.focus = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end

function snd.do_clot(current)
 if snd.afflictions[current].state == "afflicted" and not snd.waiting.clot and snd.toggles.clotting then
  mp = gmcp.Char.Vitals.mp
  mid = math.floor((gmcp.Char.Vitals.maxmp/100)*60)
  max = math.floor((mp-mid)/80)
  needed = math.floor(tonumber(gmcp.Char.Vitals.bleeding)/20)
  if max &lt; needed then
   x = max
  else
   x = needed
  end
  if x &gt; 0 then
   snd.send("clot "..x)
   echo("(clot*"..x..")")
   snd.last_type = "clot"
   snd.last_item = "send"
   snd.waiting.focus = true
   tempTimer(snd.delay(), [[snd.waiting.clot = false]])
   snd.afflictions[current].state = "waiting"
   startStopWatch(snd.afflictions[current].timer)
  end
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>smoke</name>
							<packageName></packageName>
							<script>
function snd.do_smoke(current)
 if snd.can_smoke() then
  if snd.pipes_lit or (not snd.toggles.lighting) then
   snd.smoke(current)
  elseif snd.have_slow() then
   if snd.afflictions[current] ~= nil then
    snd.send("light pipes", false)
   elseif snd.defenses[current] ~= nil then
    snd.send("light pipes", false)
    return
   end
  else
   snd.light_up()
   snd.smoke(current)
  end
 end
end

function snd.smoke(current)
 if snd.afflictions[current] ~= nil then
  snd.cur.pipe = snd.afflictions[current].cures.smoke
 else
  snd.cur.pipe = snd.defenses[current].balance.smoke
 end
 if snd.afflictions[current] ~= nil then
  if snd.afflictions[current].state == "afflicted" then
   snd.send("smoke "..snd.cur.pipe)
   echo("(smoke "..snd.cur.pipe..")")
   snd.last_type = "smoke"
   snd.last_item = snd.cur.pipe
   snd.afflictions[current].state = "waiting"
   startStopWatch(snd.afflictions[current].timer)
  end
 elseif snd.defenses[current] ~= nil then
  if snd.defenses[current].state == "down" and snd.defenses[current].needit then
   snd.send("smoke "..snd.cur.pipe)
   echo("(smoke "..snd.cur.pipe..")")
   snd.last_type = "smoke"
   snd.last_item = snd.cur.pipe
   snd.defenses[current].state = "waiting"
   startStopWatch(snd.defenses[current].timer)
  end
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>stand</name>
							<packageName></packageName>
							<script>
function snd.do_stand(current)
 if snd.afflictions[current].state == "afflicted" and snd.toggles.standing and (not snd.waiting.stand) and snd.full_balance() and snd.can_legs() then
  snd.send("stand")
  echo("(stand)")
  snd.last_type = "stand"
  snd.last_item = "send"
  snd.waiting.stand = true
  tempTimer(snd.delay(), [[snd.waiting.stand = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>fitness</name>
							<packageName></packageName>
							<script>
function snd.do_fitness()
 if snd.can_fitness() and snd.need_fitness and snd.full_balance() then
  snd.send("fitness")
  echo("(fitness)")
  snd.last_type = "fitness"
  snd.last_item = "fitness"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>purge</name>
							<packageName></packageName>
							<script>purge_threshold = 2

function snd.purge_check()
-- Attempt to purge if don't have paralysis and have at least 2 curable physical affs.
  if snd.balance.purge and not snd.waiting.purge and not snd.have_aff("paralysis") then
    local purgable = {}
    
    for _, aff in pairs(snd.physical_affs) do
      if snd.have_aff(aff) and aff ~= "paralysis" then
        local i, _ = string.find(aff, "_broken")
        if i then
          local s = string.sub(aff, 0, i - 1)
          if snd.afflictions["aff_"..s.."_damaged"].state == "healed" then
            table.insert(purgable, aff)
          end
        else
          table.insert(purgable, aff)
        end
      end
    end
    
    if #purgable &gt;= purge_threshold then
      return true
    else
      return false
    end
  end
end

function snd.do_purge()
  
      if snd.class == "Carnifex" then
        snd.send("soul purge")
        echo("(soul purge)")
      else
        snd.send("ancest annul")
        echo("(ancest annul)")
      end
      
      snd.last_type = "purge"
      snd.last_item = "purge"
      snd.waiting.purge = true
      tempTimer(snd.delay(), [[snd.waiting.purge = false]])
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>shrugging</name>
							<packageName></packageName>
							<script>
function snd.do_shrug()
 if snd.full_balance() and snd.need_fitness and snd.can_shrug() then
  snd.send("shrug venom")
  echo("(shrug venom)")
  snd.last_type = "shrug"
  snd.last_item = "shrug"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>purify</name>
							<packageName></packageName>
							<script>purify_threshold = 2

function snd.purify_check()
-- Attempt to purge if don't have paralysis and have at least 2 curable physical affs.
  if snd.balance.purify and not snd.waiting.purify and not snd.have_aff("paralysis") then
    local purifiable = {}
    
    for _, aff in pairs(snd.physical_affs) do
      if snd.have_aff(aff) and aff ~= "paralysis" then
        local i, _ = string.find(aff, "_broken")
        if i then
          local s = string.sub(aff, 0, i - 1)
          if snd.afflictions["aff_"..s.."_damaged"].state == "healed" then
            table.insert(purifiable, aff)
          end
        else
          table.insert(purifiable, aff)
        end
      end
    end
    
    if #purifiable &gt;= purify_threshold then
      return true
    else
      return false
    end
  end
end

function snd.do_purify()

     if snd.class == "Praenomen" then
        snd.send("purify")
        echo("(purify)")
      else
        snd.send("succour")
        echo("(succour)")
      end
      
    snd.last_type = "purify"
    snd.last_item = "purify"
	snd.waiting.purify = true
  tempTimer(snd.delay(), [[snd.waiting.purify = false]])
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>aegis</name>
							<packageName></packageName>
							<script>
function snd.do_aegis()
 if snd.full_balance() then
  snd.send("manipulate pylon for aegis")
  snd.last_type = "aegis"
  snd.last_item = "aegis"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>rage</name>
							<packageName></packageName>
							<script>
function snd.do_rage()
 if snd.rage_check() and snd.can_rage() and snd.balance.rage then
  snd.send("rage")
  echo("(rage)")
  snd.last_type = "rage"
  snd.last_item = "rage"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end

function snd.rage_check()

  if not snd.balance.rage then return false end
  
  if not gmcp then return false end
  if hp ~= nil then
    if hp &lt;= 1 then return false end
  end

  local rage_affs = {
  "aff_hubris",
  "aff_pacifism",
  "aff_peace",
  "aff_agony",
  "aff_accursed",
  "aff_limp_veins",
  "aff_lovers_effect",
  "aff_laxity",
  "aff_superstition",
  "aff_generosity",
  "aff_justice",
  "aff_magnanimity",
  }
  
  for _, v in pairs(rage_affs) do
    if snd.have_aff(v) then
      return true
    end
  end
  return false
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>panacea</name>
							<packageName></packageName>
							<script>panacea_threshold = 2

function snd.panacea_check()
-- Attempt to purge if don't have paralysis and have at least 2 curable physical affs.
  if snd.balance.panacea and not snd.waiting.panacea and not snd.have_aff("paralysis") then
    local panaceable = {}
    
    for _, aff in pairs(snd.physical_affs) do
      if snd.have_aff(aff) and aff ~= "paralysis" then
        local i, _ = string.find(aff, "_broken")
        if i then
          local s = string.sub(aff, 0, i - 1)
          if snd.afflictions["aff_"..s.."_damaged"].state == "healed" then
            table.insert(panaceable, aff)
          end
        else
          table.insert(panaceable, aff)
        end
      end
    end
    
    if #panaceable &gt;= panacea_threshold then
      return true
    else
      return false
    end
  end
end

function snd.do_panacea()
  
      if snd.class == "Shaman" then
        snd.send("nature panacea")
        echo("(nature panacea)")
      else
        snd.send("botany subvert")
        echo("(botany subvert)")        
      end
      
      snd.last_type = "panacea"
      snd.last_item = "panacea"
      snd.waiting.panacea = true
      tempTimer(snd.delay(), [[snd.waiting.panacea = false]])
end
</script>
							<eventHandlerList />
						</Script>
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Firstaid Help</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>Advanced Salve Curing</name>
								<packageName></packageName>
								<script>function snd.firstaidsalve()
if not snd.have_aff("salve_seared") then
	if snd.salvebal and not snd.have_aff("slickness") and not snd.have_aff("slough") and not snd.have_aff("void") and not snd.have_aff("weakvoid") and not snd.salveaffflag then
    if (snd.faction == "spirit" and #snd.shadow_targets &lt; 1) or (snd.faction == "shadow" and #snd.spirit_targets &lt; 1) then 
  		if snd.have_aff("pre_restore_torso") then
  		  snd.send("apply restoration to torso")
  		elseif snd.have_aff("pre_restore_head") then
  		  snd.send("apply restoration to head")
    	elseif snd.have_aff("pre_restore_right_leg") then
    		snd.send("apply restoration to right leg")
    	elseif snd.have_aff("pre_restore_left_leg") then
    	 	snd.send("apply restoration to left leg")
  	  elseif snd.have_aff("pre_restore_right_arm") then
  		  snd.send("apply restoration to right arm")
    	elseif snd.have_aff("pre_restore_left_arm") then
    		snd.send("apply restoration to left arm")
  	  end
		elseif ((snd.faction == "spirit" and #snd.shadow_targets &lt; 2) or (snd.faction == "shadow" and #snd.spirit_targets &lt; 2)) and not snd.salveaffflag and not snd.have_aff("asthma") and not snd.have_aff("clumsiness") then
  		if snd.have_aff("pre_restore_torso") then
  		  snd.send("apply restoration to torso")
    	elseif snd.have_aff("pre_restore_head") then
    		snd.send("apply restoration to head")
  	 	elseif snd.have_aff("pre_restore_right_leg") then
  		 	snd.send("apply restoration to right leg")
    	elseif snd.have_aff("pre_restore_left_leg") then
    		snd.send("apply restoration to left leg")
  	  elseif snd.have_aff("pre_restore_right_arm") then
  		  snd.send("apply restoration to right arm")
  		elseif snd.have_aff("pre_restore_left_arm") then
  		  snd.send("apply restoration to left arm")
    	end
		end
  end
end
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>firstaidprioritylistset</name>
								<packageName></packageName>
								<script>function snd.firstaidprioritylistset()  	-- sets the levels from the initial Aetolia no cureset priority list

	snd.firstaidcuretrack = {}
  -- level 1
  -- none
  snd.firstaidcuretrack.anorexia = "2"
  snd.firstaidcuretrack.destroyed_throat = "2"
  snd.firstaidcuretrack.gorged = "2"
  -- pills
  snd.firstaidcuretrack.paralysis = "2"
  -- special
  snd.firstaidcuretrack.asleep = "2"
  snd.firstaidcuretrack.fear = "2"
  snd.firstaidcuretrack.itchy = "2"

  -- level 3
  -- pipe none
  -- salves
  snd.firstaidcuretrack.head_mangled = "3"
  snd.firstaidcuretrack.crushed_chest = "3"
  snd.firstaidcuretrack.burnt_skin = "3"
  snd.firstaidcuretrack.ice_encased = "3"
  
 -- pill
  snd.firstaidcuretrack.asthma = "3" 
-- special
   snd.firstaidcuretrack.voyria = "3"
  snd.firstaidcuretrack.writhe_impaled = "3"
  
  -- 4
  -- pipe
  snd.firstaidcuretrack.aeon = "4"  
  -- salve
  snd.firstaidcuretrack.head_bruised_critical = "4"
  snd.firstaidcuretrack.left_leg_bruised_critical = "4"
  snd.firstaidcuretrack.right_leg_bruised_critical = "4"
  snd.firstaidcuretrack.right_arm_bruised_critical = "4"
  snd.firstaidcuretrack.left_arm_bruised_critical = "4"
  snd.firstaidcuretrack.torso_bruised_critical = "4" 
--pill
  snd.firstaidcuretrack.physical_disruption = "4"
  snd.firstaidcuretrack.mental_disruption = "4"
  snd.firstaidcuretrack.paresis = "4"  
  snd.firstaidcuretrack.rot_body = "4"  
--special
  snd.firstaidcuretrack.writhe_thighlock = "4"  
  snd.firstaidcuretrack.writhe_armpitlock = "4"  
  snd.firstaidcuretrack.writhe_necklock = "4" 
  snd.firstaidcuretrack.writhe_hoist = "4"  
  snd.firstaidcuretrack.writhe_lure = "4"   
  
-- 5
--pipe
  snd.firstaidcuretrack.slickness = "5"
  
--salves
  snd.firstaidcuretrack.hypothermia = "5"
  snd.firstaidcuretrack.cracked_ribs = "5"  
  snd.firstaidcuretrack.gloom = "5"
  snd.firstaidcuretrack.voidgaze = "5"
-- pill
  snd.firstaidcuretrack.slough = "5"
  snd.firstaidcuretrack.blood_curse = "5"
  snd.firstaidcuretrack.blood_poison = "5" 
  snd.firstaidcuretrack.thin_blood = "5"
  snd.firstaidcuretrack.mirroring = "5" 
--special
  snd.firstaidcuretrack.writhe_gunk = "5"
  snd.firstaidcuretrack.writhe_grappled = "5" 
  snd.firstaidcuretrack.writhe_web = "5"   
  snd.firstaidcuretrack.writhe_vines = "5"  
  snd.firstaidcuretrack.writhe_bind = "5"   
   snd.firstaidcuretrack.writhe_transfix = "5"
  snd.firstaidcuretrack.writhe_ropes = "5" 

--6
--pipe
  snd.firstaidcuretrack.besilence = "6"
-- salve
  snd.firstaidcuretrack.left_leg_amputated = "6"
  snd.firstaidcuretrack.right_leg_amputated = "6"
  snd.firstaidcuretrack.left_leg_damaged = "6"
  snd.firstaidcuretrack.right_leg_damaged = "6" 
  snd.firstaidcuretrack.right_leg_mangled = "6"
  snd.firstaidcuretrack.left_leg_mangled = "6"  
-- pill
  snd.firstaidcuretrack.stupidity = "6"
  snd.firstaidcuretrack.impatience = "6" 
  snd.firstaidcuretrack.stormtouched = "6"   
  snd.firstaidcuretrack.patterns = "6"  
-- special
  snd.firstaidcuretrack.writhe_stasis = "6"  

--7
-- pipe
  snd.firstaidcuretrack.hellsight = "7" 
  snd.firstaidcuretrack.withering = "7"
--salve
  snd.firstaidcuretrack.left_arm_amputated = "7"
  snd.firstaidcuretrack.right_arm_amputated = "7"
  snd.firstaidcuretrack.left_arm_damaged = "7"
  snd.firstaidcuretrack.right_arm_damaged = "7"
  snd.firstaidcuretrack.right_arm_mangled = "7"
  snd.firstaidcuretrack.left_arm_mangled = "7"
-- pill
  snd.firstaidcuretrack.sensitivity = "7" 
  snd.firstaidcuretrack.recklessness = "7"
  snd.firstaidcuretrack.nyctophobbia = "7"  
  snd.firstaidcuretrack.accursed = "7"
  snd.firstaidcuretrack.agony = "7"
  
  --8
  --pipe
  snd.firstaidcuretrack.migraine = "8"
  --salve
  snd.firstaidcuretrack.shivering = "8"
  snd.firstaidcuretrack.frozen = "8"   
  snd.firstaidcuretrack.mauled_face = "8"  
  -- pill
  snd.firstaidcuretrack.heartflutter = "8"
  snd.firstaidcuretrack.confusion = "8"
  snd.firstaidcuretrack.epilepsy = "8"
  snd.firstaidcuretrack.dissonance = "8"
  snd.firstaidcuretrack.lethargy = "8"   
  snd.firstaidcuretrack.rot_wither = "8"  
  
  --9
  --pipe
  snd.firstaidcuretrack.disfigurement = "9"
  snd.firstaidcuretrack.squelched = "9"
  -- salve
  snd.firstaidcuretrack.ablaze = "9"
  snd.firstaidcuretrack.firstaid_predict_any_limb = "9"  
  -- pill
  snd.firstaidcuretrack.clumsiness = "9" 
  snd.firstaidcuretrack.weariness = "9"
  snd.firstaidcuretrack.berserking = "9"
  snd.firstaidcuretrack.laxity = "9"  
  snd.firstaidcuretrack.faintness = "9"  
  snd.firstaidcuretrack.hollow = "9"
  snd.firstaidcuretrack.perplexed = "9"
  -- special
  snd.firstaidcuretrack.disrupted = "9" 
  snd.firstaidcuretrack.dazed = "9"  

  -- 10
  --pipe
  snd.firstaidcuretrack.deadening = "10" 
  -- Salve
  snd.firstaidcuretrack.left_leg_broken = "10"
  snd.firstaidcuretrack.right_leg_broken = "10"    
  snd.firstaidcuretrack.firstaid_predict_legs = "10"
  --pill
  snd.firstaidcuretrack.limp_veins = "10"  
  snd.firstaidcuretrack.masochism = "10"  
  snd.firstaidcuretrack.haemophilia = "10"
  snd.firstaidcuretrack.vomiting = "10" 
  snd.firstaidcuretrack.allergies = "10"
  snd.firstaidcuretrack.ringing_ears = "10" 
  --special
  snd.firstaidcuretrack.vinethorns = "10"
  snd.firstaidcuretrack.dread = "10"     

  --11
  --salve
  snd.firstaidcuretrack.right_arm_broken = "11"
  snd.firstaidcuretrack.left_arm_broken = "11"
  snd.firstaidcuretrack.firstaid_predict_arms = "11"        
  --pill
  snd.firstaidcuretrack.dizziness = "11"
  snd.firstaidcuretrack.crippled = "11"  
  snd.firstaidcuretrack.crippled_body = "11"
  snd.firstaidcuretrack.merciful = "11"  
  --special
  snd.firstaidcuretrack.oiled = "11"

  --12
  --salve
  snd.firstaidcuretrack.head_damaged = "12"
  snd.firstaidcuretrack.collapsed_lung = "12"
  --pill
  snd.firstaidcuretrack.dementia = "12"
  snd.firstaidcuretrack.paranoia = "12"
  snd.firstaidcuretrack.hallucinations = "12"
  snd.firstaidcuretrack.addiction = "12"
  snd.firstaidcuretrack.impairment = "12"
  
  --13
  --salve
  snd.firstaidcuretrack.left_leg_dislocated = "13"
  snd.firstaidcuretrack.right_leg_dislocated = "13"
  --pill
  snd.firstaidcuretrack.hypochondria = "13"
  snd.firstaidcuretrack.agoraphobia = "13"
  snd.firstaidcuretrack.loneliness = "13" 
  snd.firstaidcuretrack.vertigo = "13"  
  snd.firstaidcuretrack.claustrophobia = "13" 
  snd.firstaidcuretrack.justice = "13"  
  snd.firstaidcuretrack.blisters = "13"  
  snd.firstaidcuretrack.self_loathing = "13"
  --14
  --salve
  snd.firstaidcuretrack.left_arm_dislocated = "14"
  snd.firstaidcuretrack.right_arm_dislocated = "14"   
--pill
  snd.firstaidcuretrack.hatred = "14"
  snd.firstaidcuretrack.rend = "14" 
  snd.firstaidcuretrack.blighted = "14"   
  snd.firstaidcuretrack.infested = "14"  
  snd.firstaidcuretrack.egocentric = "14" 
  snd.firstaidcuretrack.magnanimity = "14" 
  snd.firstaidcuretrack.exhausted = "14"  
  snd.firstaidcuretrack.rot_heat = "14" 
  snd.firstaidcuretrack.narcolepsy = "14" 
  --15
  --salve
  snd.firstaidcuretrack.spinal_rip = "15"
  snd.firstaidcuretrack.torso_damaged = "15"
  snd.firstaidcuretrack.torso_mangled = "15"
  snd.firstaidcuretrack.deepwound = "15"   
  snd.firstaidcuretrack.heatspear = "15"  
  --pill
  snd.firstaidcuretrack.hypersomnia = "15"  
  snd.firstaidcuretrack.shyness = "15"
  snd.firstaidcuretrack.pacifism = "15"  
  snd.firstaidcuretrack.peace = "15"  
  snd.firstaidcuretrack.generosity = "15"
  snd.firstaidcuretrack.lovers_effect = "15"  
  snd.firstaidcuretrack.superstition = "15"  
  snd.firstaidcuretrack.misery = "15"  
  --16
  --salve
  snd.firstaidcuretrack.left_leg_bruised_moderate = "16"
  snd.firstaidcuretrack.right_leg_bruised_moderate = "16"    
  snd.firstaidcuretrack.right_arm_bruised_moderate = "16"
  snd.firstaidcuretrack.left_arm_bruised_moderate = "16"
  snd.firstaidcuretrack.torso_bruised_moderate = "16"
  snd.firstaidcuretrack.head_bruised_moderate = "16"
  --pill
  snd.firstaidcuretrack.rot_benign = "16"
  snd.firstaidcuretrack.rot_spirit = "16"
  
  --17
  --salve
  snd.firstaidcuretrack.left_arm_bruised = "17"
  snd.firstaidcuretrack.right_arm_bruised = "17"
  snd.firstaidcuretrack.left_leg_bruised = "17"
  snd.firstaidcuretrack.right_leg_bruised = "17"    
  snd.firstaidcuretrack.head_bruised = "17"
  snd.firstaidcuretrack.torso_bruised = "17"   
  --pill
  snd.firstaidcuretrack.sadness = "17" 
  snd.firstaidcuretrack.self_pity = "17"     
  snd.firstaidcuretrack.baldness = "17" 
  snd.firstaidcuretrack.commitment_fear = "17" 
  snd.firstaidcuretrack.hubris = "17"  
  snd.firstaidcuretrack.body_odor = "17"  
  snd.firstaidcuretrack.worrywart = "17"  

  --18
  --salve
  snd.firstaidcuretrack.indifference = "18"
  snd.firstaidcuretrack.blurry_vision = "18"    
  snd.firstaidcuretrack.smashed_throat = "18" 
  -- pill
  snd.firstaidcuretrack.plodding = "18" 
  snd.firstaidcuretrack.idiocy = "18"

  --19
  --salve
  snd.firstaidcuretrack.whiplash = "19"
  snd.firstaidcuretrack.backstrain = "19"
  snd.firstaidcuretrack.sore_wrist = "19"
  snd.firstaidcuretrack.sore_ankle = "19"
  snd.firstaidcuretrack.muscle_spasms = "19"
  snd.firstaidcuretrack.stiffness = "19"  
  snd.firstaidcuretrack.weak_group = "19"    

  --20
  --salve
  snd.firstaidcuretrack.stuttering = "20"
  snd.firstaidcuretrack.crippled_throat = "20"
  snd.firstaidcuretrack.burnt_eyes = "20"
  snd.firstaidcuretrack.lightwound = "20"  
   
  --21
  --salve
  snd.firstaidcuretrack.void = "21"
  snd.firstaidcuretrack.weakvoid = "21"

  --22
  --salve
  snd.firstaidcuretrack.rightleg = "22"
  snd.firstaidcuretrack.prerightleg = "20"
  snd.firstaidcuretrack.leftleg = "22"
  snd.firstaidcuretrack.preleftleg = "20"  


  --23
  --salve
  snd.firstaidcuretrack.head = "23"
  snd.firstaidcuretrack.prehead = "20"
  snd.firstaidcuretrack.leftarm = "23"
  snd.firstaidcuretrack.preleftarm = "20"
  snd.firstaidcuretrack.rightarm = "23"
  snd.firstaidcuretrack.prerightarm = "20"

  --24
  --salve
  snd.firstaidcuretrack.torso = "24"
  snd.firstaidcuretrack.pretorso = "20"    
  --25
  --salve
  snd.firstaidcuretrack.effused_blood = "25"  
  
 -- not updated
  -- Things we don't want cured unless other
  snd.firstaidcuretrack.embedded_axe = "12"
	
end
</script>
								<eventHandlerList />
								<Script isActive="yes" isFolder="no">
									<name>Firstaid class assist</name>
									<packageName></packageName>
									<script>function snd.firstaidassist()

if gmcp.Char.Vitals.equilibrium == "1" and gmcp.Char.Vitals.balance == "1" and gmcp.Char.Vitals.left_arm == "1" and gmcp.Char.Vitals.right_arm == "1" and not snd.have_aff("blackout") then 
	snd.sync = true 
end

if snd.toggles.active then
	if (snd.count(snd.people_hitting_me)) &gt; 1 then
		if snd.firstaidcureset ~= "none" then
			send("firstaid cureset switch none")
		end
		if snd.firstaidchangecure then
			snd.firstaidresetlistnone()
		end
	elseif (snd.count(snd.people_hitting_me)) == 0 then
		if snd.firstaidcureset ~= "none" then
			send("firstaid cureset switch none")
		end
		if snd.firstaidchangecure then
			snd.firstaidresetlistnone()
		end
	elseif snd.class_hitting == "archivist" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassArchivist()
    send("firstaid use focus on")
    send("firstaid stormtouched off")
		
	elseif snd.class_hitting == "luminary" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassLuminary()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")
	
	elseif snd.class_hitting == "earthcaller" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassEarthcaller()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")
	
	elseif snd.class_hitting == "sentinel" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassSentinel()
    send("firstaid use focus on")
    send("firstaid stormtouched off")
	
	elseif snd.class_hitting == "zealot" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassZealot()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")
	
	elseif snd.class_hitting == "ravager" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassRavager()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")
		
	elseif snd.class_hitting == "ascendril" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassAscendril()
    send("firstaid use focus on")
    send("firstaid stormtouched off")	
		
	elseif snd.class_hitting == "bloodborn" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassBloodborn()
    send("firstaid use focus on")
    send("firstaid stormtouched off")	
		
	elseif snd.class_hitting == "indorani" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassIndorani()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")
    
	elseif snd.class_hitting == "oneiromancer" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassOneiromancer()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")
		
	elseif snd.class_hitting == "monk" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassMonk()		
    send("firstaid use focus on")
    send("firstaid stormtouched off")
		
	elseif snd.class_hitting == "teradrim" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassTeradrim()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")		
		
	elseif snd.class_hitting == "tidesage" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassTidesage()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")		
		
	elseif snd.class_hitting == "carnifex" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassCarnifex()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")	
		
	elseif snd.class_hitting == "warden" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassWarden()
    send("firstaid use focus on")
    send("firstaid stormtouched off")					
		
	elseif snd.class_hitting == "templar" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassTemplar()		
    send("firstaid use focus on")
    send("firstaid stormtouched off")		
		
	elseif snd.class_hitting == "sciomancer" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassSciomancer()	
    if not snd.have_aff("gloom") then
      send("firstaid use focus on")
    else
      send("firstaid use focus off")
    end
    send("firstaid stormtouched off")		
		
	elseif snd.class_hitting == "runecarver" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassRunecarver()	
    if not snd.have_aff("gloom") then
      send("firstaid use focus on")
    else
      send("firstaid use focus off")
    end
    send("firstaid stormtouched off")		
		
	elseif snd.class_hitting == "shifter" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassShifter()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")			
		
	elseif snd.class_hitting == "praenomen" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassPraenomen()
    send("firstaid use focus on")
    send("firstaid stormtouched off")				
		
	elseif snd.class_hitting == "akkari" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassAkkari()
    send("firstaid use focus on")
    send("firstaid stormtouched off")		
		
	elseif snd.class_hitting == "wayfarer" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassWayfarer()			
		
	elseif snd.class_hitting == "shaman" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassShaman()		
    send("firstaid use focus on")
    if snd.have_aff("paralysis") then
      send("firstaid stormtouched off")	
    else
		  send("firstaid stormtouched on")
    end		
		
	elseif snd.class_hitting == "alchemist" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassAlchemist()		
    send("firstaid use focus on")
    if snd.have_aff("paralysis") then
      send("firstaid stormtouched off")	
    else
		  send("firstaid stormtouched on")
    end
    
	elseif snd.class_hitting == "syssin" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassSyssin()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")			
		
	elseif snd.class_hitting == "revenant" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassRevenant()	
    send("firstaid use focus on")
    send("firstaid stormtouched off")
		
	elseif snd.class_hitting == "bard" and (snd.count(snd.people_hitting_me)) &lt; 2 then
		snd.firstaidassBard()
    send("firstaid use focus on")
    send("firstaid stormtouched off")
		
	end

	if not firstaidclassset then
		snd.firstaidclass()
		snd.firstaidclassset = true
	end
    
  if snd.have_aff("ravaged") and snd.firstprerestore then
		send("firstaid prestore off")
	elseif not snd.firstprerestore and not snd.have_aff("ravaged") then
		send("firstaid prestore on")
	end
  
  if snd.salveaffflag then
		if not snd.have_aff("slickness") then
			if not snd.kaicripple and not (snd.have_aff("left_arm_damaged") or snd.have_aff("right_arm_damaged")) then 
				send("queue salve " ..snd.salvapplytype.. " " ..snd.mendingtype.. " arms") 
			elseif not snd.kaicripple and not (snd.have_aff("left_leg_damaged") or snd.have_aff("right_leg_damaged")) then 
				send("queue salve " ..snd.salvapplytype.. " " ..snd.mendingtype.. " legs")
			end
		end
	end
	

	if snd.sync and (snd.have_aff("slough") or snd.have_aff("slickness")) and (snd.class_hitting == "indorani" or snd.class_hitting == "oneiromancer") and (snd.have_aff("right_leg_broken") or snd.have_aff("left_leg_broken"))then
		snd.send("qeb restore")
		snd.sync = false
	end

end

end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>Firstaid class being attacked by</name>
									<packageName></packageName>
									<script>function snd.firstaidassArchivist()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end
	if snd.firstaidcuretrack.allergies ~= "2" then
		send("firstaid priority allergies 2")
	end		
	if snd.firstaidcuretrack.impairment ~= "3" then
		send("firstaid priority impairment 3")
	end		
	if snd.firstaidcuretrack.lethargy ~= "4" then
		send("firstaid priority lethargy 4")
	end		
	if snd.firstaidcuretrack.paresis ~= "5" then
		send("firstaid priority paresis 5")
	end		
	if snd.firstaidcuretrack.vomiting ~= "6" then
		send("firstaid priority vomiting 6")
	end		
	if snd.firstaidcuretrack.blisters ~= "7" then
		send("firstaid priority blisters 7")
	end		
	if snd.firstaidcuretrack.physical_disruption ~= "8" then
		send("firstaid priority physical_disruption 8")
	end		
	if snd.firstaidcuretrack.haemophilia ~= "8" then
		send("firstaid priority haemophilia 8")
	end	  
	if snd.firstaidcuretrack.asthma ~= "8" then
		send("firstaid priority asthma 8")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "8" then
		send("firstaid priority clumsiness 8")
	end	
	if snd.firstaidcuretrack.sensitivity ~= "8" then
		send("firstaid priority sensitivity 8")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "8" then
		send("firstaid priority ringing_ears 8")
	end	
	if snd.firstaidcuretrack.blood_poison ~= "8" then
		send("firstaid priority blood_poison 8")
	end	
	if snd.firstaidcuretrack.blood_curse ~= "8" then
		send("firstaid priority blood_curse 8")
	end	
	if snd.firstaidcuretrack.slough ~= "8" then
		send("firstaid priority slough 8")
	end	
	if snd.firstaidcuretrack.limp_veins ~= "8" then
		send("firstaid priority limp_veins 8")
	end	
	if snd.firstaidcuretrack.rend ~= "8" then
		send("firstaid priority rend 8")
	end	
	if snd.firstaidcuretrack.exhausted ~= "8" then
		send("firstaid priority exhausted 8")
	end	
	if snd.firstaidcuretrack.hypersomnia ~= "8" then
		send("firstaid priority hypersomnia 8")
	end	
	if snd.firstaidcuretrack.heartflutter ~= "8" then
		send("firstaid priority heartflutter 8")
	end	
	if snd.firstaidcuretrack.faintness ~= "9" then
		send("firstaid priority faintness 9")
	end	
	if snd.firstaidcuretrack.patterns ~= "10" then
		send("firstaid priority patterns 10")
	end	
	if snd.firstaidcuretrack.hypochondria ~= "11" then
		send("firstaid priority hypochondria 11")
	end	
	if snd.firstaidcuretrack.dizziness ~= "12" then
		send("firstaid priority dizziness 12")
	end	 
	if snd.firstaidcuretrack.peace ~= "13" then
		send("firstaid priority peace 13")
	end
	if snd.firstaidcuretrack.hatred ~= "14" then
		send("firstaid priority hatred 14")
	end
	if snd.firstaidcuretrack.merciful ~= "15" then
		send("firstaid priority merciful 15")
	end
	if snd.firstaidcuretrack.mental_disruption ~= "16" then
		send("firstaid priority mental_disruption 16")
	end	
	if snd.firstaidcuretrack.weariness ~= "16" then
		send("firstaid priority weariness 16")
	end	
	if snd.firstaidcuretrack.addiction ~= "17" then
		send("firstaid priority addiction 17")
	end	
	if snd.firstaidcuretrack.sadness ~= "18" then
		send("firstaid priority sadness 18")
	end	
	if snd.firstaidcuretrack.hallucinations ~= "19" then
		send("firstaid priority hallucinations 19")
	end	
	if snd.firstaidcuretrack.paranoia ~= "20" then
		send("firstaid priority paranoia 20")
	end	
	if snd.firstaidcuretrack.dementia ~= "21" then
		send("firstaid priority dementia 21")
	end	
	if snd.firstaidcuretrack.magnanimity ~= "22" then
		send("firstaid priority magnanimity 22")
	end	
	if snd.firstaidcuretrack.shyness ~= "23" then
		send("firstaid priority shyness 23")
	end	
	if snd.firstaidcuretrack.epilepsy ~= "24" then
		send("firstaid priority epilepsy 24")
	end	
	if snd.firstaidcuretrack.masochism ~= "25" then
		send("firstaid priority masochism 25")
	end	
	if snd.firstaidcuretrack.egocentric ~= "25" then
		send("firstaid priority egocentric 25")
	end	
	if snd.firstaidcuretrack.berserking ~= "25" then
		send("firstaid priority berserking 25")
	end	
	if snd.firstaidcuretrack.recklessness ~= "25" then
		send("firstaid priority recklessness 25")
	end
	if snd.firstaidcuretrack.laxity ~= "25" then
		send("firstaid priority laxity 25")
	end
	if snd.firstaidcuretrack.lovers_effect ~= "25" then
		send("firstaid priority lovers_effect 25")
	end
	if snd.firstaidcuretrack.vertigo ~= "25" then
		send("firstaid priority vertigo 25")
	end
	if snd.firstaidcuretrack.pacifism ~= "25" then
		send("firstaid priority pacifism 25")
	end
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassAscendril()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.anorexia ~= "2" then
		send("firstaid priority anorexia 2")
	end	  
  if snd.firstaidcuretrack.indifference ~= "3" then
		send("firstaid priority indifference 3")
	end	 
  if snd.firstaidcuretrack.gorged ~= "3" then
		send("firstaid priority gorged 3")
	end	 
	if snd.firstaidcuretrack.frozen ~= "4" then
		send("firstaid priority frozen 4")
	end	 
	if snd.firstaidcuretrack.torso ~= "4" and snd.firstaidcuretrack.pretorso ~= "1" then
		 send("FIRSTAID PRIORITY PRESTORE torso 1% 4")
	end  
	if snd.firstaidcuretrack.hypothermia ~= "5" then
		send("firstaid priority hypothermia 5")
	end	
	if snd.firstaidcuretrack.left_leg_broken ~= "5" then
		send("firstaid priority left_leg_broken 5")
	end	
	if snd.firstaidcuretrack.right_leg_broken ~= "5" then
		send("firstaid priority right_leg_broken 5")
	end	
	if snd.firstaidcuretrack.shivering ~= "6" then
		send("FIRSTAID PRIORITY shivering 6")
	end
	if snd.firstaidcuretrack.ice_encased ~= "6" then
		send("FIRSTAID PRIORITY ice_encased 6")
	end  
	if snd.firstaidcuretrack.ablaze ~= "7" then
		send("FIRSTAID PRIORITY ablaze 7")
	end
	if snd.firstaidcuretrack.left_arm_broken ~= "8" then
		send("firstaid priority left_arm_broken 8")
	end	  
	if snd.firstaidcuretrack.right_arm_broken ~= "8" then
		send("firstaid priority right_arm_broken 8")
	end	  
	if snd.firstaidcuretrack.head_damaged ~= "9" then
		send("FIRSTAID PRIORITY head_damaged 9")
	end
	if snd.firstaidcuretrack.head_mangled ~= "9" then
		send("FIRSTAID PRIORITY head_mangled 9")
	end
	if snd.firstaidcuretrack.rightleg ~= "11" and snd.firstaidcuretrack.prerightleg ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE right leg 17% 11")
	end  
	if snd.firstaidcuretrack.leftleg ~= "11" and snd.firstaidcuretrack.preleftleg ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE left leg 17% 11")
	end  
  if snd.firstaidcuretrack.leftarm ~= "12" or snd.firstaidcuretrack.preleftarm ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE left arm 17% 12")
	end
	if snd.firstaidcuretrack.rightarm ~= "12" and snd.firstaidcuretrack.prerightarm ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE right arm 17% 12")
	end
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassBloodborn()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.anorexia ~= "2" then
		send("firstaid priority anorexia 2")
	end	  
  if snd.firstaidcuretrack.indifference ~= "3" then
		send("firstaid priority indifference 3")
	end	 
  if snd.firstaidcuretrack.gorged ~= "3" then
		send("firstaid priority gorged 3")
	end	 
	if snd.firstaidcuretrack.frozen ~= "4" then
		send("firstaid priority frozen 4")
	end	 
	if snd.firstaidcuretrack.torso ~= "4" and snd.firstaidcuretrack.pretorso ~= "1" then
		 send("FIRSTAID PRIORITY PRESTORE torso 1% 4")
	end  
	if snd.firstaidcuretrack.hypothermia ~= "5" then
		send("firstaid priority hypothermia 5")
	end	
	if snd.firstaidcuretrack.left_leg_broken ~= "5" then
		send("firstaid priority left_leg_broken 5")
	end	
	if snd.firstaidcuretrack.right_leg_broken ~= "5" then
		send("firstaid priority right_leg_broken 5")
	end	
	if snd.firstaidcuretrack.shivering ~= "6" then
		send("FIRSTAID PRIORITY shivering 6")
	end
	if snd.firstaidcuretrack.ice_encased ~= "6" then
		send("FIRSTAID PRIORITY ice_encased 6")
	end  
	if snd.firstaidcuretrack.ablaze ~= "7" then
		send("FIRSTAID PRIORITY ablaze 7")
	end
	if snd.firstaidcuretrack.left_arm_broken ~= "8" then
		send("firstaid priority left_arm_broken 8")
	end	  
	if snd.firstaidcuretrack.right_arm_broken ~= "8" then
		send("firstaid priority right_arm_broken 8")
	end	  
	if snd.firstaidcuretrack.head_damaged ~= "9" then
		send("FIRSTAID PRIORITY head_damaged 9")
	end
	if snd.firstaidcuretrack.head_mangled ~= "9" then
		send("FIRSTAID PRIORITY head_mangled 9")
	end
	if snd.firstaidcuretrack.rightleg ~= "11" and snd.firstaidcuretrack.prerightleg ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE right leg 17% 11")
	end  
	if snd.firstaidcuretrack.leftleg ~= "11" and snd.firstaidcuretrack.preleftleg ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE left leg 17% 11")
	end  
  if snd.firstaidcuretrack.leftarm ~= "12" or snd.firstaidcuretrack.preleftarm ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE left arm 17% 12")
	end
	if snd.firstaidcuretrack.rightarm ~= "12" and snd.firstaidcuretrack.prerightarm ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE right arm 17% 12")
	end
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassIndorani()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "3" then
		send("firstaid priority paresis 3")
	end	
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassOneiromancer()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "3" then
		send("firstaid priority paresis 3")
	end	
	snd.firstaidchangecure = false  -- keep last	
end


function snd.firstaidassLuminary()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.accursed ~= "3" then
		send("firstaid priority accursed 3")
	end	
	if snd.firstaidcuretrack.agony ~= "3" then
		send("firstaid priority agony 3")
	end	
	if snd.firstaidcuretrack.pacifism ~= "3" then
		send("firstaid priority pacifism 3")
	end	
	if snd.firstaidcuretrack.peace ~= "4" then
		send("firstaid priority peace 4")
	end	
	
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassEarthcaller()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.accursed ~= "3" then
		send("firstaid priority accursed 3")
	end	
	if snd.firstaidcuretrack.agony ~= "3" then
		send("firstaid priority agony 3")
	end	
	if snd.firstaidcuretrack.pacifism ~= "3" then
		send("firstaid priority pacifism 3")
	end	
	if snd.firstaidcuretrack.peace ~= "4" then
		send("firstaid priority peace 4")
	end	
	
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassMonk()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.anorexia ~= "5" then
		send("firstaid priority anorexia 5")
	end	
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassSentinel()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.burnt_skin ~= "1" then
    send("firstaid priority burnt_skin 1")
  end 
  if snd.firstaidcuretrack.anorexia ~= "2" then
    send("firstaid priority anorexia 2")
  end 
  if snd.firstaidcuretrack.destroyed_throat ~= "2" then
    send("firstaid priority destroyed_throat 2")
  end
  if snd.firstaidcuretrack.frozen ~= "3" then
    send("firstaid priority frozen 3")
  end
  if snd.firstaidcuretrack.indifference ~= "3" then
    send("firstaid priority indifference 3")
  end 
  if snd.firstaidcuretrack.head_mangled ~= "4" then
    send("firstaid priority head_mangled 4")
  end 
  if snd.firstaidcuretrack.left_arm_broken ~= "5" then
    send("firstaid priority left_arm_broken 5")
  end 
  if snd.firstaidcuretrack.left_leg_broken ~= "6" then
    send("firstaid priority left_leg_broken 6")
  end 
  if snd.firstaidcuretrack.right_leg_broken ~= "6" then
    send("firstaid priority right_leg_broken 6")
  end 
  if snd.firstaidcuretrack.crippled_throat ~= "7" and (snd.class == "Praenomen" or snd.class == "Akkari") then
    send("firstaid priority crippled_throat 7")
  end   
  if snd.firstaidcuretrack.shivering ~= "8" then
    send("firstaid priority shivering 8")
  end  
  if snd.firstaidcuretrack.right_arm_broken ~= "9" then
    send("firstaid priority right_arm_broken 9")
  end
  if snd.firstaidcuretrack.firstaid_predict_arms ~= "9" then
    send("firstaid priority firstaid_predict_arms 9")
  end
  if snd.firstaidcuretrack.firstaid_predict_legs ~= "9" then
    send("firstaid priority firstaid_predict_legs 9")
  end
  if snd.firstaidcuretrack.firstaid_predict_any_limb ~= "9" then
    send("firstaid priority firstaid_predict_any_limb 9")
  end
  if snd.firstaidcuretrack.left_arm_damaged ~= "10" then
    send("firstaid priority left_arm_damaged 10")
  end
  if snd.firstaidcuretrack.left_leg_damaged ~= "11" then
    send("firstaid priority left_leg_damaged 11")
  end
  if snd.firstaidcuretrack.right_leg_damaged ~= "11" then
    send("firstaid priority right_leg_damaged 11")
  end
  if snd.firstaidcuretrack.right_arm_damaged ~= "12" then
    send("firstaid priority right_arm_damaged 12")
  end
  if snd.firstaidcuretrack.left_arm_mangled ~= "13" then
    send("firstaid priority left_arm_mangled 13")
  end
  if snd.firstaidcuretrack.left_leg_mangled ~= "14" then
    send("firstaid priority left_leg_mangled 14")
  end
  if snd.firstaidcuretrack.right_leg_mangled ~= "14" then
    send("firstaid priority right_leg_mangled 14")
  end
  if snd.firstaidcuretrack.right_arm_mangled ~= "15" then
    send("firstaid priority right_arm_mangled 15")
  end  
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassZealot()  -- curing based on class being attacked by
	if snd.have_aff("left_leg_broken") and not snd.have_aff("left_leg_damaged") and snd.firstaidcuretrack.left_leg_broken ~= "4" then
    send("firstaid priority left_leg_broken 4")
  elseif snd.firstaidcuretrack.left_leg_broken ~= "7" then
    send("firstaid priority left_leg_broken 7")
  end
  if snd.have_aff("right_leg_broken") and not snd.have_aff("right_leg_damaged") then
    send("firstaid priority right_leg_broken 4")
  elseif snd.firstaidcuretrack.right_leg_broken ~= "7" then
    send("firstaid priority right_leg_broken 7") 
  end   
  if snd.firstaidcuretrack.torso_mangled ~= "5" then
    send("firstaid priority torso_mangled 5") 
  end
  if snd.firstaidcuretrack.torso_damaged ~= "5" then
    send("firstaid priority torso_damaged 5") 
  end      
  if snd.firstaidcuretrack.heatspear ~= "6" then
		send("firstaid priority heatspear 6")
	end	
	if snd.firstaidcuretrack.ablaze ~= "4" and not snd.have_aff("heatspear") and not snd.have_aff("torso_damaged") then
	  send("firstaid priority ablaze 4")
  elseif snd.firstaidcuretrack.ablaze ~= "7" and (snd.have_aff("heatspear") or snd.have_aff("torso_damaged")) then
    send("firstaid priority ablaze 7")
	end	  
	if snd.firstaidcuretrack.lightwound ~= "3" and not snd.have_aff("heatspear") and snd.have_aff("ablaze") and not snd.have_aff("torso_damaged") then
	  send("firstaid priority lightwound 3")
  elseif snd.firstaidcuretrack.lightwound ~= "7" then
    send("firstaid priority lightwound 7")
	end	
  if snd.firstaidcuretrack.left_leg_broken ~= "7" then
		send("firstaid priority left_leg_broken 7")
	end 
 	if snd.firstaidcuretrack.right_leg_broken ~= "7" then
		send("firstaid priority right_leg_broken 7")
	end 
 	if snd.firstaidcuretrack.left_arm_broken ~= "7" then
		send("firstaid priority left_arm_broken 7")
	end 
 	if snd.firstaidcuretrack.right_arm_broken ~= "7" then
		send("firstaid priority right_arm_broken 7")
	end   
  if snd.firstaidcuretrack.left_leg_dislocated ~= "8" then
		send("firstaid priority left_leg_dislocated 8")
	end  
	if snd.firstaidcuretrack.right_leg_dislocated ~= "8" then
		send("firstaid priority right_leg_dislocated 8")
	end 
	if snd.firstaidcuretrack.left_arm_dislocated ~= "8" then
		send("firstaid priority left_arm_dislocated 8")
	end 
	if snd.firstaidcuretrack.right_arm_dislocated ~= "8" then
		send("firstaid priority right_arm_dislocated 8")
	end   
 	if snd.firstaidcuretrack.left_leg_damaged ~= "9" then
		send("firstaid priority left_leg_damaged 9")
	end   
  if snd.firstaidcuretrack.right_leg_damaged ~= "9" then
		send("firstaid priority right_leg_damaged 9")
	end   
  if snd.firstaidcuretrack.left_arm_damaged ~= "10" then
		send("firstaid priority left_arm_damaged 10")
	end 
  if snd.firstaidcuretrack.right_arm_damaged ~= "10" then
		send("firstaid priority right_arm_damaged 10")
	end   
  if snd.firstaidcuretrack.head_damaged ~= "11" then
		send("firstaid priority head_damaged 11")
	end         
	if snd.firstaidcuretrack.backstrain ~= "16" then
		send("firstaid priority backstrain 16")
	end	  
	if snd.firstaidcuretrack.muscle_spasms ~= "17" then
		send("firstaid priority muscle_spasms 17")
	end	
	if snd.firstaidcuretrack.stiffness ~= "17" then
		send("firstaid priority stiffness 17")
	end	
	if snd.firstaidcuretrack.sore_wrist ~= "18" then
		send("firstaid priority sore_wrist 18")
	end	
	if snd.firstaidcuretrack.whiplash ~= "19" then
		send("firstaid priority whiplash 19")
	end	   
	if snd.firstaidcuretrack.deepwound ~= "20" then
		send("firstaid priority whiplash 20")
	end	  
	if snd.firstaidcuretrack.torso ~= "21" and snd.firstaidcuretrack.pretorso ~= "15" then
		send("FIRSTAID PRIORITY PRESTORE torso 15% 21")
	end 
	if snd.firstaidcuretrack.rightleg ~= "22" and snd.firstaidcuretrack.prerightleg ~= "15" then
		send("FIRSTAID PRIORITY PRESTORE right leg 15% 22")
	end
	if snd.firstaidcuretrack.leftleg ~= "22" and snd.firstaidcuretrack.preleftleg ~= "15" then
		send("FIRSTAID PRIORITY PRESTORE left leg 15% 22")
	end 
  if snd.firstaidcuretrack.leftarm ~= "23" or snd.firstaidcuretrack.preleftarm ~= "15" then
		send("FIRSTAID PRIORITY PRESTORE left arm 15% 23")
	end
	if snd.firstaidcuretrack.rightarm ~= "23" and snd.firstaidcuretrack.prerightarm ~= "15" then
		send("FIRSTAID PRIORITY PRESTORE right arm 15% 23")
	end
	if snd.firstaidcuretrack.head ~= "24" and snd.firstaidcuretrack.prehead ~= "15" then
  send("FIRSTAID PRIORITY PRESTORE head 15% 24")
	end  	
  if snd.firstaidcuretrack.blurry_vision ~= "26" and (snd.class == "Archivist" or snd.class == "Shaman" or snd.class == "Alchemist" or snd.class == "Ascendril" or snd.class == "Bloodborn" or snd.class == "Sciomancer" or snd.class == "Runecarver") then
		send("firstaid priority blurry_vision 26")
	end	
  
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassRavager()  -- curing based on class being attacked by
	if snd.have_aff("left_leg_broken") and not snd.have_aff("left_leg_damaged") and snd.firstaidcuretrack.left_leg_broken ~= "4" then
    send("firstaid priority left_leg_broken 4")
  elseif snd.firstaidcuretrack.left_leg_broken ~= "7" then
    send("firstaid priority left_leg_broken 7")
  end
  if snd.have_aff("right_leg_broken") and not snd.have_aff("right_leg_damaged") then
    send("firstaid priority right_leg_broken 4")
  elseif snd.firstaidcuretrack.right_leg_broken ~= "7" then
    send("firstaid priority right_leg_broken 7") 
  end   
  if snd.firstaidcuretrack.torso_mangled ~= "5" then
    send("firstaid priority torso_mangled 5") 
  end
  if snd.firstaidcuretrack.torso_damaged ~= "5" then
    send("firstaid priority torso_damaged 5") 
  end      
  if snd.firstaidcuretrack.heatspear ~= "6" then
		send("firstaid priority heatspear 6")
	end	
	if snd.firstaidcuretrack.ablaze ~= "4" and not snd.have_aff("heatspear") and not snd.have_aff("torso_damaged") then
	  send("firstaid priority ablaze 4")
  elseif snd.firstaidcuretrack.ablaze ~= "7" and (snd.have_aff("heatspear") or snd.have_aff("torso_damaged")) then
    send("firstaid priority ablaze 7")
	end	  
	if snd.firstaidcuretrack.lightwound ~= "3" and not snd.have_aff("heatspear") and snd.have_aff("ablaze") and not snd.have_aff("torso_damaged") then
	  send("firstaid priority lightwound 3")
  elseif snd.firstaidcuretrack.lightwound ~= "7" then
    send("firstaid priority lightwound 7")
	end	
  if snd.firstaidcuretrack.left_leg_broken ~= "7" then
		send("firstaid priority left_leg_broken 7")
	end 
 	if snd.firstaidcuretrack.right_leg_broken ~= "7" then
		send("firstaid priority right_leg_broken 7")
	end 
 	if snd.firstaidcuretrack.left_arm_broken ~= "7" then
		send("firstaid priority left_arm_broken 7")
	end 
 	if snd.firstaidcuretrack.right_arm_broken ~= "7" then
		send("firstaid priority right_arm_broken 7")
	end   
  if snd.firstaidcuretrack.left_leg_dislocated ~= "8" then
		send("firstaid priority left_leg_dislocated 8")
	end  
	if snd.firstaidcuretrack.right_leg_dislocated ~= "8" then
		send("firstaid priority right_leg_dislocated 8")
	end 
	if snd.firstaidcuretrack.left_arm_dislocated ~= "8" then
		send("firstaid priority left_arm_dislocated 8")
	end 
	if snd.firstaidcuretrack.right_arm_dislocated ~= "8" then
		send("firstaid priority right_arm_dislocated 8")
	end   
 	if snd.firstaidcuretrack.left_leg_damaged ~= "9" then
		send("firstaid priority left_leg_damaged 9")
	end   
  if snd.firstaidcuretrack.right_leg_damaged ~= "9" then
		send("firstaid priority right_leg_damaged 9")
	end   
  if snd.firstaidcuretrack.left_arm_damaged ~= "10" then
		send("firstaid priority left_arm_damaged 10")
	end 
  if snd.firstaidcuretrack.right_arm_damaged ~= "10" then
		send("firstaid priority right_arm_damaged 10")
	end   
  if snd.firstaidcuretrack.head_damaged ~= "11" then
		send("firstaid priority head_damaged 11")
	end         
	if snd.firstaidcuretrack.backstrain ~= "16" then
		send("firstaid priority backstrain 16")
	end	  
	if snd.firstaidcuretrack.muscle_spasms ~= "17" then
		send("firstaid priority muscle_spasms 17")
	end	
	if snd.firstaidcuretrack.stiffness ~= "17" then
		send("firstaid priority stiffness 17")
	end	
	if snd.firstaidcuretrack.sore_wrist ~= "18" then
		send("firstaid priority sore_wrist 18")
	end	
	if snd.firstaidcuretrack.whiplash ~= "19" then
		send("firstaid priority whiplash 19")
	end	   
	if snd.firstaidcuretrack.deepwound ~= "20" then
		send("firstaid priority whiplash 20")
	end	  
	if snd.firstaidcuretrack.torso ~= "21" and snd.firstaidcuretrack.pretorso ~= "15" then
		send("FIRSTAID PRIORITY PRESTORE torso 15% 21")
	end 
	if snd.firstaidcuretrack.rightleg ~= "22" and snd.firstaidcuretrack.prerightleg ~= "15" then
		send("FIRSTAID PRIORITY PRESTORE right leg 15% 22")
	end
	if snd.firstaidcuretrack.leftleg ~= "22" and snd.firstaidcuretrack.preleftleg ~= "15" then
		send("FIRSTAID PRIORITY PRESTORE left leg 15% 22")
	end 
  if snd.firstaidcuretrack.leftarm ~= "23" or snd.firstaidcuretrack.preleftarm ~= "15" then
		send("FIRSTAID PRIORITY PRESTORE left arm 15% 23")
	end
	if snd.firstaidcuretrack.rightarm ~= "23" and snd.firstaidcuretrack.prerightarm ~= "15" then
		send("FIRSTAID PRIORITY PRESTORE right arm 15% 23")
	end
	if snd.firstaidcuretrack.head ~= "24" and snd.firstaidcuretrack.prehead ~= "15" then
  send("FIRSTAID PRIORITY PRESTORE head 15% 24")
	end  	
  if snd.firstaidcuretrack.blurry_vision ~= "26" and (snd.class == "Archivist" or snd.class == "Shaman" or snd.class == "Alchemist" or snd.class == "Ascendril" or snd.class == "Bloodborn" or snd.class == "Sciomancer" or snd.class == "Runecarver") then
		send("firstaid priority blurry_vision 26")
	end	
  
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassShifter()
  if snd.firstaidcuretrack.left_arm ~= "6" and snd.firstaidcuretrack.preleftarm ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE left arm 20% 6")
	end
	if snd.firstaidcuretrack.rightarm ~= "6" and snd.firstaidcuretrack.prerightarm ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE right arm 20% 6")
	end
	if snd.firstaidcuretrack.rightleg ~= "2" and snd.firstaidcuretrack.prerightleg ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE right leg 20% 2")
	end
	if snd.firstaidcuretrack.left_leg ~= "2" and snd.firstaidcuretrack.preleftleg ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE left leg 20% 2")
	end
	if snd.firstaidcuretrack.head ~= "6" and snd.firstaidcuretrack.prehead ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE head 20% 6")
	end
  if snd.firstaidcuretrack.torso ~= "4" and snd.firstaidcuretrack.pretorso ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE torso 20% 4")
	end
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.cippled_body ~= "1" then
		send("firstaid priority cippled_body 1")
	end	
	if snd.firstaidcuretrack.anorexia ~= "1" then
		send("firstaid priority anorexia 1")
	end	
	if snd.firstaidcuretrack.paresis ~= "3" then
		send("firstaid priority paresis 3")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.impairment ~= "2" then
		send("firstaid priority impairment 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "1" then
		send("firstaid priority anorexia 1")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.plodding ~= "3" then
		send("firstaid priority plodding 3")
	end		
	if snd.firstaidcuretrack.stupidity ~= "3" then
		send("firstaid priority stupidity 3")
	end			
	if snd.firstaidcuretrack.frozen ~= "3" then
		send("firstaid priority frozen 3")
	end	
	if snd.firstaidcuretrack.blurry_vision ~= "3" then
		send("firstaid priority blurry_vision 3")
	end		
	if snd.firstaidcuretrack.rend ~= "4" then
		send("firstaid priority rend 4")
	end	
	if snd.firstaidcuretrack.weariness ~= "4" then
		send("firstaid priority weariness 4")
	end	
	if snd.firstaidcuretrack.lethargy ~= "4" then
		send("firstaid priority lethargy 4")
	end	
	snd.firstaidchangecure = false  -- keep last
end
function snd.firstaidassWayfarer()
  if snd.firstaidcuretrack.left_arm ~= "6" and snd.firstaidcuretrack.preleftarm ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE left arm 20% 6")
	end
	if snd.firstaidcuretrack.rightarm ~= "6" and snd.firstaidcuretrack.prerightarm ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE right arm 20% 6")
	end
	if snd.firstaidcuretrack.rightleg ~= "2" and snd.firstaidcuretrack.prerightleg ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE right leg 20% 2")
	end
	if snd.firstaidcuretrack.left_leg ~= "2" and snd.firstaidcuretrack.preleftleg ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE left leg 20% 2")
	end
	if snd.firstaidcuretrack.head ~= "6" and snd.firstaidcuretrack.prehead ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE head 20% 6")
	end
  if snd.firstaidcuretrack.torso ~= "8" and snd.firstaidcuretrack.pretorso ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE torso 20% 6")
	end
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.paresis ~= "3" then
		send("firstaid priority paresis 3")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.impairment ~= "2" then
		send("firstaid priority impairment 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "1" then
		send("firstaid priority anorexia 1")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.plodding ~= "3" then
		send("firstaid priority plodding 3")
	end		
	if snd.firstaidcuretrack.blurry_vision ~= "3" then
		send("firstaid priority blurry_vision 3")
	end		
	if snd.firstaidcuretrack.rend ~= "4" then
		send("firstaid priority rend 4")
	end	
  if snd.firstaidcuretrack.exhausted ~= "12" then
		send("firstaid priority exhausted 12")
  end
	snd.firstaidchangecure = false  -- keep last
end

function snd.firstaidassCarnifex()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.left_arm ~= "8" and snd.firstaidcuretrack.preleftarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left arm 19% 8")
	end
	if snd.firstaidcuretrack.rightarm ~= "8" and snd.firstaidcuretrack.prerightarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right arm 19% 8")
	end
	if snd.firstaidcuretrack.rightleg ~= "8" and snd.firstaidcuretrack.prerightleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right leg 19% 8")
	end
	if snd.firstaidcuretrack.left_leg ~= "8" and snd.firstaidcuretrack.preleftleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left leg 19% 8")
	end
	if snd.firstaidcuretrack.head ~= "8" and snd.firstaidcuretrack.prehead ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE head 19% 8")
	end
  if snd.firstaidcuretrack.torso ~= "8" and snd.firstaidcuretrack.pretorso ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE torso 19% 8")
	end	
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.paresis ~= "2" then
		send("firstaid priority paresis 2")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.slickness ~= "2" then
		send("firstaid priority slickness 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "2" then
		send("firstaid priority anorexia 2")
	end	
	if snd.firstaidcuretrack.asthma ~= "2" then
		send("firstaid priority asthma 2")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.crushed_chest ~= "3" then
		send("firstaid priority crushed_chest 3")
	end		
	if snd.firstaidcuretrack.weariness ~= "3" then
		send("firstaid priority weariness 3")
	end		
	if snd.firstaidcuretrack.impairment ~= "3" then
		send("firstaid priority impairment 3")
	end	
	if snd.firstaidcuretrack.hypochondria ~= "3" then
		send("firstaid priority hypochondria 3")
	end
	if snd.firstaidcuretrack.sensitivity ~= "3" then
		send("firstaid priority sensitivity 3")
	end
	if snd.firstaidcuretrack.crippled ~= "3" then
		send("firstaid priority crippled 3")
	end
	snd.firstaidchangecure = false  -- keep last	
end


function snd.firstaidassWarden()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.left_arm ~= "8" and snd.firstaidcuretrack.preleftarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left arm 19% 8")
	end
	if snd.firstaidcuretrack.rightarm ~= "8" and snd.firstaidcuretrack.prerightarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right arm 19% 8")
	end
	if snd.firstaidcuretrack.rightleg ~= "8" and snd.firstaidcuretrack.prerightleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right leg 19% 8")
	end
	if snd.firstaidcuretrack.left_leg ~= "8" and snd.firstaidcuretrack.preleftleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left leg 19% 8")
	end
	if snd.firstaidcuretrack.head ~= "8" and snd.firstaidcuretrack.prehead ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE head 19% 8")
	end
  if snd.firstaidcuretrack.torso ~= "8" and snd.firstaidcuretrack.pretorso ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE torso 19% 8")
	end	
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.paresis ~= "2" then
		send("firstaid priority paresis 2")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.slickness ~= "2" then
		send("firstaid priority slickness 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "2" then
		send("firstaid priority anorexia 2")
	end	
	if snd.firstaidcuretrack.asthma ~= "2" then
		send("firstaid priority asthma 2")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.crushed_chest ~= "3" then
		send("firstaid priority crushed_chest 3")
	end		
	if snd.firstaidcuretrack.weariness ~= "3" then
		send("firstaid priority weariness 3")
	end		
	if snd.firstaidcuretrack.impairment ~= "3" then
		send("firstaid priority impairment 3")
	end	
	if snd.firstaidcuretrack.hypochondria ~= "3" then
		send("firstaid priority hypochondria 3")
	end
	if snd.firstaidcuretrack.sensitivity ~= "3" then
		send("firstaid priority sensitivity 3")
	end
	if snd.firstaidcuretrack.crippled ~= "3" then
		send("firstaid priority crippled 3")
	end
	snd.firstaidchangecure = false  -- keep last	
end


function snd.firstaidassTemplar()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.left_arm ~= "8" and snd.firstaidcuretrack.preleftarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left arm 19% 8")
	end
	if snd.firstaidcuretrack.rightarm ~= "8" and snd.firstaidcuretrack.prerightarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right arm 19% 8")
	end
	if snd.firstaidcuretrack.rightleg ~= "8" and snd.firstaidcuretrack.prerightleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right leg 19% 8")
	end
	if snd.firstaidcuretrack.left_leg ~= "8" and snd.firstaidcuretrack.preleftleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left leg 19% 8")
	end
	if snd.firstaidcuretrack.head ~= "8" and snd.firstaidcuretrack.prehead ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE head 19% 8")
	end
  if snd.firstaidcuretrack.torso ~= "8" and snd.firstaidcuretrack.pretorso ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE torso 19% 8")
	end	
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.paresis ~= "2" then
		send("firstaid priority paresis 2")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.slickness ~= "2" then
		send("firstaid priority slickness 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "2" then
		send("firstaid priority anorexia 2")
	end	
	if snd.firstaidcuretrack.asthma ~= "2" then
		send("firstaid priority asthma 2")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.crushed_chest ~= "3" then
		send("firstaid priority crushed_chest 3")
	end		
	if snd.firstaidcuretrack.weariness ~= "3" then
		send("firstaid priority weariness 3")
	end		
	if snd.firstaidcuretrack.impairment ~= "3" then
		send("firstaid priority impairment 3")
	end	
	if snd.firstaidcuretrack.hypochondria ~= "3" then
		send("firstaid priority hypochondria 3")
	end
	if snd.firstaidcuretrack.sensitivity ~= "3" then
		send("firstaid priority sensitivity 3")
	end
	if snd.firstaidcuretrack.crippled ~= "3" then
		send("firstaid priority crippled 3")
	end
	snd.firstaidchangecure = false  -- keep last	
end


function snd.firstaidassRevenant()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.left_arm ~= "8" and snd.firstaidcuretrack.preleftarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left arm 19% 8")
	end
	if snd.firstaidcuretrack.rightarm ~= "8" and snd.firstaidcuretrack.prerightarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right arm 19% 8")
	end
	if snd.firstaidcuretrack.rightleg ~= "8" and snd.firstaidcuretrack.prerightleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right leg 19% 8")
	end
	if snd.firstaidcuretrack.left_leg ~= "8" and snd.firstaidcuretrack.preleftleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left leg 19% 8")
	end
	if snd.firstaidcuretrack.head ~= "8" and snd.firstaidcuretrack.prehead ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE head 19% 8")
	end
  if snd.firstaidcuretrack.torso ~= "8" and snd.firstaidcuretrack.pretorso ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE torso 19% 8")
	end	
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.paresis ~= "2" then
		send("firstaid priority paresis 2")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.slickness ~= "2" then
		send("firstaid priority slickness 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "2" then
		send("firstaid priority anorexia 2")
	end	
	if snd.firstaidcuretrack.asthma ~= "2" then
		send("firstaid priority asthma 2")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.crushed_chest ~= "3" then
		send("firstaid priority crushed_chest 3")
	end		
	if snd.firstaidcuretrack.weariness ~= "3" then
		send("firstaid priority weariness 3")
	end		
	if snd.firstaidcuretrack.impairment ~= "3" then
		send("firstaid priority impairment 3")
	end	
	if snd.firstaidcuretrack.hypochondria ~= "3" then
		send("firstaid priority hypochondria 3")
	end
	if snd.firstaidcuretrack.sensitivity ~= "3" then
		send("firstaid priority sensitivity 3")
	end
	if snd.firstaidcuretrack.crippled ~= "3" then
		send("firstaid priority crippled 3")
	end
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassTeradrim()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "1" then
		send("firstaid priority paresis 1")
	end	
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassTidesage()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "1" then
		send("firstaid priority paresis 1")
	end	
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassSciomancer()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end
	if snd.firstaidcuretrack.asthma ~= "2" then
		send("firstaid priority asthma 2")
	end
	if snd.firstaidcuretrack.rot_body ~= "3" then
		send("firstaid priority rot_body 3")
	end
	if snd.firstaidcuretrack.rot_wither ~= "3" then
		send("firstaid priority rot_wither 3")
	end
	if snd.firstaidcuretrack.dementia ~= "4" then
		send("firstaid priority dementia 4")
	end
	if snd.firstaidcuretrack.paresis ~= "5" then
		send("firstaid priority paresis 5")
	end
	if snd.firstaidcuretrack.lethargy ~= "6" then
		send("firstaid priority lethargy 6")
	end 
	if snd.firstaidcuretrack.vomiting ~= "7" then
		send("firstaid priority vomiting 7")
	end 
	if snd.firstaidcuretrack.blindness ~= "8" then
		send("firstaid priority defence blindness 8")
	end   
  if snd.firstaidcuretrack.rot_heat ~= "9" then
		send("firstaid priority rot_heat 9")
	end   
  if snd.firstaidcuretrack.clumsiness ~= "10" then
		send("firstaid priority clumsiness 10")
	end  
  if snd.firstaidcuretrack.nyctophobia ~= "11" then
		send("firstaid priority nyctophobia 11")
	end 
  if snd.firstaidcuretrack.weariness ~= "12" then
		send("firstaid priority weariness 12")
	end 
  if snd.firstaidcuretrack.rot_spirit ~= "13" then
		send("firstaid priority rot_spirit 13")
	end 
  if snd.firstaidcuretrack.rot_benign ~= "14" then
		send("firstaid priority rot_benign 14")
	end  
  if snd.firstaidcuretrack.agoraphobia ~= "15" then
		send("firstaid priority agoraphobia 15")
	end 
  if snd.firstaidcuretrack.loneliness ~= "16" then
		send("firstaid priority loneliness 16")
	end 
  if snd.firstaidcuretrack.blindness ~= "26" then
		send("firstaid priority defence blindness reset")
	end 
  if snd.firstaidcuretrack.vertigo ~= "17" then
		send("firstaid priority vertigo 17")
	end 
  if snd.firstaidcuretrack.claustrophobia ~= "18" then
		send("firstaid priority claustrophobia 18")
	end
  if snd.firstaidcuretrack.commitment_fear ~= "19" then
		send("firstaid priority commitment_fear 19")
	end
  if snd.firstaidcuretrack.haemophilia ~= "20" then
		send("firstaid priority haemophilia 20")
	end
  if snd.firstaidcuretrack.exhausted ~= "21" then
		send("firstaid priority exhausted 21")
	end
  if snd.firstaidcuretrack.stupidity ~= "22" then
		send("firstaid priority stupidity 22")
	end
  if snd.firstaidcuretrack.dizziness ~= "23" then
		send("firstaid priority dizziness 23")
	end
  if snd.firstaidcuretrack.dissonance ~= "24" then
		send("firstaid priority dissonance 24")
	end
  if snd.firstaidcuretrack.frozen ~= "3" then
		send("firstaid priority frozen 3")
	end    
  if snd.firstaidcuretrack.voidgaze ~= "5" then
		send("firstaid priority voidgaze 5")
	end    
  if snd.firstaidcuretrack.left_leg_broken ~= "6" then
		send("firstaid priority left_leg_broken 6")
	end 
 	if snd.firstaidcuretrack.right_leg_broken ~= "6" then
		send("firstaid priority right_leg_broken 6")
	end 
 	if snd.firstaidcuretrack.left_arm_broken ~= "7" then
		send("firstaid priority left_arm_broken 7")
	end 
 	if snd.firstaidcuretrack.right_arm_broken ~= "7" then
		send("firstaid priority right_arm_broken 7")
	end  
	if snd.firstaidcuretrack.left_leg_damaged ~= "9" then
		send("firstaid priority left_leg_damaged 9")
	end   
  if snd.firstaidcuretrack.right_leg_damaged ~= "9" then
		send("firstaid priority right_leg_damaged 9")
	end   
  if snd.firstaidcuretrack.left_arm_damaged ~= "10" then
		send("firstaid priority left_arm_damaged 10")
	end 
  if snd.firstaidcuretrack.right_arm_damaged ~= "10" then
		send("firstaid priority right_arm_damaged 10")
	end 
	if snd.firstaidcuretrack.left_leg_mangled ~= "11" then
		send("firstaid priority left_leg_mangled 11")
	end   
  if snd.firstaidcuretrack.right_leg_mangled ~= "11" then
		send("firstaid priority right_leg_mangled 11")
	end   
  if snd.firstaidcuretrack.left_arm_mangled ~= "12" then
		send("firstaid priority left_arm_mangled 12")
	end 
  if snd.firstaidcuretrack.right_arm_mangled ~= "12" then
		send("firstaid priority right_arm_mangled 12")
	end 
  if snd.firstaidcuretrack.shivering ~= "18" then
		send("firstaid priority shivering 18")
	end 
  if snd.firstaidcuretrack.gloom ~= "20" then
		send("firstaid priority gloom 20")
	end 
  
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassRunecarver()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end
	if snd.firstaidcuretrack.asthma ~= "2" then
		send("firstaid priority asthma 2")
	end
	if snd.firstaidcuretrack.rot_body ~= "3" then
		send("firstaid priority rot_body 3")
	end
	if snd.firstaidcuretrack.rot_wither ~= "3" then
		send("firstaid priority rot_wither 3")
	end
	if snd.firstaidcuretrack.dementia ~= "4" then
		send("firstaid priority dementia 4")
	end
	if snd.firstaidcuretrack.paresis ~= "5" then
		send("firstaid priority paresis 5")
	end
	if snd.firstaidcuretrack.lethargy ~= "6" then
		send("firstaid priority lethargy 6")
	end 
	if snd.firstaidcuretrack.vomiting ~= "7" then
		send("firstaid priority vomiting 7")
	end 
	if snd.firstaidcuretrack.blindness ~= "8" then
		send("firstaid priority defence blindness 8")
	end   
  if snd.firstaidcuretrack.rot_heat ~= "9" then
		send("firstaid priority rot_heat 9")
	end   
  if snd.firstaidcuretrack.clumsiness ~= "10" then
		send("firstaid priority clumsiness 10")
	end  
  if snd.firstaidcuretrack.nyctophobia ~= "11" then
		send("firstaid priority nyctophobia 11")
	end 
  if snd.firstaidcuretrack.weariness ~= "12" then
		send("firstaid priority weariness 12")
	end 
  if snd.firstaidcuretrack.rot_spirit ~= "13" then
		send("firstaid priority rot_spirit 13")
	end 
  if snd.firstaidcuretrack.rot_benign ~= "14" then
		send("firstaid priority rot_benign 14")
	end  
  if snd.firstaidcuretrack.agoraphobia ~= "15" then
		send("firstaid priority agoraphobia 15")
	end 
  if snd.firstaidcuretrack.loneliness ~= "16" then
		send("firstaid priority loneliness 16")
	end 
  if snd.firstaidcuretrack.blindness ~= "26" then
		send("firstaid priority defence blindness reset")
	end 
  if snd.firstaidcuretrack.vertigo ~= "17" then
		send("firstaid priority vertigo 17")
	end 
  if snd.firstaidcuretrack.claustrophobia ~= "18" then
		send("firstaid priority claustrophobia 18")
	end
  if snd.firstaidcuretrack.commitment_fear ~= "19" then
		send("firstaid priority commitment_fear 19")
	end
  if snd.firstaidcuretrack.haemophilia ~= "20" then
		send("firstaid priority haemophilia 20")
	end
  if snd.firstaidcuretrack.exhausted ~= "21" then
		send("firstaid priority exhausted 21")
	end
  if snd.firstaidcuretrack.stupidity ~= "22" then
		send("firstaid priority stupidity 22")
	end
  if snd.firstaidcuretrack.dizziness ~= "23" then
		send("firstaid priority dizziness 23")
	end
  if snd.firstaidcuretrack.dissonance ~= "24" then
		send("firstaid priority dissonance 24")
	end
  if snd.firstaidcuretrack.frozen ~= "3" then
		send("firstaid priority frozen 3")
	end    
  if snd.firstaidcuretrack.voidgaze ~= "5" then
		send("firstaid priority voidgaze 5")
	end    
  if snd.firstaidcuretrack.left_leg_broken ~= "6" then
		send("firstaid priority left_leg_broken 6")
	end 
 	if snd.firstaidcuretrack.right_leg_broken ~= "6" then
		send("firstaid priority right_leg_broken 6")
	end 
 	if snd.firstaidcuretrack.left_arm_broken ~= "7" then
		send("firstaid priority left_arm_broken 7")
	end 
 	if snd.firstaidcuretrack.right_arm_broken ~= "7" then
		send("firstaid priority right_arm_broken 7")
	end  
	if snd.firstaidcuretrack.left_leg_damaged ~= "9" then
		send("firstaid priority left_leg_damaged 9")
	end   
  if snd.firstaidcuretrack.right_leg_damaged ~= "9" then
		send("firstaid priority right_leg_damaged 9")
	end   
  if snd.firstaidcuretrack.left_arm_damaged ~= "10" then
		send("firstaid priority left_arm_damaged 10")
	end 
  if snd.firstaidcuretrack.right_arm_damaged ~= "10" then
		send("firstaid priority right_arm_damaged 10")
	end 
	if snd.firstaidcuretrack.left_leg_mangled ~= "11" then
		send("firstaid priority left_leg_mangled 11")
	end   
  if snd.firstaidcuretrack.right_leg_mangled ~= "11" then
		send("firstaid priority right_leg_mangled 11")
	end   
  if snd.firstaidcuretrack.left_arm_mangled ~= "12" then
		send("firstaid priority left_arm_mangled 12")
	end 
  if snd.firstaidcuretrack.right_arm_mangled ~= "12" then
		send("firstaid priority right_arm_mangled 12")
	end 
  if snd.firstaidcuretrack.shivering ~= "18" then
		send("firstaid priority shivering 18")
	end 
  if snd.firstaidcuretrack.gloom ~= "20" then
		send("firstaid priority gloom 20")
	end 
  
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassPraenomen()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.asthma ~= "1" then
		send("firstaid priority asthma 1")
	end
  if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end
	if snd.firstaidcuretrack.paralysis ~= "3" then
		send("firstaid priority paralysis 3")
	end
 	if snd.firstaidcuretrack.paresis ~= "3" then
		send("firstaid priority paresis 3")
	end
  if snd.firstaidcuretrack.blindness ~= "3" then
		send("firstaid priority defence blindness 3")
	end 
  if snd.firstaidcuretrack.weariness ~= "5" then
		send("firstaid priority weariness 5")
	end
	if snd.firstaidcuretrack.confusion ~= "5" then
		send("firstaid priority confusion 5")
	end
	if snd.firstaidcuretrack.blood_curse ~= "5" then
		send("firstaid priority blood_curse 5")
	end
	if snd.firstaidcuretrack.blood_poison ~= "5" then
		send("firstaid priority blood_poison 5")
	end
	if snd.firstaidcuretrack.impatience ~= "6" then
		send("firstaid priority impatience 6")
	end
	if snd.firstaidcuretrack.epilepsy ~= "6" then
		send("firstaid priority epilepsy 6")
	end
	if snd.firstaidcuretrack.effused_blood ~= "7" then
		send("firstaid priority effused_blood 7")
	end
	if snd.firstaidcuretrack.peace ~= "7" then
		send("firstaid priority peace 7")
	end
	if snd.firstaidcuretrack.masochism ~= "7" then
		send("firstaid priority masochism 7")
	end
	if snd.firstaidcuretrack.haemophilia ~= "7" then
		send("firstaid priority haemophilia 7")
	end
	if snd.firstaidcuretrack.loneliness ~= "7" then
		send("firstaid priority loneliness 7")
	end
	if snd.firstaidcuretrack.vomiting ~= "7" then
		send("firstaid priority vomiting 7")
	end
	if snd.firstaidcuretrack.allergies ~= "7" then
		send("firstaid priority allergies 7")
	end
	if snd.firstaidcuretrack.recklessness ~= "8" then
		send("firstaid priority recklessness 8")
	end
	if snd.firstaidcuretrack.rend ~= "9" then
		send("firstaid priority rend 9")
	end
	if snd.firstaidcuretrack.sensitivity ~= "9" then
		send("firstaid priority sensitivity 9")
	end	
  
	snd.firstaidchangecure = false  -- keep last	
end


function snd.firstaidassAkkari()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.asthma ~= "1" then
		send("firstaid priority asthma 1")
	end
  if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end
	if snd.firstaidcuretrack.paralysis ~= "3" then
		send("firstaid priority paralysis 3")
	end
 	if snd.firstaidcuretrack.paresis ~= "3" then
		send("firstaid priority paresis 3")
	end
  if snd.firstaidcuretrack.blindness ~= "3" then
		send("firstaid priority defence blindness 3")
	end 
  if snd.firstaidcuretrack.weariness ~= "5" then
		send("firstaid priority weariness 5")
	end
	if snd.firstaidcuretrack.confusion ~= "5" then
		send("firstaid priority confusion 5")
	end
	if snd.firstaidcuretrack.blood_curse ~= "5" then
		send("firstaid priority blood_curse 5")
	end
	if snd.firstaidcuretrack.blood_poison ~= "5" then
		send("firstaid priority blood_poison 5")
	end
	if snd.firstaidcuretrack.impatience ~= "6" then
		send("firstaid priority impatience 6")
	end
	if snd.firstaidcuretrack.epilepsy ~= "6" then
		send("firstaid priority epilepsy 6")
	end
	if snd.firstaidcuretrack.effused_blood ~= "7" then
		send("firstaid priority effused_blood 7")
	end
	if snd.firstaidcuretrack.peace ~= "7" then
		send("firstaid priority peace 7")
	end
	if snd.firstaidcuretrack.masochism ~= "7" then
		send("firstaid priority masochism 7")
	end
	if snd.firstaidcuretrack.haemophilia ~= "7" then
		send("firstaid priority haemophilia 7")
	end
	if snd.firstaidcuretrack.loneliness ~= "7" then
		send("firstaid priority loneliness 7")
	end
	if snd.firstaidcuretrack.vomiting ~= "7" then
		send("firstaid priority vomiting 7")
	end
	if snd.firstaidcuretrack.allergies ~= "7" then
		send("firstaid priority allergies 7")
	end
	if snd.firstaidcuretrack.recklessness ~= "8" then
		send("firstaid priority recklessness 8")
	end
	if snd.firstaidcuretrack.rend ~= "9" then
		send("firstaid priority rend 9")
	end
	if snd.firstaidcuretrack.sensitivity ~= "9" then
		send("firstaid priority sensitivity 9")
	end	
  
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassShaman()  -- curing based on class being attacked by
  if snd.firstaidcuretrack.impatience ~= "2" then
		send("firstaid priority impatience 2")
	end 
  if snd.firstaidcuretrack.paranoia ~= "4" then
		send("firstaid priority paranoia 4")
	end
  if snd.firstaidcuretrack.stormtouched ~= "4" then
		send("firstaid priority stormtouched 4")
	end
  if snd.firstaidcuretrack.agoraphobia ~= "3" then
		send("firstaid priority agoraphobia 3")
	end
  if snd.firstaidcuretrack.claustrophobia ~= "5" then
		send("firstaid priority claustrophobia 5")
	end
  if snd.firstaidcuretrack.shyness ~= "6" then
		send("firstaid priority shyness 6")
	end
  if snd.firstaidcuretrack.stupidity ~= "6" then
		send("firstaid priority stupidity 6")
	end
  if (snd.class == "Sentinel" or snd.class == "Wayfarer" or snd.class == "Carnifex" or snd.class == "Revenant" or snd.class == "Monk" or snd.class == "Teradrim" or snd.class == "Alchemist" or snd.class == "Syssin") then
    if snd.firstaidcuretrack.clumsiness ~= "5" then
  		send("firstaid priority clumsiness 5")
  	end 
  else
    if snd.firstaidcuretrack.clumsiness ~= "7" then
  		send("firstaid priority clumsiness 7")
  	end     
  end
  if snd.firstaidcuretrack.infested ~= "7" then
		send("firstaid priority defence infested 7")
	end
  if snd.firstaidcuretrack.peace ~= "8" then
		send("firstaid priority defence peace 8")
	end
  if snd.firstaidcuretrack.blindness ~= "8" then
		send("firstaid priority defence blindness 8")
	end 
  if snd.firstaidcuretrack.deafness ~= "9" then
		send("firstaid priority defence deafness 9")
	end 
  
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassAlchemist()  -- curing based on class being attacked by
  if snd.firstaidcuretrack.impatience ~= "2" then
		send("firstaid priority impatience 2")
	end 
  if snd.firstaidcuretrack.paranoia ~= "3" then
		send("firstaid priority paranoia 3")
	end
  if snd.firstaidcuretrack.deafness ~= "3" then
		send("firstaid priority defence deafness 3")
	end 
  if snd.firstaidcuretrack.stormtouched ~= "4" then
		send("firstaid priority stormtouched 4")
	end
  if snd.firstaidcuretrack.agoraphobia ~= "5" then
		send("firstaid priority agoraphobia 5")
	end
  if snd.firstaidcuretrack.claustrophobia ~= "5" then
		send("firstaid priority claustrophobia 5")
	end
  if snd.firstaidcuretrack.shyness ~= "6" then
		send("firstaid priority shyness 6")
	end
  if (snd.class == "Sentinel" or snd.class == "Wayfarer" or snd.class == "Carnifex" or snd.class == "Revenant" or snd.class == "Monk" or snd.class == "Teradrim" or snd.class == "Tidesage" or snd.class == "Syssin") then
    if snd.firstaidcuretrack.clumsiness ~= "5" then
  		send("firstaid priority clumsiness 5")
  	end 
  else
    if snd.firstaidcuretrack.clumsiness ~= "7" then
  		send("firstaid priority clumsiness 7")
  	end     
  end
  if snd.firstaidcuretrack.blindness ~= "8" then
		send("firstaid priority defence blindness 8")
	end 
  
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassBard()  -- curing based on class being attacked by
  if snd.firstaidcuretrack.paralysis ~= "1" then
    send("firstaid priority paralysis 1")
  end
  if snd.firstaidcuretrack.perplexed ~= "2" then
    send("firstaid priority perplexed 2")
  end
  if snd.firstaidcuretrack.shyness ~= "3" then
    send("firstaid priority shyness 3")
  end 
  if snd.firstaidcuretrack.thin_blood ~= "4" then
    send("firstaid priority thin_blood 4")
  end 
  if snd.firstaidcuretrack.worrywart ~= "5" then
    send("firstaid priority worrywart 5")
  end 
  if snd.firstaidcuretrack.misery ~= "6" then
    send("firstaid priority misery 6")
  end 
  if snd.firstaidcuretrack.hollow ~= "7" then
    send("firstaid priority hollow 7")
  end 
  if snd.firstaidcuretrack.narcolepsy ~= "8" then
    send("firstaid priority narcolepsy 8")
  end 
  if snd.firstaidcuretrack.self_loathing ~= "8" then
    send("firstaid priority self_loathing 8")
  end 
  if snd.firstaidcuretrack.slickness ~= "9" then
    send("firstaid priority slickness 9")
  end 
  if snd.firstaidcuretrack.stupidity ~= "10" then
    send("firstaid priority stupidity 10")
  end  
  if snd.firstaidcuretrack.dizziness ~= "10" then
    send("firstaid priority dizziness 10")
  end  
  if snd.firstaidcuretrack.magnanimity ~= "11" then
    send("firstaid priority magnanimity 11")
  end  
  if snd.firstaidcuretrack.faintness ~= "12" then
    send("firstaid priority faintness 12")
  end  
 			-- "paresis", setup for if not archivist, etc 
  if snd.firstaidcuretrack.addiction ~= "13" then
    send("firstaid priority addiction 13")
  end 
  if snd.firstaidcuretrack.allergies ~= "14" then
    send("firstaid priority allergies 14")
  end 	
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassSyssin()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "1" then
		send("firstaid priority paresis 1")
	end	
	snd.firstaidchangecure = false  -- keep last	
end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>Firstaid defense</name>
									<packageName></packageName>
									<script>function snd.firstaiddefenceset()
	tempTimer(2, [[send("firstaid priority defence insulation 21##firstaid priority defence density 1##firstaid priority defence temperance 4##firstaid priority defence levitation 3##firstaid priority defence speed 2##firstaid priority defence antivenin 5##firstaid priority defence fangbarrier 1##firstaid priority defence insomnia 1##firstaid priority defence instawake 3##firstaid priority defence waterbreathing 3##firstaid priority defence deafness 4##firstaid priority defence blindness 3")]])	

end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>Class being used</name>
									<packageName></packageName>
									<script>
function snd.firstaidclass()  -- priority based on class being used, must add to firstaidresetlistnone
	if (snd.class == "None" or snd.class == "Shaman" or snd.class == "Alchemist" or snd.class == "Archivist" or snd.class == "Sciomancer" or snd.class == "Runecarver" or snd.class == "Teradrim" or snd.class == "Tidesage") and not snd.firstaidclassset then
		snd.firstaidcuretrack.paresis = "1"
		snd.firstaidclassset = true
		
	elseif (snd.class == "Revenant" or snd.class == "Templar") and not snd.firstaidclassset then
		snd.firstaidcuretrack.hubris = "25"
		snd.firstaidcuretrack.pacifism = "25"
		snd.firstaidcuretrack.peace = "25"
		snd.firstaidcuretrack.agony = "25"
		snd.firstaidcuretrack.limp_veins = "25"
		snd.firstaidcuretrack.lovers_effect = "25"
		snd.firstaidcuretrack.laxity = "25"
		snd.firstaidcuretrack.superstition = "25"
		snd.firstaidcuretrack.generosity = "25"
		snd.firstaidcuretrack.justice = "25"
		snd.firstaidcuretrack.magnamity = "25"
		snd.firstaidclassset = true
    
	end

end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>firstaidresetlistnone</name>
									<packageName></packageName>
									<script>
function snd.firstaidresetlistnone()

  
  --defences
  if snd.firstaidcuretrack.blindness ~= "3" then
    snd.setting_priority = "defence blindness 3"
snd.update_priority = 1 
 end
  -- add in checks for all base set and to set it back to normal - for non Aetolia but what i set
  -- pills 1
  if snd.firstaidcuretrack.crippled_body ~= "1" then
    snd.setting_priority = "crippled_body 1"
  end
  if snd.firstaidcuretrack.paralysis ~= "1" then
    snd.setting_priority = "paralysis 1"
  end
  --salves 1
  if snd.firstaidcuretrack.burnt_skin ~= "1" then
    snd.setting_priority = "burnt_skin 1"
snd.update_priority = 1 
 end
  -- special 1
  if snd.firstaidcuretrack.asleep ~= "1" then
    snd.setting_priority = "asleep 1"
snd.update_priority = 1 
 end
  if snd.firstaidcuretrack.fear ~= "1" then
    snd.setting_priority = "fear 1"
snd.update_priority = 1 
 end
  if snd.firstaidcuretrack.itchy ~= "1" then
    snd.setting_priority = "itchy 1"
  end 
  if snd.firstaidcuretrack.writhe_hoist ~= "1" then
    snd.setting_priority = "writhe_hoist 1"
  end
  
  -- pills 2
  
  if snd.firstaidcuretrack.asthma ~= "2" then
    snd.setting_priority = "asthma 2"
  end
  if snd.firstaidcuretrack.ringing_ears ~= "2" then
    snd.setting_priority = "ringing_ears 2"
  end
  if snd.firstaidcuretrack.clumsiness ~= "2" then
    snd.setting_priority = "clumsiness 2"
  end
  -- salves 2
  if snd.firstaidcuretrack.destroyed_throat ~= "2" then
    snd.setting_priority = "destroyed_throat 2"
snd.update_priority = 1 
 end  
  if snd.firstaidcuretrack.anorexia ~= "2" then
    snd.setting_priority = "anorexia 2"
snd.update_priority = 1 
 end
  if snd.firstaidcuretrack.gorged ~= "2" then
    snd.setting_priority = "gorged 2"
snd.update_priority = 1 
 end
  -- special 2
  if snd.firstaidcuretrack.writhe_impaled ~= "2" then
    snd.setting_priority = "writhe_impaled 2"
snd.update_priority = 1 
 end
  -- salves 3
	if snd.firstaidcuretrack.frozen ~= "3" then
		snd.setting_priority = "frozen 3"
	end  
	if snd.firstaidcuretrack.indifference ~= "3" then
		snd.setting_priority = "indifference 3"
	end  
  if snd.firstaidcuretrack.crushed_chest ~= "3" then
    snd.setting_priority = "crushed_chest 3"
  end 
  -- pills 3
	if snd.firstaidcuretrack.paresis ~= "3" and not (snd.class == "Shaman" or snd.class == "Archivist" or snd.class == "Alchemist" or snd.class == "Sciomancer" or snd.class == "Runecarver") then
		snd.setting_priority = "paresis 3"
	end
	if snd.firstaidcuretrack.slough ~= "3" then
		snd.setting_priority = "slough 3"
	end
	if snd.firstaidcuretrack.thin_blood ~= "3" then
		snd.setting_priority = "thin_blood 3"
	end
	if snd.firstaidcuretrack.accursed ~= "3" then
		snd.setting_priority = "accursed 3"
	end
	if snd.firstaidcuretrack.nyctophobia ~= "3" then
		snd.setting_priority = "nyctophobia 3"
	end
  -- special 3
  if snd.firstaidcuretrack.writhe_web ~= "3" then
    snd.setting_priority = "writhe_web 3"
snd.update_priority = 1 
 end  
  if snd.firstaidcuretrack.writhe_armpitlock ~= "3" then
    snd.setting_priority = "writhe_armpitlock 3"
  end
  if snd.firstaidcuretrack.writhe_necklock ~= "3" then
    snd.setting_priority = "writhe_necklock 3"
snd.update_priority = 1 
 end  
  if snd.firstaidcuretrack.writhe_thighlock ~= "3" then
    snd.setting_priority = "writhe_thighlock 3"
  end 
  if snd.firstaidcuretrack.writhe_transfix ~= "3" then
    snd.setting_priority = "writhe_transfix 3"
snd.update_priority = 1 
 end 
  if snd.firstaidcuretrack.writhe_bind ~= "3" then
    snd.setting_priority = "writhe_bind 3"
snd.update_priority = 1 
 end
  if snd.firstaidcuretrack.writhe_gunk ~= "3" then
    snd.setting_priority = "writhe_gunk 3"
snd.update_priority = 1 
 end
  if snd.firstaidcuretrack.writhe_ropes ~= "3" then
    snd.setting_priority = "writhe_ropes 3"
snd.update_priority = 1 
 end
  if snd.firstaidcuretrack.writhe_vines ~= "3" then
    snd.setting_priority = "writhe_vines 3"
snd.update_priority = 1 
 end
  if snd.firstaidcuretrack.writhe_grappled ~= "3" then
    snd.setting_priority = "writhe_grappled 3"
snd.update_priority = 1 
 end
  if snd.firstaidcuretrack.writhe_stasis ~= "3" then
    snd.setting_priority = "writhe_stasis 3"
snd.update_priority = 1 
 end
  if snd.firstaidcuretrack.voyria ~= "3" then
    snd.setting_priority = "voyria 3"
snd.update_priority = 1 
 end
  -- salves 4 
  
  -- pipes
  if snd.firstaidcuretrack.aeon ~= "4" and not snd.have_aff("anorexia") then
    snd.setting_priority = "aeon 4" 
  elseif snd.firstaidcuretrack.aeon ~= "5" and snd.have_aff("slickness") then
    snd.setting_priority = "aeon 5" 
  end

  -- pills 4
  
	if snd.firstaidcuretrack.baldness ~= "4" then
		snd.setting_priority = "baldness 4"
	end
	if snd.firstaidcuretrack.hypochondria ~= "4" then
		snd.setting_priority = "hypochondria 4"
	end
	if snd.firstaidcuretrack.impatience ~= "4" then
		snd.setting_priority = "impatience 4"
	end
	if snd.firstaidcuretrack.infested ~= "4" then
		snd.setting_priority = "infested 4"
	end
	if snd.firstaidcuretrack.mirroring ~= "4" then
		snd.setting_priority = "mirroring 4"
	end
	if snd.firstaidcuretrack.pacifism ~= "4" and not (snd.class == "Revenant" or snd.class == "Templar") then
		snd.setting_priority = "pacifism 4"
	end
	if snd.firstaidcuretrack.patterns ~= "4" then
		snd.setting_priority = "patterns 4"
	end

	if snd.firstaidcuretrack.weariness ~= "4" then
		snd.setting_priority = "weariness 4"
	end
  -- special 4
  if snd.firstaidcuretrack.vinethorns ~= "4" then
    snd.setting_priority = "vinethorns 4"
  end
  -- pipes 5
  if snd.firstaidcuretrack.slickness ~= "4" and snd.have_aff("anorexia") then
    snd.setting_priority = "slickness 4" 
  elseif snd.firstaidcuretrack.slickness ~= "5" then
    snd.setting_priority = "slickness 5" 
  end
  -- salves 5
	if snd.firstaidcuretrack.left_leg_bruised_critical ~= "5" then
		snd.setting_priority = "left_leg_bruised_critical 5"
	end  
	if snd.firstaidcuretrack.right_leg_bruised_critical ~= "5" then
		snd.setting_priority = "right_leg_bruised_critical 5"
	end  
	if snd.firstaidcuretrack.left_arm_bruised_critical ~= "5" then
		snd.setting_priority = "left_arm_bruised_critical 5"
	end 
	if snd.firstaidcuretrack.right_arm_bruised_critical ~= "5" then
		snd.setting_priority = "right_arm_bruised_critical 5"
	end 
	if snd.firstaidcuretrack.torso_bruised_critical ~= "5" then
		snd.setting_priority = "torso_bruised_critical 5"
	end
	if snd.firstaidcuretrack.head_bruised_critical ~= "5" then
		snd.setting_priority = "head_bruised_critical 5"
	end
  -- pills 5
	if snd.firstaidcuretrack.blighted ~= "5" then
		snd.setting_priority = "blighted 5"
	end
	if snd.firstaidcuretrack.blood_curse ~= "5" then
		snd.setting_priority = "blood_curse 5"
	end
	if snd.firstaidcuretrack.blood_poison ~= "5" then
		snd.setting_priority = "blood_poison 5"
	end
	if snd.firstaidcuretrack.confusion ~= "5" then
		snd.setting_priority = "confusion 5"
	end
	if snd.firstaidcuretrack.idiocy ~= "5" then
		snd.setting_priority = "idiocy 5"
	end
	if snd.firstaidcuretrack.mental_disruption ~= "5" then
		snd.setting_priority = "mental_disruption 5"
	end
	if snd.firstaidcuretrack.merciful ~= "5" then
		snd.setting_priority = "merciful 5"
	end
	if snd.firstaidcuretrack.physical_disruption ~= "5" then
		snd.setting_priority = "physical_disruption 5"
	end
	if snd.firstaidcuretrack.plodding ~= "5" then
		snd.setting_priority = "plodding 5"
	end
  -- pipes
  if snd.firstaidcuretrack.hellsight ~= "6" then
    snd.setting_priority = "hellsight 6"
snd.update_priority = 1 
 end  
  -- salves 6
  if snd.firstaidcuretrack.head_mangled ~= "6" then
    snd.setting_priority = "head_mangled 6"
snd.update_priority = 1 
 end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "6" then
		snd.setting_priority = "left_leg_bruised_moderate 6"
	end  
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "6" then
		snd.setting_priority = "right_leg_bruised_moderate 6"
	end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "6" then
		snd.setting_priority = "left_arm_bruised_moderate 6"
	end    
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "6" then
		snd.setting_priority = "right_arm_bruised_moderate 6"
	end 
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "6" then
		snd.setting_priority = "torso_bruised_moderate 6"
	end 
  if snd.firstaidcuretrack.head_bruised_moderate ~= "6" then
		snd.setting_priority = "head_bruised_moderate 6"
	end 
  -- pills 6
	if snd.firstaidcuretrack.allergies ~= "6" then
		snd.setting_priority = "allergies 6"
	end
	if snd.firstaidcuretrack.crippled ~= "6" then
		snd.setting_priority = "crippled 6"
	end
	if snd.firstaidcuretrack.epilepsy ~= "6" then
		snd.setting_priority = "epilepsy 6"
	end
	if snd.firstaidcuretrack.haemophilia ~= "6" then
		snd.setting_priority = "haemophilia 6"
	end
	if snd.firstaidcuretrack.impairment ~= "6" then
		snd.setting_priority = "impairment 6"
	end
	if snd.firstaidcuretrack.lethargy ~= "6" then
		snd.setting_priority = "lethargy 6"
	end
	if snd.firstaidcuretrack.loneliness ~= "6" then
		snd.setting_priority = "loneliness 6"
	end
	if snd.firstaidcuretrack.masochism ~= "6" then
		snd.setting_priority = "masochism 6"
	end
	if snd.firstaidcuretrack.recklessness ~= "6" then
		snd.setting_priority = "recklessness 6"
	end
	if snd.firstaidcuretrack.rend ~= "6" then
		snd.setting_priority = "rend 6"
	end
	if snd.firstaidcuretrack.stormtouched ~= "6" then
		snd.setting_priority = "stormtouched 6"
	end
	if snd.firstaidcuretrack.sensitivity ~= "6" then
		snd.setting_priority = "sensitivity 6"
	end
	if snd.firstaidcuretrack.vomiting ~= "6" then
		snd.setting_priority = "vomiting 6"
	end

  -- pipes
  if snd.firstaidcuretrack.withering ~= "7" then
    snd.setting_priority = "withering 7"
snd.update_priority = 1 
 end 
  -- salves 7
  if snd.firstaidcuretrack.left_leg_broken ~= "7" then
    snd.setting_priority = "left_leg_broken 7"
  end 
 	if snd.firstaidcuretrack.right_leg_broken ~= "7" then
		snd.setting_priority = "right_leg_broken 7"
	end 
 	if snd.firstaidcuretrack.left_arm_broken ~= "7" then
		snd.setting_priority = "left_arm_broken 7"
	end 
 	if snd.firstaidcuretrack.right_arm_broken ~= "7" then
		snd.setting_priority = "right_arm_broken 7"
	end 
 	if snd.firstaidcuretrack.firstaid_predict_arms ~= "7" then
		snd.setting_priority = "firstaid_predict_arms 7"
	end   
 	if snd.firstaidcuretrack.firstaid_predict_legs ~= "7" then
		snd.setting_priority = "firstaid_predict_legs 7"
	end 
 	if snd.firstaidcuretrack.firstaid_predict_any_limb ~= "7" then
		snd.setting_priority = "firstaid_predict_any_limb 7"
	end  
  -- pills 7
	if snd.firstaidcuretrack.berserking ~= "7" then
		snd.setting_priority = "berserking 7"
	end
	if snd.firstaidcuretrack.egocentric ~= "7" then
		snd.setting_priority = "egocentric 7"
	end
	if snd.firstaidcuretrack.exhausted ~= "7" then
	  snd.setting_priority = "exhausted 7"
	end
	if snd.firstaidcuretrack.hallucinations ~= "7" then
		snd.setting_priority = "hallucinations 7"
	end
	if snd.firstaidcuretrack.hatred ~= "7" then
		snd.setting_priority = "hatred 7"
	end
	if snd.firstaidcuretrack.heartflutter ~= "7" then
		snd.setting_priority = "heartflutter 7"
	end
	if snd.firstaidcuretrack.hypersomnia ~= "7" then
		snd.setting_priority = "hypersomnia 7"
	end
	if snd.firstaidcuretrack.justice ~= "7" and not (snd.class == "Revenant" or snd.class == "Templar") then
		snd.setting_priority = "justice 7"
	end
	if snd.firstaidcuretrack.laxity ~= "7" and not (snd.class == "Revenant" or snd.class == "Templar") then
		snd.setting_priority = "laxity 7"
	end
	if snd.firstaidcuretrack.lovers_effect ~= "7" and not (snd.class == "Revenant" or snd.class == "Templar") then
		snd.setting_priority = "lovers_effect 7"
	end
	if snd.firstaidcuretrack.peace ~= "7" and not (snd.class == "Revenant" or snd.class == "Templar") then
		snd.setting_priority = "peace 7"
	end
	if snd.firstaidcuretrack.stupidity ~= "7" then
		snd.setting_priority = "stupidity 7"
	end
  -- pipes 8
  if snd.firstaidcuretrack.besilence ~= "8" then
    snd.setting_priority = "besilence 8"
snd.update_priority = 1 
 end   
  -- salves 8
  if snd.firstaidcuretrack.ice_encased ~= "8" then
    snd.setting_priority = "ice_encased 8"
snd.update_priority = 1 
 end 
	if snd.firstaidcuretrack.left_leg_dislocated ~= "8" then
		snd.setting_priority = "left_leg_dislocated 8"
	end  
	if snd.firstaidcuretrack.right_leg_dislocated ~= "8" then
		snd.setting_priority = "right_leg_dislocated 8"
	end 
	if snd.firstaidcuretrack.left_arm_dislocated ~= "8" then
		snd.setting_priority = "left_arm_dislocated 8"
	end 
	if snd.firstaidcuretrack.right_arm_dislocated ~= "8" then
		snd.setting_priority = "right_arm_dislocated 8"
	end 
  -- pills 8
	if snd.firstaidcuretrack.agoraphobia ~= "8" then
		snd.setting_priority = "agoraphobia 8"
	end
	if snd.firstaidcuretrack.claustrophobia ~= "8" then
		snd.setting_priority = "claustrophobia 8"
	end
	if snd.firstaidcuretrack.dementia ~= "8" then
		snd.setting_priority = "dementia 8"
	end
	if snd.firstaidcuretrack.dissonance ~= "8" then
		snd.setting_priority = "dissonance 8"
	end
	if snd.firstaidcuretrack.dizziness ~= "8" then
		snd.setting_priority = "dizziness 8"
	end
	if snd.firstaidcuretrack.faintness ~= "8" then
		snd.setting_priority = "faintness 8"
	end
	if snd.firstaidcuretrack.paranoia ~= "8" then
		snd.setting_priority = "paranoia 8"
	end
	if snd.firstaidcuretrack.shyness ~= "8" then
		snd.setting_priority = "shyness 8"
	end
	if snd.firstaidcuretrack.vertigo ~= "8" then
		snd.setting_priority = "vertigo 8"
	end
  -- pipes 9
  if snd.firstaidcuretrack.disfigurement ~= "9" and (snd.class == "Carnifex" or snd.class == "Earthcaller" or snd.class == "Luminary" or snd.class == "Indorani" or snd.class == "Praenomen" or snd.class == "Ravager" or snd.class == "Teradrim" or snd.class == "Shaman" or snd.class == "Warden" or snd.class == "Sentinel" or snd.class == "Oneiromancer" or snd.class == "Sciomancer" or snd.class == "Ascendril" or snd.class == "Bloodborn" or snd.class == "Runecarver") then
    snd.setting_priority = "disfigurement 9"
  elseif snd.firstaidcuretrack.disfigurement ~= "13" and (snd.class == "Monk" or snd.class == "Syssin" or snd.class == "Bard" or snd.class == "Archivist" or snd.class == "Revenant" or snd.class == "Templar" or snd.class == "Shapeshifter" or snd.class == "Wayfarer") then
    snd.setting_priority = "disfigurement 13"
snd.update_priority = 1 
 end  
  -- salves 9
  if snd.firstaidcuretrack.left_leg_damaged ~= "9" then
    snd.setting_priority = "left_leg_damaged 9"
snd.update_priority = 1 
 end
	if snd.firstaidcuretrack.right_leg_damaged ~= "9" then
		snd.setting_priority = "right_leg_damaged 9"
	end 
	if snd.firstaidcuretrack.left_arm_damaged ~= "9" then
		snd.setting_priority = "left_arm_damaged 9"
	end
	if snd.firstaidcuretrack.right_arm_damaged ~= "9" then
		snd.setting_priority = "right_arm_damaged 9"
	end  
	if snd.firstaidcuretrack.head_damaged ~= "9" then
		snd.setting_priority = "head_damaged 9"
	end 
	if snd.firstaidcuretrack.torso_damaged ~= "9" then
		snd.setting_priority = "torso_damaged 9"
	end 
  -- pills 9
	if snd.firstaidcuretrack.addiction ~= "9" then
		snd.setting_priority = "addiction 9"
	end
	if snd.firstaidcuretrack.body_odor ~= "9" then
		snd.setting_priority = "body_odor 9"
	end
	if snd.firstaidcuretrack.commitment_fear ~= "9" then
		snd.setting_priority = "commitment_fear 9"
	end
	if snd.firstaidcuretrack.hubris ~= "9" and not (snd.class == "Revenant" or snd.class == "Templar") then
		snd.setting_priority = "hubris 9"
	end
	if snd.firstaidcuretrack.magnanimity ~= "9" and not (snd.class == "Revenant" or snd.class == "Templar") then
		snd.setting_priority = "magnanimity 9"
	end
	if snd.firstaidcuretrack.sadness ~= "9" then
		snd.setting_priority = "sadness 9"
	end
	if snd.firstaidcuretrack.self_pity ~= "9" then
		snd.setting_priority = "self-pity 9"
	end
  -- pipes 10
  if snd.firstaidcuretrack.migraine ~= "10" then
    snd.setting_priority = "migraine 10"
snd.update_priority = 1 
 end
  -- salves 10
  if snd.firstaidcuretrack.left_arm_mangled ~= "10" then
    snd.setting_priority = "left_arm_mangled 10"
  end
	if snd.firstaidcuretrack.right_arm_mangled ~= "10" then
		snd.setting_priority = "right_arm_mangled 10"
	end
	if snd.firstaidcuretrack.left_leg_mangled ~= "10" then
		snd.setting_priority = "left_leg_mangled 10"
	end   
	if snd.firstaidcuretrack.right_leg_mangled ~= "10" then
		snd.setting_priority = "right_leg_mangled 10"
	end  
	if snd.firstaidcuretrack.torso_mangled ~= "10" then
		snd.setting_priority = "torso_mangled 10"
	end 
  -- pills 10
	if snd.firstaidcuretrack.blisters ~= "10" then
		snd.setting_priority = "blisters 10"
	end
	if snd.firstaidcuretrack.generosity ~= "10" and not (snd.class == "Revenant" or snd.class == "Templar") then
		snd.setting_priority = "generosity 10"
	end
	if snd.firstaidcuretrack.superstition ~= "10" and not (snd.class == "Revenant" or snd.class == "Templar") then
		snd.setting_priority = "superstition 10"
	end
  -- pipes 11
  if snd.firstaidcuretrack.squelched ~= "11" then
    snd.setting_priority = "squelched 11"
snd.update_priority = 1 
 end
  -- salves 11
	if snd.firstaidcuretrack.left_leg_amputated ~= "11" then
		snd.setting_priority = "left_leg_amputated 11"
	end  
	if snd.firstaidcuretrack.right_leg_amputated ~= "11" then
		snd.setting_priority = "right_leg_amputated 11"
	end    
	if snd.firstaidcuretrack.left_arm_amputated ~= "11" then
		snd.setting_priority = "left_arm_amputated 11"
	end    
	if snd.firstaidcuretrack.right_arm_amputated ~= "11" then
		snd.setting_priority = "right_arm_amputated 11"
	end 
  -- pipes 12
  if snd.firstaidcuretrack.deadening ~= "12" then
    snd.setting_priority = "deadening 12"
snd.update_priority = 1 
 end  
  -- salves 12
	if snd.firstaidcuretrack.spinal_rip ~= "12" then
		snd.setting_priority = "spinal_rip 12"
	end  
  -- salves 13
	if snd.firstaidcuretrack.voidgaze ~= "13" then
		snd.setting_priority = "voidgaze 13"
	end 
  -- salves 14
	if snd.firstaidcuretrack.left_leg_bruised ~= "14" then
		snd.setting_priority = "left_leg_bruised 14"
	end 
	if snd.firstaidcuretrack.right_leg_bruised ~= "14" then
		snd.setting_priority = "right_leg_bruised 14"
	end
	if snd.firstaidcuretrack.left_arm_bruised ~= "14" then
		snd.setting_priority = "left_arm_bruised 14"
	end
	if snd.firstaidcuretrack.right_arm_bruised ~= "14" then
		snd.setting_priority = "right_arm_bruised 14"
	end  
	if snd.firstaidcuretrack.head_bruised ~= "14" then
		snd.setting_priority = "head_bruised 14"
	end     
	if snd.firstaidcuretrack.torso_bruised ~= "14" then
		snd.setting_priority = "torso_bruised 14"
	end    
  -- salves 15
  if snd.firstaidcuretrack.mauled_face ~= "15" then
		snd.setting_priority = "mauled_face 15"
	end  
  if snd.firstaidcuretrack.heatspear ~= "15" then
		snd.setting_priority = "heatspear 15"
	end 
  -- salves 16
  if snd.firstaidcuretrack.lightwound ~= "16" then
		snd.setting_priority = "lightwound 16"
	end     
  if snd.firstaidcuretrack.ablaze ~= "16" then
		snd.setting_priority = "ablaze 16"
	end   

  -- salves 17
  if snd.firstaidcuretrack.hypothermia ~= "17" then
		snd.setting_priority = "hypothermia 17"
	end
  -- salves 18
  if snd.firstaidcuretrack.shivering ~= "18" then
		snd.setting_priority = "shivering 18"
	end 
  -- salves 19
  if snd.firstaidcuretrack.gloom ~= "19" then
		snd.setting_priority = "gloom 19"
	end 
  if snd.firstaidcuretrack.cracked_ribs ~= "19" then
		snd.setting_priority = "cracked_ribs 19"
	end  
  -- salves 20
  if snd.firstaidcuretrack.deepwound ~= "20" then
		snd.setting_priority = "deepwound 20"
	end 
  
  if snd.firstaidcuretrack.narcolepsy ~= "20" then
    snd.setting_priority = "narcolepsy 20"
  end 
  -- salves 21
  
  -- salves 22
  if snd.firstaidcuretrack.whiplash ~= "22" then
		snd.setting_priority = "whiplash 22"
	end 
  if snd.firstaidcuretrack.backstrain ~= "22" then
		snd.setting_priority = "backstrain 22"
	end      
  if snd.firstaidcuretrack.sore_wrist ~= "22" then
		snd.setting_priority = "sore_wrist 22"
	end  
  -- salves 23
  if snd.firstaidcuretrack.muscle_spasms ~= "23" then
		snd.setting_priority = "muscle_spasms 23"
	end  
  if snd.firstaidcuretrack.stiffness ~= "23" then
		snd.setting_priority = "stiffness 23"
	end 
  if snd.firstaidcuretrack.collapsed_lung ~= "23" then
		snd.setting_priority = "collapsed_lung 23"
	end 
  if snd.firstaidcuretrack.sore_ankle ~= "23" then
		snd.setting_priority = "sore_ankle 23"
	end   
  if snd.firstaidcuretrack.weak_grip ~= "23" then
		snd.setting_priority = "weak_grip 23"
	end 
  -- salves 24
  if snd.firstaidcuretrack.leftarm ~= "24" or snd.firstaidcuretrack.preleftarm ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE left arm 20% 24" 
  end
  if snd.firstaidcuretrack.head ~= "24" or snd.firstaidcuretrack.prehead ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE head 20% 24" 
  end 
  if snd.firstaidcuretrack.torso ~= "24" or snd.firstaidcuretrack.pretorso ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE torso 20% 24" 
snd.update_priority = 1 
 end 
  if snd.firstaidcuretrack.rightarm ~= "24" or snd.firstaidcuretrack.prerightarm ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE right arm 20% 24" 
  end
  if snd.firstaidcuretrack.leftleg ~= "24" or snd.firstaidcuretrack.preleftleg ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE left leg 20% 24" 
  end
  
  if snd.firstaidcuretrack.rightleg ~= "24" or snd.firstaidcuretrack.prerightleg ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE right leg 20% 24" 
  end 
  
  
  -- salves 25
  if snd.firstaidcuretrack.blurry_vision ~= "25" then
		snd.setting_priority = "blurry_vision 25"
	end 
  if snd.firstaidcuretrack.stuttering ~= "25" then
		snd.setting_priority = "stuttering 25"
	end 
  if snd.firstaidcuretrack.crippled_throat ~= "25" then
		snd.setting_priority = "crippled_throat 25"
	end   
  if snd.firstaidcuretrack.burnt_eyes ~= "25" then
		snd.setting_priority = "burnt_eyes 25"
	end 
  if snd.firstaidcuretrack.effused_blood ~= "25" then
		snd.setting_priority = "effused_blood 25"
	end 
  if snd.firstaidcuretrack.smashed_throat ~= "25" then
		snd.setting_priority = "smashed_throat 25"
	end 
  if snd.firstaidcuretrack.void ~= "25" then
		snd.setting_priority = "void 25"
	end 
  if snd.firstaidcuretrack.weakvoid ~= "25" then
		snd.setting_priority = "weakvoid 25"
	end 
  -- 26 things you want off
  if snd.firstaidcuretrack.embedded_axe ~= "26" then
    snd.setting_priority = "embedded_axe 26"
  end
  if snd.firstaidcuretrack.oiled ~= "26" then
    snd.setting_priority = "oiled 26"
snd.update_priority = 1 
 end
  
  if snd.can_firstaid() then
    if snd.update_priority &gt; 0 then
      snd.send("firstaid priority " ..snd.setting_priority)
      snd.firstaid_go = false
      enableTimer("reset check")
      tempTimer(.1, [[snd.firstaid_go = true]])
    end
  end 
  
	snd.firstaidchangecure = false -- keep last
end</script>
									<eventHandlerList />
								</Script>
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Tree Check</name>
								<packageName></packageName>
								<script>function snd.herbcount()
	snd.herbcountnum = "0"
	for i = 1, snd.aff_tally() do
	local affliction = snd.have_aff[i]
		if snd.afflictions[i].cures.herb then
		  snd.herbcountnum = snd.herbcountnum + 1 
		end
	end

end

function snd.salvecount()
	snd.salvecountnum = "0"
	for i = 1, snd.aff_tally() do
	local affliction = snd.have_aff[i]
		if snd.afflictions[i].cures.salve then
 		   snd.salvecountnum = snd.salvecountnum + 1 
		end
	end

end

function snd.treecheck()

	snd.herbcount()
	snd.salvecount()
	
	if not snd.have_aff("right_arm_broken") or not snd.have_aff("left_arm_broken") then 
		if snd.tree and not snd.have_aff("paralysis") and not snd.have_aff("paresis") and not snd.have_aff("stun") and not snd.writheaffflag then
			if tonumber(snd.herbcountnum) &gt; 2 then 
				snd.send("touch tree")
				if snd.have_aff("stupidity") then
					snd.send("touch tree")
				end
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.send("touch tree")
				snd.tree == false end)]])
			elseif tonumber(snd.salvecountnum) &gt; 2 then 
				snd.send("touch tree")
				if snd.have_aff("stupidity") then
					snd.send("touch tree")
				end
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.send("touch tree")
				snd.tree == false end)]])
			elseif snd.have_aff("anorexia") then
				if snd.have_aff("stupidity") then
					snd.send("touch tree")
				end
				snd.send("touch tree")
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.send("touch tree")
				snd.tree == false end)]])
			elseif (snd.have_aff("stupidity") or snd.have_aff("confusion") or snd.have_aff("anorexia") or snd.have_aff("asthma") or snd.have_aff("destroyed_throat") or snd.have_aff("unknown") or snd.have_aff("hypochondria") or snd.have_aff("weariness")) or (snd.have_aff("weariness") and snd.have_aff("clumsiness")) then
				snd.set_queue("touch tree")
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.set_queue("touch tree")
				snd.tree == false end)]])
			elseif snd.have_aff("peace") and tonumber(snd.herbcountnum) &gt; 1 then
				snd.set_queue("touch tree")
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.set_queue("touch tree")
				snd.tree == false end)]])
			end
		end
	end
end



</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Master curing call</name>
								<packageName></packageName>
								<script>function snd.mastercheck()
	if not gmcp.Room then return end

	if not snd.salveaffflag and not snd.have_aff("slickness") and not snd.have_aff("asthma") and not snd.have_aff("slough") and snd.salvebal and (snd.have_aff("void") or snd.have_aff("weakvoid")) then 
		snd.send("apply caloric")
		snd.salvebal = false
		snd.salveretry = true
		if snd.retard == false and not snd.have_aff("aeon") then 
			enableTimer("salveretry") 
		else 
			enableTimer("salveretryretard") 
		end
	end
       
	if snd.sync and (snd.have_aff("slough") or snd.have_aff("slickness")) and (snd.class_hitting == "archivist" or snd.class_hitting == "indorani" or snd.class_hitting == "oneiromancer") and (snd.have_aff("right_leg_broken") or snd.have_aff("left_leg_broken"))then
		snd.send("restore")
		snd.sync = false
	end


end -- function end


function snd.caloricreset()
	snd.aff_remove("frozen")
	snd.aff_remove("shivering")
end

function snd.epidermalreset()
	snd.aff_remove("anorexia")
	snd.aff_remove("blurry_vision")
	snd.aff_remove("stuttering")
	snd.aff_remove("indifference")
	snd.aff_remove("effused_blackbile")
	snd.aff_remove("effused_yellowbile")
	snd.aff_remove("effused_blood")
	snd.aff_remove("effused_phlegm")
	snd.aff_remove("burnt_eyes")
	snd.aff_remove("gorged")
end

</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>staone script</name>
								<packageName></packageName>
								<script>function snd.staone()

  if snd.balance.nimbless and not snd.have_aff("fallen") then
    snd.set_queue("nimbleness " ..snd.sep)
  end 
  
  if snd.class == "Wayfarer" then
    if tonumber(gmcp.Char.Vitals.fury) &lt; 40 and snd.defenses.def_dauntless.state ~= "deffed" and snd.balance.fury then
      snd.send("fury dauntless on " ..snd.sep)
    end
  end 

  if gmcp.Char.Vitals.equilibrium == "1" and gmcp.Char.Vitals.balance == "1" and gmcp.Char.Vitals.left_arm == "1" and gmcp.Char.Vitals.right_arm == "1" and not snd.have_aff("blackout")then 
    snd.sync = true 
  end

  if snd.hatredcheck then
    snd.hatredcheck = false
    snd.send("order entourage attack me"..snd.sep.."order entourage passive"..snd.sep.."order entourage kill " ..snd.target)
  end

  if not snd.have_aff("stun") and snd.toggles.active then
    if (tonumber(gmcp.Char.Vitals.hp) &lt; 1350 or tonumber(snd.percentesthealth) &lt; 1350) and snd.endgameuse ~= "none" and gmcp.Char.Vitals.hp ~= "0" and (tonumber(gmcp.Char.Vitals.mp) &gt; 3000 and tonumber(snd.percentestmana) &gt; 3000) and not snd.have_aff("blackout") then
      snd.send(snd.endgamehealth)
    elseif (tonumber(gmcp.Char.Vitals.hp) &lt; 1350 or tonumber(snd.percentesthealth) &lt; 1350) and snd.endgameuse ~= "none" and gmcp.Char.Vitals.hp ~= "0" and not snd.have_aff("stun") and not snd.have_aff("asleep") and (tonumber(gmcp.Char.Vitals.mp) &gt; 3000 and tonumber(snd.percentestmana) &gt; 3000) and not snd.have_aff("blackout") then
      snd.send(snd.endgamehealth)
    elseif snd.have_aff("vinethorns") and not snd.have_aff("stun") and not snd.have_aff("stand") then
      snd.send("pull thorn from body")
    elseif tonumber(snd.unknownquantity) &gt; 2 and not snd.have_aff("hypochondria") and not snd.diag_sent then
      snd.send("qeb diagnose")
      snd.diag_sent = true
      tempTimer(1, [[snd.diag_sent = false]])
    end
  end
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Extra Sipper</name>
								<packageName></packageName>
								<script>function snd.sipfunction()
if not snd.channeling then

if snd.have_aff("recklessness") or snd.have_aff("blackout") or (snd.class == "Carnifex" and snd.defenses.def_reckless.state ~= "deffed") or (snd.class == "Warden" and snd.defenses.def_battleflow.state ~= "deffed") then

	if snd.class == "Archivist" and snd.defenses.def_linked.state ~= "deffed" then
		if tonumber(snd.percentesthealth) &lt; 85 and tonumber(snd.percentestmana) &lt; 100 then
			snd.sipmana()
		elseif tonumber(gmcp.Char.Vitals.hp) == 1 then
			snd.sipmana()
		elseif tonumber(snd.percentesthealth) &lt; 85 then 
			snd.siphealth()
		elseif tonumber(snd.percentestmana) &lt; 85 then 
			snd.sipmana()
		end

	elseif (snd.count(snd.people_hitting_me)) &lt; 2 then
		if (snd.class_hitting == "praenomen" or snd.class_hitting == "akkari" or snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller") then 
			if tonumber(snd.percentesthealth) &gt; 45 and tonumber(snd.percentestmana) &lt; 70 then
				snd.sipmana()
			elseif tonumber(snd.percentesthealth) &gt; 75 and tonumber(snd.percentestmana) &lt; 90 then 
				snd.sipmana()
			elseif tonumber(snd.percentesthealth) &gt; 25 and tonumber(snd.percentestmana) &lt; 60 and (snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller") then
				snd.sipmana()
			elseif tonumber(snd.percentesthealth) &lt; 35 then
				snd.siphealth() 
			elseif tonumber(snd.percentesthealth) &lt; 90 and tonumber(snd.percentestmana) &gt; 69 then
				snd.siphealth()
			elseif tonumber(snd.percentesthealth) &lt; 87 then 
    			snd.siphealth()
			end
		else
			if tonumber(snd.percentesthealth) &lt; 87 and tonumber(snd.percentestmana) &gt; 15 then 
    			snd.siphealth()
			elseif tonumber(snd.percentestmana) &lt; 85 then
				snd.sipmana()
			end
		end

	elseif (snd.count(snd.people_hitting_me)) &gt; 1 and (snd.class_hitting == "praenomen" or snd.class_hitting == "akkari" or snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller") then
			if tonumber(snd.percentesthealth) &lt; 87 and tonumber(snd.percentestmana) &gt; 65 then 
    			snd.siphealth()
			elseif tonumber(snd.percentesthealth) &gt; 45 and tonumber(snd.percentestmana) &lt; 60 and (snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller") then
				snd.sipmana()	
			elseif tonumber(snd.percentesthealth) &gt; 45 and tonumber(snd.percentestmana) &lt; 45 and snd.class_hitting == "praenomen" then
				snd.sipmana()	
			elseif tonumber(snd.percentesthealth) &lt; 35 and tonumber(snd.percentestmana) &gt; 45 then 
    			snd.siphealth()
			elseif tonumber(snd.percentesthealth) &lt; 15 and tonumber(snd.percentestmana) &gt; 10 then 
    			snd.siphealth()
			elseif tonumber(snd.percentesthealth) &lt; 87 then 
    			snd.siphealth()
			end
		
	else
		    snd.siphealth()
	end


else  -- not reckless/blackout

	if snd.class == "Archivist" and snd.defenses.def_linked.state ~= "deffed" then
		if tonumber(snd.percenthealth) &lt; 85 and tonumber(snd.percentmana) &lt; 100 then
			snd.sipmana()
		elseif tonumber(gmcp.Char.Vitals.hp) == 1 then
			snd.sipmana()
		elseif tonumber(snd.percenthealth) &lt; 85 then 
			snd.siphealth()
		elseif tonumber(snd.percentmana) &lt; 85 then 
			snd.sipmana()
		end

	elseif (snd.count(snd.people_hitting_me)) &lt; 2 then
		if (snd.class_hitting == "praenomen" or snd.class_hitting == "akkari" or snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller") then  
			if tonumber(snd.percenthealth) &gt; 45 and tonumber(snd.percentmana) &lt; 70 then
				snd.sipmana()
			elseif tonumber(snd.percenthealth) &gt; 75 and tonumber(snd.percentmana) &lt; 90 then 
				snd.sipmana()
			elseif tonumber(snd.percenthealth) &gt; 25 and tonumber(snd.percentmana) &lt; 60 and (snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller") then
				snd.sipmana()
			elseif tonumber(snd.percenthealth) &lt; 35 then
				snd.siphealth() 
			elseif tonumber(snd.percenthealth) &lt; 90 and tonumber(snd.percentmana) &gt; 69 then
				snd.siphealth()
			elseif tonumber(snd.percenthealth) &lt; 87 then 
    			snd.siphealth()
			end

		else
			if tonumber(snd.percenthealth) &lt; 87 and tonumber(snd.percentmana) &gt; 15 then 
    			snd.siphealth()
			elseif tonumber(snd.percentmana) &lt; 85 then
				snd.sipmana()
			end
		end

	elseif (snd.count(snd.people_hitting_me)) &gt; 1 and (snd.class_hitting == "praenomen" or snd.class_hitting == "akkari" or snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller") then
			if tonumber(snd.percenthealth) &lt; 87 and tonumber(snd.percentmana) &gt; 65 then 
    			snd.siphealth()
			elseif tonumber(snd.percenthealth) &gt; 45 and tonumber(snd.percentmana) &lt; 60 and (snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller") then
				snd.sipmana()	
			elseif tonumber(snd.percenthealth) &gt; 45 and tonumber(snd.percentmana) &lt; 45 and (snd.class_hitting == "praenomen" or snd.class_hitting == "akkari") then
				snd.sipmana()	
			elseif tonumber(snd.percenthealth) &lt; 35 and tonumber(snd.percentmana) &gt; 45 then 
    			snd.siphealth()
			elseif tonumber(snd.percenthealth) &lt; 15 and tonumber(snd.percentmana) &gt; 10 then 
    			snd.siphealth()
			elseif tonumber(snd.percenthealth) &lt; 87 then 
    			snd.siphealth()
			end
		
	else
		if tonumber(snd.percenthealth) &lt; 87 and tonumber(snd.percentmana) &gt; 15 then 
    		snd.siphealth()
		elseif tonumber(snd.percentmana) &lt; 85 then
			snd.sipmana()
		end	
	end
end
end
end

function snd.siphealth()
if not snd.channeling then
	snd.send("drink health" ) 
 	snd.healbalance = false
 	snd.healretry = true
 	if not snd.retard and not snd.have_aff("aeon") then enableTimer("healretry") else enableTimer("healretryretard") 
	end
end
end


function snd.sipmana()
if not snd.channeling then
	snd.send("drink mana") 	
	snd.healbalance = false
 	snd.healretry = true
 	if not snd.retard and not snd.have_aff("aeon") then enableTimer("healretry") else enableTimer("healretryretard") 
	end
end
end

function snd.eatmoss()
if not snd.channeling then
	snd.send("eat anabiotic")
	snd.moss = false
end
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Clot Check</name>
								<packageName></packageName>
								<script>function snd.clotcheck()

  if not snd.have_aff("recklessness") then  -- 3
		if tonumber(snd.percentmana) &lt; 60 then -- 4
			if snd.toggles.bashing and snd.firstaidclotlevel ~= "20" then -- 3
    		snd.send("firstaid clot above 40")
			elseif (snd.count(snd.people_hitting_me)) &lt; 2 and (snd.class_hitting == "praenomen" or snd.class_hitting == "akkari") and tonumber(gmcp.Char.Vitals.bleeding) &gt; 100 and snd.firstaidclotlevel ~= "45" then 
				snd.send("firstaid clot above 45")
			elseif (snd.count(snd.people_hitting_me)) &lt; 2 and (snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller")  and tonumber(gmcp.Char.Vitals.bleeding) &gt; 60 and snd.firstaidclotlevel ~= "60" then 
				snd.send("firstaid clot above 60")
			elseif (snd.count(snd.people_hitting_me)) &lt; 2 and snd.class_hitting == "sentinel" and tonumber(gmcp.Char.Vitals.bleeding) &gt; 60 and snd.firstaidclotlevel ~= "40" then 
				snd.send("firstaid clot above 40")
			elseif (snd.count(snd.people_hitting_me)) &lt; 2 and not (snd.class_hitting == "luminary" or snd.class_hitting == "akkari" or snd.class_hitting == "praenomen" or snd.class_hitting == "earthcaller") then
				if tonumber(gmcp.Char.Vitals.bleeding) &gt; 200 and snd.firstaidclotlevel ~= "30" then -- 2
					snd.send("firstaid clot above 30")
				elseif tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(gmcp.Char.Vitals.bleeding) &lt; 200 and snd.firstaidclotlevel ~= "20" then 
					snd.send("firstaid clot above 20")
				end   -- 2
			end			-- 3
				-- 4
		elseif tonumber(snd.percentmana) &gt; 59 and snd.firstaidclotlevel ~= "60" then
			snd.send("firstaid clot above 60")
		end
    
 	elseif snd.have_aff("recklessness") then 
		if snd.toggles.bashing and tonumber(snd.percentestmana) &gt; 20 then -- 2
			snd.send("clot 50")
			snd.percentestmana = snd.percentestmana - 200
		elseif (snd.count(snd.people_hitting_me)) &lt; 2 and (snd.class_hitting == "praenomen" or snd.class_hitting == "akkari") and tonumber(gmcp.Char.Vitals.bleeding) &gt; 100 and tonumber(snd.percentestmana) &gt; 45 then 
			send("clot 80")
			snd.percentestmana = snd.percentestmana - 320
		elseif (snd.count(snd.people_hitting_me)) &lt; 2 and (snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller")  and tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(snd.percentestmana) &gt; 60 then 
			send("clot 60")
			snd.percentestmana = snd.percentestmana - 240
		elseif (snd.count(snd.people_hitting_me)) &lt; 2 and snd.class_hitting == "sentinel" and tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(snd.percentmana) &gt; 40 then 
			send("clot 60")
			snd.percentestmana = snd.percentestmana - 240
		elseif (snd.count(snd.people_hitting_me)) &lt; 2 and not (snd.class_hitting == "luminary" or snd.class_hitting == "akkari" or snd.class_hitting == "praenomen" or snd.class_hitting == "earthcaller") then
			if tonumber(gmcp.Char.Vitals.bleeding) &gt; 200 and tonumber((snd.percentestmana/100)) &gt; 30 then 
				send("clot 120")
				snd.percentestmana = snd.percentestmana - 480
			end
		elseif tonumber(gmcp.Char.Vitals.bleeding) &gt; 100 and tonumber(gmcp.Char.Vitals.bleeding) &lt; 200 and tonumber(snd.percentestmana) &gt; 20 then 
			send("clot 40") 
			snd.percentestmana = snd.percentestmana - 160
		elseif tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(gmcp.Char.Vitals.bleeding) &lt; 100 and tonumber(snd.percentestmana) &gt; 20 then 
			send("clot 40")
			snd.percentestmana = snd.percentestmana - 160
		elseif (snd.count(snd.people_hitting_me)) &lt; 2 and not (snd.class_hitting == "praenomen" or snd.class_hitting == "akkari" or snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller")  then
			if tonumber(gmcp.Char.Vitals.bleeding) &gt; 200 and tonumber(snd.percentestmana) &gt; 78 then -- 1
				send("clot 60") 
				snd.percentestmana = snd.percentestmana - 240
			elseif tonumber(gmcp.Char.Vitals.bleeding) &gt; 100 and tonumber(gmcp.Char.Vitals.bleeding) &lt; 200 and tonumber(snd.percentestmana) &gt; 70 then 
				send("clot 40")
				snd.percentestmana = snd.percentestmana - 160
			elseif tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(gmcp.Char.Vitals.bleeding) &lt; 100 and tonumber(snd.percentestmana) &gt; 60 then 
				send("clot 40")
				snd.percentestmana = snd.percentestmana - 160
			elseif (snd.count(snd.people_hitting_me)) &lt; 2 and not (snd.class_hitting == "praenomen" or snd.class_hitting == "akkari") and not (snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller")  and tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(snd.percentestmana) &gt; 20 then 
				send("clot 40")
				snd.percentestmana = snd.percentestmana - 160
			end  	-- 1
		end			-- 2
  
 	end  			-- 3

	if tonumber(snd.percentestmana) &lt;  0 then 
		snd.percentestmana = 0
	end

end  			-- main function</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Hidden Check</name>
								<packageName></packageName>
								<script>function snd.hiddencheckfunc()
	if snd.hiddentype == "shine" and (snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller") and (snd.count(snd.people_hitting_me)) &lt; 2 then  -- Disfigurement, dizziness, stiffness, weariness, and ablaze.
		if not snd.have_aff("hellsight") and not snd.have_aff("slickness") then
			snd.send("smoke yarrow"..snd.sep.."press mending to torso"..snd.sep.."queue poultice press soothing to torso")
		end
		
	elseif snd.hiddentype == "shine" then  -- Disfigurement, dizziness, stiffness, weariness, and ablaze.
 		if not snd.pipeaffflag and not snd.salveaffflag then
			snd.send("smoke yarrow"..snd.sep.."press mending to torso"..snd.sep.."queue poultice press soothing to torso")
		elseif not snd.pipeaffflag and snd.salveaffflag then
			snd.send("smoke yarrow")
		end 
	
	elseif snd.hiddentype == "spiritwrack" then  -- Anorexia, stupidity, impatience, vertigo, sensitivity, self-pity, berserking, or migraine
		if table.isMember(gmcp.Room.Info.details, "indoors") then
			snd.send("qeb fly")
		end
		if not snd.pipeaffflag then
			snd.send("smoke yarrow")
		end
		snd.send("eat vial"..snd.sep.."stand"..snd.sep.."meditate")
	elseif snd.hiddentype ~= "shine" and snd.hiddentype ~= "spiritwrack" then
    if not snd.have_aff("aeon") and not snd.have_aff("hellsight") then
      snd.send("eat vial"..snd.sep.."stand"..snd.sep.."meditate"..snd.sep.."concentrate"..snd.sep.."outc paste"..snd.sep.."apply paste")
			if snd.focus then
				snd.send("point icewall"..snd.sep.."compose"..snd.sep.."smoke pipe"..snd.sep.."focus")
			else
				snd.send("point icewall"..snd.sep.."compose"..snd.sep.."smoke pipe")
			end
    end
    if snd.defenses.def_shielded.state == "deffed" then
    	snd.hatredcheck = true
    end
	end
	snd.hiddentype = "none"
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Avoidance System</name>
								<packageName></packageName>
								<script>function snd.avoidancecheck()
	if snd.toggles.active and snd.have_aff("stun") and snd.have_aff("unconscious") then
		if (snd.count(snd.people_hitting_me)) == 0 and snd.avoidanceset ~= "melee"  then 
			snd.send("divert melee")
			snd.send("dodge melee")
			snd.avoidanceset = "melee"
		elseif snd.class_hitting == "wayfarer" and snd.avoidanceset ~= "ranged" and (snd.count(snd.people_hitting_me)) &lt; 2 then
			snd.send("divert ranged")
			snd.send("dodge ranged")
			snd.avoidanceset = "ranged"
		elseif snd.class_hitting == "sentinel" and snd.avoidanceset ~= "upsets" and (snd.count(snd.people_hitting_me)) &lt; 2 then
			snd.send("dodge upsets") --dodge melee after pets, time?
			snd.send("divert upsets")
			snd.avoidanceset = "upsets"
		-- if indo upset before gremlin (need to time), melee rest of time
		elseif (snd.class_hitting == "shaman" or snd.class_hitting == "alchemist" or snd.class_hitting == "archivist") and snd.avoidanceset ~= "upsets" and (snd.count(snd.people_hitting_me)) &lt; 2 then
			snd.send("dodge upsets") 
			snd.send("divert upsets")
			snd.avoidanceset = "upsets"		
		elseif (snd.count(snd.people_hitting_me)) &gt; 1 and snd.avoidanceset ~= "melee" then
			snd.send("divert melee")
			snd.send("dodge melee")
			snd.avoidanceset = "melee"			
		end
	end
end
</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Unknown script</name>
								<packageName></packageName>
								<script>function snd.unknownafter()
  if snd.have_aff("unknown") or tonumber(snd.unknownquantity) &gt; 0 and not snd.have_aff("tree_seared") then
    snd.send("queue tree touch tree")
  end
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Firstaid start</name>
								<packageName></packageName>
								<script>function snd.firstaidstart()
  send("firstaid on##firstaid reporting on##firstaid health 80##firstaid mana 80##firstaid forcehealth 40##firstaid forcemana 60##firstaid anabiotic health 80##firstaid anabiotic mana 75##firstaid vitals priority health##firstaid stop mana below 45##firstaid curing on##firstaid defence on##firstaid heal health on##firstaid heal mana on##firstaid use anabiotic on##firstaid auto stand on")
  tempTimer(.5, [[send("firstaid auto wake on##firstaid use tree on##firstaid use focus on##firstaid use insomnia on##firstaid use clot on##firstaid clot at 30##firstaid clot above 60##firstaid stupidity double on##firstaid adder 3##firstaid precache 3##firstaid halt for channel on##firstaid stormtouched off")]])
 
  -- removes completely from the list: firstaid priority defence insulation reset
  -- puts all priority to game default
  tempTimer(.1, [[send("firstaid priority reset##firstaid priority defence rebounding reset##firstaid priority defence reset##firstaid cureset switch none##")]])
 
  -- FA buggy stuff
  send("firstaid priority nyctophobia 3")
   
  tempTimer(2,[[snd.firstaidprioritylistset()]])
  tempTimer(3,[[snd.firstaiddefenceset()]])
  tempTimer(4,[[enableTimer("Firstaidstatustimer")]])
  if not snd.prestore then
    snd.send("firstaid prerestore on")
  end
  
end</script>
								<eventHandlerList />
							</Script>
						</ScriptGroup>
					</ScriptGroup>
					<Script isActive="yes" isFolder="no">
						<name>load defenses</name>
						<packageName></packageName>
						<script>snd.defenses_loaded = true

function snd.load_def(option)
  if snd.def_options[option] ~= nil then
    snd.message("Loading defense options for: &lt;green&gt;" .. option .. "&lt;white&gt;.", "echo")
    send(" ")
    snd.less_defs = {}
    if gmcp.Char.Status.race == "Azudim" then
      snd.def_options[option]["def_miasma"] = "on"
    elseif gmcp.Char.Status.race == "Yeleni" then
      snd.def_options[option]["def_warmth"] = "on"
    elseif gmcp.Char.Status.race == "Idreth" then
      snd.def_options[option]["def_safeguard"] = "on"
    end
    local my_def_choice_and_generic_defenses = {}
    if option ~= "none" then
      my_def_choice_and_generic_defenses =
        table.union(snd.def_options.general_defs, snd.def_options[option])
    else
      my_def_choice_and_generic_defenses = {}
    end
    for i in pairs(snd.defenses) do
      snd.defenses[i].needit = false
      for h in pairs(my_def_choice_and_generic_defenses) do
        if
          my_def_choice_and_generic_defenses[h] == "once" and
          (hasSkill(snd.defenses[h].skill) or snd.assumed_class ~= nil)
        then
          if h == i then
            if snd.defenses[i].state ~= "deffed" then
              snd.defenses[i].needit = true
              table.insert(snd.less_defs, i)
            end
          end
        elseif
          my_def_choice_and_generic_defenses[h] == "on" and (hasSkill(snd.defenses[h].skill) or snd.assumed_class ~= nil)
        then
          if h == i then
            if i == "def_vitality" then
              if snd.balance.vitality then
                snd.defenses[i].needit = true
              end
            else
              snd.defenses[i].needit = true
            end
          end
        end
      end
    end
  else
    snd.message("No such defense option as &lt;red&gt;" .. option .. "&lt;white&gt;!", "echo")
    send(" ")
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>options</name>
						<packageName></packageName>
						<script>snd.def_options = {

none = {


},

general_defs = {
def_thirdeye = "on",
def_mindseye_tattoo = "on",
--def_cloak_tattoo = "on",
def_kola = "on",
def_deathsight = "on",
def_insomnia = "on",
def_frost = "on",
def_venom = "on",
def_levitation = "on",
def_speed = "on",
def_caloric = "on",
def_dodge_melee = "on",
def_nightsight = "on",
def_clarity = "on",
def_fangbarrier = "on",
def_deafness = "on",
def_blindness = "on",
def_waterbreathing = "on",
def_vigor = "on",

},


bard = {
def_sheath = "once",
def_charisma = "on",
def_euphonia = "once",
def_aurora = "once",
},

templar = {
def_gripping = "on",
def_maingauche = "once",
},

revenant = {
def_gripping = "on",
def_maingauche = "once",
},

luminary = {
def_lightshield = "once",
def_inspiration_constitution = "once",
def_fireblock = "once",
def_constitution = "once",
},

earthcaller = {
def_heatshield = "once",
def_battlehymn_constitution = "once",
def_smothering = "once",
def_constitution = "once",
},

syssin = {
def_warding = "on",
def_finesse = "on",
def_shadowsight = "on",
def_ghost = "on",
def_shroud = "on",
def_lipreading = "on",
def_weaving = "on",
},

monk = {
def_weathering = "on",
def_toughness = "on",
def_vitality = "on",
def_kaido_regeneration = "on",
def_resistance = "on",
def_constitution = "on",
def_split_mind = "on",
def_kaido_immunity = "on",
def_boosted_regen = "on",
},

carnifex = {
def_fearless = "on",
def_reveling = "once",
def_recklessness = "once",
def_soul_harvest = "on",
def_soul_thirst = "on",
def_soul_fortify = "on",
def_soul_fracture = "on",
def_soul_body = "once",
def_gripping = "on",
def_herculeanrage = "once",
--def_bruteforce = "once",
},

warden = {
def_fearless = "on",
def_initiative = "once",
def_battleflow = "once",
def_ancest_victory = "on",
def_displacement  = "on",
def_ancestral_bolster = "on",
def_invocation  = "on",
def_gripping = "on",
def_roaring  = "once",
def_intervention = "once",
def_shroud = "once",
--def_rigor = "on",
def_homage = "on",
},

shapeshifter = {
def_weathering = "on",
def_bodyheat = "once",
def_metabolism = "once",
def_endurance = "once",
def_thickhide = "once",
--def_corner = "once",
--def_harden = "once",
},

wolf = {
def_weathering = "on",
def_bodyheat = "once",
def_metabolism = "once",
def_endurance = "once",
def_thickhide = "once",
def_corner = "once",
def_harden = "once",
--def_stealth = "once",
},

bear = {
def_weathering = "on",
def_bodyheat = "once",
def_metabolism = "once",
def_endurance = "once",
def_thickhide = "once",
def_bracing = "once",
def_harden = "once",
},

sentinel = {
def_gripping = "on",
def_lifesap = "on",
def_barkskin = "on",
def_hardiness = "on",
def_conceal = "once",
def_maskedscent = "once",
def_vitality = "on",
def_flexibility = "once",
def_foreststride = "once",
},

archivist = {
def_spheres =  "once",
def_linked = "once",
def_oneness = "once",
def_sublimation = "once",
def_ameliorate = "once",
def_catabolism = "once",
},

indorani = {
def_deathaura = "once",
def_lifevision = "on",
def_soulmask = "on",
def_gravechill = "on",
def_vengeance = "on",
def_soulcage = "on",
def_shroud = "on",
def_hierophant = "once",
def_chariot = "on",
def_eclipse = "on",
def_devilpact = "on",
},

oneiromancer = {
def_intoxication = "on",
def_lifevision = "on",
def_redoubt = "on",
def_glaciation = "on",
def_defiance = "on",
def_remembrance = "on",
def_shroud = "on",
def_fan = "on",
def_crane = "on",
def_cloud = "on",
def_faerie = "on",
},

alchemist = {
def_lifevision = "on",
def_cognisance = "on",
def_preservation = "on",
def_interposition = "on",
def_resuscitation = "on",
def_conduit_crutch = "on",
discipline_fieldstudies = "on",
discipline_research = "on",
discipline_biology = "on",
def_blightbringer = "on",
},

shaman = {
def_lifevision = "on",
def_spiritbond = "on",
def_protection = "on",
def_shaman_spiritsight = "on",
def_lifebloom = "on",
def_shaman_warding = "on",
def_oath_forestwalker = "on",
def_oath_tranquility = "on",
def_oath_shaman = "on",
def_greenfoot = "on",
},

praenomen = {
def_potence_constitution = "on",
def_fortify = "on",
def_corpus_warding = "on",
def_celerity = "on",
def_lifescent = "on",
def_lifevision = "on",
--def_veil = "on",
def_stalk = "on",
def_concentrate = "on",
def_shadowblow = "on",
def_blurred = "on",
def_nightsight = "on",
def_elusion = "on",
},

akkari = {
    def_ardour_constitution = "on",
    def_relentless = "on",
    def_resolved = "on",
    def_celerity = "on",
    def_acuity = "on",
    def_muffle = "once",
    def_ascetic = "on",
    def_retaliation = "on",
    def_suppressed = "on",
    def_transience = "on",
    def_nightsight = "on",
},

teradrim = {
def_earthenform = "on",
def_entwine = "on",
def_ricochet = "on",
def_twinsoul = "on",
def_earth_resonance = "on",
def_stonebind = "on",
def_imbue_will = "once",
def_imbue_stonefury = "on",
def_sand_swelter = "once",
},

tidesage = {
def_permafrost  = "on",
def_wavebreaking  = "on",
def_tideflux = "on",
def_lifebond  = "on",
def_shore_leave  = "on",
def_encrusted  = "on",
def_elemental_engulf  = "once",
def_expose_rime  = "on",
--def_sirensong  = "once",
},

wayfarer = {
def_brutality = "on",
def_axe_avert = "on",
def_axe_obstruct = "on",
def_axe_repel = "on",
def_weathering = "on",
def_ironskin = "on",
def_bloodtrails = "on",
def_phalanx = "on",
--def_blindsense = "on",
def_greenheart = "on",
--def_endure = "once",
--def_mountaineer = "on",
--def_dustcoat = "on",
--def_resilience = "on",
--def_desolation = "on",
def_circulation = "on",
},

ascendril = {
def_countercurrent = "on",
def_empowered_moon = "on",
def_arcaneskin = "on",
def_missiles = "on",
},

bloodborn = {
def_victimise = "once",
def_empowered_moon = "on",
def_panoply = "on",
def_forestall = "on",
},

sciomancer = {	
def_rigor = "once",		
def_shadow_engulf  = "once",		
def_shadow_mantle = "once",		
def_blurring = "once",		
def_empowered_moon = "once",

},

runecarver = {  
      
def_prowess = "once",        
def_hex_stalk  = "once",        
def_hex_preservation = "once",        
def_ironbark= "once",        
def_empowered_moon = "once",

},

zealot = {
def_focalmark = "on",
def_tempered_body = "on",
def_haste = "on",
def_swagger = "once",
def_litheness = "on",
def_bending = "on",
def_disunion = "on",
def_clarity = "on",
--def_resurgence = "on",
def_discharge = "on",
def_deflection = "on",
def_mindspark = "on",
def_cloak_tattoo = "on",

},

ravager = {
def_vinculum = "on",  
def_ruthlessness = "on", 
def_impenetrable = "on", 
def_criticality = "on", 
def_unfinished = "on", 
def_exhilarate = "on", 
def_reflexes = "on",
def_contempt = "on",
def_velocity = "on", 
def_untouchable = "on", 
def_inflated = "on", 
},


}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>parrying</name>
						<packageName></packageName>
						<script>function snd.parry()
  if snd.class == "None" then
    expandAlias("tpry")
  end
  local highest = 0
  if not hasSkill("Parrying") then
    parrying = false
  end
  snd.toparry = "none"
  if snd.class_hitting == "carnifex" or snd.class_hitting == "warden" then
    snd.toparry = "left leg"
  elseif snd.class_hitting == "ascendril" or snd.class_hitting == "bloodborn" then
    snd.toparry = "torso"
	elseif snd.class_hitting == "shifter" and snd.my_limb_damage["head"] &gt;= 33.33 then
		snd.toparry = "head"
  else
		for limb in pairs(snd.my_limb_damage) do
			if string.find(limb, " ") then
				x = string.gsub(limb, " ", "_")
				aff = "pre_restore_"..x
			else
				aff = "pre_restore_"..limb
			end
      if (snd.class_hitting == "sentinel" or snd.class_hitting == "monk" or snd.class_hitting == "luminary" or snd.class_hitting == "earthcaller") then
        if snd.my_limb_damage[limb] &gt; 22 then
          snd.toparry = limb
        else
          snd.toparry = "head"
        end
      elseif (snd.class_hitting == "teradrim" or snd.class_hitting == "tidesage" or snd.class_hitting == "templar" or snd.class_hitting == "revenant") then
        if (snd.have_aff("left_leg_bruised") or snd.have_aff("left_leg_bruised_moderate") or snd.have_aff("left_leg_bruised_critical")) then
          snd.toparry = "left leg"
        elseif (snd.have_aff("right_leg_bruised") or snd.have_aff("right_leg_bruised_moderate") or snd.have_aff("right_leg_bruised_critical")) then
          snd.toparry = "right leg"
        elseif (snd.have_aff("left_arm_bruised") or snd.have_aff("left_arm_bruised_moderate") or snd.have_aff("left_arm_bruised_critical")) then
          snd.toparry = "left arm"
        elseif (snd.have_aff("right_arm_bruised") or snd.have_aff("right_arm_bruised_moderate") or snd.have_aff("right_arm_bruised_critical")) then
          snd.toparry = "right arm"
        elseif (snd.have_aff("head_bruised") or snd.have_aff("head_bruised_moderate") or snd.have_aff("head_bruised_critical")) then
          snd.toparry = "head"
        elseif (snd.have_aff("torso_bruised") or snd.have_aff("torso_bruised_moderate") or snd.have_aff("torso_bruised_critical")) then
          snd.toparry = "torso"
        else
          snd.toparry = "left leg"
        end
      elseif snd.class_hitting == "shifter" then
        if snd.have_aff("left_leg_mangled") then
          snd.toparry = "left leg"
        elseif snd.have_aff("right_leg_mangled") then
          snd.toparry = "right leg"
        elseif snd.have_aff("left_arm_mangled") then
          snd.toparry = "left arm"
        elseif snd.have_aff("right_arm_mangled") then
          snd.toparry = "right arm"
        elseif snd.have_aff("head_mangled") then
          snd.toparry = "head"
        elseif snd.have_aff("torso_mangled") then
          snd.toparry = "torso"
        elseif snd.my_limb_damage[limb] &gt; 27 then
          snd.toparry = limb
        elseif snd.my_limb_damage[limb] &gt; 33 then
          snd.toparry = limb
        else
          snd.toparry = "left arm"
        end
      elseif snd.class_hitting == "wayfarer" then
        if snd.my_limb_damage[limb] &gt; 25 then
          snd.toparry = limb
        elseif snd.my_limb_damage[limb] &gt; 33 then
          snd.toparry = limb
        else
          snd.toparry = "right arm"
        end
      elseif snd.class_hitting == "zealot" or snd.class_hitting == "ravager" then
        if snd.heelrush ~= snd.toparry then
          snd.toparry = snd.heelrush
        elseif snd.my_limb_damage["torso"] &gt; 16 and snd.toparry ~= "torso" then
          snd.toparry = "torso"
        end
      else
			  if snd.my_limb_damage[limb] &gt; highest and snd.my_limb_damage[limb] &lt; 33.33 then
				  highest = snd.my_limb_damage[limb]
				  snd.toparry = limb
			  end
			  if snd.my_limb_damage[limb] &gt; 25 then
				  snd.aff_have(aff)
			  else
				  snd.aff_remove(aff)
			  end
      end
    end
  end
  if snd.toparry ~= "none" and snd.toparry ~= snd.parrying and snd.full_balance() and not snd.waiting.parry then
    if snd.class == "Zealot" and hasSkill("Fending") then
      snd.send("fend "..snd.toparry)
    elseif snd.class == "Ravager" and hasSkill("Oppose") then
      snd.send("oppose "..snd.toparry)
    elseif snd.class == "Monk" and hasSkill("Guarding") then
      snd.send("guard "..snd.toparry)
    elseif hasSkill("Parrying") then
      if not (snd.class == "Zealot" or snd.class == "Monk" or snd.class == "Ravager") then
        snd.send("parry "..snd.toparry)
      elseif snd.class == "Zealot" and hasSkill("Fending") then
        snd.send("fend "..snd.toparry)
      elseif snd.class == "Ravager" and hasSkill("Oppose") then
      snd.send("oppose "..snd.toparry)
      elseif snd.class == "Monk" and hasSkill("Guarding") then
        snd.send("guard "..snd.toparry)
      end
    end
    snd.waiting.parry = true
    tempTimer(snd.delay(), [[snd.waiting.parry = false]])
  end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Offense</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>PvP variables</name>
						<packageName></packageName>
						<script>snd.channeling = false
snd.offense_loaded = true
snd.enemies = {}
snd.allies = {}
snd.hitting = "none"
snd.aff_list = {}
snd.def_needed = false
snd.using_both_hands = 0

-- Firstaid assistance stuff

snd.firstaidchangecure = false
snd.firstaidprioritylistset()
snd.firstaidclassset = false
snd.sync = true
snd.firstaidcureset = "none"
snd.firstaidpredict = {}
snd.percentesthealth = 100
snd.percentestmana = 100
snd.waking = false
snd.restand = true
snd.equilibrium = true
snd.focusrecheck = false
snd.nextcurecheck = true
snd.herbaffflag = false
snd.herbalance = true
snd.herbretry = false
snd.salvebal = true
snd.salveaffflag = false
snd.salveretry = false
snd.firstaid = true
snd.statustimer = true
snd.lonelinesscheck = false
snd.hatredcheck = false
snd.clottime = true
snd.firstaidclotlevel = "60"
snd.herbalance = true
snd.salvebal = true
snd.elevating = false
snd.focus = true
snd.tree = true
snd.pipebalance = true
snd.prestore = false
snd.moss = true
snd.healbalance = true
snd.limblist_leftleg = 0
snd.limblist_rightleg = 0
snd.limblist_rightarm = 0
snd.limblist_leftarm = 0
snd.limblist_torso = 0
snd.limblist_head = 0
snd.percentesthealth = 0
snd.percentestmana = 0
snd.lasthealth = 0
snd.lastmana = 0
snd.firstaid_go = true
snd.update_priority = 0
snd.unknownquantity = 0
snd.firstaidtrack = ""
snd.counttimes = 0
reset_cures = true

-- Bashing stuff
snd.pushattack = false
snd.elementalcount = 0
snd.localcount = 0
snd.haveleft = "0"
snd.liarstrummed = false

--Misc
snd.spectype = ""
snd.parried = false
snd.block = ""
snd.reblock = false
snd.shield_check = true

snd.enemylist = false
snd.stunrecheck = false
snd.enemycansalve = true
snd.kipup = false
snd.avoidanceset = "none"
snd.limb_dmg_done = 0

snd.templar_weapon_one = "shortsword" -- used for Templar offenses
snd.templar_weapon_two = "shortsword" -- used for Templar offenses

snd.current_offense = ""

--Sciomancer/Runecarver
snd.gravity = 0
snd.reflection_charge = 3
snd.repay = 0
snd.firefly_down = false
snd.shadeling = false
snd.reflected = false

--Sentinel
snd.my_raloth = ""

--Archivist
snd.my_token = ""
snd.empowerready = false
snd.geoinvert = false
snd.geotrace = false
snd.empowerready = false
snd.empowertype = "nil"
snd.my_mutagen = false
snd.their_mutagen = false
snd.my_incite = "nil"
snd.my_impress = ""
snd.squareseal = false
snd.triangleseal = false
snd.circleseal = false
snd.conjoin = false
snd.tree_used = false
snd.knit = false
snd.balance.ethereal = false

--Shaman/Alchemist
snd.shamanpet = ""
snd.morphpet = true
snd.panacea = true
snd.stormcloud = false
snd.incomingomen = false
snd.familiar = false
snd.thorncount = 0
snd.fetishattuned = false
snd.loyalsattacking = false
snd.my_dread = false
snd.their_dread = false
snd.fetish1 = ""
snd.fetish2 = ""
snd.fetish3 = ""

--Wayfarer
snd.highjumped = false
snd.enraged = false

--Indorani/Oneiromancer
snd.adder_attached = false
snd.adder_ready = false
snd.target_has_aura = true
snd.need_leech_aura = true
snd.need_deform = true
snd.adderafflict = "none"

--Monk
snd.target_numbed = false
snd.mindlocked = false
snd.mindclamped = false
snd.hardenBonesProc = false
snd.kaistrikelimb = ""
snd.balance.mindcommand = false
snd.mindAffliction = snd.mindAffliction or "paralyse"
snd.stance = ""
snd.numbness_used = false
snd.transmutation = true
snd.locking = false

--Zealot/Ravager
snd.zenith = false
snd.zenith_coming = false
snd.zenith_nope = false
snd.firefist = false
snd.firefist_cooldown = true
snd.swagger = 0
snd.welt_ready = "none"
snd.flamestack = 0
snd.cauterize = true
snd.immolation_ready = false

--Ascendril/Bloodborn
snd.glimpse = "none"
snd.gorged = ""
snd.glimpsing = false
snd.reflection_charge = 3
snd.flamewreathed = {limb = "", resonance = ""}
snd.fulcrum_call = true
snd.fulcrum_ready = true
snd.stalled_skill = ""

snd.callers = {}
snd.defended = false
snd.last_attack = "none"
snd.last_affs = {}
snd.last_cure = ""
snd.last_cured = ""
snd.mana_percent = 100
snd.health_percent = 100
snd.jawlocked = false
snd.soul = 100
snd.implant = "none"
snd.active_hound = "none"
snd.hypno = "none"
snd.last_hypno = 0
snd.hyp = 0
snd.sleight = "void"
snd.battle_aff = "none"
snd.chasten_aff = "none"
snd.flayingfang = false
snd.class_hitting = "none"
snd.person_hitting = "none"
snd.people_hitting_me = {}
snd.players_here = {}
snd.maybe_affs = {}
snd.cureset = "none"
snd.alert_tick = 0
snd.alerts = {}
snd.oldalerts = {}
snd.panic = false
snd.alertness = {}
snd.alertnessDir = "none"
snd.enemy_used_regenerate = false
snd.who_called_affs = ""

snd.disperse = "none" -- Can be set to none, callers or all.

snd.limbs = {}
snd.parried_limb = "none"
snd.last_hit_limb = "none"
snd.last_limb_dmg = 0
snd.resto_limb = "none"
snd.current_restoration_aff = ""
snd.limb_targeting = {
left = "none",
right = "none"
}
snd.limb_dmg = {
head = 0,
torso = 0,
["left arm"] = 0,
["right arm"] = 0,
["left leg"] = 0,
["right leg"] = 0,
total = 0,
}
snd.limb_status = {
head = "healed",
torso = "healed",
["left arm"] = "healed",
["right arm"] = "healed",
["left leg"] = "healed",
["right leg"] = "healed"
}
snd.limb_bruising = {
skin = 0,
head = 0,
torso = 0,
["left arm"] = 0,
["right arm"] = 0,
["left leg"] = 0,
["right leg"] = 0
}


snd.use_hourglass_on_prismatic = false
snd.giving = {}
snd.hound_queue = {}
snd.target_has = {}
snd.rebounded = false
snd.target_impaled = false -- do we specifically have our target imapled

snd.effects = {
--venoms
sight = "oculus",
hearing = "prefarar",
asthma = "kalmia", 
paresis = "curare", 
clumsiness = "xentio", 
sensitivity = "prefarar", 
vomiting = "euphorbia",
allergies = "darkshade", 
colocasia = "colocasia", 
haemophilia = "hepafarin", 
peace = "ouabain",
deadening = "vardrax",

stupidity = "aconite", 
weariness = "vernalius", 
recklessness = "eurypteria", 
dizziness = "larkspur", 
shyness = "digitalis", 

anorexia = "slike",
belonephobia = "araceae",
slickness = "gecko",

voyria = "voyria", --immunity

squelched = "selarnia",
disfigurement = "monkshood",

thin_blood = "scytherus",
left_leg_broken = "epseth",
right_leg_broken = "epseth",
left_arm_broken = "epteth",
right_arm_broken = "epteth",

conviction = "conviction",
mental_disruption = "disrupt",
physical_disruption = "disrupt",
crippled = "cripple",
crippled_body = "cripple",
hemorrhage = "hemorrhage",

rend = "rend",
}

function snd.rev_empower(aff)

   local revenant = {
        ["conviction"] = "bimre",
        ["disrupt"] = "dirne",
        ["cripple"] = "azu",
        ["hemorrhage"] = "wilave",
                    }
    if revenant[aff] == nil then return aff
    else return revenant[aff]
    end
end

snd.spirituality_attacks = {
paresis = "shield strike",
sight = "shield brilliance",
berserking = "shield facesmash",
weariness = "shield punch",
asthma = "shield slam",
haemophilia = "shield slam",
confusion = "perform dazzle",
writhe_transfix = "evoke transfixion",
}

snd.subjugation_attacks = {
paresis = "shield strike",
sight = "shield horrify",
berserking = "shield facesmash",
weariness = "shield punch",
asthma = "shield slam",
haemophilia = "shield slam",
confusion = "dirge hysteria",
writhe_transfix = "dirge transfixion",
}

snd.hound_attacks = {
  ["Carnifex"] = {
    recklessness = "growl",
    dizziness = "growl",
    berserking = "stare",
    impairment = "stare",
    weariness = "acidspit",
    crippled = "acidspit",
    epilepsy = "shock",
    hallucinations = "shock",
    blisters = "poisonclaw",
    limp_veins = "poisonclaw",
    frozen = "tundralhowl",
    shivering = "tundralhowl",
    no_caloric = "tundralhowl",
    blurry_vision = "ululate",
    mark = "mark",
              },
  ["Warden"] = {
    recklessness = "chant",
    dizziness = "chant",
    berserking = "incite",
    impairment = "incite",
    weariness = "harry",
    crippled = "harry",
    epilepsy = "shock",
    hallucinations = "shock",
    blisters = "poison",
    limp_veins = "poison",
    frozen = "freeze",
    shivering = "freeze",
    no_caloric = "freeze",
    blurry_vision = "dirge",
    mark = "mark",
  }
}

snd.cures = {

amaurosis = {
"sight",
},

ototoxin = {
"hearing",
},

panacea = {
"stormtouched",
"patterns",
"rot_body",
"rot_wither",
"rot_heat",
"rot_spirit",
"rot_benign",
},

anabiotic = {
"plodding",
"idiocy",
},

opiate = {
"paralysis",
"paresis",
"mirroring",
"crippled_body",
"crippled",
"blisters",
"slickness",
"heartflutter",
"slough",
},

steroid = {
"hubris",
"pacifism",
"peace",
"accursed",
"agony",
"limp_veins",
"lovers_effect",
"laxity",
"superstition",
"generosity",
"justice",
"magnanimity",
},

coagulation = {
"body_odor",
"lethargy",
"allergies",
"mental_disruption",
"physical_disruption",
"vomiting",
"exhausted",
"thin_blood",
"rend",
"haemophilia",
},

depressant = {
"commitment_fear",
"merciful",
"recklessness",
"egocentric",
"masochism",
"agoraphobia",
"loneliness",
"berserking",
"vertigo",
"claustrophobia",
"nyctophobia",
},

decongestant = {
"baldness",
"clumsiness",
"hypochondria",
"weariness",
"asthma",
"sensitivity",
"ringing_ears",
"impairment",
"blood_poison",
},

euphoriant = {
"self_pity",
"stupidity",
"dizziness",
"faintness",
"shyness",
"epilepsy",
"impatience",
"dissonance",
"infested",
},

antipsychotic = {
"sadness",
"confusion",
"dementia",
"hallucinations",
"paranoia",
"hatred",
"addiction",
"hypersomnia",
"blood_curse",
"blighted",
},

eucrasia = {
"worrywart",
"misery",
"hollow",
"narcolepsy",
"perplexed",
"self_loathing"
},

willow = {
"aeon",
"hellsight",
"deadening"
},

yarrow = {
"slickness",
"withering",
"disfigurement",
"migraine",
"squelched"
},

epidermal_torso = {
"anorexia",
"gorged",
"effused_blood",
},

epidermal_head = {
"indifference",
"stuttering",
"blurry_vision",
"blindness",
"gloom",
"deafness"
},

epidermal = {
"anorexia",
"gorged",
"effused_blood",
"indifference",
"stuttering",
"blurry_vision",
"blindness",
"deafness"
},

caloric = {
"hypothermia",
"ice_encased",
"frozen",
"shivering",
"no_caloric"
},

focus = {
"muddled",
"egocentric",
"stupidity",
"anorexia",
"epilepsy",
"mirroring",
"mental_disruption",
"peace",
"paranoia",
"hallucinations",
"stuttering",
"dizziness",
"indifference",
"berserking",
"pacifism",
"lovers_effect",
"laxity",
"hatred",
"generosity",
"claustrophobia",
"vertigo",
"faintness",
"loneliness",
"agoraphobia",
"masochism",
"recklessness",
"weariness",
"impatience",
"confusion",
"dementia",
"nyctophobia",
"dread"
}

}

snd.entangleaffs = {
  "writhe_transfix",
	"writhe_impaled",
	"writhe_web",
	"writhe_thighlock",
	"writhe_armpitlock",
	"writhe_necklock",
  "writhe_ropes",
  "writhe_vines",
 }


snd.cureset_skills = {
akkari = {"Ascendance", "Dictum", "Discipline"},
alchemist = {"Alchemy", "Experimentation", "Botany"},
archivist = {"Geometrics", "Numerology", "Bioessence"},
ascendril = {"Elemancy", "Arcanism", "Thaumaturgy"},
bard = {"Weaving", "Performance", "Songcalling"},
bloodborn = {"Humourism", "Esoterica", "Hematurgy"},
carnifex = {"Savagery", "Deathlore", "Warhounds"},
earthcaller = {"Subjugation", "Apocalyptia", "Tectonics"},
indorani = {"Necromancy", "Tarot", "Domination"},
luminary = {"Spirituality", "Devotation", "Illumination"},
monk = {"Tekura", "Kaido", "Telepathy"},
oneiromancer = {"Oneiromancy", "Hyalincuru", "Contracts"},
praenomen = {"Corpus", "Mentis", "Sanguis"},
revenant = {"Riving", "Manifestation", "Chirography"},
runecarver = {"Malediction", "Runecarving", "Sporulation"},
sciomancer = {"Sciomancy", "Sorcery", "Gravitation"},
sentinel = {"Dhuriv", "Woodlore", "Tracking"},
shaman = {"Primality", "Shamanism", "Naturalism"},
shifter = {"Ferality", "Shapeshifting", "Vocalizing"},
syssin = {"Assassination", "Subterfuge", "Hypnosis"},
templar = {"Battlefury", "Righteousness", "Bladefire"},
teradrim = {"Terramancy", "Animation", "Desiccation"},
tidesage = {"Wavebreaking", "Synthesis", "Inundation"},
warden = {"Warding", "Ancestry", "Communion"},
wayfarer = {"Tenacity", "Wayfaring", "Fury"},
zealot = {"Zeal", "Purification", "Psionics"},
ravager = {"Brutality", "Ravaging", "Egotism"},
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>tracking functions</name>
						<packageName></packageName>
						<script>snd.shadow_targets = {}
snd.spirit_targets = {}
snd.are_we_checking_ql = false

function snd.get_new_target()
  if snd.toggles.calling then
    local new_target = "nil"
    if #snd.players_here ~= 0 and (not table.contains(snd.players_here, snd.target:title()) or snd.targeting.skip) then
    	for _, tar in ipairs(snd.targeting.list) do
    		if table.contains(snd.players_here, tar) and snd.target:title() ~= tar then
          new_target = tar
          snd.target_gone = false
    			expandAlias("t " .. tar)
    			break
        end
    	end
      if new_target == "nil" then
        if snd.faction == "shadow" then check = snd.spirit_targets else check = snd.shadow_targets end
        for _, tar in ipairs(check) do
      		if table.contains(snd.players_here, tar) then
            new_target = tar
            snd.target_gone = false
      			expandAlias("t " .. tar)
      			break
          end
        end
    	end
    end
  end
   if snd.targeting.skip then snd.targeting.skip = false end
end

function snd.took_limb_dmg(limb, amount)
  if limb and amount then
    
    snd.limb_dmg[limb] = snd.limb_dmg[limb] + amount
    if snd.limb_dmg[limb] &lt; 0 then
      snd.limb_dmg[limb] = 0
    end
    
    if snd.limb_dmg[limb] &gt; 99.99 then
      snd.limb_dmg[limb] = 99.99
    end
    
    if amount &gt; 0 then 
      cecho("&lt;green&gt; " .. limb .. ": " .. snd.limb_dmg[limb])
    else
      cecho("&lt;red&gt; " .. limb .. ": " .. snd.limb_dmg[limb])
    end
    
    if limb == snd.resto_limb and amount == -30 then
      snd.resto_limb = "none"
    end
    
    if snd.limb_status[limb] ~= "healed" then
      if snd.limb_dmg[limb] &gt;= 66.66 then
        snd.limb_status[limb] = "mangled"
      elseif snd.limb_dmg[limb] &gt;= 33.33 then
        snd.limb_status[limb] = "damaged"
      else
        snd.limb_status[limb] = "healed"
      end
    end
    
    local totaldmg = 0
  	snd.limb_dmg.total = 0
    for k, v in pairs(snd.limb_dmg) do
  		if v ~= "total" then
  	    totaldmg = totaldmg + v
    	end
  	end
    snd.limb_dmg.total = totaldmg
    if snd.gui.enabled then
      color_enemy_limbs()
    end
  end
end

function snd.target_got(affliction)
  --if snd.illusion_found then
   -- return
  --end
  local target_display_table = {}
  affliction = snd.affNameCheck(affliction)

  if snd.checkAff(affliction) and affliction ~= "a_broken_leg" and affliction ~= "a_broken_arm" then
    return
  end
  if snd.defended then
    return
  end
  
  if affliction == "cold" then
    if not snd.checkAff("no_caloric") then affliction = "no_caloric"
    elseif not snd.checkAff("shivering") then affliction = "shivering"
    elseif not snd.checkAff("frozen") then affliction = "frozen"
    elseif not snd.checkAff("ice_encased") and snd.checkAff("frostbrand") then affliction = "ice_encased"
    else return
    end
  end
  
  if affliction == "a_broken_leg" and snd.checkAff("a_broken_leg") then
    snd.target_cured("a_broken_leg")
    affliction = "right_leg_broken"
    snd.target_got("left_leg_broken")
  end
  
  if affliction == "a_broken_leg" and snd.checksomeAffs({"left_leg_broken", "right_leg_broken"},1) then
    if snd.checkAff("right_leg_broken") then
      affliction = "left_leg_broken"
    else
      affliction = "right_leg_broken"
    end
  end
  
  if affliction == "a_broken_arm" and snd.checkAff("a_broken_arm") then
    snd.target_cured("a_broken_arm")
    affliction = "right_arm_broken"
    snd.target_got("left_arm_broken")
  end
  
  if affliction == "a_broken_arm" and snd.checksomeAffs({"left_arm_broken", "right_arm_broken"},1) then
    if snd.checkAff("right_arm_broken") then
      affliction = "left_arm_broken"
    else
      affliction = "right_arm_broken"
    end
  end

  if affliction == "crippled_body" then
    snd.target_cured("crippled")
  end
  
  table.insert(snd.target_has, affliction)
  -- add affliction before displaying in pane, used to be below the gui update
    if snd.gui.enabled then
      if #snd.target_has &gt;= 1 then
        for _, v in ipairs(snd.target_has) do
          if v:find("broken") then
            v = v:gsub("a ", "")
            v = v:gsub("left", "L")
            v = v:gsub("right", "R")
          end
          table.insert(target_display_table, "&lt;center&gt;" .. v .. "&lt;/center&gt;")
        end
        eaffs:echo(table.concat(target_display_table))
        --color_enemy_affs()
        color_enemy_limbs()
      else
        eaffs:echo("&lt;center&gt;enemy affs&lt;/center&gt;")
      end
    end
  cecho("&lt;green&gt; " .. affliction)
  snd.waiting.queue = false
end

function snd.target_cured(affliction)
  --if snd.illusion_found then
  --  return
 -- end
  
  local target_display_table = {}
  local target_aff_check = {}
  
  affliction = snd.affNameCheck(affliction)

  if affliction == "paralysis" then
    snd.target_cured("paresis")
  end
  --if affliction == "anorexia" then
  --  snd.target_cured("voyria")
  --end
  if affliction == "shivering" then
    snd.target_cured("frozen")
  end
  if affliction == "accursed" then
    snd.target_cured("agony")
  end
  
  if affliction == "cold" then
    if (snd.checkAff("ice_encased") or snd.checkAff("frozen")) then
      snd.target_cured("ice_encased")
      snd.target_cured("frozen")
    elseif snd.checkAff("shivering") then snd.target_cured("shivering")
    elseif snd.checkAff("no_caloric") then snd.target_cured("no_caloric")
    end
  end 
  
	if snd.checkAff("a_broken_arm") and (affliction == "right_arm_broken" or affliction == "left_arm_broken") and not snd.checkAff(affliction) then
		affliction = "a_broken_arm"
	end
	if snd.checkAff("a_broken_leg") and (affliction == "right_leg_broken" or affliction == "left_leg_broken") and not snd.checkAff(affliction) then
		affliction = "a_broken_leg"
	end
  
  for i in pairs(snd.target_has) do
    if snd.target_has[i] == affliction then
      table.remove(snd.target_has, i)
      cecho("&lt;red&gt; " .. affliction)
      snd.last_cured = affliction
      if affliction == "gorged" then
        snd.gorged = ""
      end
    end
  end
  if snd.gui.enabled then
    if #snd.target_has &gt;= 1 then
      for _, i in ipairs(snd.target_has) do
        table.insert(target_display_table, "&lt;center&gt;" .. i .. "&lt;/center&gt;")
      end
      eaffs:echo(table.concat(target_display_table))
      --color_enemy_affs()
    else
      eaffs:echo("&lt;center&gt;enemy affs&lt;/center&gt;")
      color_enemy_limbs()
    end
  end
  if not snd.target_gone then
    snd.waiting.queue = false
  end
end

function snd.target_used(curative)
  if snd.cures[curative] ~= nil then
    aff_found = false
    for affliction in pairs(snd.cures[curative]) do
      for i in pairs(snd.target_has) do
        if snd.target_has[i] == snd.cures[curative][affliction] and not aff_found then
          if curative == "panacea" then
            if snd.cures[curative][affliction] == "rot_body" then
              snd.target_cured("rot_wither")
            elseif snd.cures[curative][affliction] == "rot_wither" then
              snd.target_cured("rot_heat")
            elseif snd.cures[curative][affliction] == "rot_heat" then
              snd.target_cured("rot_spirit")
            elseif snd.cures[curative][affliction] == "rot_spirit" then
              snd.target_cured("rot_benign")
            end
            snd.target_cured(snd.cures[curative][affliction])
            aff_found = true
          elseif snd.target_has[i] == "blighted" or snd.target_has[i] == "infested" then
            if not snd.checkAff("dread") then
              snd.target_cured(snd.cures[curative][affliction])
              aff_found = true
            end
          else
            snd.target_cured(snd.cures[curative][affliction])
            aff_found = true
          end
        end
      end
    end
  end
  snd.last_cure = curative
end

function snd.vital_change(vital, amount)
  if vital == "health" then
    snd.health_percent = snd.health_percent + amount
    if snd.health_percent &gt; 100 then
      snd.health_percent = 100
    end
    if snd.health_percent &lt; 0 then
      snd.health_percent = 0
    end
  elseif vital == "mana" then
    snd.mana_percent = snd.mana_percent + amount
    if snd.mana_percent &gt; 100 then
      snd.mana_percent = 100
    end
    if snd.mana_percent &lt; 0 then
      snd.mana_percent = 0
    end
  end
end

function snd.alertnessHit(dir, name, type)
 if snd.alertnessDir ~= "none" and snd.alertnessDir ~= dir then
    snd.alertness = {}
  end
  table.insert(snd.alertness, name)
  snd.alertnessDir = dir
  snd.alertType = type
end

function Reverse(arr)
  local i, j = 1, #arr
  while i &lt; j do
    arr[i], arr[j] = arr[j], arr[i]
    i = i + 1
    j = j - 1
  end
end

function snd.onHit()
  if snd.toggles.atkecho and snd.gui.enabled then
    deleteLine()
    snd.message(snd.hitting .. " hit: " .. snd.getting_hit .. ".")
  end
  snd.last_affs = {}

  if #snd.maybe_affs &gt;= 1 and (snd.getting_hit == snd.target) then
    if snd.maybe_affs[1] == "blaze" then
      snd.used.rebounding = false
      table.remove(snd.maybe_affs, 1)
    else
      local aff = ""
      aff = snd.venomEffect(snd.maybe_affs[1]) 
      
      if snd.maybe_affs[1] == "placeholder" then
        snd.last_aff = ""
        table.remove(snd.maybe_affs, 1)
      elseif snd.maybe_affs[1]:find("broken") then
        snd.target_got(snd.maybe_affs[1])
        table.remove(snd.maybe_affs, 1)
        table.insert(snd.last_affs, aff)
      elseif aff ~= "" then
        snd.target_got(aff)
        table.remove(snd.maybe_affs, 1)
        table.insert(snd.last_affs, aff)
      end
    end
  end
end

function snd.onHit2(checks, conditional)
  snd.last_affs = {}
  local aff = ""
  if (#snd.maybe_affs &gt;= 1 or snd.last_limb_dmg ~= 0) then -- Make sure affs or limb damage are populated
    if snd.maybe_affs[1] == "blaze" then -- take care of rebounding
      snd.used.rebounding = false
    else 
      if #snd.maybe_affs &gt; 0 and not (snd.checkAff(snd.venomEffect(snd.maybe_affs[1])) or snd.checkAff(snd.maybe_affs[1])) then -- if its an aff and
        if snd.venomEffect(snd.maybe_affs[1]) == "" then                                                                        -- not an aff/venom already
          aff = snd.maybe_affs[1]                                                                                               -- on them, populate aff
        else
          aff = snd.venomEffect(snd.maybe_affs[1])
        end
        snd.target_got(aff)
        table.insert(snd.last_affs, aff)
      end
    end

     if aff == "" and snd.last_limb_dmg == 0 then 
      if #snd.maybe_affs &gt;0 then
        table.remove(snd.maybe_affs, 1) 
      end
      return  -- at this point, if aff is empty and there's no limb dmg just abort mission captain
     else -- otherwise, something is populated and we need to turn on dodging/rebounding/parrying
      if checks ~= {} then
        for _, v in pairs(checks) do
            enableTrigger("Sunder "..v)
        end
      end
     end 
      -- With the way it's set up to handle only 1 aff, there's no easy way to account for 2 affs in 1 attack.
      -- Might look into it more later, this'll work for now.
      if aff == "laxity" and conditional == "Sentinel Slam" and snd.maybe_affs[2] == "epilepsy" then
        snd.target_got("epilepsy")
        table.insert(snd.last_affs, "epilepsy")
        table.remove(snd.maybe_affs, 2) 
      end

      if aff == "stupidity" and conditional == "Zealot Sunkick" and snd.maybe_affs[2] == "dizziness" then
        snd.target_got("dizziness")
        table.insert(snd.last_affs, "dizziness")
        table.remove(snd.maybe_affs, 2) 
      end
      
      if aff == "asthma" and conditional == "Luminary Slam" and snd.maybe_affs[2] == "haemophilia" then
        snd.target_got("haemophilia")
        table.insert(snd.last_affs, "haemophilia")
        table.remove(snd.maybe_affs, 2) 
      end      
      
      if aff == "berserking" and conditional == "Luminary Facesmash" and snd.maybe_affs[2] == "sight" then
        snd.target_got("sight")
        table.insert(snd.last_affs, "sight")
        table.remove(snd.maybe_affs, 2) 
      end

      if conditional == ("Teradrim Skullbash" or "Tidesage Gybe") and #snd.maybe_affs &gt; 1 then
        if snd.maybe_affs[3] ~= nil and not snd.checkAff(snd.maybe_affs[3]) then
          snd.target_got(snd.maybe_affs[3])
          table.insert(snd.last_affs, snd.maybe_affs[3])
        end
        if not snd.checkAff(snd.maybe_affs[2]) then
          snd.target_got(snd.maybe_affs[2])
          table.insert(snd.last_affs, snd.maybe_affs[2])
        end
      end
      
      if conditional == "Bard Hiltblow" and #snd.maybe_affs &lt; 1 then
        disableTrigger("Hiltblow Confirmation")
      end
      
      if conditional == "Bard Rhythm" and #snd.maybe_affs &lt; 1 then
        disableTrigger("Bard Rhythm Confirmation") 
      end
      
      if aff == "stiffness" and conditional == "Zealot Twinpress" and snd.maybe_affs[2] == "muscle_spasms" then
        snd.target_got("muscle_spasms")
        table.insert(snd.last_affs, "muscle_spasms")
        table.remove(snd.maybe_affs, 2) 
      end
      
      -- Need a way to handle 2handed attacks (Sentinel, Templar DSW, Carnifex, etc)
      
      if conditional == "Sentinel Slash" and #snd.maybe_affs == 2 then
          snd.using_both_hands = 1
      end
            
      if conditional == "Carnifex" or conditional == "Warden" then
        snd.using_both_hands = 1
      end
      
      if conditional == "Templar2h" then
        snd.using_both_hands = 1
      end
      
  end

  table.remove(snd.maybe_affs, 1) 

  if conditional == "Templar" and #snd.maybe_affs &lt; 1 then --also works for revenant since same messages
      disableTrigger("Weapon Hit Confirmation") 
  end
  if conditional == "Syssin" and #snd.maybe_affs &lt; 1 then
    disableTrigger("Syssin Hit Confirmation")
  end
end

function snd.checkAff(affliction)

  if affliction == "paresis" then
    if table.contains(snd.target_has, affliction) or table.contains(snd.target_has, "paralysis") then
      return true
    else
      return false
    end
  elseif affliction == "crippled" then
    if table.contains(snd.target_has, affliction) or table.contains(snd.target_has, "crippled_body") then
      return true
    else
      return false
    end
  elseif affliction == "anorexia" then
    if table.contains(snd.target_has, affliction) then
      return true
    else
      return false
    end
  else
    affliction = snd.affNameCheck(affliction)
    if table.contains(snd.target_has, affliction) then
      return true
    else
      return false
    end
  end
end

function snd.checksomeAffs(afflictions, number)
  if number == 0 then
    return true
  end
  if number == nil then
    number = 1
  end
  if type(afflictions) == "string" then
    return snd.checkAff(afflictions)
  elseif type(afflictions) == "table" then
    local count = 0
    for i, v in ipairs(afflictions) do
      if snd.checkAff(v) then
        count = count + 1
        if count &gt;= number then
          return true
        end
      end
    end
    -- if the count of how many returned true didn't meet or exceed the number given, return false
    return false
  end
end

function snd.pendulum(direction)
  local pendulum_table =
      {
        ["left arm"] = {["clockwise"] = "right arm", ["anti-clockwise"] = "left leg"},
        ["right arm"] = {["clockwise"] = "right leg", ["anti-clockwise"] = "left arm"},
        ["right leg"] = {["clockwise"] = "left leg", ["anti-clockwise"] = "right arm"},
        ["left leg"] = {["clockwise"] = "left arm", ["anti-clockwise"] = "right leg"},
      }
    local limb_damage_copy = mmp.deepcopy(snd.limb_dmg)
    local limb_status_copy = mmp.deepcopy(snd.limb_status)
    -- copy limb damage table so we can manipulate values while iterating current unchanged values
    for k, v in pairs(limb_damage_copy) do
      if k ~= "total" and k ~= "head" and k ~= "torso" and v &gt; 0 then
        -- only check appendages and ones with damage
        snd.took_limb_dmg(pendulum_table[k][direction], v)
        -- add limb damage to new limb
        snd.took_limb_dmg(k, -v)
        -- remove damage from current limb
        if snd.checkAff(k:gsub(" ", "_") .. "_broken") then
          -- we need to check for level one breaks as well
          snd.target_got(pendulum_table[k][direction]:gsub(" ", "_") .. "_broken")
          --add new limb break
          snd.target_cured(k:gsub(" ", "_") .. "_broken")
          --remove old
        end
        if snd.checkAff(k:gsub(" ", "_") .. "_dislocated") then
          -- we need to check for dislocates as well
          snd.target_got(pendulum_table[k][direction]:gsub(" ", "_") .. "_dislocated")
          --add new dislocate
          snd.target_cured(k:gsub(" ", "_") .. "_dislocated")
          --remove old
        end
      end
    end
    if snd.checkAff("sore_wrist") and not snd.checkAff("sore_ankle") then
      snd.target_cured("sore_wrist")
      snd.target_got("sore_ankle")
    elseif not snd.checkAff("sore_wrist") and snd.checkAff("sore_ankles") then
      snd.target_cured("sore_ankle")
      snd.target_got("sore_wrist")
    end
    for part,status in pairs(limb_status_copy) do
      if part ~= "head" and part ~= "torso" then
        snd.limb_status[pendulum_table[part][direction]] = status
      end
    end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>attack function</name>
						<packageName></packageName>
						<script>function snd.attack_function()
 echo("\nYou haven't set up an attack alias yet!")
end

function snd.attack(attack)
  local string = ""
  if snd.can_fitness() and snd.need_fitness then
 	 string = "fitness"
  elseif snd.can_shrug() and snd.need_fitness then
 	 string = "shrug venom"
  else
 	 string = attack
  end
 	 string = "stand"..snd.sep.."g body"..snd.sep.."g husk"..snd.sep..string
  if snd.toggles.parrying and snd.toparry ~= "none" and snd.toparry ~= snd.parrying then
 	 string = "parry "..snd.toparry..snd.sep..string
  end
  if snd.emptypipe ~= "none" then
 	 string = "outc "..snd.emptypipe..snd.sep.."put "..snd.emptypipe.." in emptypipe"..snd.sep..string
  end
  if not snd.pipes_lit and snd.toggles.lighting then
 	 string = "light pipes"..snd.sep..string
  end
	if string:find("slaughter") then
    snd.send("qeb")
		snd.send("queue axes "..string)
	else
		snd.send("queue axes")
		snd.send("qeb "..string)
	end
end

function snd.starting_attack()
  snd.send("target nothing with left" .. snd.sep .. "target nothing with right")
  snd.send("leading off")
  if snd.toggles.attacking == false then
    snd.toggle("attacking")
  end
  snd.class_hitting = "none"
  snd.person_hitting = "none"
  snd.active_hound = "none"
  snd.implant = "none"
end

function snd.handle_hounds()
  if snd.balance.hound and not snd.waiting.hound and gmcp.Char.Vitals.balance == "0" then
    local class = {["Carnifex"] = "hound", ["Warden"] = "simulacrum"}
    local string = ""
    local hound_aff = "none"
    local mark_check = false
    if
      (snd.class == "Carnifex" and snd.defenses.def_houndmark.state == "deffed") or
      (snd.class == "Warden" and snd.defenses.def_tacticianmark.state == "deffed")
    then
      mark_check = true
    end
    for i in pairs(snd.hound_queue) do
      if not snd.checkAff(snd.hound_queue[i]) then
        if hound_aff == "none" then
          if snd.hound_queue[i] == "mark" then
            if not mark_check then
              hound_aff = snd.hound_attacks[snd.class][snd.hound_queue[i]]
            end
          else
            hound_aff = snd.hound_attacks[snd.class][snd.hound_queue[i]]
          end
        end
      end
    end
    if hound_aff == "none" then
      if snd.current_offense == "WardenLimbs" then
        if snd.simul_target ~= "head" then
          send("simul target head")
        else
          hound_aff = "assault"
        end
      else
        if snd.class == "Carnifex" then
          hound_aff = "contagion"
        else
          hound_aff = "sabotage"
        end
      end
    end
    if hound_aff ~= "none" then
      snd.send(class[snd.class] .. " " .. hound_aff .. " " .. snd.target)
      snd.waiting.hound = true
      tempTimer(snd.delay(), [[snd.waiting.hound = false]])
    end
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>alerts</name>
						<packageName></packageName>
						<script>function snd.run_alerts()
  local string = ""
  if snd.alert_tick &gt;= 5 then
    snd.alert_tick = 0
    snd.oldalerts = snd.alerts
    snd.alerts = {}
    snd.panic = false
    if snd.have_aff("sapped_stats") then
      table.insert(snd.alerts, "\n&lt;white&gt;         SAPPED STATS GTFO")
    end
    if snd.have_aff("hypertension") then
      table.insert(snd.alerts, "\n&lt;white&gt;         HYPERTENSION GTFO")
    end
    if snd.have_aff("soul_poison") then
      table.insert(snd.alerts, "\n&lt;white&gt;         SOUL POISON GTFO")
    end
    --if tonumber(gmcp.Char.Vitals.soul) &lt; 50 then
    -- table.insert(snd.alerts, "\n&lt;white&gt;        SOUL LOW, SOUL LOW")
    --end
    if snd.have_aff("anorexia") and snd.have_aff("asthma") and snd.have_aff("slickness") then
      table.insert(snd.alerts, "\n&lt;yellow&gt;        YOU ARE VENOM LOCKED")
    end
    if snd.aff_tally() &gt;= 8 then
      table.insert(snd.alerts, "\n&lt;blue&gt;       YOU HAVE TOO MANY AFFS")
    end
    if (100 * (gmcp.Char.Vitals.hp / gmcp.Char.Vitals.maxhp)) &lt;= 40 then
      if snd.have_aff("sensitivity") then
        snd.send("firstaid elevate sensitivity")
      end
      table.insert(snd.alerts, "\n&lt;brown&gt;      YOUR HEALTH IS LOW")
    end
    if (100 * (gmcp.Char.Vitals.mp / gmcp.Char.Vitals.maxmp)) &lt;= 40 then
      table.insert(snd.alerts, "\n&lt;brown&gt;       YOUR MANA IS LOW")
    end
    if tonumber(gmcp.Char.Vitals.madness) &gt;= 60 then
      table.insert(snd.alerts, "\n&lt;red&gt;      THE MADNESS IS COMING, EAT UP")
    end
    if #snd.alerts &gt;= 1 then
      border = "\n&lt;red&gt;*************************************"
      string = ""
      for i in pairs(snd.alerts) do
        string = string .. snd.alerts[i]
        if
          table.contains(snd.oldalerts, snd.alerts[i]) and not string.find(snd.alerts[i], "MADNESS")
        then
          snd.panic = true
        end
      end
      string = border .. string .. border
      cecho(string)
      if snd.panic and snd.toggles.affcalling and not snd.waiting.melting then
        if snd.toggles.attacking or (snd.toggles.bashing and #snd.group &gt;= 1) then
          if snd.faction == "spirit" then
            snd.send("wt I'm melting! I'm melting!")
          elseif snd.faction == "shadow" then
            snd.send("wt I'm really close to death.")
          end
          snd.waiting.melting = true
          tempTimer(5, [[snd.waiting.melting = false]])
        end
      end
    end
  else
    snd.alert_tick = snd.alert_tick + 1
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>misc</name>
						<packageName></packageName>
						<script>

function snd.reset_target()
 snd.target_has = {}
 for limb in pairs(snd.limb_dmg) do
  snd.limb_dmg[limb] = 0
 end
 for limb in pairs(snd.limb_status) do
  snd.limb_status[limb] = "healed"
 end
 for limb in pairs(snd.limb_bruising) do
  snd.limb_bruising[limb] = 0
 end
 snd.hypno = "none"
 snd.hyp = 0
 snd.last_hypno = 0
 if restoration_timer then killTimer(restoration_timer) end
 snd.current_restoration_aff = ""
 snd.resto_limb = "none"
 --snd.used.rebounding = false
 snd.used.shield = false
 snd.used.paste = true
 snd.target_impaled = false
 snd.jawlocked = false
 snd.last_attack = "none"
 snd.target_gone = false
 snd.implant = "none"
 snd.mana_percent = 100
 snd.health_percent = 100
 snd.target_numbed = false
snd.mindlocked = false
snd.mindclamped = false
snd.hardenBonesProc = false
snd.kaistrikelimb = ""
snd.balance.mindcommand = false
snd.numbness_used = false
snd.transmutation = true
snd.locking = false
 snd.target_has_aura = true
 snd.need_leech_aura = true
 snd.need_deform = true
 snd.welt_ready = "none"
  snd.flamestack = 0
  snd.immolation_ready = false
 snd.gorged = ""
 snd.gravity = 0
 snd.thorncount = 0
 snd.fetishattuned = false
 snd.loyalsattacking = false
 snd.my_dread = false
 snd.their_dread = false
 snd.loyalsattacking = false
 snd.glory = 0
 snd.unmasked = false
 snd.flamewreathed = {limb = "", resonance = ""}
 
 if snd.gui.enabled then 
    color_enemy_affs()
    color_enemy_limbs()
  end
end

function snd.set_faction()

 if gmcp.Char.Status.name == "Rhesk" then
  snd.faction = "spirit"
  snd.allies = snd.rheskallies
  snd.enemies = snd.rheskenemies
 elseif snd.city == "Spinesreach" or snd.city == "Bloodloch" then
  snd.faction = "shadow"
	snd.allies = snd.shadow
	snd.enemies = snd.spirit
 elseif snd.city == "Enorian" or snd.city == "Duiran" then
  snd.faction = "spirit"
	snd.allies = snd.spirit
	snd.enemies = snd.shadow
 end

end

function snd.target_locked()
  if snd.checksomeAffs({"slickness", "burnt_skin"}, 1) and snd.checksomeAffs({"paresis", "asthma", "destroyed_throat"}, 3) then
    return true
  end

  if snd.checksomeAffs({"slickness", "burnt_skin"}, 1) and snd.checksomeAffs({"paresis", "asthma", "anorexia"}, 3) 
    and snd.checksomeAffs({"stupidity", "impatience", "muddled", "egocentric"}, 1) then
    return true
  end

	return false
end


function snd.missingAff(list, separator)
	local list = string.split(list, separator)
	local tab = {}
	for k, v in pairs(list) do
		if v == "stupidity" then
			if not snd.checkAff(v) and not snd.checkAff("impatience") then
				table.insert(tab, v)
			end
			elseif not snd.checkAff(v) then
				table.insert(tab, v)
			end
		end
	return tab
end

function snd.no_parry()
 local no_parry = false
 local noparryaffs = {
  "distortion",
  "frozen",
  --"punished_arms",
  "paresis",
  "paralysis",
  "asleep",
	"writhe_transfix",
	"writhe_web",
  "writhe_feed",
	"writhe_impaled",
	"writhe_thighlock",
	"writhe_armpitlock",
	"writhe_necklock",
  "writhe_ropes",
  "writhe_vines",
 }
 if not snd.checksomeAffs(noparryaffs, 1) then no_parry = true end
 
 if (snd.limb_dmg["left arm"] &gt;= 33.33) and (snd.limb_dmg["right arm"] &gt;= 33.33) then
  no_parry = true
 end
 return no_parry
end

function snd.proned()
 local prone = false
 local proneaffs = {
  "frozen",
  "indifference",
  "paralysis",
  "writhe_transfix",
  "writhe_web",
  "writhe_feed",
  "writhe_impaled",
  "writhe_thighlock",
  "writhe_armpitlock",
  "writhe_necklock",
  "writhe_ropes",
  "writhe_vines",
  "fallen",
  "asleep",
 }
 if snd.checksomeAffs(proneaffs, 1) then prone = true end
 return prone
end

function snd.venomEffect(venom)
	local aff = ""
	if venom == "epseth" then
		if snd.checkAff("left_leg_broken") then
			aff = "right_leg_broken"
		else
			aff = "left_leg_broken"
		end
	elseif venom == "epteth" then
		if snd.checkAff("left_arm_broken") then
			aff = "right_arm_broken"
		else
			aff = "left_arm_broken"
		end
	elseif venom == "prefarar" then
		if snd.checkAff("hearing") then
			aff = "sensitivity"
		else
			aff = "hearing"
		end
	elseif venom == "oculus" then
		if snd.checkAff("sight") then
			aff = "blurry_vision"
		else
			aff = "sight"
		end
	elseif venom == "cripple" then
		if snd.checkAff("crippled") then
			aff = "crippled_body"
		else
			aff = "crippled"
		end
	elseif venom == "disrupt" then
		if snd.checkAff("physical_disruption") then
			aff = "mental_disruption"
		else
			aff = "physical_disruption"
		end
	else
		for i in pairs(snd.effects) do
			if snd.effects[i] == venom then
				aff = i
			end
		end
	end
	return aff
end

function snd.check_aegis()

	local reserves = tonumber(gmcp.Char.Vitals.residual)
	
	if reserves &gt;= 60 then
		return true
	else
		return false
	end

end

function snd.affNameCheck(x)

local aff = x
local affs_to_change = {
  ["limp veins"] = "limp_veins",
  ["thin blood"] = "thin_blood",
  ["heart flutter"] = "heartflutter",
  ["self-pity"] = "self_pity",
  ["mental disruption"] = "mental_disruption",
  ["physical disruption"] = "physical_disruption",
  ["blurry vision"] = "blurry_vision",
  ["destroyed throat"] = "destroyed_throat",
  ["cracked ribs"] = "cracked_ribs",
  ["self loathing"] = "self_loathing",
  ["blood curse"] = "blood_curse",
}
  
  if affs_to_change[aff] then
    return affs_to_change[aff]
  else
    aff = aff:gsub("a ", "")
    return aff:gsub(" ", "_")
  end

end

function snd.removeProneStates(all) -- Reset a target back to standing w/no writhes or other affs
  local writhe_table = {
  	"writhe_transfix",
    "writhe_feed",
  	"writhe_web",
  	"writhe_impaled",
  	"writhe_thighlock",
  	"writhe_armpitlock",
  	"writhe_necklock",
    "writhe_ropes",
    "writhe_vines",
   }
   
   local other_prones = {
    "frozen",
    "indifference",
    "asleep",
    "paralysis",
    }
    
    local removals = {}
    if all then removals = table.n_union(writhe_table, other_prones)
    else removals = writhe_table
    end
  for _, v in pairs(removals) do snd.target_cured(v) end
  
  snd.jawlocked = false
  snd.target_impaled = false
end

function snd.loban_no_more(text)

  local new_word = text
  local test_string = ""
  local letter_to_move_to_front = ""
  
  if text:find("way") then
    new_word = text:gsub("way", "")
  else
    test_string = text:sub(-2, -1)
    if test_string_one == "ay" then
      letter_to_move_to_front = text:sub(-3, -3)
      test_string = text:sub(1, string.len(text)-3)
      new_word = letter_to_move_to_front..test_string  
    end  
  end
  
  return new_word
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>All attacks</name>
						<packageName></packageName>
						<script>snd.all_class_attacks = {

["Adherent"] = {
 Wither = function(target)
          if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
            snd.target_got("slickness")
            snd.target_got("disfigurement")
          else
            snd.target_got("magic_weakness")
            snd.target_got("fire_weakness")
            tempTimer(30, [[snd.target_cured("magic_weakness")]])
            tempTimer(30, [[snd.target_cured("fire_weakness")]])
         end
       end,
 Avatar = function(target)
          enableTrigger("Adherent Avatar")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Tentacle = function(target, shield)
              if shield then
                snd.used.shield = false
              end
              if #snd.maybe_affs &gt;= 1 then
                snd.onHit2({})
              end
            end,
   },
  
  ["Aetherial"] = {
    Beam = function(target)
      if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
        snd.target_got("slickness")
        snd.target_got("disfigurement")
      else
        snd.target_got("magic_weakness")
        snd.target_got("fire_weakness")
        tempTimer(30, [[snd.target_cured("magic_weakness")]])
        tempTimer(30, [[snd.target_cured("fire_weakness")]])
      end
    end,
    Volley = function(target)
      enableTrigger("Aetherial Volley")
      enableTrigger("Sunder Parry")
      if #snd.maybe_affs &gt;= 1 then
        snd.onHit2({"Parry",})
      end
    end,
    Omission = function(target, shield)
      if shield then
        snd.used.shield = false
      end
      if #snd.maybe_affs &gt;= 1 then
        snd.onHit2({})
      end
    end,
   },
   
--Akkari
  ["Ascendance"] = {
  
    Penitence = function(target)
                snd.target_got("slickness")
                snd.used.paste = false
                snd.target_got("no_paste")
              end,
    Denounce = function(target, quell)
               if quell then
                 snd.used.shield = false
               end
            end,
    Rekindle = function(target, limb)
                    snd.took_limb_dmg(-15, limb)
                  end,
    Censure = function(target, lenient)
            snd.onHit2({"Dodge", "Rebounding"})
           end,
    
    Bloodlet = function(target)
                snd.target_got("rend")
              end,
    Feed = function(target, fail)
            if not fail then
            else
              snd.target_cured("no_paste")
              snd.target_cured("feast")
              snd.target_cured("fallen")
              end
            end,
  
  },
  
  ["Dictum"] = {
    Exhort = function(target, blindness)
                  snd.target_got("sight")
                  if not blindness then  
                   snd.target_got("writhe_transfix")
                 end
                end,
    Confusion = function(target)
                 snd.target_got("confusion")
                end,
    Impatience = function(target)
                 snd.target_got("impatience")
                end,
    Paranoia = function(target)
                 snd.target_got("paranoia")
                end,
    Stupidity = function(target)
                 snd.target_got("stupidity")
                end,
    Agoraphobia = function(target)
                 snd.target_got("agoraphobia")
                end,
    Masochism = function(target)
                 snd.target_got("masochism")
                end,
    Loneliness = function(target)
                 snd.target_got("loneliness")
                end,
    Epilepsy = function(target)
                 snd.target_got("epilepsy")
                end,
    Anorexia = function(target)
                 snd.target_got("anorexia")
                end,
    Peace = function(target)
                 snd.target_got("peace")
                end,
    Dementia = function(target)
                 snd.target_got("dementia")
                end,
    Berserking = function(target)
                 snd.target_got("berserking")
                end,
    Indifference = function(target)
                 snd.target_got("indifference")
                end,
    Vertigo = function(target)
                 snd.target_got("vertigo")
                end,
    Recklessness = function(target)
                 snd.target_got("recklessness")
                end,
    Remorse = function(target)
                 snd.target_got("remorse")
                end,
    Contrition = function(target)
                 snd.target_got("contrition")
                end,
    Disrupt = function(target, failure)
                if not failure then
                  snd.target_got("disrupted")
                end
              end,
    Fear = function(target)
                 snd.target_got("fear")
                end,
    Amnesia = function(target)
                 snd.target_got("amnesia")
                end,
  },
  
  ["Discipline"] = {
  
  Provoke = function(target)
            if target == snd.target then
              snd.used.rebounding = false
              snd.used.shield = false
            end
          end,
  
  Anathema = function(target)
            snd.target_got("blood_curse")
          end,

  Attend = function(target)
           snd.target_got("hearing")
           snd.target_got("sight")
         end,
         
  Exorcism = function(target, fail)
          if not fail then
      		  snd.target_got("feast")
      		  tempTimer(19.5, [[snd.target_cured("feast")]])
      	    snd.used.paste = false
            snd.target_got("no_paste")
          else
            snd.target_cured("writhe_transfix")
          end
        end,
          
  Bane = function(target)
             snd.target_got("blood_poison")
          end,
          
  Pariah = function(target)
            snd.target_got("blood_rune")
	          snd.runeused = true
        end,
  Exsanguinate = function(target)
          snd.target_got("effused_blood")
        end,
  
  Inquisition = function(target)
            snd.balance.seize = false
        end,      
  
  
    },
  
--Alchemist
  ["Alchemy"] = {
  
    Upset = function(target, catalysed)
             if not catalysed then
               snd.target_got("fallen")
             end
           end,
             
    Infiltrative = function(target, catalysed)
             if not catalysed then
               snd.target_got("infested")
             end
           end,
    Pathogen = function(target, catalysed)
             if not catalysed then
               snd.target_got("blighted")
             end
           end,
    Electroshock = function(target, catalysed)
                snd.target_got("paresis")
                snd.target_got("stupidity")
              end,
    Intrusive = function(target, catalysed)
             if catalysed then
               snd.target_got("plodding")
             end
             snd.target_got("lifebane")
             if lifebane_timer then killTimer(lifebane_timer) end
	           lifebane_timer = tempTimer(40,[[snd.target_cured("lifebane")]])
           end,
    Asphyxiant = function(target, catalysed)
                snd.target_got("writhe_vines")
              end,

    Virulent = function(target, catalysed)
                  if #snd.maybe_affs &gt;= 1 then
                    snd.onHit2({})
                  end
                end,
    Corrosive = function(target, catalysed)
                  snd.used.shield = false
                end,
    Malignant = function(target, catalysed)
             if catalysed then
               snd.target_got("idiocy")
             end
             snd.target_got("vitalbane")
           end,  
    Fulmination = function(target, catalysed)
                  if catalysed then
                    snd.target_got("stormbolt_cloud")
                  end
                end,
    Neurotic = function(target)
    --This never shows catalysed message.
                snd.target_got("impatience")
                snd.target_got("confusion")
              end,
    Rousing = function(target)
                snd.target_got("sight")
                snd.target_got("hearing")
                snd.target_got("sensitivity")
              end,
    Parity = function(target, catalysed)
             if catalysed then
               snd.target_got("justice")
             end
           end,  
  },
  
  ["Experimentation"] = {
    Prognosis = function(target)
                    snd.target_got("dread")
                        if snd.hitting == "You" then
                          snd.my_dread = true
                          snd.their_dread = false
                        else
                          snd.my_dread = false
                          snd.their_dread = true
                        end
                  end,
    Hallucinogen = function(target)
                  if #snd.maybe_affs &gt;= 1 then
                    snd.onHit2({})
                  end
                end,
    Causality = function(target)
             snd.incomingomen = true
             snd.message(matches[2].." has an Causality incoming in 6 seconds!", "alchemy")
          end,
        

  },
  
  ["Botany"] = {
        
    Envelop = function(target)
               snd.used.shield = true
             end,
        

  },

--Archivist
  ["Geometrics"] = {
    Pattern = function(target)
                snd.target_got("patterns")
              end,
              
    Lemniscate = function(target)
                   snd.target_got("lemniscate")
                   lemniscate_timer = tempTimer(9.0,[[snd.target_cured("lemniscate")]])
                 end,
    Matrix = function(target)
               snd.target_got("matrix")
               matrix_timer = tempTimer(20.0,[[snd.target_cured("matrix")]])
             end,

    Circle = function(target)
              local t = {"merciful", "masochism", "berserking", "recklessness"} -- initialize table with circle affs
              for _, v in pairs(t) do -- iterate circle affs
                if not snd.checkAff(v) then -- check if they have it
                  snd.target_got(v) -- if they don't have it, add it
                  break -- if we added an aff, break out of the loop
                end -- end if
              end -- end for
             end,
                      
    Triangle = function(target)
              local t = {"laxity", "lovers_effect", "peace", "magnanimity"} 
              for _, v in pairs(t) do
                if not snd.checkAff(v) then
                  snd.target_got(v)
                  break 
                end 
              end
             end,
                
    Square = function(target)
              local t = {"dizziness", "faintness", "epilepsy", "shyness"} 
              for _, v in pairs(t) do
                if not snd.checkAff(v) then
                  snd.target_got(v)
                  break 
                end 
              end
             end,
    Sealing = function(target, shape)
                snd.target_got(shape.."_sealed")
                if shape == "square" then
                  tempTimer(31, [[snd.target_cured("square_sealed")]])
                elseif shape == "circle" then
                  tempTimer(31, [[snd.target_cured("circle_sealed")]])
                elseif shape == "triangle" then
                  tempTimer(31, [[snd.target_cured("triangle_sealed")]])
                end
              end,
    Fork = function(target)
             snd.used.shield = false
           end,
  },
  
  ["Numerology"] = {
        
    Madness = function(target)
               snd.target_got("dementia")
               snd.target_got("paranoia")
               snd.target_got("hallucinations")
               if snd.hitting == "You" then snd.balance.madness = false end
              end,
    Affliction = function(target)
                   enableTrigger("Elicit Affliction")
                 end,

  },
  
  ["Bioessence"] = {
          Infection = function(target)
                        snd.target_got("mutagen")
                        if snd.hitting == "You" then
                          snd.my_mutagen = true
                          snd.their_mutagen = false
                        else
                          snd.my_mutagen = false
                          snd.their_mutagen = true
                        end
             end,
          Advance = function(target)
                        snd.target_got("mutagen")
                        if snd.hitting == "You" then
                          snd.my_mutagen = true
                          snd.their_mutagen = false
                        else
                          snd.my_mutagen = false
                          snd.their_mutagen = true
                        end
             end,
          Jolt = function(target)
                   snd.target_cured("no_speed")
                 end,
          Preserve = function(target, level)
                       if level == "severe" then
                        snd.target_got("cold")
                        snd.target_got("cold")
                       elseif level == "moderate" then
                        snd.target_got("cold")
                       end
                       snd.target_got("cold")
                      end,

  },  
  
--Ascendril
  ["Elemancy"] = {
  
    Thunder = function(target)
                snd.target_got("dizziness")
                snd.target_got("stupidity")
  	          end,
    Direfrost = function(target, failed)
                  if not failed then
                    snd.target_got("direfrost")
                  else
                    snd.target_cured("no_caloric")
                  end
                end,
    Ignite = function(target, conditional)
               if conditional == "Normal" then
                 snd.target_got("ablaze")
               elseif conditional == "Water" then
                 snd.target_got("blisters")
               end
             end,
    Firelash = function(target, element, conditional)
                	snd.last_hit_limb = conditional
                	snd.last_limb_dmg = 12
                  if element == "Water" then snd.last_limb_dmg = 14 end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Parry", "Dodge"})
                	if snd.flamewreathed.limb == "" and element == "Fire" then
                		snd.flamewreathed.limb = conditional
                	end
                  snd.flamewreathed.resonance = element
                end,
    Scorch = function(target, element, conditional)
            	if element == "Water" then
            		snd.target_got("slickness")
            	elseif element == "Air" then
            		snd.target_got("asthma")
            	end
              display(conditional)
              if conditional:find("Arm") then
                if snd.checkAff("ablaze") or snd.checkAff("emberbrand") then
                  snd.target_got("left_arm_broken")
                  snd.target_got("right_arm_broken")
                else
                  snd.target_got("a_broken_arm")
                end
              else
                if snd.checkAff("ablaze") or snd.checkAff("emberbrand") then
                  snd.target_got("left_leg_broken")
                  snd.target_got("right_leg_broken")
                else
                  snd.target_got("a_broken_leg")
                end
              end
            end,
    Hailstorm = function(target, element)
                	if element == "Air" then
                  		snd.target_got("lethargy")
                      snd.target_got("cold")
                  		if snd.proned() then
                  			snd.target_got("confusion")
                  		end
                  	else
                  		snd.target_got("dizziness")
                  	end
                  end,
    Windlance = function(target, element)
                  snd.used.shield = false
                  if melement == "Air" then
                    if snd.checkAff("clumsiness") and snd.target_got("dizziness") then
                      snd.target_got("dissonance")
                    elseif snd.checkAff("clumsiness") then
                      snd.target_got("dizziness")
                    else
                      snd.target_got("clumsiness")
                    end
                  end
                end,
    Pressurize = function(target, element)
                	if snd.checkAff("vertigo") then
                		snd.target_got("confusion")
                	else
                 		snd.target_got("vertigo")
                	end
                	if element == "Water" then
                		snd.target_got("weariness")
                	elseif element == "Fire" then
                		snd.target_got("clumsiness")
                	end
                end,
      Coldsnap = function(target, element)
                   	snd.target_got("stupidity")
                  	if element == "Fire" then
                  		snd.target_got("recklessness")
                  	elseif element == "Air" then
                  		snd.target_got("masochism")
                  	end
                  end,
      Mistral = function(target, element)
                  snd.target_got("cold")
                	if element == "Water" then
                    snd.target_got("cold")
                	elseif element == "Fire" then
                		snd.target_got("sensitivity")
                	end
                end,
      Lightning = function(target, element)
                  	snd.target_got("paresis")
                  	if element == "Fire" then
                  		snd.target_got("vertigo")
                  	elseif element == "Water" then
                  		snd.target_got("epilepsy")
                  	end
                  end,
      Frostblade = function(target, element, venom)
                     local aff = snd.venomEffect(venom)
                     snd.target_got(aff)
                     table.insert(snd.last_affs, aff)
                     if element == "Water" then
                   	  snd.target_got("hypothermia")
                     end
                   end,
      Gorge = function(target, element, pill)
              	snd.target_got("gorged")
              	if element == "Fire" then
              		snd.target_got("anorexia")
              	elseif element == "Air" then
              		snd.target_got("indifference")
              	end
                if pill ~= nil then snd.gorged = pill end
              end,
      Icicle = function(target, failed)
                 if failed then
                   snd.removeProneStates(true)
                 else
                   snd.target_got("writhe_impaled")
                   if snd.hitting == "You" then
                    snd.target_impaled = true
                   end
                end
              end,
    Conflagrate = function(target, failed)
                if not failed then
                  snd.target_got("emberbrand")
                  if snd.checksomeAffs({"right_arm_mangled","left_arm_mangled","right_leg_mangled","left_leg_mangled","head_mangled","torso_mangled",}, 1) then
                    tempTimer(120, [[ snd.target_cured("emberbrand") ]])
                  elseif snd.checksomeAffs({"right_arm_damaged","left_arm_damaged","right_leg_damaged","left_leg_damaged","head_damaged","torso_damaged",}, 1) then
                    tempTimer(90, [[ snd.target_cured("emberbrand") ]])
                  else
                    tempTimer(60, [[ snd.target_cured("emberbrand") ]])
                  end
                end
              end,
  },
  
  ["Arcanism"] = {
    Transfix = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                  end,

  },
  
  ["Thaumaturgy"] = {
    Flare = function(target)
            if snd.glimpse == "air" then
              if snd.checkAff("vertigo") then
             		snd.target_got("muddled")
              else
             		snd.target_got("vertigo")
              end
            end
          
            if snd.glimpse == "water" then
              if snd.checkAff("hypothermia") then
                snd.target_got("cold")  
          		else
             	 snd.target_got("hypothermia")
              end
            end
          	
            if snd.glimpse == "fire" then
              snd.target_got("ablaze")
          	end
            snd.fulcrum_ready = false
          end,       

  },
  
--Bloodborn
  ["Humourism"] = {
  
    Stupor = function(target)
                snd.target_got("dizziness")
                snd.target_got("stupidity")
  	          end,
    Frostbite = function(target, failed)
                  if not failed then
                    snd.target_got("frostbite")
                  else
                    snd.target_cured("no_caloric")
                  end
                end,
    Boil = function(target, conditional)
               if conditional == "Normal" then
                 snd.target_got("ablaze")
               elseif conditional == "Phlegm" then
                 snd.target_got("blisters")
               end
             end,
    Disgorge = function(target, element, conditional)
                	snd.last_hit_limb = conditional
                	snd.last_limb_dmg = 12
                  if element == "Phlegm" then snd.last_limb_dmg = 14 end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Parry", "Dodge"})
                	if snd.flamewreathed.limb == "" and element == "Yellow" then
                		snd.flamewreathed.limb = conditional
                	end
                  snd.flamewreathed.resonance = element
                end,
    Broil = function(target, element, conditional)
            	if element == "Phlegm" then
            		snd.target_got("slickness")
            	elseif element == "Black" then
            		snd.target_got("asthma")
            	end
              display(conditional)
              if conditional:find("Arm") then
                if snd.checkAff("ablaze") or snd.checkAff("excess_choleric") then
                  snd.target_got("left_arm_broken")
                  snd.target_got("right_arm_broken")
                else
                  snd.target_got("a_broken_arm")
                end
              else
                if snd.checkAff("ablaze") or snd.checkAff("excess_choleric") then
                  snd.target_got("left_leg_broken")
                  snd.target_got("right_leg_broken")
                else
                  snd.target_got("a_broken_leg")
                end
              end
            end,
    Swathe = function(target, element)
                	if element == "Black" then
                  		snd.target_got("lethargy")
                      snd.target_got("cold")
                  		if snd.proned() then
                  			snd.target_got("confusion")
                  		end
                  	else
                  		snd.target_got("dizziness")
                  	end
                  end,
    Befoul = function(target, element)
                  snd.used.shield = false
                  if melement == "Black" then
                    if snd.checkAff("clumsiness") and snd.target_got("dizziness") then
                      snd.target_got("dissonance")
                    elseif snd.checkAff("clumsiness") then
                      snd.target_got("dizziness")
                    else
                      snd.target_got("clumsiness")
                    end
                  end
                end,
    Equilibrium = function(target, element)
                	if snd.checkAff("vertigo") then
                		snd.target_got("confusion")
                	else
                 		snd.target_got("vertigo")
                	end
                	if element == "Phlegm" then
                		snd.target_got("weariness")
                	elseif element == "Yellow" then
                		snd.target_got("clumsiness")
                	end
                end,
      Brainfreeze = function(target, element)
                   	snd.target_got("stupidity")
                  	if element == "Yellow" then
                  		snd.target_got("recklessness")
                  	elseif element == "Black" then
                  		snd.target_got("masochism")
                  	end
                  end,
      Plunge = function(target, element)
                  snd.target_got("cold")
                	if element == "Phlegm" then
                    snd.target_got("cold")
                	elseif element == "Yellow" then
                		snd.target_got("sensitivity")
                	end
                end,
      Synapse = function(target, element)
                  	snd.target_got("paresis")
                  	if element == "Yellow" then
                  		snd.target_got("vertigo")
                  	elseif element == "Phlegm" then
                  		snd.target_got("epilepsy")
                  	end
                  end,
      Flense = function(target, element, venom)
                     local aff = snd.venomEffect(venom)
                     snd.target_got(aff)
                     table.insert(snd.last_affs, aff)
                     if element == "Phlegm" then
                   	  snd.target_got("hypothermia")
                     end
                   end,
      Revulsion = function(target, element, pill)
              	snd.target_got("gorged")
              	if element == "Yellow" then
              		snd.target_got("anorexia")
              	elseif element == "Black" then
              		snd.target_got("indifference")
              	end
                if pill ~= nil then snd.gorged = pill end
              end,
      Perforate = function(target, failed)
                 if failed then
                   snd.removeProneStates(true)
                 else
                   snd.target_got("writhe_impaled")
                   if snd.hitting == "You" then
                    snd.target_impaled = true
                   end
                end
              end,
    Smother = function(target, failed)
                if not failed then
                  snd.target_got("excess_choleric")
                  if snd.checksomeAffs({"right_arm_mangled","left_arm_mangled","right_leg_mangled","left_leg_mangled","head_mangled","torso_mangled",}, 1) then
                    tempTimer(120, [[ snd.target_cured("excess_choleric") ]])
                  elseif snd.checksomeAffs({"right_arm_damaged","left_arm_damaged","right_leg_damaged","left_leg_damaged","head_damaged","torso_damaged",}, 1) then
                    tempTimer(90, [[ snd.target_cured("excess_choleric") ]])
                  else
                    tempTimer(60, [[ snd.target_cured("excess_choleric") ]])
                  end
                end
              end,
  },
  
  ["Esoterica"] = {
    Enthrall = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                  end,

  },
  
  ["Hematurgy"] = {
    Palpitate = function(target)
            if snd.glimpse == "black" then
              if snd.checkAff("vertigo") then
             		snd.target_got("muddled")
              else
             		snd.target_got("vertigo")
              end
            end
          
            if snd.glimpse == "phlegm" then
              if snd.checkAff("hypothermia") then
                snd.target_got("cold")  
          		else
             	 snd.target_got("hypothermia")
              end
            end
          	
            if snd.glimpse == "yellow" then
              snd.target_got("ablaze")
          	end
            snd.fulcrum_ready = false
          end,       

  },
  
  ["Astral"] = {
    Huntresses = function(target)
      snd.huntresses_used = true
      tempTimer(90, [[snd.huntresses_used = false]])
    end,
    Contaminate = function(target)
      enableTrigger("Astral Contaminate")
      enableTrigger("Sunder Parry")
      if #snd.maybe_affs &gt;= 1 then
        snd.onHit2({"Parry",})
      end
    end,
    Hamartia = function(target, shield)
      snd.hamartia_used = true
      if shield then
        snd.used.shield = false
      end
      if #snd.maybe_affs &gt;= 1 then
        snd.onHit2({})
      end
    end,    
    Unmask = function(target)
      if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
        snd.target_got("slickness")
        snd.target_got("disfigurement")
        snd.unmasked = true
        tempTimer(25, [[snd.unmasked = false]])
        snd.glory = snd.glory - 1
      else
        snd.target_got("magic_weakness")
        snd.target_got("fire_weakness")
        tempTimer(30, [[snd.target_cured("magic_weakness")]])
        tempTimer(30, [[snd.target_cured("fire_weakness")]])
        snd.glory = snd.glory - 1
      end
    end,    
    Devour = function(target)
      snd.glory = snd.glory - 2
      snd.hamartia_used = false
    end,  
    Crescent = function(target)
      snd.glory = snd.glory - 3
    end,
    
   }, 
   
-- Bard
  ["Performance"] = {
  
  Pierce = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,
  
  Tempo = function(target)
          enableTrigger("Bard Hit Confirmation")
          end,
          
  
  Rhythm = function(target, conditional)
            local rhythm_table = {
            ["one"] = "paresis",
            ["two"] = "shyness",
            ["three"] = "besilence",}
            snd.target_got(rhythm_table[conditional])
            enableTrigger("Bard Rhythm Confirmation")
           end,
           
  Needle = function(target, venom)
            if target == "you" then return end
            if venom == "miss" then snd.aff_gain("clumsiness") end
            if not venom then
              snd.needle = snd.venomEffect(snd.maybe_affs)
            elseif venom ~= "dodge" or venom ~= "miss" then
              if snd.needle == "none" then
                snd.needle = snd.venomEffect(venom)
                end
              end
            end,         
  
  
  
  Ridicule = function(target)
             snd.target_got("self_loathing")
             end,
  
  -- Seduce does nothing w/o happiness induce or scantily-clad, and the lovers_effect has a confirmation line for that. Not sure we need below.
--  Seduce = function(target)
--            snd.target_got("lovers_effect")
--            end,
  
  Quip = function(target)
          snd.target_got("hatred")
          end,
        
  Sock = function(target)
          if snd.checkAff("dizziness") then
             table.insert(snd.maybe_affs, "dazed")
          else
             table.insert(snd.maybe_affs, "dizziness")
          end
          snd.onHit2({"Dodge"}) 
        end,
  
  
  Crackshot = function(target)
          snd.target_got("dizziness")
          snd.target_got("perplexed")
          end,
  
  Hiltblow = function(target)    
              enableTrigger("Hiltblow Confirmation")
              snd.onHit2({"Dodge", "Rebounding"}, "Bard Hiltblow")
          end, 
          
  Tackle = function(target)
        snd.target_got("fallen")
        end,

},

  ["Weaving"] = { 
  
  
    Anelace = function(target, stab)
            if stab then
               snd.target_got("hollow")
               snd.target_got("narcolepsy")
             end
            end,
             
    Headstitch = function(target)
               snd.target_got("deadening")
               snd.target_got("besilence")
             end,

                  
    Barbs = function(target)
                  snd.target_got("manabarbs")
                  snd.target_got(snd.globe_affs[snd.globecount])
                  snd.globecount = snd.globecount-1
                  if snd.globecount == 0 then
                    snd.target_cured("globes")
                    end
                  end,
           
                  
    Runeband = function(target)
              snd.target_got("runeband")
              snd.runebandcount = 1
              snd.bandclockwise = true
              end,                            
                
    Bladestorm = function(target)
              snd.target_got("bladestorm")
              end,
              
    Ironcollar = function(target)
             enableTrigger("Ironcollar Handling")
             tempTimer(3, [[disableTrigger("Ironcollar Handling")]])
             end, 
                
    Globes = function(target)            
              snd.globecount = 3
              snd.target_got("globes")
              end,
              
    Mindbreak = function(target)
              snd.target_got("migraine")
              snd.target_got("squelched")
              end,
  }, 
--Carnifex
  ["Savagery"] = {
  
  Skewer = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
               theytumbling = false
            end
          end,
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,
    Crush = function(target, conditional)
              local aff = {["knees"] = "crushed_kneecaps", ["elbows"] = "crushed_elbows", ["chest"] = "cracked_ribs"}
              if conditional == "chest" and snd.checkAff("cracked_ribs") then
                table.insert(snd.maybe_affs, "crushed_chest")
              else
                table.insert(snd.maybe_affs, aff[conditional])
              end
              snd.onHit2({"Rebounding", "Dodge"}, "Carnifex")
              if conditional == "knees" then tempTimer(11.5, [[snd.target_cured("crushed_kneecaps")]]) end
              if conditional == "elbows" then tempTimer(7.5, [[snd.target_cured("crushed_elbows")]]) end
            end,
    Doublebash = function(target)
                   enableTrigger("Doublebash Hit Confirmation")
                 end,
    Batter = function(target)
               table.insert(snd.maybe_affs, "blurry_vision")
               snd.onHit2({"Rebounding", "Dodge"})
              end,
    Hook = function(target)
              snd.target_got("fallen")
            end,
   Razehack = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                snd.onHit2({"Dodge", "Rebounding"})
              end,
    Spinning = function(target)
                  enableTrigger("Spinslash 2nd half")
                  snd.onHit2({"Dodge", "Rebounding"}, "Carnifex")
                end,
  },
  
  ["Deathlore"] = {
        
    Shield = function(target)
               snd.used.shield = true
             end,
    Frailty = function(target)
                snd.target_got("glasslimb")
              end,
    Distortion = function(target)
                   snd.target_got("distortion")
                 end,   
    Wither = function(target)
               enableTrigger("Wither Limb Messages")
             end,
    Wraith = function(target)
               snd.target_got("soul_wraith")
             end,
    Poison = function(target)
               snd.target_got("soul_poison")
               if snd.hitting == "You" then
                 snd.balance.soulpoison = false
               end
             end,
    Disease = function(target)
                snd.target_got("soul_disease")
              end,
    Implant = function(target)
                enableTrigger("Soul Implant Give")
                snd.target_got("soul_implant")
              end,
    Erode = function(target)
              snd.used.shield = false
              snd.used.rebounding = false
              snd.target_cured("barrier")
            end,
    Substitute = function(target)
                snd.reset_target()
            end,
    
  },
  
  ["Warhounds"] = {
        
 Acidspit = function(target)
              if snd.checkAff("weariness") then
                snd.target_got("crippled")
              else
                snd.target_got("weariness")
              end
            end,

 Poisonclaw = function(target)
                if snd.checkAff("blisters") then
                  snd.target_got("limp_veins")
                else
                  snd.target_got("blisters")
                end
              end,

 Shock = function(target)
            if snd.checkAff("epilepsy") then
              snd.target_got("hallucinations")
            else
              snd.target_got("epilepsy")
            end
          end,
 Stare = function(target)
            if snd.checkAff("berserking") then
              snd.target_got("impairment")
            else
              snd.target_got("berserking")
            end
          end,

 Growl = function(target)
            if snd.checkAff("dizziness") then
              snd.target_got("recklessness")
            else
              snd.target_got("dizziness")
            end
          end,
  
  Shatter = function(target)
              snd.used.shield = false
            end,
  Bite = function(target, limb)
                 snd.last_hit_limb = limb
                 snd.last_limb_dmg = 2.49
                 snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                 enableTrigger("Sunder Parry")
               end,
  Contagion = function(target)
              --loki
              end,
  Tundralhowl = function(target)
                  snd.target_got("cold")
                end,
  Firebreath = function(target)
                 snd.target_got("ablaze")
               end,
  Ululate = function(target)
            if table.isMember(snd.players_here, snd.target) and snd.hitting ~= snd.target then
              snd.target_got("blurry_vision")
            end
          end,
  },


["Chaos"] = {
 Warp = function(target)
          if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
            snd.target_got("slickness")
            snd.target_got("disfigurement")
          else
            snd.target_got("magic_weakness")
            snd.target_got("fire_weakness")
            tempTimer(30, [[snd.target_cured("magic_weakness")]])
            tempTimer(30, [[snd.target_cured("fire_weakness")]])
         end
       end,
  Claw = function(target)
          enableTrigger("Chaos Claw")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Shock = function(target, shield)
              if shield then
                snd.used.shield = false
              end
              if #snd.maybe_affs &gt;= 1 then
                snd.onHit2({})
              end
            end,
   },
  
--Earthcaller
  ["Subjugation"] = {
  
  Crush = function(target, limb)
            snd.last_hit_limb = limb
            enableTrigger("Crush Confirmation")
          end,
  
  Obliterate = function(target, limb)
           	snd.last_hit_limb = limb
          	snd.last_limb_dmg = 25
          	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Parry", "Dodge"})
          end,
  
  Ribcage = function(target)
           snd.used.shield = true
         end,
  
  Dust = function(target)
           snd.target_got("ablaze")
           snd.target_got("angel_seared")
           tempTimer(15, [[snd.target_cured("angel_seared")]])
         end,
  
  Incisor = function(target, defense)
            snd.used.rebounding = false
          end,
          
  Raze = function(target, defense)
            if defense == "shield" then snd.used.shield = false
            elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
            end
          end,
          
  Subdue = function(target)
             if snd.battle_aff ~= "none" then
              snd.target_got(snd.battle_aff)
            	table.insert(snd.last_affs, snd.battle_aff)
             end
             if snd.chasten_aff ~= "none" then
              snd.target_got(snd.chasten_aff)
            	table.insert(snd.last_affs, snd.chasten_aff)
             end
            end,
  
  Strike = function(target)
            table.insert(snd.maybe_affs, "paresis")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  Punch = function(target)
            table.insert(snd.maybe_affs, "weariness")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  Facesmash = function(target)
                if not snd.checksomeAffs({"misery", "sight"}, 1) then
                  table.insert(snd.maybe_affs, 1, "misery")
                  table.insert(snd.maybe_affs, 2, "sight")
                elseif snd.checkAff("misery") then
                  table.insert(snd.maybe_affs, 1, "sight")
                else
                  table.insert(snd.maybe_affs, 1, "misery")
                end
                snd.onHit2({"Dodge", "Rebounding"}, "Luminary Facesmash")
              end,
  Slam = function(target)
                if not snd.checksomeAffs({"asthma", "haemophilia"}, 1) then
                  table.insert(snd.maybe_affs, 1, "asthma")
                  table.insert(snd.maybe_affs, 2, "haemophilia")
                elseif snd.checkAff("asthma") then
                  table.insert(snd.maybe_affs, 1, "haemophilia")
                else
                  table.insert(snd.maybe_affs, 1, "asthma")
                end
                snd.onHit2({"Dodge", "Rebounding"}, "Luminary Slam")
              end,
  Horrification = function(target)
            table.insert(snd.maybe_affs, "sight")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  
  },
  
  ["Apocalyptia"] = {
    Hysteria = function(target)
               snd.target_got("confusion")
               snd.target_got("dizziness")
             end,
    Lull = function(target)
               snd.target_got("peace")
             end,
    Reckoning = function(target)
                  snd.target_got("hellsight")
                end,

  },
  
  ["Tectonics"] = {
    Ashfall = function(target)
                 snd.target_got("epilepsy")
                end,
                
    Transfixion = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                  end,
    Vent = function(target)
                snd.target_got("berserking")
                snd.target_got("hallucinations")
              end,
    Fault = function(target)
             snd.target_got("faulted")
             tempTimer(18.5, [[snd.target_cured("faulted")]])
           end,
    Spew = function(target)
             snd.target_got("ablaze")
             enableTrigger("Fervour Spew")
           end,
    Aftershock = function(target)
             snd.target_got("aftershock")
           end,
    Reformation = function(target)
                snd.reset_target()
            end,
  },  
  
--Indorani
  ["Necromancy"] = {
        Screech = function(target)
                    snd.target_got("hearing")
                  end,
        Belch = function(target)
        --not used by Sunder but some may want it
                 end,
        Leech = function(target)
                   snd.target_has_aura = true
                   snd.need_leech_aura = false
                end,                 
        Shrivel = function(target, where)
                    if where == "arms" then snd.target_got("a_broken_arm")
                    elseif where == "legs" then snd.target_got("a_broken_leg")
                    elseif where == "throat" then snd.target_got("crippled_throat")
                    else snd.target_got(where.." broken")
                    end
                  end, 
        Deform = function(target)
                   snd.need_deform = false
                   tempTimer(20,[[snd.need_deform = true]])
                 end,                
        Bonedagger = function(target)
                      if #snd.maybe_affs == 1 then
                        snd.onHit2({"Rebounding", "Dodge"})
                      end
                     end,
  },
  
  ["Tarot"] = {
        Sun = function(target, dodge)
                if #snd.maybe_affs &gt; 0 then
                  if not dodge then
                    local aff = snd.maybe_affs[1]
                    if snd.cardshapes.indorani[aff].card == "sun" then
                      snd.target_got(aff)
                    end
                  end
                  table.remove(snd.maybe_affs, 1)
                end
              end,
        Moon = function(target, dodge)
                if #snd.maybe_affs &gt; 0 then
                  if not dodge then
                    local aff = snd.maybe_affs[1]
                    if snd.cardshapes.indorani[aff].card == "moon" then
                      snd.target_got(aff)
                    end
                  end
                  table.remove(snd.maybe_affs, 1)
                end
              end,
        Hangedman = function(target, conditional)
                        if conditional ~= "prone" then
                          snd.target_got("writhe_ropes")
                        end
                        snd.target_got("fallen")
                    end,             
        Lovers = function(target)
                   snd.target_got("lovers_effect")  
                 end,

        Aeon = function(target, speed)
                if not speed then
                  snd.target_got("aeon")
                end
                snd.target_got("no_speed")
        end,
        
        Justice = function(target)
                   snd.target_got("justice") 
                 end,
                 
        Warrior = function(target, limb)
                     snd.last_hit_limb = limb
                     snd.last_limb_dmg = 12.50
                     snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                     enableTrigger("Sunder Parry")
                   end,
        Sandman = function(target)
                   --currently unused but if I want to add insomnia/sleep tracking it'll be here.
                 end,
        Adder = function(target)
            		  snd.target_got("haemophilia")
            	    if snd.hitting == "You" then
            	      snd.adder_attached = true
            		    snd.adder_ready = false
            	    end
                 end, 
  },
  
  ["Domination"] = {
    Slime = function(target)
              snd.balance.envelop = false
            end,        

  },

  
  --Luminary
  ["Spirituality"] = {
  
  Crush = function(target, limb)
            snd.last_hit_limb = limb
            enableTrigger("Crush Confirmation")
          end,
  
  Smash = function(target, limb)
           	snd.last_hit_limb = limb
          	snd.last_limb_dmg = 25
          	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Parry", "Dodge"})
          end,
  
  Aura = function(target)
           snd.used.shield = true
         end,
  
  Sear = function(target)
           snd.target_got("ablaze")
           snd.target_got("angel_seared")
           tempTimer(15, [[snd.target_cured("angel_seared")]])
         end,
  
  Strip = function(target, defense)
            snd.used.rebounding = false
          end,
          
  Raze = function(target, defense)
            if defense == "shield" then snd.used.shield = false
            elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
            end
          end,
          
  Chasten = function(target)
             if snd.battle_aff ~= "none" then
              snd.target_got(snd.battle_aff)
            	table.insert(snd.last_affs, snd.battle_aff)
             end
             if snd.chasten_aff ~= "none" then
              snd.target_got(snd.chasten_aff)
            	table.insert(snd.last_affs, snd.chasten_aff)
             end
            end,
  
  Strike = function(target)
            table.insert(snd.maybe_affs, "paresis")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  Punch = function(target)
            table.insert(snd.maybe_affs, "weariness")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  Facesmash = function(target)
                if not snd.checksomeAffs({"misery", "sight"}, 1) then
                  table.insert(snd.maybe_affs, 1, "misery")
                  table.insert(snd.maybe_affs, 2, "sight")
                elseif snd.checkAff("misery") then
                  table.insert(snd.maybe_affs, 1, "sight")
                else
                  table.insert(snd.maybe_affs, 1, "misery")
                end
                snd.onHit2({"Dodge", "Rebounding"}, "Luminary Facesmash")
              end,
  Slam = function(target)
                if not snd.checksomeAffs({"asthma", "haemophilia"}, 1) then
                  table.insert(snd.maybe_affs, 1, "asthma")
                  table.insert(snd.maybe_affs, 2, "haemophilia")
                elseif snd.checkAff("asthma") then
                  table.insert(snd.maybe_affs, 1, "haemophilia")
                else
                  table.insert(snd.maybe_affs, 1, "asthma")
                end
                snd.onHit2({"Dodge", "Rebounding"}, "Luminary Slam")
              end,
  Brilliance = function(target)
            table.insert(snd.maybe_affs, "sight")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  
  },
  
  ["Devotion"] = {
    Dazzle = function(target)
               snd.target_got("confusion")
               snd.target_got("dizziness")
             end,
    Peace = function(target)
               snd.target_got("peace")
             end,
    Hellsight = function(target)
                  snd.target_got("hellsight")
                end,

  },
  
  ["Illumination"] = {
    Lightning = function(target)
                 snd.target_got("allergies")
                end,
                
    Transfixion = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                  end,
    Heatwave = function(target)
                snd.target_got("berserking")
                snd.target_got("hallucinations")
              end,
    Sear = function(target)
             snd.target_got("tree_seared")
             tempTimer(19, [[snd.target_cured("tree_seared")]])
           end,
    Fire = function(target)
             snd.target_got("ablaze")
             enableTrigger("Illumination Fire")
           end,
    Rebirth = function(target)
                snd.reset_target()
            end,
  },
  
--Monk
  ["Tekura"] = {

    Kipup = function(target)
               snd.target_cured("fallen")
             end,
             
    Sidekick = function(target)                
                if snd.stance == "tiger" then
                  snd.last_limb_dmg = 10.8
              	else
                  snd.last_limb_dmg = 9
                end
                enableTrigger("Monk Hit Tracking")
              end,
    Snapkick = function(target)
                if snd.stance == "tiger" or snd.stance == "cobra" then
                  snd.last_limb_dmg = 10.8
              	else
              	 snd.last_limb_dmg = 9
                end
                enableTrigger("Monk Hit Tracking")
              end,
    Moonkick = function(target)                
                if snd.stance == "tiger" or snd.stance == "cobra" then
                  snd.last_limb_dmg = 10.8
              	else
                  snd.last_limb_dmg = 9
                end
                enableTrigger("Monk Hit Tracking")
              end,
    Whirlwind = function(target)
                if snd.stance == "tiger" or snd.stance == "cobra" then
                  if snd.checkAff("fallen") then 
                    snd.last_limb_dmg = 12.5
                  else
                    snd.last_limb_dmg = 10.8
                  end
              	else
                  if snd.checkAff("fallen") then 
                    snd.last_limb_dmg = 12.5
                  else
                    snd.last_limb_dmg = 9
                  end
                end
                enableTrigger("Monk Hit Tracking")
              end,
    Axe = function(target)                
                if snd.stance == "tiger" or snd.stance == "cobra" then
                  snd.last_limb_dmg = 10.8
              	else
                  snd.last_limb_dmg = 9
                end
                enableTrigger("Monk Hit Tracking")
              end,
    Sweepkick = function(target)
              	snd.target_got("fallen")
                snd.target_got("sore_ankle")
              end,
    Scythekick = function(target)
              	snd.used.shield = false
              end,
    Cometkick = function(target)
              	snd.last_limb_dmg = 5.5
                if snd.checksomeAffs({"right_arm_broken","left_arm_broken",2}) then
                  snd.target_got("weak_grip")
                  snd.target_got("collapsed_lung")
                end
                enableTrigger("Monk Hit Tracking")
              end,
    Hook = function(target)                
                if snd.stance == "tiger" then
                  snd.last_limb_dmg = 6.6
              	else
                  snd.last_limb_dmg = 5.5
                end
                enableTrigger("Monk Hit Tracking")
              end,
    Uppercut = function(target)                
                if snd.stance == "tiger" then
                  snd.last_limb_dmg = 6.6
              	else
                  snd.last_limb_dmg = 5.5
                end
                enableTrigger("Monk Hit Tracking")
              end,
    Hammerfist = function(target)                
                if snd.stance == "tiger" or snd.stance == "cobra" then
                  snd.last_limb_dmg = 6.6
              	else
                  snd.last_limb_dmg = 5.5
                end
                enableTrigger("Monk Hit Tracking")
              end,
    Spear = function(target)
                if snd.stance == "tiger" or snd.stance == "cobra" then
                  snd.last_limb_dmg = 6.6
              	else
                  snd.last_limb_dmg = 5.5
                end
                enableTrigger("Monk Hit Tracking")
              end,
    Palmstrike = function(target)
                snd.last_limb_dmg = 3
                enableTrigger("Monk Hit Tracking")
              	snd.target_got("blurry_vision")
              end,
    Jumpkick = function(target)
                snd.last_limb_dmg = 6
                enableTrigger("Monk Hit Tracking")
              end,
    Jab = function(target)
              	snd.last_limb_dmg = 5
                enableTrigger("Monk Hit Tracking")
              end,
    Throatstrike = function(target)
                enableTrigger("Throatstrike confirmation hit")
              end,
    Bladehand = function(target)
                enableTrigger("Turmoil confirmation hit")
              end,
    Slam = function(target)
             snd.target_got("fallen") --Just incase
           end,
    Feint = function(target, limb)
             snd.parried_limb = limb
            end,
    Wrench = function(target)
               enableTrigger("Wrench confirmation hit")
             end,

  },
  
  ["Kaido"] = {
    Cripple = function(target)
               --
              end,
              
    Restoration = function(target)
                    snd.handleRestore()
                  end,
    Ripple = function(target)
                snd.target_got("ripple")
                snd.target_cured("turmoil")
              end,

  },
  
  ["Telepathy"] = {
  
    Disrupt = function(target, fail)
                if not fail then
                  snd.target_got("disrupted")
                end
              end,
        

  },

["Nocturn"] = {
 Corrupt = function(target)
          if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
            snd.target_got("slickness")
            snd.target_got("disfigurement")
          else
            snd.target_got("magic_weakness")
            snd.target_got("fire_weakness")
            tempTimer(30, [[snd.target_cured("magic_weakness")]])
            tempTimer(30, [[snd.target_cured("fire_weakness")]])
         end
       end,
 Lash = function(target)
          enableTrigger("Nocturn Lash")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Haemoplague = function(target, shield)
              if shield then
                snd.used.shield = false
              end
              if #snd.maybe_affs &gt;= 1 then
                snd.onHit2({})
              end
            end,
   },
  
--Oneiromancer
  ["Oneiromancy"] = {
        Bells = function(target)
                    snd.target_got("hearing")
                  end,
        Fumes = function(target)
        --not used by Sunder but some may want it
                 end,
        Unspool = function(target)
                   snd.target_has_aura = true
                   snd.need_leech_aura = false
                end,                 
        Misfortune = function(target, where)
                    if where == "arms" then snd.target_got("a_broken_arm")
                    elseif where == "legs" then snd.target_got("a_broken_leg")
                    elseif where == "throat" then snd.target_got("crippled_throat")
                    else snd.target_got(where.." broken")
                    end
                  end, 
        Disjunct = function(target)
                   snd.need_deform = false
                   tempTimer(20,[[snd.need_deform = true]])
                 end,                
        Athame = function(target)
                      if #snd.maybe_affs == 1 then
                        snd.onHit2({"Rebounding", "Dodge"})
                      end
                     end,
    Remembrance = function(target)
                snd.reset_target()
            end,
  },
  
  ["Hyalincuru"] = {
        Sphere = function(target, dodge)
                if #snd.maybe_affs &gt; 0 then
                  if not dodge then
                    local aff = snd.maybe_affs[1]
                    if snd.cardshapes.oneiromancer[aff].card == "sphere" then
                      if aff == "sensitivity" and not snd.have_aff("hearing") then
                        aff = "hearing"
                      end
                      snd.target_got(aff)
                    end
                  end
                  table.remove(snd.maybe_affs, 1)
                end
              end,
        Hypercube = function(target, dodge)
                if #snd.maybe_affs &gt; 0 then
                  if not dodge then
                    local aff = snd.maybe_affs[1]
                    if snd.cardshapes.oneiromancer[aff].card == "hypercube" then
                      snd.target_got(aff)
                    end
                  end
                  table.remove(snd.maybe_affs, 1)
                end
              end,
        Wreath = function(target, conditional)
                        if conditional ~= "prone" then
                          snd.target_got("writhe_ropes")
                        end
                        snd.target_got("fallen")
                    end,             
        Heart = function(target)
                   snd.target_got("lovers_effect")  
                 end,

        Hourglass = function(target, speed)
                if not speed then
                  snd.target_got("aeon")
                end
                snd.target_got("no_speed")
                snd.balance.aeon = false 
        end,
        
        Knight = function(target)
                   snd.target_got("justice") 
                 end,
                 
        Hammer = function(target, limb)
                     snd.last_hit_limb = limb
                     snd.last_limb_dmg = 12.50
                     snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                     enableTrigger("Sunder Parry")
                   end,
        Poppy = function(target)
                   --currently unused but if I want to add insomnia/sleep tracking it'll be here.
                 end,
        Diamond = function(target)
            		  snd.target_got("haemophilia")
            	    if snd.hitting == "You" then
            	      snd.adder_attached = true
            		    snd.adder_ready = false
            	    end
                 end, 
  },
  
  ["Contracts"] = {
    Blob = function(target)
              snd.balance.envelop = false
            end,
    Quetzal = function(target, attack)
              if attack == "Croon" then
                snd.target_got("hearing")
              end
            end,          

  },
    
--Praenomen
  ["Corpus"] = {
  
    Deadbreath = function(target)
                snd.target_got("slickness")
                snd.used.paste = false
              end,
    Frenzy = function(target, sunder)
               if sunder then
                 snd.used.shield = false
               end
            end,
    Reconstruct = function(target, limb)
                    snd.took_limb_dmg(limb, -15)
                  end,
    Gash = function(target, lightly)
            snd.onHit2({"Dodge", "Rebounding"})
           end,
    
    Clawing = function(target)
                snd.target_got("rend")
              end,
  
  },
  
  ["Mentis"] = {
    Mesmerize = function(target, blindness)
                  snd.target_got("sight")
                  if not blindness then  
                   snd.target_got("writhe_transfix")
                  end
                end,
    Confusion = function(target)
                 snd.target_got("confusion")
                end,
    Impatience = function(target)
                 snd.target_got("impatience")
                end,
    Paranoia = function(target)
                 snd.target_got("paranoia")
                end,
    Stupidity = function(target)
                 snd.target_got("stupidity")
                end,
    Agoraphobia = function(target)
                 snd.target_got("agoraphobia")
                end,
    Masochism = function(target)
                 snd.target_got("masochism")
                end,
    Loneliness = function(target)
                 snd.target_got("loneliness")
                end,
    Epilepsy = function(target)
                 snd.target_got("epilepsy")
                end,
    Anorexia = function(target)
                 snd.target_got("anorexia")
                end,
    Peace = function(target)
                 snd.target_got("peace")
                end,
    Dementia = function(target)
                 snd.target_got("dementia")
                end,
    Berserking = function(target)
                 snd.target_got("berserking")
                end,
    Indifference = function(target)
                 snd.target_got("indifference")
                end,
    Vertigo = function(target)
                 snd.target_got("vertigo")
                end,
    Recklessness = function(target)
                 snd.target_got("recklessness")
                end,
    Seduction = function(target)
                 snd.target_got("seduction")
                end,
    Temptation = function(target)
                 snd.target_got("temptation")
                end,
    Disrupt = function(target, failure)
                if not failure then
                  snd.target_got("disrupted")
                end
              end,
    Fear = function(target)
                 snd.target_got("fear")
                end,
    Amnesia = function(target)
                 snd.target_got("amnesia")
                end,
  },
  
  ["Sanguis"] = {
  
  Curse = function(target)
            snd.target_got("blood_curse")
          end,

  Spew = function(target)
           snd.target_got("hearing")
           snd.target_got("sight")
         end,
         
  Feast = function(target, fail)
          if not fail then
      		  snd.target_got("feast")
      		  tempTimer(19.5, [[snd.target_cured("feast")]])
      	    snd.used.paste = false
            snd.target_got("no_paste")
          else
            snd.target_cured("writhe_transfix")
          end
        end,
          
  Poison = function(target)
             snd.target_got("blood_poison")
          end,
          
  Rune = function(target)            
            snd.target_got("blood_rune")
	          snd.runeused = true
        end,
  
  Seize = function(target)
            snd.balance.seize = false
        end,
    },
  
--Revenant
  ["Riving"] = {
    Rage = function(target)  
             snd.handleRage()
           end,
    Duplicity = function(target)
                    enableTrigger("Weapon Hit Confirmation")
                   end,
    Fell = function(target)
                    enableTrigger("Weapon Hit Confirmation")
                  end,
    Gouge = function(target)
            if #snd.maybe_affs == 0 then
              table.insert(snd.maybe_affs, "rend")
            end
            snd.onHit2({"Rebounding", "Dodge"})
           end,
    Transpierce = function(target, failed)
               if failed then
                 snd.removeProneStates(true)
               else
                 snd.target_got("writhe_impaled")
                 if snd.hitting == "You" then
                  snd.target_impaled = true
                 end
              end
            end,      
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,
   Deceive = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                enableTrigger("Weapon Hit Confirmation")
              end,
    Extirpate = function(target)
                   snd.target_impaled = false
                   snd.target_cured("writhe_impaled")
                 end,
    Jumpcut = function(target, what)
              if what == "impale" then
                snd.target_got("writhe_impaled")
              end
              snd.target_got("fallen")
            end,
    Initiate = function(target)
               snd.target_got("fallen")
             end,    
  },
  
  ["Manifestation"] = {
      Parasite = function()
                    snd.target_got("withering")
                  end,
      Discord = function(target, aff)
                  snd.target_got(aff)
                end,

  },
  
  ["Chirography"] = {
      Atdum = function()
           enableTrigger("atdum confirmation")
         end,      

  },


["Sagani"] = {
 Flux = function(target)
          if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
            snd.target_got("slickness")
            snd.target_got("disfigurement")
          else
            snd.target_got("magic_weakness")
            snd.target_got("fire_weakness")
            tempTimer(30, [[snd.target_cured("magic_weakness")]])
            tempTimer(30, [[snd.target_cured("fire_weakness")]])
         end
       end,
 Carbonise = function(target)
          enableTrigger("Sagani Carbonise")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Erode = function(target, shield)
              if shield then
                snd.used.shield = false
              end
              if #snd.maybe_affs &gt;= 1 then
                snd.onHit2({})
              end
            end,
   },
    
--Sciomancer
  ["Sciomancy"] = {
      Chill = function(target, shadowprice)
                snd.target_got("cold")
                if shadowprice ~= nil then
                  snd.target_got("cold")
                end
              end,
      Hew = function(target, fail)
              snd.used.shield = false
            end,
      Ruin = function(target, shadowprice)
              local afflist = {"clumsiness", "weariness", "lethargy", "paresis"}
              local affcount = 0
              for _, v in pairs(afflist) do if not snd.checkAff(v) then
                snd.target_got(v)
                affcount = affcount + 1
                if not shadowprice or affcount == 2 then break end
                end
              end
            end,
      Scourge = function(target, shadowprice)
                  if snd.checksomeAffs({"dizziness", "nyctophobia", "confusion", "dementia"}, 4) then
                    snd.target_got("faintness")
                  end
                end,
      Gloom = function(target)
                snd.target_got("gloom")
              	if table.contains(gmcp.Room.Info.details, "darkness") == true then
              		snd.target_got("nyctophobia")
                end  
              end,
      Shaderot = function(target, shadowprice)
                   snd.target_got("rot_benign")
                   if shadowprice then snd.target_got("rot_spirit") end
                  end,         
      Voidgaze = function(target, shadowprice)
                   snd.target_got("voidgaze")
                   if shadowprice then snd.target_got("sight") end
                  end, 
      Fever = function(target, shadowprice)
                   snd.target_got("vomiting")
                   snd.target_got("haemophilia")
                  if snd.checkAff("dementia") then
                    snd.target_got("hallucinations")
                    snd.target_cured("dementia")
                  end
                  end,                   
      Shadowsphere = function(target, shadowprice)
                      if snd.hitting == "You" then snd.balance.shadowsphere = false end
                     	snd.target_got("shadowsphere")
                      if shadowprice then snd.target_got("nyctophobia")	end
                    end,                   
      Falter = function(target, shadowprice)
                	if snd.checkAff("dizziness") then snd.target_got("dementia")
                  elseif snd.checkAff("weariness") then snd.target_got("exhaustion") end
                end,
  },
  
  ["Sorcery"] = {
    Transfix = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                   snd.balance.sorcery_transfix = false
                  end,    

  },
  
  ["Gravitation"] = {
    Erupt = function(target, limb)
              snd.last_hit_limb = limb
              local dmg = { [0] = 4, [1] = 8, [2] = 13, [3] = 19, [4] = 25, [5] = 33}
              snd.took_limb_dmg(snd.last_hit_limb, dmg[snd.gravity])
              snd.gravity = 0
              if snd.class == "Sciomancer" then
              	snd.message("&lt;red&gt;Gravity Total: &lt;white&gt;"..snd.gravity)
              end
            end,
    Impede = function(target)
               snd.target_got("impede")
            end,
    Grip = function(target)
          	snd.target_got("paresis")
          	snd.target_got("fallen")
          	
          	if snd.hitting == "You" then
          		if snd.gravity &gt;= 0 then
          			snd.gravity = snd.gravity+1
          		end
          	end

            if snd.class == "Sciomancer" then
            	snd.message("&lt;red&gt;Gravity Total: &lt;white&gt;"..snd.gravity)
            end
          end,
    Imbue = function(target)
               snd.target_got("imbued")
             end,
  },
  
--Runecarver
  ["Malediction"] = {
      Numb = function(target, spiritpact)
                snd.target_got("cold")
                if spiritpact ~= nil then
                  snd.target_got("cold")
                end
              end,
      Imperil = function(target, fail)
              snd.used.shield = false
            end,
      Enervate = function(target, spiritpact)
              local afflist = {"clumsiness", "weariness", "lethargy", "paresis"}
              local affcount = 0
              for _, v in pairs(afflist) do if not snd.checkAff(v) then
                snd.target_got(v)
                affcount = affcount + 1
                if not spiritpact or affcount == 2 then break end
                end
              end
            end,
      Jinx = function(target, spiritpact)
                  if snd.checksomeAffs({"dizziness", "nyctophobia", "confusion", "dementia"}, 4) then
                    snd.target_got("faintness")
                  end
                end,
      Despair = function(target)
                snd.target_got("gloom")
              	if table.contains(gmcp.Room.Info.details, "darkness") == true then
              		snd.target_got("nyctophobia")
                end  
              end,
      Revile = function(target, spiritpact)
                   snd.target_got("rot_benign")
                   if spiritpact then snd.target_got("rot_spirit") end
                  end,         
      Mystify = function(target, spiritpact)
                   snd.target_got("voidgaze")
                   if spiritpact then snd.target_got("sight") end
                  end, 
      Malady = function(target, spiritpact)
                   snd.target_got("vomiting")
                   snd.target_got("haemophilia")
                  end,                   
      Woe = function(target, spiritpact)
                      if snd.hitting == "You" then snd.balance.shadowsphere = false end
                     	snd.target_got("woe_curse")
                      if spiritpact then snd.target_got("nyctophobia")	end
                    end,                   
      Anathemise = function(target, spiritpact)
                	if snd.checkAff("dizziness") then snd.target_got("dementia")
                  elseif snd.checkAff("weariness") then snd.target_got("exhaustion") end
                end,
  },
  
  ["Runecarving"] = {
    Bewitch = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                   snd.balance.sorcery_transfix = false
                  end,   

  },
  
  ["Sporulation"] = {
    Degrade = function(target, limb)
              snd.last_hit_limb = limb
              local dmg = { [0] = 4, [1] = 8, [2] = 13, [3] = 19, [4] = 25, [5] = 33}
              snd.took_limb_dmg(snd.last_hit_limb, dmg[snd.gravity])
              snd.gravity = 0
              if snd.class == "Runecarver" then
              	snd.message("&lt;red&gt;Fungal Total: &lt;white&gt;"..snd.gravity)
              end
            end,
    Infect = function(target)
               snd.target_got("impede")
            end,
    Ensnare = function(target)
          	snd.target_got("paresis")
          	snd.target_got("fallen")
          	
          	if snd.hitting == "You" then
          		if snd.gravity &gt;= 0 then
          			snd.gravity = snd.gravity+1
          		end
          	end

            if snd.class == "Runecarver" then
            	snd.message("&lt;red&gt;Fungal Total: &lt;white&gt;"..snd.gravity)
            end
          end,
    Infect = function(target)
               snd.target_got("inoculated") -- imbued
             end,
  },
  
--Sentinel
  ["Dhuriv"] = {
    
  Impale = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
            end
          end,
   Throatcrush = function(target)
                    table.insert(snd.maybe_affs, "destroyed_throat")
                    snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Sentinel")
                  end,
   Gouge = function(target)
              table.insert(snd.maybe_affs, 1, "impatience")
              snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Sentinel")
            end,
   Heartbreaker = function(target)
                    table.insert(snd.maybe_affs, "heartflutter")
                    snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Sentinel")
                  end,
   Twirl = function(target)
              table.insert(snd.maybe_affs, 1, "confusion")
              snd.onHit2({"Dodge",}, "Sentinel")
            end,
   Trip = function(target)
            table.insert(snd.maybe_affs, 1, "fallen")
            snd.onHit2({"Dodge"}, "Sentinel")
          end,
   Flourish = function(target)
                  snd.onHit2({"Dodge", "Rebounding"}, "Sentinel")
                end,
   Slash = function(target)
              snd.onHit2({"Dodge", "Rebounding"}, "Sentinel Slash")
            end,
   Stab = function(target)
            snd.onHit2({"Dodge", "Rebounding"}, "Sentinel")
          end,
   Weaken = function(target)
              enableTrigger("Weaken arms or legs")
              snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
            end,
   Crosscut = function(target)
                if snd.checkAff("impairment") then
                  table.insert(snd.maybe_affs, 1, "addiction")
                else
                 table.insert(snd.maybe_affs, 1, "impairment")
                end
                  snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
                end,
   Reave = function(target, conditional)
          	if conditional == "shield" then
          		snd.used.shield = false
          	else
          		snd.used.shield = false
          		snd.used.rebounding = false
          	end
          end,           
   Slam = function(target)
            if not snd.checksomeAffs({"laxity", "epilepsy"}, 1) then
              table.insert(snd.maybe_affs, 1, "laxity")
              table.insert(snd.maybe_affs, 2, "epilepsy")
            elseif snd.checkAff("laxity") then
              table.insert(snd.maybe_affs, 1, "epilepsy")
            else
              table.insert(snd.maybe_affs, 1, "laxity")
            end
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel Slam")
          end,      
   Blind = function(target)
                if snd.checkAff("sight") then
                  table.insert(snd.maybe_affs, 1, "blurry_vision")
                else
                 table.insert(snd.maybe_affs, 1, "sight")
                end
                  snd.onHit2({"Dodge", "Rebounding"}, "Sentinel")
                end,            
   Slice = function(target)
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
          end,
   Thrust = function(target)
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
          end,  
   Slit = function(target)
            table.insert(snd.maybe_affs, "crippled_throat")
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
          end,
   Dualraze = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
              end,
  Pierce = function(target)
            enableTrigger("Dhuriv Pierce/Sever")
           end,
  Sever = function(target)
            enableTrigger("Dhuriv Pierce/Sever")
           end,
  },
  
  ["Woodlore"] = {
    Daunt = function(target, animal)
              local daunt_list = {
              	["direwolf"] = "claustrophobia",
              	["raloth"] = "agoraphobia",
              	["crocodile"] = "loneliness",
                ["cockatrice"] = "berserking",
              }
	           snd.target_got(daunt_list[animal])
    end,
    
    Icebreath = function(target)
                  snd.target_got("cold")
                end,
  },
  
  ["Tracking"] = {
        

  },
  
  ["Seraph"] = {
    Flagellate = function(target)
      enableTrigger("Seraph Flagellate")
      enableTrigger("Sunder Parry")
      if #snd.maybe_affs &gt;= 1 then
        snd.onHit2({"Parry",})
      end
    end,
    Plasma = function(target, shield)
      if shield then
        snd.used.shield = false
      end
      if #snd.maybe_affs &gt;= 1 then
        snd.onHit2({})
      end
    end,    
    Ray = function(target)
      if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
        snd.target_got("slickness")
        snd.target_got("disfigurement")
      else
        snd.target_got("magic_weakness")
        snd.target_got("fire_weakness")
        tempTimer(30, [[snd.target_cured("magic_weakness")]])
        tempTimer(30, [[snd.target_cured("fire_weakness")]])
      end
    end,  
    
   }, 
  
--Shaman
  ["Primality"] = {
  
    Slam = function(target, boosted)
             if not boosted then
               snd.target_got("fallen")
             end
           end,
             
    Infest = function(target, boosted)
             if not boosted then
               snd.target_got("infested")
             end
           end,
    Spines = function(target, boosted)
             if not boosted then
               snd.target_got("blighted")
             end
           end,
    Overload = function(target, boosted)
                snd.target_got("paresis")
                snd.target_got("stupidity")
              end,
    Vitiate = function(target, boosted)
             if boosted then
               snd.target_got("plodding")
             end
             snd.target_got("lifebane")
             if lifebane_timer then killTimer(lifebane_timer) end
	           lifebane_timer = tempTimer(40,[[snd.target_cured("lifebane")]])
           end,
    Strangle = function(target, boosted)
                snd.target_got("writhe_vines")
              end,

    Vinelash = function(target, boosted)
                  if #snd.maybe_affs &gt;= 1 then
                    snd.onHit2({})
                  end
                end,
    Leafstorm  = function(target, boosted)
                  snd.used.shield = false
                end,
    Scourge = function(target, boosted)
             if boosted then
               snd.target_got("idiocy")
             end
             snd.target_got("vitalbane")
           end,  
    Stormbolt = function(target, boosted)
                  if boosted then
                    snd.target_got("stormbolt_cloud")
                  end
                end,
    Sporulation = function(target)
    --This never shows boosted message.
                snd.target_got("impatience")
                snd.target_got("confusion")
              end,
    Effusion = function(target)
                snd.target_got("sight")
                snd.target_got("hearing")
                snd.target_got("sensitivity")
              end,
    Equivalence = function(target, boosted)
    --This might be hidden from all except the Shaman, not sure
             if boosted then
               snd.target_got("justice")
             end
           end,  
  },
  
  ["Shamanism"] = {
    Premonition = function(target)
                    snd.target_got("dread")
                        if snd.hitting == "You" then
                          snd.my_dread = true
                          snd.their_dread = false
                        else
                          snd.my_dread = false
                          snd.their_dread = true
                        end
                  end,
    Divulgence = function(target)
                  if #snd.maybe_affs &gt;= 1 then
                    snd.onHit2({})
                  end
                end,
    Omen = function(target)
             snd.incomingomen = true
             snd.message(matches[2].." has an omen incoming in 6 seconds!", "dendara")
          end,
        

  },
  
  ["Naturalism"] = {
        

  },
  
--Shapeshifter
  ["Shapeshifting"] = {
    Swipe = function(target) 
              snd.target_got("hearing")
            end,
    Pounce = function(target, shield)
               if shield then
                snd.used.shield = false
               end
             end,
    Charge = function(target)
               snd.target_got("fallen")
             end,
    Rage = function(target)
             snd.handleRage()
           end,
           
  },
  
  ["Ferality"] = {
    Bite = function(target, limb)
            snd.last_hit_limb = limb
            snd.last_limb_dmg = 9
            snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Dodge", "Parry"})
          end,
    Gut = function(target)
          snd.target_got("torso_mangled")
          end,
    Lacerate = function(target)
                table.insert(snd.maybe_affs, "rend")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 11.4
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,        
    Facemaul = function(target)
                table.insert(snd.maybe_affs, "mauled_face")
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 14
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Jugular = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Skullwhack = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Throatslice = function(target)
                table.insert(snd.maybe_affs, "crippled_throat")
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Skullcrush = function(target)
                snd.target_got("fallen")
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 66.67-snd.limb_dmg["head"]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Parry"})
               end,
    Spinalcrack = function(target)
                table.insert(snd.maybe_affs, "paresis")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 10
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,      
    Slash = function(target, limb)
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Rend = function(target, limb)
                table.insert(snd.maybe_affs, limb:gsub(" ", "_").."_broken")
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 5.81
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Hamstring = function(target, limb)
                table.insert(snd.maybe_affs, limb:gsub(" ", "_").."_broken")
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 5.81
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end, 
   Faceslash = function(target)
                table.insert(snd.maybe_affs, "blurry_vision")
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
   Bodypunch = function(target)
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 7
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
   Armpitlock = function(target)
                  snd.target_got("writhe_armpitlock")
                end,
   Thighlock = function(target)
                  snd.target_got("writhe_thighlock")
                end,
   Necklock = function(target)
                  snd.target_got("writhe_necklock")
                end,
   Spleenrip = function(target)
                snd.target_got("spleenrip")
                snd.jawlocked = false
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 15
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.target_cured("writhe_armpitlock")
                --snd.onHit2({"Dodge", "Parry"}) don't believe it can be missed
               end, 
   Groinrip = function(target)
                snd.target_got("groinrip")
                snd.jawlocked = false
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 15
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.target_cured("writhe_thighlock")
                --snd.onHit2({"Dodge", "Parry"}) don't believe it can be missed
               end, 
   Throatrip = function(target)
                snd.target_got("throatrip")
                snd.jawlocked = false
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 10
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.target_cured("writhe_necklock")
                --snd.onHit2({"Dodge", "Parry"}) don't believe it can be missed
               end,
   Mangle = function(target, limb)
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 33.33 - snd.limb_dmg[limb]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
   Destroy = function(target, limb)
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 66.67 - snd.limb_dmg[limb]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,  
   Leapslash = function(target, limb)
                snd.target_got("fallen")
               end,
   Deathroll = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,
   Rupture = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,
   Buffet = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,
   Gore = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,                
   Spinalrip = function(target)
                table.insert(snd.maybe_affs, "spinal_rip")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 13.75
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end, 
   Headdrop = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 33.34 - snd.limb_dmg["head"]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end, 
  },
   
  ["Vocalizing"] = {
    Baying = function(target, conditional)
    
            local howl_conversion = {
              ["piercing"] = "hearing",
              ["paralyzing"] = "paresis",
              ["baleful"] = "impairment",
              ["rousing"] = "recklessness",
              ["distasteful"] = "anorexia",
              ["forceful"] = "fallen",
              ["mind-numbing"] = "stupidity",
              ["stomach-turning"] = "vomiting",
              ["claustrophobic"] = "claustrophobia",
              ["muddling"] = "peace",
              ["hypnotic"] = "hypersomnia",
              ["deranged"] = "hallucinations",
              ["lethargic"] = "lethargy",
              ["ringing"] = "ringing_ears",
              ["blurring"] = "blurry_vision",
              ["debilitating"] = "weariness",
              ["berserking"] = "berserking",
              ["angry"] = "hatred",
              ["disturbing"] = "disrupted",
              ["befuddling"] = "confusion",
              ["deep"] = "plodding",
              ["dumbing"] = "idiocy",
              }
              if howl_conversion[conditional] ~= nil then
                snd.target_got(howl_conversion[conditional])
              end
              end,
  },
  
--Syssin
  ["Assassination"] = {
    Bind = function(target)
             snd.target_got("writhe_bind")
           end,
    Doublestab = function(target)
                  enableTrigger("Syssin Hit Confirmation")
                 end,
    Flay = function(target, condition)
             enableTrigger("Syssin Hit Confirmation")
             snd.used.shield = false
             if condition:find("rebounding") then
                snd.used.rebounding = false
             end
             if condition:find("fangbarrier") then
                snd.used.rebounding = false
                snd.used.paste = false
             end
             if condition:find("speed") then
                snd.used.rebounding = false
                snd.used.paste = false
                snd.target_got("no_speed")
             end
             if condition:find("none") then
                snd.used.rebounding = false
                snd.used.paste = false
                snd.used.shield = false
             end
             
            end,
    Slit = function(target)
                  enableTrigger("Syssin Hit Confirmation")
                 end,
                 
    Bite = function(target, venom)
            snd.used.paste = false
            if venom ~= "camus" then
             snd.target_got(snd.venomEffect(venom))
            end
          end,

  },
  
  ["Subterfuge"] = {
    -- Nothing currently necessary

  },
  
  ["Hypnosis"] = {
    Sleight = function(target, conditional)
                if conditional == "Void" then
                  snd.target_got("void")
                end
    end,     
    Marks = function(target, conditional)
                if conditional == "Numbness" then
                  snd.target_got("numbed_skin")
                  if not table.isMember(gmcp.Room.Info.details, "darkness") then
                    tempTimer(15, [[snd.target_cured("numbed_skin")]])
                  end
                end
    end,   
  },
  
--Templar
  ["Battlefury"] = {
  
    Doublestrike = function(target)
                    enableTrigger("Weapon Hit Confirmation")
                   end,
                   
    Rend = function(target)
            if #snd.maybe_affs == 0 then
              table.insert(snd.maybe_affs, "rend")
            end
            snd.onHit2({"Rebounding", "Dodge"})
           end,
    Rage = function(target)
             snd.handleRage()
           end,
    Impale = function(target, failed)
               if failed then
                 snd.removeProneStates(true)
               else
                 snd.target_got("writhe_impaled")
                 if snd.hitting == "You" then
                  snd.target_impaled = true
                 end
              end
            end,
    Disembowel = function(target)
                   snd.target_impaled = false
                   snd.target_cured("writhe_impaled")
                 end,
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,
   Razestrike = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                enableTrigger("Weapon Hit Confirmation")
              end,
    Lunge = function(target, what)
              if what == "impale" then
                snd.target_got("writhe_impaled")
              end
              snd.target_got("fallen")
            end,
    Charge = function(target)
               snd.target_got("fallen")
             end,
  },
  
  ["Righteousness"] = {
      Withering = function()
                    snd.target_got("withering")
                  end,
      Contort = function(target, aff)
                  snd.target_got(aff)
                end,

  },
  
  ["Bladefire"] = {
      Vorpal = function()
                 enableTrigger("vorpal confirmation")
               end,        

  },
  
--Teradrim
  ["Terramancy"] = {
    Gutsmash = function(target)
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 11.99
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Facesmash = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 12.99
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Overhand = function(target)
                 snd.target_got("fallen")
               end,
    Batter = function(target, where)
               snd.last_hit_limb = where
               snd.last_limb_dmg = 13.75
               snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
               snd.onHit2({"Dodge", "Parry", "Rebounding"})
              end,
    Shockwave = function(target)
                  snd.target_got("fallen")
                  enableTrigger("Shockwave limb breaks")
                end,
    Furor = function(target, where)
             	snd.last_hit_limb = where
            	snd.last_limb_dmg = 7.78
            	snd.took_limb_dmg(where, snd.last_limb_dmg)
              snd.onHit2({"Dodge", "Parry", "Rebounding"})
            end,
    Stoneblast = function(target)
                  if snd.used.rebounding then
                    snd.used.rebounding = false
                  else
                    snd.used.shield = false
                  end
                end,
    Fracture = function(target, where)
                 table.insert(snd.maybe_affs, where.."_broken")
                 	snd.last_hit_limb = where
                	snd.last_limb_dmg = 11.99
                  if snd.limb_bruising[snd.last_hit_limb] ~= 0 then
                    snd.last_limb_dmg = 11.99 + (snd.limb_bruising[snd.last_hit_limb]*4)
                  end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,  
    Skullbash = function(target)
                 	snd.last_hit_limb = "head"
                	snd.last_limb_dmg = 17.65
                  local afflist = {"whiplash", "indifference", "smashed_throat"}
                  local check = 0
                  for _, v in pairs(afflist) do if snd.limb_bruising["head"] &gt; check then
                    table.insert(snd.maybe_affs, v)
                    check = check + 1 
                    end
                  end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Teradrim Skullbash")
               end,
    Pulp = function(target)
            snd.target_got("collapsed_lung")
           	snd.last_hit_limb = "torso"
          	snd.last_limb_dmg = 8.6
          	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Dodge", "Rebounding"})
         end, 
    Impale = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
            end
          end,
    Stonevice = function(target)
                snd.target_cured("writhe_impaled")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 10
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
              end,
    Barrage = function(target)
              enableTrigger("Barrage hit confirmation")
            end,
            
    Slam = function(target, where)
               snd.last_hit_limb = where
               snd.last_limb_dmg = 10.49
               snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
               snd.onHit2({"Dodge", "Parry", "Rebounding"})
              end,
  },
  
  ["Desiccation"] = {
    Shred = function(target, where)
                snd.last_hit_limb = where:gsub(" storm", "")
                snd.last_limb_dmg = 6.99
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Shield = function(target)
              snd.used.shield = true
             end,
    Curse = function(target)
              snd.target_got("slough")
            end,
    Scourge = function(target, where)
                snd.target_got(where.."_broken")
              end,
    
    Trap = function(target)
                snd.target_got("sand_trapped")
              end,
              
    Quicksand = function(target)
                snd.target_got("quicksand")
              end,

  },
  
  ["Animation"] = {
        
    Heartpunch = function(target)
                snd.target_got("heartflutter")
              end,
        
    Shatter = function(target)
                snd.used.shield = false
              end,
  },
  
  ["Tiarna"] = {
  Inculcate = function(target)
            if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
              snd.target_got("slickness")
              snd.target_got("disfigurement")
            else
              snd.target_got("magic_weakness")
              snd.target_got("fire_weakness")
              tempTimer(30, [[snd.target_cured("magic_weakness")]])
              tempTimer(30, [[snd.target_cured("fire_weakness")]])
           end
         end,
         
 Shear = function(target)
          enableTrigger("Tiarna Shear")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Hive = function(target, shield)
        if shield then
          snd.used.shield = false
        end
        if #snd.maybe_affs &gt;= 1 then
          snd.onHit2({})
        end
       end,
   },
  
--Tidesage
  ["Wavebreaking"] = {
    Ram = function(target)
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 11.99
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Crest = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 12.99
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Breach = function(target)
                 snd.target_got("fallen")
               end,
    Clobber = function(target, where)
               snd.last_hit_limb = where
               snd.last_limb_dmg = 13.75
               snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
               snd.onHit2({"Dodge", "Parry", "Rebounding"})
              end,
    Crack = function(target, where)
               snd.last_hit_limb = where
               snd.last_limb_dmg = 10.49
               snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
               snd.onHit2({"Dodge", "Parry", "Rebounding"})
              end,
    Capsize = function(target)
                  snd.target_got("fallen")
                  enableTrigger("Shockwave limb breaks")
                end,
    Pitch = function(target, where)
             	snd.last_hit_limb = where
            	snd.last_limb_dmg = 7.78
            	snd.took_limb_dmg(where, snd.last_limb_dmg)
              snd.onHit2({"Dodge", "Parry", "Rebounding"})
            end,
    Riptide = function(target)
                  if snd.used.rebounding then
                    snd.used.rebounding = false
                  else
                    snd.used.shield = false
                  end
                end,
    Buckle = function(target, where)
                 table.insert(snd.maybe_affs, where.."_broken")
                 	snd.last_hit_limb = where
                	snd.last_limb_dmg = 11.99
                  if snd.limb_bruising[snd.last_hit_limb] ~= 0 then
                    snd.last_limb_dmg = 11.99 + (snd.limb_bruising[snd.last_hit_limb]*4)
                  end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,  
    Gybe = function(target)
                 	snd.last_hit_limb = "head"
                	snd.last_limb_dmg = 17.65
                  local afflist = {"whiplash", "indifference", "smashed_throat"}
                  local check = 0
                  for _, v in pairs(afflist) do if snd.limb_bruising["head"] &gt; check then
                    table.insert(snd.maybe_affs, v)
                    check = check + 1 
                    end
                  end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Tidesage Gybe")
               end,
    Wreck = function(target)
           	snd.last_hit_limb = "torso"
          	snd.last_limb_dmg = 8.6
          	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Dodge", "Rebounding"})
            snd.target_got("collapsed_lung")
         end, 
    Harpoon = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
            end
          end,
    Eviscerate = function(target)
                snd.target_cured("writhe_impaled")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 10
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
              end,
    Broadside = function(target)
              enableTrigger("Barrage hit confirmation")
            end,
  },
  
  ["Inundation"] = {
    Feelers = function(target, where)
                snd.last_hit_limb = where:gsub(" apparition", "")
                snd.last_limb_dmg = 6.99
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Harden = function(target)
              snd.used.shield = true
             end,
    Terrors = function(target)
              snd.target_got("slough")
            end,
    Unseen = function(target, where)
                snd.target_got(where.."_broken")
              end,
    Undertow = function(target)
                snd.target_got("quicksand")
              end,
    
    Snare = function(target)
                snd.target_got("sand_trapped")
              end,

  },
  
  ["Synthesis"] = {
    
    Trammel = function(target)
                snd.target_got("heartflutter")
              end,
        Deconstruct = function(target, limb)
                  table.insert(snd.maybe_affs, 1, limb.."_dislocated")
                  snd.onHit2({"Dodge", "Parry"})
              end,
        
  },
   
["Titan"] = {
 Staredown = function(target)
          if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
            snd.target_got("slickness")
            snd.target_got("disfigurement")
          else
            snd.target_got("magic_weakness")
            snd.target_got("fire_weakness")
            tempTimer(30, [[snd.target_cured("magic_weakness")]])
            tempTimer(30, [[snd.target_cured("fire_weakness")]])
         end
       end,
 Spear = function(target)
          enableTrigger("Titan Spear")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Corrode = function(target, shield)
              if shield then
                snd.used.shield = false
              end
              if #snd.maybe_affs &gt;= 1 then
                snd.onHit2({})
              end
            end,
   },
  
--Warden
  ["Warding"] = {
    Lacerate = function(target)
                  enableTrigger("Spinslash 2nd half")
                  snd.onHit2({"Dodge", "Rebounding"}, "Warden")
                end,
   Bypass = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                snd.onHit2({"Dodge", "Rebounding"})
              end,
    Terrorize = function(target)
              snd.target_got("fallen")
            end,
    Maim = function(target)
               table.insert(snd.maybe_affs, "blurry_vision")
               snd.onHit2({"Rebounding", "Dodge"})
              end,
    Pummel = function(target, conditional)
              local aff = {["knees"] = "crushed_kneecaps", ["elbows"] = "crushed_elbows", ["chest"] = "cracked_ribs"}
              if conditional == "chest" and snd.checkAff("cracked_ribs") then
                table.insert(snd.maybe_affs, "crushed_chest")
              else
                table.insert(snd.maybe_affs, aff[conditional])
              end
              snd.onHit2({"Rebounding", "Dodge"}, "Warden")
              if conditional == "knees" then tempTimer(11.5, [[snd.target_cured("crushed_kneecaps")]]) end
              if conditional == "elbows" then tempTimer(7.5, [[snd.target_cured("crushed_elbows")]]) end
            end,          
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,   
    Constrict = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
            end
          end,
    Maul = function(target)
                   enableTrigger("Maul Hit Confirmation")
                 end,
     
  },
  
  ["Ancestry"] = {
    Inhibit = function(target)
               snd.target_got("inhibited")
             end,    
    Spear = function(target)
               enableTrigger("Spear Limb Messages")
             end,
    Intercept = function(target)
               snd.used.shield = true
             end,
    Ambush = function(target)
               snd.target_got("ancestral_ambush")
               if snd.hitting == "You" then
                 snd.balance.soulpoison = false
               end
             end,
    Portent = function(target)
                snd.target_got("ancestral_portent")
              end,
    Debilitate = function(target)
                snd.target_got("debilitated")
              end,
    Attune = function(target)
                enableTrigger("Ancestor Attune give")
                snd.target_got("ancestor_implant")
              end,
    Elude = function(target)
                   snd.target_got("eluded")
                 end,   
    Carve = function(target)
              snd.used.shield = false
              snd.used.rebounding = false
              snd.target_cured("barrier")
              snd.target_cured("aegis")
            end,
    Intervention = function(target)
                snd.reset_target()
            end,
              
  },
  
  ["Communion"] = {
  Advance = function(target)
              snd.used.shield = false
            end,
  Saboteur = function(target)
              --loki
              end,
 Stormwarden = function(target)
            if snd.checkAff("epilepsy") then
              snd.target_got("hallucinations")
            else
              snd.target_got("epilepsy")
            end
          end,
  Snowdancer = function(target)
                  snd.target_got("cold")
                end,
  Firekeeper = function(target)
                 snd.target_got("ablaze")
               end,    
 Harrier = function(target)
              if snd.checkAff("weariness") then
                snd.target_got("crippled")
              else
                snd.target_got("weariness")
              end
            end,
  Chanter = function(target)
            if snd.checkAff("dizziness") then
              snd.target_got("recklessness")
            else
              snd.target_got("dizziness")
            end
          end,
 Inciter = function(target)
            if snd.checkAff("berserking") then
              snd.target_got("impairment")
            else
              snd.target_got("berserking")
            end
          end,  
 Toxicologist = function(target)
                if snd.checkAff("blisters") then
                  snd.target_got("limp_veins")
                else
                  snd.target_got("blisters")
                end
              end,         
  Assault = function(target, limb)
              if limb ~= nil then
               snd.last_hit_limb = limb
               snd.last_limb_dmg = 2.49
               snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
               enableTrigger("Sunder Parry")
              end
            end,
  Dirge = function(target)
            if table.isMember(snd.players_here, snd.target) and snd.hitting ~= snd.target then
              snd.target_got("blurry_vision")
            end
          end,

  },
  
--Wayfarer

  ["Tenacity"] = {
    Sweep = function(target)
              snd.target_got("fallen")
            end,
    Obstruct = function(target)
                 snd.target_got("fallen")
               end,
    Devastate = function(target)
                  enableTrigger("Tenacity Devastate")
                  --Has specific lines for all cases, safer to use those than presume tracking is 100% right always
                end,
    Lob = function(target)
            snd.onHit2({"Dodge"}, "Wayfarer")
          end,
    Bash = function(target)
            if snd.checkAff("hearing") then
               table.insert(snd.maybe_affs, "dizziness")
          	else
               table.insert(snd.maybe_affs, "hearing")
          	end
            snd.last_hit_limb = "head"
            snd.last_limb_dmg = 9
            if snd.checkAff("assault_damage") then
              snd.last_limb_dmg = 12
              snd.target_cured("assault_damage") 
            end
            snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Rebounding", "Dodge", "Parry"})
          end,
    Slaughter = function(target)
                table.insert(snd.maybe_affs, 1, snd.maybe_affs[2])
                  snd.onHit2({"Dodge"})
                  snd.onHit2({"Dodge"})
                end,
    Carve = function(target)
            if snd.checkAff("vomiting") then
               snd.target_got("fallen")
          	end
           table.insert(snd.maybe_affs, "vomiting")

            snd.last_hit_limb = "torso"
            snd.last_limb_dmg = 14
            if snd.checkAff("assault_damage") then
              snd.last_limb_dmg = 17
              snd.target_cured("assault_damage") 
            end
            snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Parry", "Rebounding", "Dodge"})
          end,
    Lacerate = function(target)
                 table.insert(snd.maybe_affs, "haemophilia")
                 snd.onHit2({"Rebounding", "Dodge", "Parry"})
                end,
    Chop = function(target)
            enableTrigger("Tenacity Chop")
            snd.last_limb_dmg = 8
             snd.onHit2({"Parry", "Rebounding", "Dodge"})
          end,
    Cripple = function(target)
            enableTrigger("Tenacity Cripple")
            snd.last_limb_dmg = 2
            snd.onHit2({"Parry", "Dodge"})
          end,
    Assault = function(target)
            enableTrigger("Tenacity Assault")
            snd.target_got("assault_damage")
            snd.last_limb_dmg = 4
            tempTimer(2, [[snd.target_cured("assault_damage")]])
            snd.onHit2({"Parry", "Dodge"})
          end,
    Punish = function(target)
                  enableTrigger("Tenacity Punish")
                  --If only tenacity lines had targetting like others in the combat message
                end,
  },
  ["Wayfaring"] = {
        

  },
  
  ["Fury"] = {
    Warcry = function(target, boosted)
                snd.target_got("hearing")
                if boosted then snd.target_got("ringing_ears") end
             end,

    Threaten = function(target, boosted)
                snd.target_got("hatred")
                if boosted then snd.target_got("masochism") end
             end,

    Shake = function(target, boosted)
                snd.target_got("weariness")
             end,

    Halt = function(target, boosted)
                snd.target_got("lethargy")
             end,

    Exhaust = function(target, boosted)
                snd.target_got("exhausted")
             end,
             
    Expunge = function(target, boosted)
                snd.handleExpunge()
              end,
    Shatter = function(target, boosted)
             enableTrigger("Fury Shatter Second Aff")
             if boosted then
               snd.target_got("muddled")
               tempTimer(4.9, [[if snd.checkAff("muddled") then snd.target_cured("muddled") end]])
             end
           end,
    Distract = function(target, boosted)
                 snd.parried_limb = "none"
              end,
  },
  
--Zealot
  ["Zeal"] = {
    Swagger = function(target)
               snd.target_cured("paresis")
             end,
    Anklepin = function(target)
               snd.target_got("sore_ankle")
             end,
    Jawcrack = function(target)
               snd.target_got("stuttering")
               snd.target_got("blurry_vision")
             end,
    Descent = function(target)
               snd.target_got("backstrain")
             end,                          
    Wristlash = function(target)
               snd.target_got("sore_wrist")
             end,
    Uprise = function(target)
               snd.target_got("whiplash")
             end,
    Blitz = function(target, conditional)
              if conditional == "start" then
                enableTrigger("Blitz Affs")
              else
                disableTrigger("Blitz Affs")
              end
            end,
    Palmforce = function(target)
                  snd.target_got("fallen")
                end,       
    Dislocate = function(target, limb)
                  table.insert(snd.maybe_affs, 1, limb.."_dislocated")
                  snd.onHit2({"Dodge", "Parry"})
                end,
    Twinpress = function(target)
                	table.insert(snd.maybe_affs, "stiffness")
                	table.insert(snd.maybe_affs, "muscle_spasms")
                  snd.onHit2({"Dodge"}, "Zealot Twinpress")    
                end,
    Clawtwist = function(target)
                    snd.last_hit_limb = "torso"
                    snd.last_limb_dmg = 8.5
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Pummel = function(target, limb)
                    snd.last_hit_limb = limb
                    snd.last_limb_dmg = 9.5
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Wanekick = function(target, limb)
                    snd.last_hit_limb = limb
                    snd.last_limb_dmg = 9
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Risekick = function(target)
                	snd.last_hit_limb = "torso"
                	snd.last_limb_dmg = 5
                	snd.took_limb_dmg("torso", snd.last_limb_dmg)
                  snd.onHit2({"Parry", "Dodge"})
                end,
    Edgekick = function(target)
                 	snd.last_hit_limb = "head"
                	snd.last_limb_dmg = 3.49
                	snd.took_limb_dmg("head", snd.last_limb_dmg)
                  table.insert(snd.maybe_affs, 1, "crippled_throat")
                  snd.onHit2({"Parry", "Dodge"})
                end,
    Sunkick = function(target)
                snd.last_hit_limb = "head"
              	snd.last_limb_dmg = 6
              	snd.took_limb_dmg("head", snd.last_limb_dmg)
                if not snd.checksomeAffs({"stupidity", "dizziness"}, 1) then
                  table.insert(snd.maybe_affs, 1, "stupidity")
                  table.insert(snd.maybe_affs, 2, "dizziness")
                elseif snd.checkAff("stupidity") then
                  table.insert(snd.maybe_affs, 1, "dizziness")
                else
                  table.insert(snd.maybe_affs, 1, "stupidity")
                end
                snd.onHit2({"Dodge", "Parry"}, "Zealot Sunkick")    
              end,
    Direblow = function(target)
                -- enableTrigger("Direblow Hit Confirmation")
                end,
    Heelrush = function(target)
                 enableTrigger("Heelrush")
               end,
                
  },
  
  ["Purification"] = {
  
  Heatspear = function(target)
                snd.target_got("heatspear")
              end,

  Scorch = function(target)
             snd.target_got("ablaze")
           end,
  Rejection = function(target)
                snd.used.rebounding = true
              end,
  Quicken = function(target)
            snd.target_got("ablaze")
            snd.flamestack = snd.flamestack + 3
            if snd.class == "Zealot" then
              cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
            end
            end,
  Pendulum = function(target, direction)
              snd.pendulum(direction)
            end,
    Resurgence = function(target)
                snd.reset_target()
            end,
  },
  
  ["Psionics"] = {
        Neutralise = function(target)
                       snd.target_got("no_speed")
                     end,
                    
        Deprival = function(target)
                    snd.target_got("merciful")
                    snd.target_got("dementia")
                    snd.target_got("paranoia")
                  end,
        Dull = function(target)
                       snd.target_got("indifference")
                     end,
        Dread = function(target)
                       snd.target_got("fear")
                     end,
  },
  
--Ravager
  ["Brutality"] = {
    Contempt = function(target)
               snd.target_cured("paresis")
             end,
    Hobble = function(target)
               snd.target_got("sore_ankle")
             end,
    Slug = function(target)
               snd.target_got("stuttering")
               snd.target_got("blurry_vision")
             end,
    Flog = function(target)
               snd.target_got("backstrain")
             end,                          
    Maim = function(target)
               snd.target_got("sore_wrist")
             end,
    Whiplash = function(target)
               snd.target_got("whiplash")
             end,

    Clobber = function(target)
                  snd.target_got("fallen")
                end,       
    Bustup = function(target, limb)
                  table.insert(snd.maybe_affs, 1, limb.."_dislocated")
                  snd.onHit2({"Dodge", "Parry"})
                end,
    PressurePoint = function(target)
                	table.insert(snd.maybe_affs, "stiffness")
                	table.insert(snd.maybe_affs, "muscle_spasms")
                  snd.onHit2({"Dodge"})
                end,
    Plexus = function(target)
                    snd.last_hit_limb = "torso"
                    snd.last_limb_dmg = 8.5
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Bully = function(target, limb)
                    snd.last_hit_limb = limb
                    snd.last_limb_dmg = 9.5
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Kneecap = function(target, limb)
                    snd.last_hit_limb = limb
                    snd.last_limb_dmg = 9
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Rebound = function(target)
                	snd.last_hit_limb = "torso"
                	snd.last_limb_dmg = 5
                	snd.took_limb_dmg("torso", snd.last_limb_dmg)
                  snd.onHit2({"Parry", "Dodge"})
                end,
    Windpipe = function(target)
                 	snd.last_hit_limb = "head"
                	snd.last_limb_dmg = 3.49
                	snd.took_limb_dmg("head", snd.last_limb_dmg)
                  table.insert(snd.maybe_affs, 1, "crippled_throat")
                  snd.onHit2({"Parry", "Dodge"})
                end,
    Concussion = function(target)
                snd.last_hit_limb = "head"
              	snd.last_limb_dmg = 6
              	snd.took_limb_dmg("head", snd.last_limb_dmg)
                if not snd.checksomeAffs({"stupidity", "dizziness"}, 1) then
                  table.insert(snd.maybe_affs, 1, "stupidity")
                  table.insert(snd.maybe_affs, 2, "dizziness")
                elseif snd.checkAff("stupidity") then
                  table.insert(snd.maybe_affs, 1, "dizziness")
                else
                  table.insert(snd.maybe_affs, 1, "stupidity")
                end
                snd.onHit2({"Dodge", "Parry"}, "Zealot Sunkick")    
              end,
    Rampage = function(target, conditional)
              if conditional == "start" then
                enableTrigger("Rampage Affs")
              else
                disableTrigger("Rampage Affs")
              end
            end,
			
	  Haymaker = function(target)
                 enableTrigger("Haymaker Hit Confirmation")
                end,
    Overpower = function(target)
                 enableTrigger("Overpower")
               end,
                
  },
  
  ["Ravaging"] = {
  
  Lance = function(target)
                snd.target_got("heatspear")
              end,

  Torment = function(target)
             snd.target_got("ablaze")
           end,
  Denial = function(target)
                snd.used.rebounding = true
              end,
  Intensify = function(target)
            snd.target_got("ablaze")
            snd.flamestack = snd.flamestack + 3
            if snd.class == "Ravager" then
              cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
            end
            end,
  Bedevil = function(target, direction)
              snd.pendulum(direction)
            end,
    Unfinished = function(target)
                snd.reset_target()
            end,
  },
  
  ["Egotism"] = {
        Redress = function(target)
                       snd.target_got("no_speed")
                     end,
                    
        Boast = function(target)
                    snd.target_got("merciful")
                    snd.target_got("dementia")
                    snd.target_got("paranoia")
                  end,
  },


--Random stuff
  
    ["Artifact"] = {
    Strum = function(target)
              snd.target_got("barrier")
            end,
  },
  ["Manipulation"] = {
    Aegis = function(target)
              snd.target_got("aegis")
            end,
  },
  
  ["Tattoos"] = {
    Shield = function(target)
               snd.used.shield = true
             end,
    Starburst = function(target)
                snd.reset_target()
            end,
  
  },
  
  ["Refining"] = {
    Disperse = function(target)
                snd.removeProneStates()
              end  
  
  },
  ["Survival"] = {
    Restoration = function(target)
                    snd.handleRestore()
                  end  
  },
  
    ["Raloth"] = {

      Trample = function(target)
                enableTrigger("Raloth Trample")
              end,
  },
    ["Relic"] = {

      Entangle = function(target, cond)
                  if cond == "evasion" then
                  else
                  snd.target_got("writhe_web")
                  end
                end,
      Webspray = function(target, cond)
                  if cond == "evasion" then
                  else
                  snd.target_got("writhe_web")
                  end
                end,
                
      Tailstrike = function(target)
                snd.onHit2({"Dodge"})
              end,
  },
  
  ["Hunting"] = {
    Fitness = function(target)
                snd.handleFitness()
              end,
  
  },
  
  
}</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Class specific stuff</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Archivist aff picking</name>
							<packageName></packageName>
							<script>snd.shape_affs = {
		"merciful",
		"masochism",
		"berserking",
		"recklessness",
		"laxity",
		"lovers_effect",
		"peace",
		"magnanimity",
		"dizziness",
		"faintness",
		"epilepsy",
		"shyness",
}

snd.mutagen_affs = {
		"addiction",
		"allergies",
		"blisters",
		"lethargy",
}

snd.impress_affs = {
		"mental_disruption",
		"vomiting",
		"egocentric",
		"hypochondria",
		"paresis",
}

snd.shape_attacks = {
		merciful = "circle",
		masochism = "circle",
		berserking = "circle",
		recklessness = "circle",
		laxity = "triangle",
		lovers_effect = "triangle",
		peace = "triangle",
		magnanimity = "triangle",
		dizziness = "square",
		faintness = "square",
		epilepsy = "square",
		shyness = "square",
}

snd.mutagen_attacks = {
		addiction = "phys",
		allergies = "one",
		blisters = "phys4",
		lethargy = "phys3",
}

snd.impress_attacks = {
		mental_disruption = "swirl",
		vomiting = "bloom",
		egocentric = "crescent",
		hypochondria = "hex",
		paresis = "star",
}
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Sentinel Scripts and Tables</name>
							<packageName></packageName>
							<script>snd.dhuriv_affs = {
		"impatience",
		"destroyed_throat",
		"heartflutter",
		"confusion",
		"lethargy",
		"fallen",
		"impairment",
		"reave",
		"claustrophobia",
		"agoraphobia",
		"loneliness",
		"berserking",
		"frozen",
		"shivering",
    "ambush",
    "epilepsy",
    "laxity",
}

snd.dhuriv_first = {
		"reave",
		"slash",
		"twirl",
		"weaken", 
		"trip",
		"slam",
		"crosscut",
		"throatcrush",
		"daunt",
		"icewyrm",
    "ambush",
}

snd.dhuriv_second = {
		"stab",
		"heartbreaker",
		"gouge",
		"thrust",
		"flourish",
}

snd.dhuriv_attacks = {
		reave = "reave",
		impatience = "gouge",
		destroyed_throat = "throatcrush",
		heartflutter = "heartbreaker",
		confusion = "twirl",
		lethargy = "weaken left leg",
		fallen = "trip",
		epilepsy = "slam",
    laxity = "slam",
		impairment = "crosscut",
		claustrophobia = "daunt",
		agoraphobia = "daunt",
		loneliness = "daunt",
		berserking = "daunt",
		frozen = "icewyrm",
		shivering = "icewyrm",
    ambush = "ambush",
}

snd.daunt_animals = {
		["claustrophobia"] = "order direwolf daunt ",
		["agoraphobia"] = "order raloth daunt ",
		["loneliness"] = "order crocodile daunt ",
		["berserking"] = "order cockatrice daunt ",
		["frozen"] = "order icewyrm icebreath ",
		["shivering"] = "order icewyrm icebreath ",
		
}

function Sentinel_Attack_Choice(giving, left, right) -- requires to be sent a list of affs and 2 variables for 
																										 -- it to fill and send back with choices.

	  if snd.parried_limb == "left leg" then snd.dhuriv_attacks["lethargy"] = "weaken right leg" end --check if parrying

		local right_venom_only = false -- used for when we choose a daunt aff
		
----------An example of how you might change your aff list. If current offense mode is mental affs, we want to make sure
----------they have impatience, so check if they have impatience and paresis. If no to both, add paresis to top of stack.
	
		if not snd.checksomeAffs({"paresis", "impatience"}, 1) and snd.current_offense == "SentMental" then
			table.insert(giving, 1, "paresis")
		end
		
		if snd.current_offense == "SentVLock" then
		
			local missing = snd.missingAff("asthma/slickness", "/")
		
  		if #missing == 0 and snd.no_parry() and snd.checksomeAffs({"weariness", "clumsiness", "hypochondria"}, 1) then
  			table.insert(giving, 1, "destroyed_throat")
  		end
			
			if not snd.checkAff("destroyed_throat") and snd.checkAff("anorexia") then
				table.insert(giving, 1, "impatience")
				table.insert(giving, 1, "stupidity")
			end
	
		end
		
		if snd.current_offense == "SentImpale" or snd.current_offense == "SentSalve" then
				
			if not snd.enemy_restoration_balance and snd.no_parry() then
				table.insert(giving, 1, "destroyed_throat")
			end
		
		end
    
    if snd.current_offense == "SentLumiSupport" then
			if not snd.checkAff("destroyed_throat") and snd.checkAff("anorexia") then
				table.insert(giving, 1, "impatience")
				table.insert(giving, 1, "stupidity")
			end   

		end
		
----------Below here the function picks affs for you based on your aff list sent over and any changes made by checks above.

		for i, v in pairs(giving) do
			if not table.contains(snd.target_has, giving[i]) then
				if left == "none" then
					if snd.used.shield or snd.used.rebounding then
						left = "reave"
					elseif table.contains(snd.dhuriv_first, snd.dhuriv_attacks[v]) then
			  			left = v
							if left == "destroyed_throat" then right = nil end
							if (snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm") then right_venom_only = true end

					elseif table.contains(snd.dhuriv_second, snd.dhuriv_attacks[v]) and right == "none" then
						right = v
						
					elseif table.contains(snd.effects, i) and not snd.checkAff(giving[i]) then
						if left == "none" and right ~= giving[i] then
							left = giving[i]
						end
					elseif not snd.checkAff(giving[i]) and not table.contains(snd.dhuriv_second, snd.dhuriv_attacks[v]) then
						left = v
					end
				end

				if right == "none" then
					if not right_venom_only and table.contains(snd.dhuriv_first, snd.dhuriv_attacks[v]) and table.contains(snd.effects, left) and left ~= "paresis" and v~= "destroyed_throat" then
						right = left
			  			left = v
								
					elseif not right_venom_only and table.contains(snd.dhuriv_second, snd.dhuriv_attacks[v]) then
						right = v
						
					elseif table.contains(snd.effects, v) and not snd.checkAff(giving[i]) then
						if left ~= giving[i] then
							right = giving[i]
						end
						
					end
				end
			end
		end
			
		return left, right ---- Return our attack choices back to the main alias.
	end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Indorani/Oneiromancer card table</name>
							<packageName></packageName>
							<script>--Nested tables incase someone wants to add a devil y/n field to cards and change picking based on it, though so few use it that it may not come to fruition.
snd.cardshapes =
  {
    indorani =
      {
        stupidity = {card = "moon"},
        confusion = {card = "moon"},
        epilepsy = {card = "moon"},
        anorexia = {card = "moon"},
        berserking = {card = "moon"},
        weariness = {card = "moon"},
        impatience = {card = "moon"},
        recklessness = {card = "moon"},
        paresis = {card = "sun"},
        asthma = {card = "sun"},
        clumsiness = {card = "sun"},
        vomiting = {card = "sun"},
        lethargy = {card = "sun"},
        sensitivity = {card = "sun"},
        hearing = {card = "sun"},
        hypersomnia = {card = "sun"},
        superstition = {card = "sun"},
        prone = {card = "hangedman"},
        writhe_ropes = {card = "hangedman"},
        justice = {card = "justice"},
        lovers_effect = {card = "lovers"},
        wheel = {card = "wheel"},
        slickness = {card = "adder"},
        haemophilia = {card = "adder"},
        aeon = {card = "aeon"},
      },
    oneiromancer =
      {
        stupidity = {card = "hypercube"},
        confusion = {card = "hypercube"},
        epilepsy = {card = "hypercube"},
        anorexia = {card = "hypercube"},
        berserking = {card = "hypercube"},
        weariness = {card = "hypercube"},
        impatience = {card = "hypercube"},
        recklessness = {card = "hypercube"},
        paresis = {card = "sphere"},
        asthma = {card = "sphere"},
        clumsiness = {card = "sphere"},
        vomiting = {card = "sphere"},
        lethargy = {card = "sphere"},
        sensitivity = {card = "sphere"},
        hearing = {card = "sphere"},
        hypersomnia = {card = "sphere"},
        superstition = {card = "sphere"},
        prone = {card = "wreath"},
        writhe_ropes = {card = "wreath"},
        justice = {card = "knight"},
        lovers_effect = {card = "heart"},
        wheel = {card = "cardinal"},
        slickness = {card = "diamond"},
        haemophilia = {card = "diamond"},
        aeon = {card = "hourglass"},
        despair = {card = "phantasmagoria"},
      },
  }</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Scourge Affs</name>
							<packageName></packageName>
							<script>snd.scourge_affs = {
		"dizziness",
		"nyctophobia",
		"confusion",
		"dementia",
		"faintness",
}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Templar Tracking</name>
							<packageName></packageName>
							<script>snd.empower_affs = {
		"conviction",
		"mental_disruption",
		"physical disruption",
		"crippled",
		"crippled body",
    "paresis",
}

snd.empower_attacks = {
		["conviction"] = "conviction",
		["mental disruption"] = "disrupt",
		["physical disruption"] = "disrupt",
		["crippled"] = "cripple",
		["crippled body"] = "cripple",
    ["paresis"] = "curare",
    ["hemorrhage"] = "hemorrhage",
}
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Revenant Tracking</name>
							<packageName></packageName>
							<script>snd.actuate_affs = {
		"mortalterror",
		"mental_disruption",
		"physical disruption",
		"crippled",
		"crippled body",
}

snd.actuate_attacks = {
		["mortalterror"] = "bimre",
		["mental disruption"] = "dirne",
		["physical disruption"] = "dirne",
		["crippled"] = "azu",
		["crippled body"] = "azu",
    ["paresis"] = "curare",
    ["hemorrhage"] = "wilave",
    ["wilave"] = "wilave",
}
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Monk Stuff</name>
							<packageName></packageName>
							<script>function cantBeParried()
  if (snd.checkAff("a broken right arm") and snd.checkAff("a broken left arm")) or snd.checkAff("numb_arms") or snd.checkAff("paresis") or snd.checkAff("paralysis") then
		return true
		else
		return false
	end 
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Bard attack stuff</name>
							<packageName></packageName>
							<script>snd.globecount = 0
snd.singing = false
snd.playing = false
snd.song = "none"
snd.song_instrument = "none"
snd.halfbeat = false
snd.target_induced = "neutral"
snd.audience = "none"
snd.needle = "none"
snd.rhythm = false
snd.impetus = false
snd.runebandcount = 1
snd.bandclockwise = true

snd.emotional_dmg = {
sadness = 0,
happiness = 0,
surprise = 0,
anger = 0,
stress = 0,
fear = 0,
disgust = 0,
}




snd.venom_affs =

{
"sight",
"hearing",
"asthma",
"paresis",
"clumsiness",
"sensitivity",
"vomiting",
"allergies", 
"colocasia",
"haemophilia",
"peace",
"stupidity",
"weariness",
"recklessness",
"dizziness",
"shyness",
"anorexia",
"slickness",
"voyria",
"squelched",
"disfigurement",
"stuttering",
"deadening",
"thin_blood",
"left_leg_broken",
"right_leg_broken",
"left_arm_broken",
"right_arm_broken",
}


snd.performance_affs = {
"perplexed",
"dazed",
"berserking",
"hatred",
"lovers_effect",
"misery",
"self_loathing",
"fallen",
"magnanimity",
}


snd.performance_attacks = {
		pierce = "pierce",
    perplexed = "crackshot",
		dazed = "sock",
--		dizziness = "crackshot",
		berserking = "quip",
		hatred = "quip",
		lovers_effect = "seduce",
		fallen = "tackle",
		self_loathing = "ridicule",
    magnanimity = "ridicule",
		misery = "hiltblow",
-- nausea = "hiltblow",    
    harry = "harry",
}


snd.weaving_affs = {
"narcolepsy",
"hollow",
"besilence",
"deadening",
"migraine",
"squelched",
"ringing_ears",
"globes",
"runeband",
"bladestorm",
"ironcollar",
}

snd.weaving_attacks = {
		narcolepsy = "anelace",
    hollow = "anelace",
		besilence = "headstitch",
		deadening = "headstitch",
    ironcollar = "ironcollar",
    bladestorm = "bladestorm",
    globes = "globes",
    runeband = "runeband",
    migraine = "mindbreak",
    squelched = "mindbreak",
    ringing_ears = "soundblast",
    
}

snd.globe_affs = {

[1] = "perplexed",
[2] = "confusion",
[3] = "dizziness",

}

snd.runeband_affs = {

[1] = "stupidity",
[2] = "paranoia",
[3] = "ringing_ears",
[4] = "loneliness",
[5] = "exhausted",
[6] = "laxity",
[7] = "clumsiness",

}

</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Group Syssin</name>
							<packageName></packageName>
							<script>function groupSyssin()

snd.hypno_stack = {
  "impatience",
  "impatience",
  "impatience",
  
}

local touse = {}
local tohit = {}
local string = ""
local call = ""
local extraaff = "delphinium"

 if snd.target_locked() then
  venoms = {
		"left_leg_broken",
		"right_leg_broken",
		"hearing",
		"sensitivity",
		"voyria"
  }
  elseif snd.hypno == "running" then
    venoms = {
      "paresis",
      "asthma",
      "slickness",
      "anorexia", 
      "stupidity",     
      "dizziness",
      "weariness",
      "clumsiness",
      "allergies",
      "hearing",
    }
  else
    venoms  = {
      "asthma",
      "paresis",
      "slickness",
      "anorexia",
      "stupidity",
      "shyness",
      "weariness",
      "sight",
      "hearing",
      "slickness",
      "anorexia",
  }
 end
  
if not snd.can_arms() then 
	string = "bedazzle "..snd.target
	elseif snd.target_locked() and snd.checkAff("sensitivity") then
		if snd.used.paste then
			string = "quickwield left whip"..snd.sep.."flay "..snd.target
		else
			string = "bite "..snd.target.." camus"
		end
	else
    
	for i in pairs(venoms) do
		if not snd.checkAff(venoms[i]) then
			if not table.contains(touse, venoms[i]) then
				table.insert(touse, venoms[i])
			end
		end
	end
  
	for aff in pairs(touse) do
		table.insert(tohit, snd.effects[touse[aff]])
	end 
 
 	if snd.used.shield or snd.used.rebounding then
		string = "quickwield left whip"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target
		call = "wt Afflicting "..snd.target..": "..tohit[1]
  else 
		string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
		call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
	end


  if snd.hypno == "open" or snd.hypno == "none" then
		if #snd.hypno_stack &gt;= snd.last_hypno + 1 then 
			snd.hyp = snd.last_hypno+1 
			if snd.hypno == "none" then 
				string = string..snd.sep.."hypnotise "..snd.target 
			end
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
		elseif snd.hypno == "open" then 
			string = "seal "..snd.target.." 3" ..snd.sep.. "snap " ..snd.target
		end
	elseif snd.hypno == "running" then 
		string = string..snd.sep.."hypnotise "..snd.target
	end
	end
  
 	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
		if snd.target_locked() then
			string = string..snd.sep.."shadow sleight pall "..snd.target
    elseif tohit[1] == "anorexia" or tohit[2] == "anorexia" then
      string = string..snd.sep.."shadow sleight abrasions "..snd.target
		else
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
  
  if SelfScan ({"aeon", "paresis", "asthma", "impatience", "slickness", "anorexia",}, 3) and snd.balance.shrug == true then
    string = "shrug venom"
  end 
 
 if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then  
    send("queue eqbal " ..string.. ""..snd.sep..""..call)
  else
    send("queue eqbal " ..string)
 end
 
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Akkari Attack Stuff</name>
							<packageName></packageName>
							<script>snd.primary_aff = {}

snd.can_attend = true
snd.can_proclaim = true
snd.can_crusade = true
snd.passion_active = false
snd.can_inquisition = true

snd.secondary_aff = {}


snd.censure_affs = {
"sight",
"hearing",
"asthma",
"paresis",
"clumsiness",
"sensitivity",
"vomiting",
"allergies", 
"colocasia",
"haemophilia",
"peace",
"stupidity",
"weariness",
"recklessness",
"dizziness",
"shyness",
"anorexia",
--"slickness",
"voyria",
"squelched",
"disfigurement",
"stuttering",
"deadening",
"thin_blood",
"left_leg_broken",
"right_leg_broken",
"left_arm_broken",
"right_arm_broken",
}

snd.secondary_affs = {
"confusion",
"fear",
"impatience",
"paranoia",
"stupidity",
"agoraphobia",
"masochism",
"loneliness",
"contrition",
"epilepsy",
"anorexia",
"amnesia",
"peace",
"dementia",
"berserking",
"indifference",
"vertigo",
"remorse",
"recklessness",
"sight",
"hearing",
"blood_poison",
}

snd.akkari_eq_affs = {
	"disrupted",
	--"sight",
	"writhe_transfix",
	"blood_curse",
	"blood_rune",
	"feast",
}

snd.akkari_eq_attacks = {
	disrupted = "disrupt",
--	sight = "exhort",
	writhe_transfix = "exhort",
	blood_curse = "spirit anathema",
	feast = "spirit exorcise",
}

snd.akkari_bal_affs = {
	"effused_blood",
	"black_bile",
	"blood_rune",
  "no_caloric",
  "shivering",
  "frozen",
  "slickness",
  "no_paste",
  "rend",  

}

snd.akkari_bal_attacks = {
	effused_blood = "spirit exsanguinate",
	black_bile = "denounce "..snd.target.." corruption",
 	blood_rune = "spirit pariah",
  no_caloric = "ague",
	shivering = "ague",
	frozen = "ague",
	slickness = "penitence",
  no_paste = "penitence",
	rend = "bloodlet",
}

function snd.akkari_host()
  if gmcp.Char.Status.spec == "Dosan" then
    if table.isMember(snd.primary_aff, "blood_curse") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_curse"))
    end
    if table.isMember(snd.primary_aff, "blood_poison") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_poison"))
    end 
    if table.isMember(snd.primary_aff, "blood_rune") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_rune"))
    end 
  elseif gmcp.Char.Status.spec == "Il'ahji" then
    if table.isMember(snd.primary_aff, "feast") then
          table.remove(snd.primary_aff, table.index_of(table, "feast"))
    end  
    if table.isMember(snd.primary_aff, "blood_curse") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_curse"))
    end
    if table.isMember(snd.primary_aff, "blood_rune") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_rune"))
    end 
  elseif gmcp.Char.Status.spec == "Naarak" then
    if table.isMember(snd.primary_aff, "feast") then
          table.remove(snd.primary_aff, table.index_of(table, "feast"))
    end  
    if table.isMember(snd.primary_aff, "blood_poison") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_poison"))
    end    
  else
    if table.isMember(snd.primary_aff, "feast") then
          table.remove(snd.primary_aff, table.index_of(table, "feast"))
    end 
    if table.isMember(snd.primary_aff, "blood_poison") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_poison"))
    end 
    if table.isMember(snd.primary_aff, "blood_curse") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_curse"))
    end  
  end
end

function snd.akkari_attend()
  if gmcp.Char.Status.spec == "Il'ahji" or gmcp.Char.Status.spec == "Naarak" or snd.can_attend == false then
    if table.isMember(snd.secondary_aff, "hearing") then
      table.remove(snd.secondary_aff, table.index_of(snd.secondary_aff, "hearing"))
    end
    if table.isMember(snd.secondary_aff, "sight") then
      table.remove(snd.secondary_aff, table.index_of(snd.secondary_aff, "sight"))
    end
  end
end


function snd.can_deliver()
  if snd.checkSomeAffs({"paralysis", "paresis", "right_arm_broken", "left_arm_broken", "right_leg_broken", "left_leg_broken", "haemophilia", "asthma", "impairment", "clumsiness", "vomiting", "sensitivity", "ringing_ears", "lethargy", "blood_poison", "blood_curse", "crippled_throat", "slough", "disfigurement", "blisters", "lightwound", "ablaze", "hypothermia", "shivering", "frozen", "limp_veins", "rend", "exhausted", "allergies", "addiction", "hypersomnia", "heartflutter", "whiplash", "backstrain", "sore_wrist", "sore_ankle", "burnt_eyes", "blurry_vision", "migraine", "deadening", "ice_encased",}, 1) 
  and snd.proned()
  then
    return true
  else
    return false
  end
end



function snd.akkari_behead()
  if snd.target_locked() and snd.checkSomeAffs({"disrupted", "writhe_transfixed",}, 2)
  then 
    return true
  else 
    return false
  end

end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Target calling</name>
						<packageName></packageName>
						<script>
snd.targeting = {
	auto = false,
	list = {},
  burst = false,
  skip = false
}

snd.e = {
	echo	= function (str, lnb, lna)
		if lnb then echo("\n") end
		cecho(string.format("%s", "&lt;aquamarine&gt;Target Update: &lt;grey&gt;") .. str:title())
		if lna then echo("\n") end
	end,

	warn	= function (str, lnb, lna)
		if lnb then echo("\n") end
		cecho(string.format("%s", "&lt;orange_red&gt;Warning:&lt;navajo_white&gt; ") .. str:title())
		if lna then echo("\n") end
	end,
	}</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Functions for calling</name>
							<packageName></packageName>
							<script>function snd.removeTarget(tar)

	local who = tar:title()

	for k, v in pairs(snd.targeting.list) do
		if v == who then
			table.remove(snd.targeting.list, k)
			snd.e.echo("Removed " .. who .. " from targeting list!", true, true)
			break
		end
	end

end


function snd.addTargetList(str)

	local targets = string.split(str, ", ")
	
	for _, v in ipairs(targets) do
		if table.contains(snd.targeting.list, v) then
		else
			v = v:title()
			table.insert(snd.targeting.list, v)
		end
	end

	snd.displayTargetList()

end


function snd.addSingleTarget(tar, pos)

	if not pos then pos = 1 end
	
	tar = tar:title()
	
	if table.contains(snd.targeting.list, tar) then --! just tidying so we don't end up with the same name in a bunch of places
		for k, v in pairs(snd.targeting.list) do
			if v == tar then
				table.remove(snd.targeting.list, k)
				break
			end
		end
	end
	table.insert(snd.targeting.list, pos, tar)

	snd.displayTargetList()

end


function snd.displayTargetList()

	local string = ""
	
	if #snd.targeting.list == 0 then
		string = "Targeting list is empty!"
	else
		for k,v in ipairs(snd.targeting.list) do
			if k &lt; #snd.targeting.list then
				string = string .. v .. ", "
			elseif #snd.targeting.list == 1 then
				string = string .. v .. "."
			else
				string = string .. v .. "."
			end
		end
	end

	snd.e.echo(string, true, true)

end


function snd.callTargetList()

	if not snd.toggles.calling then return end 
                                          
	local string = "Target list: "
	
	if #snd.targeting.list == 0 then
		string = "Out of targets!"
	else
		for k,v in ipairs(snd.targeting.list) do
			if k &lt; #snd.targeting.list then
				string = string .. v .. ", "
			elseif #snd.targeting.list == 1 then
				string = string .. v .. "."
			else
				string = string .. v .. "."
			end
		end
	end
	
	send("wt " .. string)

end


function snd.clearTargetList()

	snd.targeting.list = {}
	snd.e.echo("Target list cleared!", true, true)
	
	if snd.toggles.calling and snd.toggles.calling then 
		send("wt Target list cleared.")
	end

end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Special Cures</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Expunge</name>
							<packageName></packageName>
							<script>function snd.handleExpunge()
  for aff in pairs(snd.physical_affs) do
    if snd.checkAff(snd.physical_affs[aff]) then
      if string.find(snd.physical_affs[aff], "_broken") then
        local string = string.gsub(snd.physical_affs[aff], "_broken", "")
        string = string:gsub("_", " ")
        if snd.limb_status[string] == "healed" then
          snd.target_cured(snd.physical_affs[aff])
          break
        end
      else
        snd.target_cured(snd.physical_affs[aff])
        break
      end
    end
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Rage</name>
							<packageName></packageName>
							<script>function snd.handleRage()
  for _,aff in pairs(snd.cures.steroid) do
    if snd.checkAff(aff) then
      snd.target_cured(aff)
      break
    end
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Fitness</name>
							<packageName></packageName>
							<script>function snd.handleFitness()
 snd.target_cured("asthma")
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Restore</name>
							<packageName></packageName>
							<script>function snd.handleRestore()
  local limbs = {"right arm", "left arm", "left leg", "right leg"}
 
  for _, v in pairs(limbs) do

    if snd.checkAff(v:gsub(" ", "_").."_broken") and snd.limb_status[v] == "healed" then
		  snd.target_cured(v:gsub(" ", "_").."_broken")
    end
  end
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Timers</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>setup + query function</name>
							<packageName></packageName>
							<script>
snd.timers = snd.timers or {}
snd.timers.pill = snd.timers.pill or {}
snd.timers.focus = snd.timers.focus or {}
snd.timers.tree = snd.timers.tree or {}
snd.timers.restoration = snd.timers.restoration or {}
snd.timers.rebounding = snd.timers.rebounding or {}
snd.timers.induce = snd.timers.induce or {}

for k, _ in pairs(snd.timers) do
  snd.timers[k] = {["start"] = nil, ["limit"] = nil}
end

function snd.timer_check(which, time_left, mode)
  if mode == nil then
    mode = "more than"
  end
  if
    snd.timers[which] ~= nil and
    snd.timers[which]["start"] ~= nil and
    snd.timers[which]["limit"] ~= nil
  then
    local now = os.clock()
    local endtime = snd.timers[which]["start"] + snd.timers[which]["limit"]
    if mode == "more than" then
      if endtime - now &gt; time_left then
        return true
      else
        return false
      end
    elseif mode == "less than" then
      if endtime - now &lt; time_left and (balance ~= "rebounding" or endtime - now &gt; 0) then
        return true
      else
        return false
      end
    end
  else
    if mode == "less than" and balance ~= "rebounding" then
      return true
    else
      return false
    end
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>method specific timer functions</name>
							<packageName></packageName>
							<script>function snd.track_pill(target)
  if target:lower() == snd.target:lower() then
    snd.timers.pill.start = os.clock()
    local limit = 1.9
    snd.timers.pill.limit = limit
  end
end

function snd.track_focus(target)
  if target:lower() == snd.target:lower() then
    snd.timers.focus.start = os.clock()
    local limit = 5
    if snd.checkAff("mental_disruption") then
      limit = 10
    elseif snd.checkAff("mental_fatigue") then
      limit = 7
    end
    snd.timers.focus.limit = limit
  end
end

function snd.track_rebounding(target)
  if target:lower() == snd.target:lower() then
    snd.timers.rebounding.start = os.clock()
    local limit = 6.5
    snd.timers.rebounding.limit = limit
  end
end

function snd.track_rebounding_up(target)
  if target:lower() == snd.target:lower() then
    snd.timers.rebounding.limit = os.clock()
  end
end

function snd.track_restoration(target)
  if target:lower() == snd.target:lower() then
    snd.timers.restoration.start = os.clock()
    local limit = 4.15
    snd.timers.restoration.limit = limit
  end
end

function snd.track_tree(target)
  if target:lower() == snd.target:lower() then
    snd.timers.tree.start = os.clock()
    local limit = 10
    snd.timers.tree.limit = limit
  end
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<Script isActive="yes" isFolder="no">
						<name>randoms</name>
						<packageName></packageName>
						<script>snd.randomspirit = {}
snd.randomshadow = {}
</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Groups</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>shadow</name>
							<packageName></packageName>
							<script>snd.shadow = {
"Gribbit",
"Nispy",
"Qem",
"Glach",
"Feichin",
"Callidora",
"Pargu",
"Dierjiano",
"Teramasce",
"Kiershu",
"Lorne",
"Ultra",
"Nirala",
"Roknar",
"Xin",
"Safiya",
"Knigi",
"Ensis",
"Zaene",
"Markos",
"Araris",
"Aeryx",
"Mangor",
"Catalina",
"Chassier",
"Ariat",
"Noctis",
"Yautji",
"Jondyrr",
"Desidora",
"Edira",
"Wurnys",
"Malcanthet",
"Arista",
"Elene",
"Taelyndara",
"Orhm",
"Tiana",
"Huloku",
"Asaraii",
"Asanna",
"Mathus",
"Herus",
"Xolotl",
"Zethrie",
"Ervyn",
"Sarelle",
"Sfazo",
"Reno",
"Xenia",
"Cruenne",
"Fukushu",
"Wilba",
"Rhoynn",
"Inkh",
"Dreadnaught",
"Nahasa",
"Ragnus",
"Orfeo",
"Neoma",
"Pietre",
"Khalu",
"Thia",
"Didi",
"Koriel",
"Yshabodur",
"Aliyah",
"Malachai",
"Nipsy",
"Shaed",
"Escelika",
"Kandara",
"Binward",
"Tekias",
"Mortexia",
"Diavola",
"Jett",
"Kassidy",
"Korvyr",
"Saphielle",
"Naro",
"Evlentesh",
"Saervok",
"Morrinth",
"Raemi",
"Magne",
"Brontes",
"Kelliara",
"Nausicaa",
"Maelia",
"Naida",
"Ayuna",
"Cai",
"Ildri",
"Dai",
"Nerakh",
"Jomar",
"Qix",
"Drystin",
"Metias",
"Kauller",
"Zenthain",
"Cassomyr",
"Ensidia",
"Tyrak",
"Acino",
"Blakehanne",
"Mondeau",
"Elaz",
"Aluki",
"Seriha",
"Ashenzar",
"Feirenz",
"Amaldin",
"Rezargnesh",
"Tillian",
"Ozul",
"Vinsun",
"Ryv",
"Gatny",
"Rhaghe",
"Partue",
"Ezalor",
"Laikahra",
"Rhyot",
"Jergosh",
"Rexton",
"Alathesia",
"Aschwar",
"Kyassa",
"Yvo",
"Ceto",
"Minesae",
"Kadal",
"Angroth",
"Moxie",
"Amaro",
"Tsarra",
"Xyndrae",
"Meltas",
"Denser",
"Haruki",
"Grimdale",
"Catty",
"Ivoln",
"Chakrasul",
"Severn",
"Bamathis",
"Megan",
"Cilly",
"Matlal",
"Vess",
"Whirran",
"Asmund",
"Henge",
"Esotopes",
"Laera",
"Xuzegg",
"Neis",
"Entioch",
"Rijetta",
"Echo",
"Rakia",
"Farean",
"Lynexia",
"Panthaal",
"Ipz",
"Daelar",
"Tavor",
"Vzaaz",
"Inoj",
"Eagan",
"Lightspeed",
"Ailen",
"Kesten",
"Ciarcadh",
"Legyn",
"Deva",
"Illuthias",
"Keahi",
"Kagami",
"Ehtias",
"Sarethiel",
"Cymri",
"Ryryk",
"Maldoror",
"Kalrax",
"Kentigern",
"Malger",
"Ouzu",
"Aenilris",
"Khane",
"Gryph",
"Tianlong",
"Kaiona",
"Cayn",
"Ansury",
"Bhrigu",
"Alacar",
"Ison",
"Remmao",
"Xelraik",
"Juha",
"Gavramel",
"Rakim",
"Yettave",
"Ysyrin",
"Vonandor",
"Thedoc",
"Kendi",
"Nephiliar",
"Pontius",
"Huyana",
"Megami",
"Isern",
"Atarah",
"Kadvar",
"Rainaka",
"Hayth",
"Vinhi",
"Vaeth",
"Raskalov",
"Holbrook",
"Ishmar",
"Thrasius",
"Zhyth",
"Evelyn",
"Voncy",
"Vycious",
"Nirian",
"Cilan",
"Eydis",
"Dennao",
"Starla",
"Evilo",
"Procell",
"Harad",
"Exodus",
"Eor",
"Hawa",
"Aldin",
"Sigrun",
"Epiales",
"Mythunnar",
"Xirien",
"Raidy",
"Maira",
"Salveo",
"Kaldaka",
"Kismit",
"Arakeshi",
"Laurenne",
"Visix",
"Tzaarhashet",
"Estella",
"Soulaie",
"Ilara",
"Nixia",
"Taja",
"Kirill",
"Talulla",
"Aloree",
"Paxe",
"Zyphen",
"Sohma",
"Sarisa",
"Tarleich",
"Redriot",
"Gunther",
"Beivu",
"Kurak",
"Necerursh",
"Jadice",
"Rehr",
"Jaegth",
"Uumbaji",
"Livia",
"Kylae",
"Itkovian",
"Drale",
"Senaka",
"Galilei",
"Darliea",
"Tykesi",
"Obediah",
"Katios",
"Nisavi",
"Zixen",
"Zhunkou",
"Corvo",
"Reave",
"Vicu",
"Izzard",
"Ronka",
"Rayan",
"Arian",
"Nebula",
"Krynst",
"Akaryuterra",
"Merick",
"Tormont",
"Diomedes",
"Alela",
"Laniara",
"Axai",
"Yirun",
"Hitzuguya",
"Korkal",
"Slinash",
"Verniy",
"Lacie",
"Lleminara",
"Nemsi",
"Nonatea",
"Verrillia",
"Runk",
"Odment",
"Zephy",
"Milvushina",
"Rebra",
"Scathus",
"Aethir",
"Xanithe",
"Vrey",
"Vyxsis",
"Gorvex",
"Larion",
"Demidicus",
"Grake",
"Fensuhn",
"Fukushu",
"Aridas",
"Akimoto",
"Skuti",
"Xeon",
"Velath",
"Riane",
"Trent",
"Skree",
"Nissa",
"Blanche",
"Lehar",
"Bormulf",
"Kaivalya",
"Manelesi",
"Fezzix",
"Brin",
"Skade",
"Keldrion",
"Keldrad",
"Greebs",
"Shiva",
"Arath",
"Venthus",
"Destan",
"Umero",
"Konnorn",
"Aldera",
"Eleanor",
"Ensoi",
"Aevol",
"Gennifer",
"Sulabha",
"Ravenire",
"Uthev",
"Veris",
"Tila",
"Kanivara",
"Illuwen",
"Precius",
"Nin",
"Epiden",
"Cardie",
"Bardiya",
"Caelian",
"Vassago",
"Romei",
"Teeh",
"Tanthilos",
"Yaemon",
"Xyla",
"Aniko",
"Liua",
"Blaze",
"Anlia",
"Solaria",
"Knick",
"Bulrok",
"Diggory",
"Wjoltyr",
"Dantae",
"Vjeiraic",
"Lynomios",
"Caboose",
"Zehebim",
"Asven",
"Skiva",
"Lilia",
"Taradin",
"Haleth",
"Aros",
"Scytareine",
"Feyjani",
"Seraphyna",
"Lilein",
"Raevina",
"Ozgalla",
"Chase",
"Feyann",
"Krogyr",
"Hawise",
"Robyn",
"Winger",
"Cola",
"Zarni",
"Lusidian",
"Deumos",
"Karai",
"Vaytor",
"Grimnar",
"Helios",
"Leana",
"Memnoch",
"Abhorash",
"Diancecht",
"Lasaya",
"Kagasha",
"Lupin",
"Rolk",
"Nimueh",
"Nintar",
"Irish",
"Narak",
"Jazmila",
"Anat",
"Zyre",
"Krik",
"Prucilla",
"Ely",
"Alak",
"Azrael",
"Dagan",
"Glasse",
"Sylar",
"Draiman",
"Nydri",
"Drajiath",
"Wedric",
"Vryolis",
"Nyasi",
"Martinaux",
"Mriste",
"Riluo",
"Ladrith",
"Valie",
"Sysky",
"Vonai",
"Blodwyn",
"Toz",
"Gallard",
"Linkovitch",
"Etrigan",
"Vharen",
"Dourif",
"Hexes",
"Cinuedu",
"Zelroth",
"Rinnek",
"Jineva",
"Aisec",
"Zileigh",
"Noth",
"Taye",
"Eolo",
"Archelaus",
"Zortania",
"Dhavar",
"Candace",
"Etetafreya",
"Lenoriel",
"Duncan",
"Eugenides",
"Anasses",
"Ridd",
"Talomae",
"Krow",
"Kodra",
"Alynn",
"Celeun",
"Deasil",
"Infin",
"Alii",
"Kasen",
"Uthegen",
"Ansidia",
"Mjoll",
"Iises",
"Jhaelen",
"Justus",
"Irennan",
"Tina",
"Kyn",
"Liev",
"Rozlic",
"Keaira",
"Nindor",
"Azarae",
"Lykorn",
"Alandrol",
"Odette",
"Nisha",
"Lij",
"Gyana",
"Quillion",
"Bora",
"Nicolas",
"Faerah",
"Yedan",
"Eicara",
"Chala",
"Xaldrin",
"Emiko",
"Dreww",
"Eliser",
"Rennie",
"Liorial",
"Flighn",
"Kamui",
"Oceania",
"Aliane",
"Taj",
"Eternti",
"Zea",
"Aouri",
"Pedra",
"Awol",
"Taryn",
"Mayze",
"Nhiall",
"Entildron",
"Vlaius",
"Tlacahua",
"Agron",
"Leopal",
"Sanguin",
"Jarrhn",
"Sagla",
"Nymma",
"Usetta",
"Naadu",
"Kythi",
"Zachariah",
"Alice",
"Kervalin",
"Asmodia",
"Tartarus",
"Lecksi",
"Sarita",
"Nahira",
"Requilem",
"Taaroshi",
"Virelen",
"Azelie",
"Xarian",
"Balzic",
"Kwanake",
"Raynia",
"Shixblix",
"Kharna",
"Damion",
"Kafar",
"Azu",
"Selaena",
"Vahlen",
"Swara",
"Calisra",
"Adyen",
"Narcisa",
"Tirria",
"Poggers",
"Cendron",
"Belzibub",
"Cariv",
"Satomi",
"Koari",
"Parzival",
"Ducaulle",
"Tolas",
"Vorran",
"Aliviana",
"Zaos",
"Rashinza",
"Sarojin",
"Irys",
"Teflin",
"Sollimus",
"Serentius",
"Raddock",
"Santino",
"Aiyana",
"Strung",
"Boz",
"Ilioyd",
"Caraldor",
"Octavia",
"Dafft",
"Darien",
"Zarosh",
"Rorik",
"Rokujou",
"Emir",
"Frankie",
"Seirsha",
"Luria",
"Anita",
"Mastema",
"Akara",
"Astele",
"Xeniothalus",
"Kodaza",
"Ameleia",
"Doron",
"Bob",
"Tetchta",
"Uldyssian",
"Zinar",
"Enlil",
"Irvaen",
"Menelaus",
"Syphen",
"Galena",
"Charella",
"Rome",
"Darragh",
"Athala",
"Araseth",
"Sheryni",
"Kevrud",
"Borscin",
"Naos",
"Tryss",
"Desian",
"Zakkari",
"Azalie",
"Marharet",
"Tybereus",
"Aramaeus",
"Clouser",
"Ruga",
"Ayala",
"Pentas",
"Mosr",
"Vika",
"Kadgar",
"Moody",
"Trikal",
"Qelres",
"Tasryn",
"Louse",
"Mephistoles",
"Era",
"Niakara",
"Esan",
"Aegon",
"Seurimas",
"Fyrren",
"Talfinel",
"Malok",
"Choep",
"Anka",
"Lenina",
"Almol",
"Arslen",
"Tasaria",
"Asugazio",
"Makya",
"Anari",
"Valdas",
"Theros",
"Burk",
"Evoran",
"Kagura",
"Tryss",
"Rou",
"Zaephlyn",
"Graffeon",
"Zubayr",
"Gub",
"Squich",
"Dankula",
"Utansi",
"Tapester",
"Malovia",
"Phoebi",
"Jeab",
"Thraze",
"Saidenn",
"Dowbrow",
"Kiralla",
"Megiddo",
"Deric",
"Samos",
"Ephi",
"Hayt",
"Maetrias",
"Cal",
"Anavander",
"Vittorio",
"Calikura",
"Iraun",
"Kraz",
"Ahlysaaria",
"Ayukazi",
"Vorlus",
"Nik",
"Vonarnis",
"Savas",
"Sylviah",
"Miroslav",
"Murmandamus",
"Maeve",
"Loreli",
"Lere",
"Velguin",
"Zenobia",
"Lucertola",
"Yveria",
"Erzsebet",
"Linne",
"Rhexx",
"Canasius",
"Molotok",
"Zrex",
"Oisynne",
"Kadyn",
"Chalenna",
"Ropp",
"Rhain",
"Einette",
"Zen",
"Ardent",
"Ferrik",
"Zruak",
"Vizzer",
"Alita",
"Aluvi",
"Ellenia",
"Volundiel",
"Macavity",
"Nhahlar",
"Varant",
"Aren",
"Chup",
"Xai",
"Ditae",
"Cadhla",
"Haverly",
"Pyxis",
"Yrthyra",
"Kylira",
"Retherian",
"Phelan",
"Radne",
"Cutkya",
"Nahuaque",
"Khsar",
"Hadrel",
"Arness",
"Phlickerwart",
"Nokk",
"Vanas",
"Ivarys",
"Aseru",
"Caeoimhe",
"Charon",
"Calen",
"Calyziir",
"Vahellion",
"Skratt",
"Ace",
"Leron",
"Vanalia",
"Alissa",
"Stryxi",
"Jiri",
"Korvora",
"Veruca",
"Deliria",
"Josephus",
"Murad",
"Piper",
"Kathgor",
"Zaila",
"Arahali",
"Truan",
"Ikne",
"Traexon",
"Tuisto",
"Llore",
"Agidnis",
"Issac",
"Eresim",
"Akarn",
"Narayan",
"Sukii",
"Evangeline",
"Xereth",
"Tyriik",
"Auraro",
"Amarita",
"Tatia",
"Haleigh",
"Claire",
"Danuja",
"Mileta",
"Aspasia",
"Rammus",
"Jenxlyn",
"Qin",
"Parnox",
"Iazamat",
"Oemeria",
"Zhukov",
"Edoi",
"Iayera",
"Dannon",
"Theth",
"Ixi",
"Mazzion",
"Lysaer",
"Andrus",
"Mordwyry",
"Psychorax",
"Shoimoro",
"Lim",
"Nephira",
"Darrah",


}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>spirit</name>
							<packageName></packageName>
							<script>snd.spirit = {
"Validan",
"Corrina",
"Tucker",
"Zima",
"Xashire",
"Myrnma",
"Amarylis",
"Klegane",
"Edhain",
"Aralaan",
"Allegra",
"Ayegor",
"Amedeus",
"Enamari",
"Wyliame",
"Kezef",
"Lanara",
"Ase",
"Vaessa",
"Deandra",
"Damonicus",
"Bryn",
"Haern",
"Omei",
"Damariel",
"Alystrine",
"Ethne",
"Dref",
"Seji",
"Cole",
"Sejani",
"Nieven",
"Colt",
"Guss",
"Romulus",
"Radagon",
"Jaqul",
"Kidos",
"Axius",
"Cameryn",
"Azami",
"Vorlo",
"Ilinorn",
"Taldor",
"Daelares",
"Mithrik",
"Alaxi",
"Haemon",
"Yumika",
"Annerissa",
"Ianthe",
"Elwyn",
"Oba",
"Beveleth",
"Raodiana",
"Giliand",
"Daoin",
"Iaphia",
"Tahlan",
"Cullin",
"Rynkhia",
"Rurthina",
"Sardara",
"Umber",
"Dieredon",
"Akrios",
"Siaern",
"Oriana",
"Dajie",
"Keirissa",
"Talakea",
"Tala",
"Sanir",
"Aeraisentesh",
"Wynne",
"Larissa",
"Trixkya",
"Tarnoth",
"Yeni",
"Renia",
"Adelina",
"Flinn",
"Pieri",
"Exia",
"Sylwraek",
"Kerryn",
"Zoria",
"Daingean",
"Caitria",
"Elliana",
"Aban",
"Missari",
"Haley",
"Bayla",
"Sissfus",
"Callandri",
"Guiseppe",
"Eilyn",
"Fenfil",
"Dae",
"Ermaer",
"Kylan",
"Adarni",
"Uisor",
"Saarlamen",
"Citlali",
"Tratos",
"Rylan",
"Madison",
"Niraya",
"Macian",
"Takari",
"Duggin",
"Viho",
"Graythe",
"Aetama",
"Xzato",
"Finid",
"Puck",
"Remil",
"Alaric",
"Ixle",
"Waren",
"Borus",
"Tressa",
"Selitore",
"Rinata",
"Amrynn",
"Ateslemek",
"Solrethael",
"Alya",
"Rum",
"Jaelle",
"Trowen",
"Daren",
"Ashel",
"Arastinion",
"Lise",
"Tazjatesh",
"Syrsya",
"Faren",
"Merek",
"Valeria",
"Ulo",
"Wylt",
"Jessie",
"Akil",
"Mensa",
"Elanoria",
"Tosh",
"Etonia",
"Aynas",
"Rosdes",
"Volo",
"Sofiel",
"Bori",
"Bhalkam",
"Krisha",
"Piri",
"Lisura",
"Lia",
"Siji",
"Mhandorallen",
"Dato",
"Bruin",
"Anditesh",
"Kitza",
"Mellori",
"Dennah",
"Brayden",
"Kiyotan",
"Ciri",
"Zyke",
"Mielikki",
"Amaara",
"Eschar",
"Tannit",
"Lucie",
"Aithene",
"Nyboe",
"Illikaal",
"Yunaesa",
"Dwodin",
"Elanfor",
"Faerin",
"Aliod",
"Ander",
"Ithel",
"Nixi",
"Einaida",
"Wirara",
"Sessizlik",
"Fierzha",
"Angwe",
"Zoe",
"Mazarin",
"Zynthraellium",
"Jaamir",
"Aaric",
"Senalla",
"Sensari",
"Aolin",
"Crestia",
"Zephon",
"Relandroc",
"Yth",
"Amishi",
"Xiuhtonal",
"Gaelric",
"Seyka",
"Dakari",
"Sidrel",
"Rufra",
"Mosu",
"Traice",
"Aden",
"Jinping",
"Abra",
"Nola",
"Elawyn",
"Saltorien",
"Aisei",
"Evelina",
"Genocide",
"Valingar",
"Lillianna",
"Pogg",
"Orella",
"Haven",
"Moriko",
"Nera",
"Sudoxen",
"Uacol",
"Sekeres",
"Romorn",
"Kisme",
"Stine",
"Pascal",
"Nozerem",
"Uske",
"Iakut",
"Zillow",
"Xarnn",
"Aloli",
"Lyric",
"Zantiln",
"Edi",
"Kheoss",
"Valorie",
"Katie",
"Yven",
"Dei",
"Xiomara",
"Izarken",
"Corlin",
"Aisling",
"Rak",
"Santeri",
"Jasline",
"Eaku",
"Morwin",
"Xeraziz",
"Ashram",
"Larisa",
"Ario",
"Eienna",
"Nava",
"Jacke",
"Norasi",
"Straid",
"Maximas",
"Ixmi",
"Cedric",
"Trath",
"Urial",
"Jasmyn",
"Jhin",
"Lynni",
"Freyia",
"Adalric",
"Kitana",
"Nkala",
"Mirrfa",
"Clawdiah",
"Agothaxl",
"Acedyn",
"Rosenna",
"Clovis",
"Haewurd",
"Elorin",
"Levinas",
"Demortes",
"Northam",
"Daexin",
"Benedicto",
"Aeheli",
"Velheima",
"Rockbein",
"Annoba",
"Nero",
"Rouen",
"Clets",
"Gerard",
"Ayastia",
"Adia",
"Valik",
"Aishia",
"Zahera",
"Jami",
"Trey",
"Sommnus",
"Theo",
"Briallen",
"Aukan",
"Raisha",
"Voltaeus",
"Iadra",
"Alyx",
"Baranor",
"Bryock",
"Pugsly",
"Gunrir",
"Dimbu",
"Xanos",
"Khalisi",
"Alycena",
"Verena",
"Anahera",
"Iaphi",
"Kaestrin",
"Tavgrephor",
"Maite",
"Raime",
"Belgarion",
"Valkalkas",
"Drayne",
"Neodin",
"Synx",
"Darcassan",
"Aymah",
"Kender",
"Xender",
"Enebish",
"Rhesk",
"Xenaden",
"Ananta",
"Khelzya",
"Malian",
"Raeche",
"Bayne",
"Dzekk",
"Piari",
"Bulge",
"Phyndaris",
"Roux",
"Melwork",
"Magni",
"Brant",
"Courtney",
"Xandren",
"Undirnath",
"Masi",
"Krolis",
"Mati",
"Rosien",
"Caeran",
"Cayden",
"Aithne",
"Marin",
"Emery",
"Sansha",
"Effrosyni",
"Printiel",
"Ophilia",
"Kvothe",
"Ramathorn",
"Stickley",
"Vaerenth",
"Naerthan",
"Zoglin",
"Jezriel",
"Slyphe",
"Alisa",
"Naeda",
"Aki",
"Cinnamae",
"Ecikoria",
"Anai",
"Bressan",
"Jakir",
"Shambunath",
"Zaraya",
"Kayt",
"Tabinathia",
"Kaiara",
"Falinzin",
"Iesid",
"Pilgrim",
"Ochkopetuh",
"Chassity",
"Kaleigh",
"Koda",
"Kalts",
"Tenshyo",
"Labious",
"Valin",
"Legic",
"Brae",
"Alcidies",
"Kallah",
"Klonk",
"Qaixheor",
"Rosalind",
"Karkur",
"Jhura",
"Aenar",
"Obrac",
"Noon",
"Jun",
"Ainete",
"Khalil",
"Vhlara",
"Aiden",
"Meriana",
"Eratian",
"Saybre",
"Jibz",
"Lycia",
"Salius",
"Renard",
"Tenmu",
"Kylana",
"Sula",
"Aisar",
"Jekkan",
"Grafdraxz",
"Aumia",
"Sekit",
"Ioai",
"Chaxapuarch",
"Atrapoema",
"Vevis",
"Saerward",
"Makahiya",
"Niavex",
"Saymon",
"Etani",
"Aloa",
"Wau",
"Ashta",
"Adlivun",
"Rivas",
"Arbre",
"Iatan",
"Kallia",
"Lisette",
"Vinyarion",
"Xeraphine",
"Seir",
"Ysabelon",
"Neoial",
"Destian",
"Clearwater",
"Kelsea",
"Lemowe",
"Vasilus",
"Orunmila",
"Sabella",
"Ysi",
"Ifreann",
"Bjarte",
"Tesetta",
"Silvanar",
"Rasani",
"Imresyr",
"Hodral",
"Mildew",
"Warruck",
"Ingram",
"Vaeldren",
"Arataziel",
"Maizin",
"Jeromy",
"Sirena",
"Zephraim",
"Zion",
"Rennoc",
"Callaia",
"Sekara",
"Hale",
"Aevon",
"Altair",
"Kinder",
"Shlandria",
"Vulkar",
"Hieros",
"Tee",
"Ferrovax",
"Makaya",
"Innuros",
"Mersalis",
"Hallis",
"Melantha",
"Pleinair",
"Asra",
"Goris",
"Caspien",
"Chrys",
"Aired",
"Dyvona",
"Tyson",
"Selyssa",
"Arcannia",
"Airesi",
"Carson",
"Evelyne",
"Sivekui",
"Annika",
"Oonagh",
"Thordin",
"Lonnus",
"Kalinaar",
"Sindora",
"Nimiphi",
"Lilea",
"Dani",
"Aryella",
"Seraphina",
"Iophe",
"Arthitray",
"Jakobi",
"Procyon",
"Velana",
"Varrilix",
"Erion",
"Gerro",
"Rilok",
"Unu",
"Eska",
"Nuana",
"Leranc",
"Kalena",
"Isia",
"Renault",
"Serram",
"Wylliam",
"Nyssa",
"Aelyan",
"Carthenian",
"Tythos",
"Faeden",
"Aoide",
"Tsuga",
"Brosk",
"Nour",
"Xavin",
"Heskan",
"Roxilyx",
"Scandland",
"Mahar",
"Ronon",
"Dasha",
"Elidyr",
"Grecia",
"Edain",
"Inari",
"Yeras",
"Rhaea",
"Tahm",
"Rahm",
"Ugglee",
"Aedui",
"Mabel",
"Zorn",
"Kamus",
"Caed",
"Esper",
"Alyia",
"Aelea",
"Cressida",
"Osai",
"Lanira",
"Sonsunou",
"Renarin",
"Ranae",
"Venn",
"Miralla",
"Rashar",
"Eoleth",
"Eoros",
"Asilient",
"Amrit",
"Ghatzhjia",
"Almeri",
"Aithinne",
"Talisa",
"Parumvera",
"Aledar",
"Mirahtesh",
"Rothak",
"Courene",
"Yvairre",
"Rebeca",
"Kjell",
"Tristram",
"Jakarn",
"Hedera",
"Layos",
"Zerin",
"Irric",
"Mielo",
"Faewynn",
"Koharu",
"Leta",
"Xanchol",
"Ollie",
"Nadryne",
"Seldyn",
"Kzark",
"Wert",
"Shakira",
"Ishuri",
"Kiyenri",
"Katerinka",
"Vyraeri",
"Analynn",
"Whippet",
"Pilar",
"Sibatti",
"Teotl",
"Sallia",
"Deion",
"Dyolclese",
"Ninette",
"Jindea",
"Emhyra",
"Vrael",
"Ravanna",
"Zik",
"Adec",
"Tamori",
"Rayalo",
"Vael",
"Willoughby",
"Dalirris",
"Niciven",
"Sryaen",
"Berrad",
"Saebi",
"Jourik",
"Drestyn",
"Hadoryu",
"Nethis",
"Rshi",
"Czcienn",
"Lysiane",
"Tinazin",
"Eliadon",
"Sarran",
"Talyarra",
"Ujukzi",
"Fliennad",
"Talonnb",
"Arindalia",
"Saidem",
"Bellarai",
"Arafel",
"Dreugan",
"Andromeydia",
"Senecal",
"Unpre",
"Rellik",
"Calloud",
"Aranok",
"Weylyn",
"Cernunnos",
"Mykellah",
"Karhast",
"Trager",
"Sepzane",
"Rhine",
"Tifa",
"Keshein",
"Folly",
"Brenny",
"Ylaida",
"Borminchia",
"Charica",
"Laithe",
"Honeey",
"Dakan",
"Ternu",
"Ianus",
"Haydyn",
"Church",
"Daskalos",
"Demarcus",
"Ardaun",
"Anyeria",
"Alizee",
"Mucka",
"Vahn",
"Kolyn",
"Darim",
"Agothine",
"Idarra",
"Cellica",
"Inthirath",
"Vendra",
"Cotio",
"Alin",
"Naia",
"Vino",
"Nethris",
"Iscander",
"Steingrimson",
"Birilax",
"Curiel",
"Mastvin",
"Chimalmatko",
"Darmani",
"Boden",
"Bastian",
"Raist",
"Thurs",
"Zaritha",
"Ventri",
"Anthok",
"Radryn",
"Taiyang",
"Nelaana",
"Vivaera",
"Kyou",
"Ayanala",
"Xigbar",
"Calebb",
"Lin",
"Saltz",
"Camile",
"Amyie",
"Indiana",
"Syliana",
"Serrice",
"Orisae",
"Asena",
"Kassian",
"Banukk",
"Burdan",
"Cattibrie",
"Nawaz",
"Yvi",
"Rictus",
"Alamura",
"Kelta",

	}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>snd.rheskallies</name>
							<packageName></packageName>
							<script>snd.rheskallies = {
"Rhesk",
"Myrnma",
"Amarylis",
"Enamari",
"Wyliame",
"Kezef",
"Alystrine",
"Annerissa",
"Benedicto",
"Xavin",
"Sryaen",
"Kalena",
"Aloli",
"Mahar",
"Eliadon",
"Yeras",
"Inthirath",
"Roux",
"Dreugan",
"Amarita",
"Scandland",
"Ranae",
"Nimiphi",
"Enebish",
"Vaessa",
"Vino",
"Ashram",
"Osian",
"Zima",
"Rasani",
"Del",
"Fuere",
"Kylan",
"Talonnb",
"Aolin",
"Jeromy",
"Czcienn",
"Jami",
"Church",
"Urekun",
"Nieven",
"Sotir",
"Procyon",
"Kaiara",
"Xenaden",
"Velheima",
"Jakarn",
"Elliana",
"Jakobi",
"Saltz",
"Arthitray",
"Axius",
"Baranor",
"Eaku",
"Adalric",
"Isia",
"Aeraisentesh",
"Naia",
"Aaric",
"Rak",
"Jezriel",
"Amyie",
"Orunmila",
"Ayastia",
"Undirnath",
"Eoros",
"Emhyra",
"Nkala",


}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>snd.rheskenemies</name>
							<packageName></packageName>
							<script>snd.rheskenemies = {

"Illikaal",
"Valorie",
"Jhura",
"Aisling",
"Sibatti",
"Kjell",
"Ulo",
"Ayanala",
"Mati",
"Ixmi",
"Iesid",
"Sekeres",
"Devin",
"Ase",
"Valeria",
"Straid",
"Damonicus",
"Pneuman",

"Azami",
"Gribbit",
"Linnaeus",
"Arista",
"Nispy",
"Qem",
"Kaius",
"Glach",
"Feichin",
"Haleth",
"Khambeaux",
"Renault",
"Aeryx",
"Borminchia",
"Llancarfan",
"Folke",
"Talabose",
"Callidora",
"Gundor",
"Pargu",
"Dierjiano",
"Teramasce",
"Kiershu",
"Ruhi",
"Sitoun",
"Lorne",
"Ultra",
"Nirala",
"Roknar",
"Xin",
"Safiya",
"Knigi",
"Ensis",
"Zaene",
"Khane",
"Markos",
"Araris",
"Mangor",
"Catalina",
"Chassier",
"Ariat",
"Noctis",
"Yautji",
"Jondyrr",
"Desidora",
"Edira",
"Wurnys",
"Malcanthet",
"Elene",
"Taelyndara",
"Orhm",
"Tiana",
"Huloku",
"Asaraii",
"Asanna",
"Mathus",
"Herus",
"Xolotl",
"Zethrie",
"Ervyn",
"Sarelle",
"Sfazo",
"Reno",
"Xenia",
"Cruenne",
"Fukushu",
"Wilba",
"Rhoynn",
"Inkh",
"Dreadnaught",
"Nahasa",
"Ragnus",
"Orfeo",
"Neoma",
"Pietre",
"Khalu",
"Thia",
"Didi",
"Koriel",
"Yshabodur",
"Aliyah",
"Malachai",
"Nipsy",
"Shaed",
"Escelika",
"Kandara",
"Binward",
"Tekias",
"Mortexia",
"Diavola",
"Jett",
"Kassidy",
"Korvyr",
"Saphielle",
"Naro",
"Evlentesh",
"Saervok",
"Morrinth",
"Raemi",
"Magne",
"Brontes",
"Kelliara",
"Nausicaa",
"Maelia",
"Naida",
"Ayuna",
"Cai",
"Ildri",
"Dai",
"Nerakh",
"Jomar",
"Qix",
"Drystin",
"Metias",
"Kauller",
"Zenthain",
"Cassomyr",
"Ensidia",
"Tyrak",
"Acino",
"Blakehanne",
"Mondeau",
"Elaz",
"Aluki",
"Seriha",
"Ashenzar",
"Feirenz",
"Amaldin",
"Rezargnesh",
"Tillian",
"Ozul",
"Vinsun",
"Ryv",
"Gatny",
"Rhaghe",
"Partue",
"Ezalor",
"Laikahra",
"Rhyot",
"Jergosh",
"Rexton",
"Alathesia",
"Aschwar",
"Kyassa",
"Yvo",
"Ceto",
"Minesae",
"Kadal",
"Angroth",
"Moxie",
"Amaro",
"Tsarra",
"Xyndrae",
"Meltas",
"Denser",
"Haruki",
"Grimdale",
"Catty",
"Ivoln",
"Chakrasul",
"Severn",
"Bamathis",
"Megan",
"Cilly",
"Matlal",
"Vess",
"Whirran",
"Asmund",
"Henge",
"Esotopes",
"Laera",
"Xuzegg",
"Neis",
"Entioch",
"Rijetta",
"Echo",
"Rakia",
"Farean",
"Lynexia",
"Panthaal",
"Ipz",
"Daelar",
"Tavor",
"Vzaaz",
"Inoj",
"Eagan",
"Lightspeed",
"Ailen",
"Kesten",
"Ciarcadh",
"Legyn",
"Deva",
"Illuthias",
"Keahi",
"Kagami",
"Ehtias",
"Sarethiel",
"Cymri",
"Ryryk",
"Maldoror",
"Kalrax",
"Kentigern",
"Malger",
"Ouzu",
"Aenilris",
"Gryph",
"Tianlong",
"Kaiona",
"Cayn",
"Ansury",
"Bhrigu",
"Alacar",
"Ison",
"Remmao",
"Xelraik",
"Juha",
"Gavramel",
"Rakim",
"Yettave",
"Ysyrin",
"Vonandor",
"Thedoc",
"Kendi",
"Nephiliar",
"Pontius",
"Huyana",
"Megami",
"Isern",
"Atarah",
"Kadvar",
"Rainaka",
"Hayth",
"Vinhi",
"Vaeth",
"Raskalov",
"Holbrook",
"Ishmar",
"Thrasius",
"Zhyth",
"Evelyn",
"Voncy",
"Vycious",
"Nirian",
"Cilan",
"Eydis",
"Dennao",
"Starla",
"Evilo",
"Procell",
"Harad",
"Exodus",
"Eor",
"Hawa",
"Aldin",
"Sigrun",
"Epiales",
"Mythunnar",
"Xirien",
"Raidy",
"Maira",
"Salveo",
"Kaldaka",
"Kismit",
"Arakeshi",
"Laurenne",
"Visix",
"Tzaarhashet",
"Estella",
"Soulaie",
"Ilara",
"Nixia",
"Taja",
"Kirill",
"Talulla",
"Aloree",
"Paxe",
"Zyphen",
"Sohma",
"Sarisa",
"Tarleich",
"Redriot",
"Gunther",
"Beivu",
"Kurak",
"Necerursh",
"Jadice",
"Rehr",
"Jaegth",
"Uumbaji",
"Livia",
"Kylae",
"Itkovian",
"Drale",
"Senaka",
"Galilei",
"Darliea",
"Tykesi",
"Obediah",
"Katios",
"Nisavi",
"Zixen",
"Zhunkou",
"Corvo",
"Reave",
"Vicu",
"Izzard",
"Ronka",
"Rayan",
"Arian",
"Nebula",
"Krynst",
"Akaryuterra",
"Merick",
"Tormont",
"Diomedes",
"Alela",
"Laniara",
"Axai",
"Yirun",
"Hitzuguya",
"Korkal",
"Slinash",
"Verniy",
"Lacie",
"Lleminara",
"Nemsi",
"Nonatea",
"Verrillia",
"Runk",
"Odment",
"Zephy",
"Milvushina",
"Rebra",
"Scathus",
"Aethir",
"Xanithe",
"Vrey",
"Vyxsis",
"Gorvex",
"Larion",
"Demidicus",
"Grake",
"Fensuhn",
"Fukushu",
"Aridas",
"Akimoto",
"Skuti",
"Xeon",
"Velath",
"Riane",
"Trent",
"Skree",
"Nissa",
"Blanche",
"Lehar",
"Bormulf",
"Kaivalya",
"Manelesi",
"Fezzix",
"Brin",
"Skade",
"Keldrion",
"Keldrad",
"Greebs",
"Shiva",
"Arath",
"Venthus",
"Destan",
"Umero",
"Konnorn",
"Aldera",
"Eleanor",
"Ensoi",
"Aevol",
"Gennifer",
"Sulabha",
"Ravenire",
"Uthev",
"Veris",
"Tila",
"Kanivara",
"Illuwen",
"Precius",
"Nin",
"Epiden",
"Cardie",
"Bardiya",
"Caelian",
"Vassago",
"Romei",
"Teeh",
"Tanthilos",
"Yaemon",
"Xyla",
"Aniko",
"Liua",
"Blaze",
"Anlia",
"Solaria",
"Knick",
"Bulrok",
"Diggory",
"Wjoltyr",
"Dantae",
"Vjeiraic",
"Lynomios",
"Caboose",
"Zehebim",
"Asven",
"Skiva",
"Lilia",
"Taradin",
"Haleth",
"Aros",
"Scytareine",
"Feyjani",
"Seraphyna",
"Lilein",
"Raevina",
"Ozgalla",
"Chase",
"Feyann",
"Krogyr",
"Hawise",
"Robyn",
"Winger",
"Cola",
"Zarni",
"Lusidian",
"Deumos",
"Karai",
"Vaytor",
"Grimnar",
"Helios",
"Leana",
"Memnoch",
"Abhorash",
"Diancecht",
"Lasaya",
"Kagasha",
"Lupin",
"Rolk",
"Nimueh",
"Nintar",
"Irish",
"Narak",
"Jazmila",
"Anat",
"Zyre",
"Krik",
"Prucilla",
"Ely",
"Alak",
"Azrael",
"Dagan",
"Glasse",
"Sylar",
"Draiman",
"Nydri",
"Drajiath",
"Wedric",
"Vryolis",
"Nyasi",
"Martinaux",
"Mriste",
"Riluo",
"Ladrith",
"Valie",
"Sysky",
"Vonai",
"Blodwyn",
"Toz",
"Gallard",
"Linkovitch",
"Etrigan",
"Vharen",
"Dourif",
"Hexes",
"Cinuedu",
"Zelroth",
"Rinnek",
"Jineva",
"Aisec",
"Zileigh",
"Noth",
"Taye",
"Eolo",
"Archelaus",
"Zortania",
"Dhavar",
"Candace",
"Etetafreya",
"Lenoriel",
"Duncan",
"Eugenides",
"Anasses",
"Ridd",
"Talomae",
"Krow",
"Kodra",
"Alynn",
"Celeun",
"Deasil",
"Infin",
"Alii",
"Kasen",
"Uthegen",
"Ansidia",
"Mjoll",
"Iises",
"Jhaelen",
"Justus",
"Irennan",
"Tina",
"Kyn",
"Liev",
"Rozlic",
"Keaira",
"Nindor",
"Azarae",
"Lykorn",
"Alandrol",
"Odette",
"Nisha",
"Lij",
"Gyana",
"Quillion",
"Bora",
"Nicolas",
"Faerah",
"Yedan",
"Eicara",
"Chala",
"Xaldrin",
"Emiko",
"Dreww",
"Eliser",
"Rennie",
"Liorial",
"Flighn",
"Kamui",
"Oceania",
"Aliane",
"Taj",
"Eternti",
"Zea",
"Aouri",
"Pedra",
"Awol",
"Taryn",
"Mayze",
"Nhiall",
"Entildron",
"Vlaius",
"Tlacahua",
"Agron",
"Leopal",
"Sanguin",
"Jarrhn",
"Sagla",
"Nymma",
"Usetta",
"Naadu",
"Kythi",
"Zachariah",
"Alice",
"Kervalin",
"Asmodia",
"Tartarus",
"Lecksi",
"Sarita",
"Nahira",
"Requilem",
"Taaroshi",
"Virelen",
"Azelie",
"Xarian",
"Balzic",
"Kwanake",
"Raynia",
"Shixblix",
"Kharna",
"Damion",
"Kafar",
"Azu",
"Selaena",
"Vahlen",
"Swara",
"Calisra",
"Adyen",
"Narcisa",
"Tirria",
"Poggers",
"Cendron",
"Belzibub",
"Cariv",
"Satomi",
"Koari",
"Parzival",
"Ducaulle",
"Tolas",
"Vorran",
"Aliviana",
"Zaos",
"Rashinza",
"Sarojin",
"Irys",
"Teflin",
"Sollimus",
"Serentius",
"Raddock",
"Santino",
"Aiyana",
"Strung",
"Boz",
"Ilioyd",
"Caraldor",
"Octavia",
"Dafft",
"Darien",
"Zarosh",
"Rorik",
"Rokujou",
"Emir",
"Frankie",
"Seirsha",
"Luria",
"Anita",
"Mastema",
"Akara",
"Astele",
"Xeniothalus",
"Kodaza",
"Ameleia",
"Doron",
"Bob",
"Tetchta",
"Uldyssian",
"Zinar",
"Enlil",
"Irvaen",
"Menelaus",
"Syphen",
"Galena",
"Charella",
"Rome",
"Darragh",
"Athala",
"Araseth",
"Sheryni",
"Kevrud",
"Borscin",
"Naos",
"Tryss",
"Desian",
"Zakkari",
"Azalie",
"Marharet",
"Tybereus",
"Aramaeus",
"Clouser",
"Ruga",
"Ayala",
"Pentas",
"Mosr",
"Vika",
"Kadgar",
"Moody",
"Trikal",
"Qelres",
"Tasryn",
"Louse",
"Mephistoles",
"Era",
"Niakara",
"Esan",
"Aegon",
"Seurimas",
"Fyrren",
"Talfinel",
"Malok",
"Choep",
"Anka",
"Lenina",
"Almol",
"Arslen",
"Tasaria",
"Asugazio",
"Makya",
"Anari",
"Valdas",
"Theros",
"Burk",
"Evoran",
"Kagura",
"Tryss",
"Rou",
"Zaephlyn",
"Graffeon",
"Zubayr",
"Gub",
"Squich",
"Dankula",
"Utansi",
"Tapester",
"Malovia",
"Phoebi",
"Jeab",
"Thraze",
"Saidenn",
"Dowbrow",
"Kiralla",
"Megiddo",
"Deric",
"Samos",
"Ephi",
"Hayt",
"Maetrias",
"Cal",
"Anavander",
"Vittorio",
"Calikura",
"Iraun",
"Kraz",
"Ahlysaaria",
"Ayukazi",
"Vorlus",
"Nik",
"Vonarnis",
"Savas",
"Sylviah",
"Miroslav",
"Murmandamus",
"Maeve",
"Loreli",
"Lere",
"Velguin",
"Zenobia",
"Lucertola",
"Yveria",
"Erzsebet",
"Linne",
"Rhexx",
"Canasius",
"Molotok",
"Zrex",
"Oisynne",
"Kadyn",
"Chalenna",
"Ropp",
"Rhain",
"Einette",
"Zen",
"Ardent",
"Ferrik",
"Zruak",
"Vizzer",
"Alita",
"Aluvi",
"Ellenia",
"Volundiel",
"Macavity",
"Nhahlar",
"Varant",
"Aren",
"Chup",
"Xai",
"Ditae",
"Cadhla",
"Haverly",
"Pyxis",
"Yrthyra",
"Kylira",
"Retherian",
"Phelan",
"Radne",
"Cutkya",
"Nahuaque",
"Khsar",
"Hadrel",
"Arness",
"Phlickerwart",
"Nokk",
"Vanas",
"Ivarys",
"Aseru",
"Caeoimhe",
"Charon",
"Calen",
"Calyziir",
"Vahellion",
"Skratt",
"Ace",
"Leron",
"Vanalia",
"Alissa",
"Stryxi",
"Jiri",
"Korvora",
"Veruca",
"Deliria",
"Josephus",
"Murad",
"Piper",
"Kathgor",
"Zaila",
"Arahali",
"Truan",
"Ikne",
"Traexon",
"Tuisto",
"Llore",
"Agidnis",
"Issac",
"Eresim",
"Akarn",
"Narayan",
"Sukii",
"Evangeline",
"Xereth",
"Tyriik",
"Auraro",
"Tatia",
"Haleigh",
"Claire",
"Danuja",
"Mileta",
"Aspasia",
"Rammus",
"Jenxlyn",
"Qin",
"Parnox",
"Iazamat",
"Oemeria",
"Zhukov",
"Edoi",
"Iayera",
"Dannon",
"Theth",
"Ixi",
"Mazzion",
"Lysaer",
"Andrus",
"Mordwyry",
"Psychorax",
"Shoimoro",
"Lim",
"Nephira",
"Darrah",
}</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Ylem</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>ylem variables</name>
						<packageName></packageName>
						<script>
snd.ylem_loaded = true

ylm = ylm or {}

ylm.active = false
ylm.next_zone = "none"
ylm.foci = 0
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>path</name>
						<packageName></packageName>
						<script>
ylm.path = {

v1680 = "20389",
v20389 = "13253",
v13253 = "60762",
v60762 = "26690",
v26690 = "26668",
v26668 = "10041",
v10041 = "35117",
v35117 = "62223",
v62223 = "26920",
v26920 = "35217",
v35217 = "60845",
v60845 = "46341",
v46341 = "32704",
v32704 = "45483",
v45483 = "14729",
v14729 = "1644",
v1644 = "56942",
v56942 = "1602",
v1602 = "19344",
v19344 = "62798",
v62798 = "1433",
v1433 = "36677",
v36677 = "3018",
v3018 = "16438",
v16438 = "36865",
v36865 = "6",
v6 = "32237",
v32237 = "26841",
v26841 = "38090",
v38090 = "26994",
v26994 = "11326",
v11326 = "11311",
v11311 = "25738",
v25738 = "19602",
v19602 = "53444",
v53444 = "3430",
v3430 = "5598",
v5598 = "32908",
v32908 = "23899",
v23899 = "5692",
v5692 = "21001",
v21001 = "59979",
v59979 = "19323",
v19323 = "42831",
v42831 = "768",
v768 = "973",
v973 = "71926",
v71926 = "19810",
v19810 = "71554",
v71554 = "31552",
v31552 = "19987",
v19987 = "9510",
v9510 = "19576",
v19576 = "64288",
v64288 = "55101",
v55101 = "17034",
v17034 = "18462",
v18462 = "62996",
v62996 = "73508",
v73508 = "4163",
v4163 = "3276",
v3276 = "63351",
v63351 = "20932",
v20932 = "20281",
v20281 = "71815",
v71815 = "15820",
v15820 = "70916",
v70916 = "21908",
v21908 = "51157",
v51157 = "62383",
v62383 = "18082",
v18082 = "49875",
v49875 = "25969",
v25969 = "44816",
v44816 = "18601",
v18601 = "22477",
v22477 = "4078",
v4078 = "8854",
v8854 = "18467",
v18467 = "63763",
v63763 = "14439",
v14439 = "63730",
v63730 = "20855",
v20855 = "8795",
v8795 = "58675",
v58675 = "54699",
v54699 = "13425",
v13425 = "59187",
v59187 = "22824",
v22824 = "23791",
v23791 = "23140",
v23140 = "22702",
v22702 = "16282",
v16282 = "72008",
v72008 = "47147",
v47147 = "1288",
v1288 = "63306",
v63306 = "56648",
v56648 = "4740",
v4740 = "61928",
v61928 = "4808",
v4808 = "65189",
v65189 = "49749",
v49749 = "64608",
v64608 = "64478",
v64478 = "64396",
v64396 = "11794",
v11794 = "60181",
v60181 = "11860",
v11860 = "74377",
v74377 = "36271",
v36271 = "1012",
v1012 = "3496",
v3496 = "71074",
v71074 = "58789",
v58789 = "17612",
v17612 = "62102",
v62102 = "276",
v276 = "16426",
v16426 = "10812",
v10812 = "34760",
v34760 = "72513",
v72513 = "1000",
v1000 = "1774",
v1774 = "3106",
v3106 = "11634",
v11634 = "11988",
v11988 = "11994",
v11994 = "56435",
v56435 = "25408",
v25408 = "59862",
v59862 = "18434",
v18434 = "11412",
v11412 = "19854",
v19854 = "31576",
v31576 = "55276",
v55276 = "58912",
v58912 = "20835",
v20835 = "21286",
v21286 = "22866",
v22866 = "23202",
v23202 = "57559",
v57559 = "4964",
v4964 = "2036",
v2036 = "38894",
v38894 = "16274",
v16274 = "18415",
v18415 = "19320",
v19320 = "24548",
v24548 = "5028",
v5028 = "3887",
v3887 = "57334",
v57334 = "9853",
v9853 = "59609",
v59609 = "53230",
v53230 = "10086",
v10086 = "16584",
v16584 = "16706",
v16706 = "17069",
v17069 = "60726",
v60726 = "15344",
v15344 = "city"

}</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Questing</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>quest variables</name>
						<packageName></packageName>
						<script>
snd.questing_loaded = true

snd.quest_items = {
["Three Widows"] = {"a handful of hay", "a packet of seeds", "a simple net", "a simple pickaxe", "a small grey rock"},
["Mount Humgurd"] = {"a chunk of mixed ore"},
["the Siroccian Mountains"] = {"a lump of flaking coal", "a rock of silver ore", "a hematite ore of iron", "a gold nugget"},
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>run quests</name>
						<packageName></packageName>
						<script>
function snd.runQuests()
	if snd.toggles.questing then
 		if snd.quest_items[snd.my.area] then
  		local need_items = {}
  		for item in pairs(snd.items) do
	 			if table.contains(snd.quest_items[snd.my.area], item) then
	  			for id in pairs(snd.items[item]) do
		 				table.insert(need_items, snd.items[item][id])
					end
	 			end
			end
			if #need_items &gt;= 1 and not snd.waiting.quest_get then
	 			snd.send("qeb get "..table.concat(need_items, snd.sep.."get "))
	 			snd.waiting.quest_get = true
	 			tempTimer(snd.delay(), [[snd.waiting.quest_get = false]])
			end
 		end
 		if snd.my.area == "the mines of Mount Helba" then
			if snd.items["a rich vein of iron ore"] or snd.items["a vein of iron ore"] then
	 			snd.send("qeb mine vein")
				--elseif snd.items["a pile of rubble"] then
  			-- snd.send("dig rubble")
  		end
 		end
	end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Fishing</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>GetFishingHoles</name>
						<packageName></packageName>
						<script>function get_fishing_holes(search_string, display_results, display_full_results)

	if not fishing_holes then
		load_fishing_db()
	end

	search_string = search_string:lower()
	local results = {}
	local result_strings = {}

	for k,v in pairs(fishing_holes) do 

		v.fish = v.fish or {}
		local matched_room = false
		-- Look for typetext.
		if v.type:lower():find(search_string) then
			table.insert(results, v) 
			result_strings[v.name] = v.type
			matched_room = true
		end

		-- Look for nametext.
		if not matched_room and k:lower():find(search_string) then
			table.insert(results, v) 
			result_strings[v.name] = k
			matched_room = true
		end
	
		-- Look for fish.
		if not matched_room then
			for _, fishtype in pairs(v.fish) do
				if fishtype:lower():find(search_string) then
					local found = false
					for _, j in pairs(results) do
						if j.name == v.name and j.fish == fishtype then 
							found = true
							break
						end
					end
					if not found then 
						table.insert(results, v) 
						result_strings[v.name] = fishtype
					end
				end
			end
		end
	end

	if display_results then
		if #results == 0 then
			hecho("|cccccccNo results for '" .. search_string .. "'.\n")
		else
	
			for k,v in pairs(result_strings) do
				local startstr, endstr = result_strings[k]:lower():find(search_string)
				result_strings[k] = result_strings[k]:sub(1, startstr-1) .. "|cff0000" .. result_strings[k]:sub(startstr, endstr) .. "|ccccccc" .. result_strings[k]:sub(endstr+1)
			end

			hecho("|cccccccResults for '" .. search_string .. "':\n")
			for k,v in pairs(results) do
				if display_full_results then
					hecho("   " .. v.name:title() .. string.rep(" ", 30 - v.name:len()) .. "(" .. result_strings[v.name] .. ")\n")
					hecho("     " .. v.type:title() .. ", " .. #v.fish .. " type(s) of fish, fishing vnum v" .. v.rooms[1] .. ".\n\n")
				else
					hecho("   " .. v.name:title() .. string.rep(" ", 30 - v.name:len()) .. "(" .. result_strings[v.name] .. ")\n")
				end
			end
			echo("\n")
		end
	end

	return results
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>SaveLoad</name>
						<packageName></packageName>
						<script>function load_fishing_db()
	local path = getMudletHomeDir().."/aetoliaFishingDB.sav"
	fishing_holes = {}
	if io.exists(path) then
		table.load(path,fishing_holes)
	end
end

function save_fishing_db()
  if not fishing_holes then return false end
  table.save(getMudletHomeDir().."/aetoliaFishingDB.sav", fishing_holes)
end
</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>GUI</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>setup</name>
						<packageName></packageName>
						<script>local windowwidth, windowheight = getMainWindowSize()
alteredwindowwidth = math.ceil(windowwidth*.08)

snd.gui = {
  enabled = true,
  height = windowheight,
  width_right = 400,
  width_left = alteredwindowwidth,
 
}
    setBorderLeft(snd.gui.width_left);
    setBorderRight(snd.gui.width_right); 
    
    rightContainer = Geyser.Container:new({
        name = "rightContainer", x = -snd.gui.width_right, y = 0,
        width = snd.gui.width_right, height = "100%",
    });

    leftContainer = Geyser.Container:new({
    		name = "leftContainer", x = 1, y = 0,
    		width = snd.gui.width_left-5, height = "100%",
    });
</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Left</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>vitals</name>
							<packageName></packageName>
							<script>  vitals = Geyser.Label:new({
   name = "vitals",
   x = 0, y = 0,
   width = "100%", height = "5%",
   fgColor = "white",
  }, leftContainer);
  vitals:setFontSize(11)
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>wielding</name>
							<packageName></packageName>
							<script>  wielding = Geyser.Label:new({
   name = "wielding",
   x = 0, y = "5%",
   width = "100%", height = "3%",
   color = "SteelBlue", fgColor = "white",
   message = [[wielding]],
  }, leftContainer);
  wielding:setFontSize(9)
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>time_update</name>
							<packageName></packageName>
							<script>  time = Geyser.Label:new({
   name = "time",
   x = 0, y = "8%",
   width = "100%", height = "1.75%",
   color = "black", fgColor = "white",
   message = [[time]],
  }, leftContainer);
  time:setFontSize(7.45)

function time_update()
  if snd.gui.enabled then
    sendGMCP("IRE.Time.Request")
    
    local d = gmcp.IRE.Time.List.day
    local m = gmcp.IRE.Time.List.month
    local y = gmcp.IRE.Time.List.year
    
    local t = gmcp.IRE.Time.List.time 
    	if t:find("late night, approaching midnight") then
    		time:setFontSize(8)
     		t = "Late night"
    	elseif t:find("It is deep night in Aetolia") then
    		t = "Almost midnight"
    		time:setFontSize(7.45)
    	elseif t:find("It is deepest midnight.") then
    		t = "Midnight"
    		time:setFontSize(8)
    	elseif t:find("It is the middle of the night in Aetolia") then
    		t = "After midnight"
    		time:setFontSize( 7.45)
    	elseif t:find("early morning in Aetolia") then
    		t = "Early morning"
    		time:setFontSize(7.45)
    	elseif t:find("approaching dawn.") then
    		t = "Almost dawn"
    		time:setFontSize(7.45)
    	elseif t:find("It is dawn.") then
    		t = "Dawn"
    		time:setFontSize(8)
    	elseif t:find("It's mid-") then
    		t = "Mid-morning"
    		time:setFontSize(8)
    	elseif t:find("approaching noon") then
    		t = "Almost noon"
    		time:setFontSize(7.45)
    	elseif t:find("exactly noon") then
    		t = "Hiiiigh noooon"
    		time:setFontSize(7.45)
    	elseif t:find("early afternoon") then
    		t = "Early afternoon"
    		time:setFontSize(7.45)
    	elseif t:find("It is late afternoon in Aetolia") then
    		t = "Late afternoon"
    		time:setFontSize(7.45)
    	elseif t:find("dusk in Aet") then
    		t = "Dusk"
    		time:setFontSize(8)
    	elseif t:find("Twilight has overtaken the light") then
    		t = "Early evening"
    		time:setFontSize(7.45)
    	else 
    		--This should only come about if they add a new time to the cycle.
    	end
    
    time:echo("&lt;center&gt;"..t.." "..m.."/"..d.."/"..y.."&lt;/center&gt;")
  end
end</script>
							<eventHandlerList>
								<string>gmcp.IRE.Time.Update</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>my status</name>
							<packageName></packageName>
							<script>
  mystatus = Geyser.Label:new({
   name = "mystatus",
   x = 0, y = "10%",
   width = "35%", height = "10.5%",
   color = "slate_gray", fgColor = "white",
   message = [[mystatus]],
  }, leftContainer);
  mystatus:setFontSize(9)
  	mystatus:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkCyan;
  		
  	]])
  mystatus:echo("&lt;center&gt;".."PASN".."&lt;/center&gt;&lt;center&gt;prone&lt;/center&gt;")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>my limbs</name>
							<packageName></packageName>
							<script>  mylimbs = Geyser.Label:new({
   name = "mylimbs",
   x = 0, y = "20%",
   width = "35%", height = "10%",
   color = "dim_gray", fgColor = "white",
   message = [[mylimbs]],
  }, leftContainer);
  mylimbs:setFontSize(9)
  	mylimbs:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkCyan;
  		
  	]])
  mylimbs:echo("&lt;center&gt;0&lt;/center&gt;&lt;center&gt;/|\\&lt;/center&gt;&lt;center&gt;/\\&lt;/center&gt;")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>my affs</name>
							<packageName></packageName>
							<script>
  myaffs = Geyser.Label:new({
   name = "myaffs",
   x = "35%", y = "10%",
   width = "65%", height = "20%",
   color = "dark_slate_gray", fgColor = "white",
   message = [[my affs]],
  }, leftContainer);
  myaffs:setFontSize(9)
    myaffs:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: DarkCyan;
  ]])
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>enemy name</name>
							<packageName></packageName>
							<script>
  enemy = Geyser.Label:new({
   name = "enemy",
   x = 0, y = "30%",
   width = "100%", height = "3%",
   color = "black", fgColor = "red",
  }, leftContainer);
  enemy:setFontSize(10)
  enemy:echo("&lt;center&gt;Target:&lt;/center&gt;")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>enemy status</name>
							<packageName></packageName>
							<script>
  estatus = Geyser.Label:new({
   name = "estatus",
   x = 0, y = "33%",
   width = "35%", height = "11.75%",
   color = "slate_gray", fgColor = "white",
   message = [[estatus]],
  }, leftContainer);
  estatus:setFontSize(9)
  	estatus:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkSlateBlue;
  		
  	]])
  estatus:echo("&lt;center&gt;".."PASN".."&lt;/center&gt;&lt;center&gt;prone&lt;/center&gt;")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>enemy limbs</name>
							<packageName></packageName>
							<script>
  elimbs = Geyser.Label:new({
   name = "elimbs",
   x = 0, y = "44.5%",
   width = "35%", height = "11.5%",
   color = "black", fgColor = "white",
   message = [[elimbs]],
  }, leftContainer);
  elimbs:setFontSize(9)
  	elimbs:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkSlateBlue;
  		
  	]])
  --border-radius: 10px;
  elimbs:echo("&lt;center&gt;0&lt;/center&gt;&lt;center&gt;/|\\&lt;/center&gt;&lt;center&gt;/\\&lt;/center&gt;")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>enemy affs</name>
							<packageName></packageName>
							<script>
  eaffs = Geyser.Label:new({
   name = "eaffs",
   x = "35%", y = "33%",
   width = "65%", height = "23%",
   color = "dark_slate_gray", fgColor = "white",
   message = [[&lt;center&gt;enemy affs&lt;/center&gt;]],
  }, leftContainer);
  eaffs:setFontSize(9)
  eaffs:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: DarkSlateBlue;
  ]])
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>toggles</name>
							<packageName></packageName>
							<script>
  toggles = Geyser.MiniConsole:new({
   name = "toggles",
   x = 0, y = "57.5%",
   width = "50%", height = "10%",
   color = "black", fgColor = "white",
   message = [[toggles]],
  }, leftContainer);
  toggles:setFontSize(9)
  toggles:clear()
  toggles:cecho("\nattacking")
  toggles:echo("\nbashing")
  toggles:echo("\nfasthunt")
  toggles:echo("\nquesting")
  toggles:echo("\ndispersing")

  --toggles:echo("attacking\n&lt;center&gt;&lt;/center&gt;bashing\n&lt;center&gt;&lt;/center&gt;fasthunt")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>toggles2</name>
							<packageName></packageName>
							<script>
  toggles2 = Geyser.MiniConsole:new({
   name = "toggles2",
   x = "50%", y = "57.5%",
   width = "50%", height = "10%",
   color = "black", fgColor = "white",
   message = [[toggles2]],
  }, leftContainer);
  toggles2:setFontSize(9)
  toggles2:clear()
  toggles2:cecho("\naffcalling")
  toggles2:echo("\ncalling")
  toggles2:echo("\nlistening")
  toggles2:echo("\nchameleon")
  --toggles2:echo("affcalling\n&lt;center&gt;&lt;/center&gt;calling\n&lt;center&gt;&lt;/center&gt;listening")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>monolith</name>
							<packageName></packageName>
							<script>
  monolith = Geyser.Label:new({
   name = "monolith",
   x = 0, y = "70%",
   width = "100%", height = "2%",
   color = "firebrick", fgColor = "black",
  }, leftContainer);
  monolith:setFontSize(12)
  monolith:echo("&lt;center&gt;monolith&lt;/center&gt;")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>exits</name>
							<packageName></packageName>
							<script>
  exits = Geyser.Label:new({
   name = "exits",
   x = 0, y = "72%",
   width = "100%", height = "3.1%",
   color = "midnight_blue", fgColor = "white",
   message = [[exits]],
  }, leftContainer);
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>spirit in room</name>
							<packageName></packageName>
							<script>
  spirit_people = Geyser.Label:new({
   name = "spirit_people",
   x = 0, y = "75%",
   width = "50%", height = "25%",
   color = "SlateGray", fgColor = "DeepSkyBlue",
   message = [[&lt;center&gt;Spirit&lt;\center&gt;]],
  }, leftContainer);
      spirit_people:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: SlateGray;
  ]])
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>shadow in room</name>
							<packageName></packageName>
							<script>
  shadow_people = Geyser.Label:new({
   name = "shadow_people",
   x = "-50%", y = "75%",
   width = "50%", height = "25%",
   color = "SlateGray", fgColor = "tomato",
   message = [[&lt;center&gt;Shadow&lt;\center&gt;]],
  }, leftContainer);
        shadow_people:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: SlateGray;
  ]])
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Coloring these things</name>
							<packageName></packageName>
							<script>snd.display = {
--Begin self 
--locking affs
self_paralysis = "P",
self_paralysis_color = "",
self_asthma = "A",
self_asthma_color = "",
self_slickness = "S",
self_slickness_color = "",
self_anorexia = "N",
self_anorexia_color = "",
--prone/pseudo prone
self_prone = "prone",
self_prone_color = "",
--limb damage
self_head = "0",
self_head_color = "",
self_leftleg = "/",
self_leftleg_color = "",
self_rightleg = "\\",
self_rightleg_color = "",
self_leftarm = "/",
self_leftarm_color = "",
self_rightarm = "\\",
self_rightarm_color = "",
self_torso = "|",
self_torso_color = "",


--Begin enemy
--locking affs
enemy_paralysis = "P",
enemy_paralysis_color = "",
enemy_asthma = "A",
enemy_asthma_color = "",
enemy_slickness = "S",
enemy_slickness_color = "",
enemy_anorexia = "N",
enemy_anorexia_color = "",
--prone/pseudo prone
enemy_prone = "prone",
enemy_prone_color = "",
--limb damage
enemy_head = "0",
enemy_head_color = "",
enemy_leftleg = "/",
enemy_leftleg_color = "",
enemy_rightleg = "\\",
enemy_rightleg_color = "",
enemy_leftarm = "/",
enemy_leftarm_color = "",
enemy_rightarm = "\\",
enemy_rightarm_color = "",
enemy_torso = "|",
enemy_torso_color = "",
}

function color_self_affs()
if snd.have_aff("paralysis") then 
	snd.display.self_paralysis_color = "red" 
elseif snd.have_aff("paresis") then 
	snd.display.self_paralysis_color = "yellow" 
else
	snd.display.self_paralysis_color = "white"
end

if snd.have_aff("asthma") then 
	snd.display.self_asthma_color = "red" 
else
	snd.display.self_asthma_color = "white"
end

if snd.have_aff("slickness") then 
	snd.display.self_slickness_color = "red" 
else
	snd.display.self_slickness_color = "white"
end

if snd.have_aff("anorexia") then 
	snd.display.self_anorexia_color = "red" 
else
	snd.display.self_anorexia_color = "white"
end

local pseudo_check = false
for _, v in ipairs(snd.entangleaffs) do
	if snd.have_aff(v) then
		pseudo_check = true
		break
	end
end

if snd.have_aff("prone") then 
	snd.display.self_prone_color = "red" 
elseif pseudo_check then
	snd.display.self_prone_color = "yellow" 
else
	snd.display.self_prone_color = "white"
end

mystatus:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_paralysis_color.."\"&gt;"..snd.display.self_paralysis.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.self_asthma_color.."\"&gt;"..snd.display.self_asthma.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.self_slickness_color.."\"&gt;"..snd.display.self_slickness.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.self_anorexia_color.."\"&gt;"..snd.display.self_anorexia.."&lt;/span&gt;"..
												"&lt;/center&gt;&lt;center&gt;"..
												"&lt;span style=\"color:"..snd.display.self_prone_color.."\"&gt;"..snd.display.self_prone.."&lt;/span&gt;".."&lt;/center&gt;")
												
end

function color_enemy_affs()
if snd.checkAff("paralysis") then 
	snd.display.enemy_paralysis_color = "red" 
elseif snd.checkAff("paresis") then 
	snd.display.enemy_paralysis_color = "yellow" 
else
	snd.display.enemy_paralysis_color = "white"
end

if snd.checkAff("asthma") then 
	snd.display.enemy_asthma_color = "red" 
else
	snd.display.enemy_asthma_color = "white"
end

if snd.checkAff("slickness") then 
	snd.display.enemy_slickness_color = "red" 
else
	snd.display.enemy_slickness_color = "white"
end

if snd.checkAff("anorexia") then 
	snd.display.enemy_anorexia_color = "red" 
else
	snd.display.enemy_anorexia_color = "white"
end

local pseudo_check = false
for _, v in ipairs(snd.entangleaffs) do
	if snd.checkAff(v) then
		pseudo_check = true
		break
	end
end

if snd.checkAff("fallen") then 
	snd.display.enemy_prone_color = "red" 
elseif pseudo_check then
	snd.display.enemy_prone_color = "yellow" 
else
	snd.display.enemy_prone_color = "white"
end


estatus:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_paralysis_color.."\"&gt;"..snd.display.enemy_paralysis.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_asthma_color.."\"&gt;"..snd.display.enemy_asthma.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_slickness_color.."\"&gt;"..snd.display.enemy_slickness.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_anorexia_color.."\"&gt;"..snd.display.enemy_anorexia.."&lt;/span&gt;"..
												"&lt;/center&gt;&lt;center&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_prone_color.."\"&gt;"..snd.display.enemy_prone.."&lt;/span&gt;".."&lt;/center&gt;")
												
end

function color_enemy_limbs()

--consider using different symbols for the bruising levels
if snd.limb_status["head"] == "mangled" then 
	snd.display.enemy_head_color = "red" 
elseif snd.limb_status["head"] == "damaged" then 
	snd.display.enemy_head_color = "gold" 
else
	snd.display.enemy_head_color = "white"
end

if snd.limb_status["left leg"] == "mangled" then 
	snd.display.enemy_leftleg_color = "red" 
elseif snd.limb_status["left leg"] == "damaged" then 
	snd.display.enemy_leftleg_color = "gold" 
elseif snd.checkAff("left_leg_broken") then
	snd.display.enemy_leftleg_color = "green" 
else
	snd.display.enemy_leftleg_color = "white"
end

if snd.limb_status["right leg"] == "mangled" then 
	snd.display.enemy_rightleg_color = "red" 
elseif snd.limb_status["right leg"] == "damaged" then 
	snd.display.enemy_rightleg_color = "gold" 
elseif snd.checkAff("right_leg_broken") then
	snd.display.enemy_rightleg_color = "green" 
else
	snd.display.enemy_rightleg_color = "white"
end

if snd.limb_status["left arm"] == "mangled" then 
	snd.display.enemy_leftarm_color = "red" 
elseif snd.limb_status["left arm"] == "damaged" then 
	snd.display.enemy_leftarm_color = "gold" 
elseif snd.checkAff("left_arm_broken") then
	snd.display.enemy_leftarm_color = "green" 
else
	snd.display.enemy_leftarm_color = "white"
end

if snd.limb_status["right arm"] == "mangled" then 
	snd.display.enemy_rightarm_color = "red" 
elseif snd.limb_status["right arm"] == "damaged" then 
	snd.display.enemy_rightarm_color = "gold" 
elseif snd.checkAff("right_arm_broken") then
	snd.display.enemy_rightarm_color = "green" 
else
	snd.display.enemy_rightarm_color = "white"
end

if snd.limb_status["torso"] == "mangled" then 
	snd.display.enemy_torso_color = "red" 
elseif snd.limb_status["torso"] == "damaged" then 
	snd.display.enemy_torso_color = "gold" 
else
	snd.display.enemy_torso_color = "white"
end 
elimbs:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_head_color.."\"&gt;"..snd.display.enemy_head.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_leftarm_color.."\"&gt;"..snd.display.enemy_leftarm.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.enemy_torso_color.."\"&gt;"..snd.display.enemy_torso.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.enemy_rightarm_color.."\"&gt;"..snd.display.enemy_rightarm.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_leftleg_color.."\"&gt;"..snd.display.enemy_leftleg.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.enemy_rightleg_color.."\"&gt;"..snd.display.enemy_rightleg.."&lt;/span&gt;".."&lt;/center&gt;"	
				)
end

function color_self_limbs()

--consider using different symbols for the bruising levels
if snd.afflictions.aff_torso_mangled.state == "afflicted" then 
	snd.display.self_torso_color = "red" 
elseif snd.afflictions.aff_torso_damaged.state == "afflicted" then 
	snd.display.self_torso_color = "gold" 
else
	snd.display.self_leftleg_color = "white"
end

if snd.afflictions.aff_left_leg_mangled.state == "afflicted" then 
	snd.display.self_leftleg_color = "red" 
elseif snd.afflictions.aff_left_leg_damaged.state == "afflicted" then 
	snd.display.self_leftleg_color = "gold" 
elseif snd.afflictions.aff_left_leg_broken.state == "afflicted" then
	snd.display.self_leftleg_color = "green" 
else
	snd.display.self_leftleg_color = "white"
end

if snd.afflictions.aff_right_leg_mangled.state == "afflicted" then 
	snd.display.self_rightleg_color = "red" 
elseif snd.afflictions.aff_right_leg_damaged.state == "afflicted" then 
	snd.display.self_rightleg_color = "gold" 
elseif snd.afflictions.aff_right_leg_broken.state == "afflicted" then
	snd.display.self_rightleg_color = "green" 
else
	snd.display.self_rightleg_color = "white"
end

if snd.afflictions.aff_left_arm_mangled.state == "afflicted" then 
	snd.display.self_leftarm_color = "red" 
elseif snd.afflictions.aff_left_arm_damaged.state == "afflicted" then 
	snd.display.self_leftarm_color = "gold" 
elseif snd.afflictions.aff_left_arm_broken.state == "afflicted" then
	snd.display.self_leftarm_color = "green" 
else
	snd.display.self_leftarm_color = "white"
end

if snd.afflictions.aff_right_arm_mangled.state == "afflicted" then 
	snd.display.self_rightarm_color = "red" 
elseif snd.afflictions.aff_right_arm_damaged.state == "afflicted" then 
	snd.display.self_rightarm_color = "gold" 
elseif snd.afflictions.aff_right_arm_broken.state == "afflicted" then
	snd.display.self_rightarm_color = "green" 
else
	snd.display.self_rightarm_color = "white"
end

if snd.afflictions.aff_head_mangled.state == "afflicted" then 
	snd.display.self_head_color = "red" 
elseif snd.afflictions.aff_head_damaged.state == "afflicted" then 
	snd.display.self_head_color = "gold" 
else
	snd.display.self_head_color = "white"
end

mylimbs:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_head_color.."\"&gt;"..snd.display.self_head.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_leftarm_color.."\"&gt;"..snd.display.self_leftarm.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.self_torso_color.."\"&gt;"..snd.display.self_torso.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.self_rightarm_color.."\"&gt;"..snd.display.self_rightarm.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_leftleg_color.."\"&gt;"..snd.display.self_leftleg.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.self_rightleg_color.."\"&gt;"..snd.display.self_rightleg.."&lt;/span&gt;".."&lt;/center&gt;"	
				)
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Aff displays</name>
							<packageName></packageName>
							<script>function display_my_affs()
	
	local self_display_table = {}
	local tally_check = snd.aff_tally()
	local aff_check = ""
  if tally_check &gt; 0 then
		for aff in pairs(snd.afflictions) do
  		if snd.have_aff(aff) then
				aff_check = aff
				aff_check = aff_check:gsub("aff_", "")
				aff_check = aff_check:gsub("_", " ")
				aff_check = aff_check:gsub("left", "L")
				aff_check = aff_check:gsub("right", "R")
				if snd.afflictions[aff]["cures"]["herb"] ~= nil or 
        snd.afflictions[aff]["cures"]["salve"] ~= nil or 
        snd.afflictions[aff]["cures"]["smoke"] ~= nil then
     			table.insert(self_display_table, "&lt;center&gt;"..aff_check.."&lt;/center&gt;")
				end
			end
		end

    myaffs:echo(table.concat(self_display_table))
  else
 		myaffs:echo("&lt;center&gt;my affs&lt;/center&gt;")
	end
	color_self_affs()
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Right</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>map window</name>
							<packageName></packageName>
							<script>  mapper = Geyser.Mapper:new({
  name = "mapper",
  x = 0, y = "50%",
  width = "100%", height = "50%",
  }, rightContainer);
</script>
							<eventHandlerList />
						</Script>
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Chat</name>
							<packageName></packageName>
							<script></script>
							<eventHandlerList />
							<ScriptGroup isActive="yes" isFolder="yes">
								<name>YATCOCONFIG</name>
								<packageName></packageName>
								<script>demonnic = demonnic or {}
demonnic.chat = demonnic.chat or {}
demonnic.chat.config = demonnic.chat.config or {}</script>
								<eventHandlerList />
								<Script isActive="yes" isFolder="no">
									<name>Configuration Options</name>
									<packageName></packageName>
									<script>--[[
This is where all of the configuration options can be set. 
Anything I've put in this script object can be changed, but please do pay attention to what you're doing.
If you change one of the values to something it shouldn't be, you could break it. 
]]

--This is where you tell it to use tabbed chat.
  demonnic.chat.use = true
--[[
This is where you put what container to put the tabbed chat stuff into. Make it
equal to the actual container object you want it in, or false for none. Defaults to false
Which is to say if you want to put the tabbed chat stuff into a container made using 
uiRight = Geyser.Container:new()

you would put

demonnic.chat.useContainer = uiRight

and if you don't want it in a container you would put

demonnic.chat.useContainer = false
]]

demonnic.chat.useContainer = false

--[[
The timestamp option is set here.
Set to false if you do not want any timestamps displayed for chat.
If you do want it displayed, set to the string for the format you wish. 
see http://wiki.mudlet.org/w/Manual:Lua_Functions#getTime for information
how to format the string
]]
--demonnic.chat.config.timestamp = "HH:mm:ss"
demonnic.chat.config.timestamp = false

--[[ Should we use our own colors for the timestamp?
Set to true if you want to specify foreground and background colors
for the timestamp.
Set to false if you want the timestamps background and foreground
colors to match that of the mud output.
]]
demonnic.chat.config.timestampCustomColor = false
--[[
and what foreground color? You can either use one of the 'named' colors
(see http://wiki.mudlet.org/images/c/c3/ShowColors.png for available colors)
demonnic.chat.config.timestampFG = "slate_grey"

Or you can use a table of R,G,B values. 
demonnic.chat.config.timestampFG = {
  255,
    0,
    0,
}
then the foreground for the timestamp would be 255 read, 100 green, and 0 blue
]]
demonnic.chat.config.timestampFG = "red"

--and background? Same rules as for the foreground above
demonnic.chat.config.timestampBG = "blue"

--[[
This is where you say what corner of the screen you want the tabbed chat on
Valid settings are "topright", "topleft", "bottomright", "bottomleft"
]]--
demonnic.chat.config.location = "topright"

--[[
This is a table of channels you would like.
AKA the place you tell the script what tabs you want.
Each entry must be a string. The defaults should be a pretty effective guide.
]]

demonnic.chat.config.channels = {
  "All",
	"Tells",
	"Local",
	"Web",
  "City",
  "Guild",
  "Clans",
	"Order",
  "Misc",
}


--Set this to the name of the channel you want to have everything sent to. 
--Per the default, this would be the "All" channel. If you have a different name for it:
--
--demonnic.chat.config.Alltab = "Bucket"  
--
--And if you don't want it turned on at all:
--
--demonnic.chat.config.Alltab = false

demonnic.chat.config.Alltab = "All"

--Set this to the name of the channel you want to display your map. Set to "" if you
--don't want to display the map in your YATCO tabs
demonnic.chat.config.Maptab = ""


---------------------------------------------------------------------------------
--                                                                             --
--The infamous blinking stuff!!!                                               --
--                                                                             --
---------------------------------------------------------------------------------

--[[
Do you want tabs to blink when you get new messages, until you click on the tab?
True if yes, false if no.
]]
demonnic.chat.config.blink = true

--How long (in seconds) between blinks? For example, 1 would mean a 1 second pause in between blinks.
demonnic.chat.config.blinkTime = 3

--Blink if the bucket tab ("All" by default, but configured above) is in focus?
demonnic.chat.config.blinkFromAll = false




--Font size for the chat messages

demonnic.chat.config.fontSize = 9

--[[
Should we preserve the formatting of the text. 
Or should we set the background of it to match the window color?
Set this to false if you want the background for all chat to match the background of the window.
Useful if you change the background from black, and don't like the way the pasted chat makes blocks in it
]]

demonnic.chat.config.preserveBackground = false

--[[
Gag the chat lines in the main window?
defaults to false, set to true if you want to gag.
]]

demonnic.chat.config.gag = false

--[[
Number of lines of chat visible at once. 
Will determine how tall the window for the chats is.
]]

local x, y = getMainWindowSize()
demonnic.chat.config.lines = ((y/2) / 17)

--[[
Number of characters to wrap the chatlines at.
This will also determine how wide the chat windows are.
]]

demonnic.chat.config.width = 55

--[[
Set the color for the active tab. R,G,B format.
The default here is a brightish green
]]

demonnic.chat.config.activeColors = {
  r = 0,
  g = 180,
  b = 0,
}

--[[
Set the color for the inactive tab. R,G,B format.
The default here is a drab grey
]]

demonnic.chat.config.inactiveColors = {
  r = 60,
  g = 60,
  b = 60,
}

--[[
Set the color for the chat window itself. R,G,B format.
Defaulted to the black of my twisted hardened soul. Or something.
]]

demonnic.chat.config.windowColors = {
  r = 0,
  g = 0,
  b = 0,
}

--[[
Set the color for the text on the active tab. Uses color names.
Set the default to purple. So the tab you're looking at, by default will be purple on bright green. 
Did I mention I'm a bit colorblind?
]]

demonnic.chat.config.activeTabText = "purple"

--[[
Set the color for the text on the inactive tabs. Uses color names.
Defaulted this to white. So the tabs you're not looking at will be white text on boring grey background.
]]

demonnic.chat.config.inactiveTabText = "white"

--[[
have to make sure a currentTab is set... 
so we'll use the one for the bucket, or the first one in the channels table
Or, you know... what it's currently set to, if it's already set.
]]
demonnic.chat.currentTab = demonnic.chat.currentTab or demonnic.chat.config.Alltab or demonnic.chat.config.channels[1]
</script>
									<eventHandlerList />
								</Script>
							</ScriptGroup>
							<ScriptGroup isActive="yes" isFolder="yes">
								<name>Shared</name>
								<packageName></packageName>
								<script>--Bootstrapping variables/etc. Don't touch this unless you really know what you're doing

--I mean it. I'll point. AND laugh. loudly. 
demonnic = demonnic or {}
demonnic.config = demonnic.config or {}
demonnic.balances = demonnic.balances or {}
demonnic.balances.balance = demonnic.balances.balance or 1
demonnic.balances.equilibrium = demonnic.balances.equilibrium or 1
demonnic.debug = demonnic.debug or {}
demonnic.debug.active = demonnic.debug.active or nil
demonnic.debug.categories = demonnic.debug.categories or { }


function demonnic:echo(msg)
 cecho(string.format("\n&lt;blue&gt;(&lt;green&gt;Demonnic&lt;blue&gt;):&lt;white&gt; %s", msg))
end</script>
								<eventHandlerList />
								<Script isActive="yes" isFolder="no">
									<name>Debugging</name>
									<packageName></packageName>
									<script>--Adds debugging functionality 

function demonnic:Debug(category,debugData)
   if category then
      if table.contains(demonnic.debug.categories, category) then
         if type(debugData) == "table" then
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt;")
            display(debugData)
         elseif type(debugData) == "string" or type(debugData) == "number" then
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. debugData .. "\n" )
         else
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. tostring(debugData) .. "\n" )
         end
      end
   else
      if type(debugData) == "table" then
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt;")
         display(debugData)
      elseif type(debugData) == "string" or type(debugData) == "number" then
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. debugData)
      else
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. tostring(debugData))
      end
   end
end

function demonnic:printDebug(category, debugData)
   if not demonnic.debug.active then return end
   demonnic:Debug(category, debugData)
end

function demonnic:toggleDebug()
   if demonnic.debug.active then demonnic.debug.active = nil
   else demonnic.debug.active = true
   end
   demonnic:echo("Debugging is currently " .. (( demonnic.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;"))
end

function demonnic:watchCategory( category )
   if table.contains(demonnic.debug.categories, category) then
      for i,v in ipairs(demonnic.debug.categories) do
         if v == category then
            table.remove(demonnic.debug.categories, i)
         end
      end
      demonnic:echo("No longer watching the '&lt;red&gt;"..category.."&lt;white&gt;' category.") 
   else
      table.insert(demonnic.debug.categories, category)
      demonnic:echo("Now watching the '&lt;red&gt;"..category.."&lt;white&gt;' category.")
   end
   demonnic:echo("Debugging is currently " .. (( demonnic.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;"))
end

function demonnic:listCategories()
   if #demonnic.debug.categories &gt; 0 then
      demonnic:echo("You are currently watching the following categories:\n" .. table.concat(demonnic.debug.categories,", ") )
   else
      demonnic:echo("You are not watching any debugs.")
   end
end
</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>Geyser Additions</name>
									<packageName></packageName>
									<script>function Geyser.MiniConsole:clear()
   clearWindow(self.name)
end

function Geyser.MiniConsole:append()
  appendBuffer(self.name)
end</script>
									<eventHandlerList />
								</Script>
							</ScriptGroup>
							<ScriptGroup isActive="yes" isFolder="yes">
								<name>Tabbed Chat</name>
								<packageName></packageName>
								<script>--Do not remove the following lines. Or change them.
demonnic = demonnic or {}
demonnic.chat = demonnic.chat or {}
demonnic.chat.tabsToBlink = demonnic.chat.tabsToBlink or {}
demonnic.chat.tabs = demonnic.chat.tabs or {}
demonnic.chat.windows = demonnic.chat.windows or {}
if not demonnic.chat.config then
  cecho("&lt;red:white&gt;YOU DO NOT HAVE THE YATCO CONFIG PACKAGE IN PLACE. THINGS WILL NOT WORK AS EXPECTED\n\n")
  demonnic.chat.error = "NO CONFIG"
end</script>
								<eventHandlerList />
								<Script isActive="yes" isFolder="no">
									<name>Code</name>
									<packageName></packageName>
									<script>--[[
If the label callbacks ever decide to start taking a function which is part of a table, 0then this will change.
Or if it's modified to take actual functions. Anonymouse function clickcallback would be awfully nice.
]]

function demonnicChatSwitch(chat)
  local r = demonnic.chat.config.inactiveColors.r
  local g = demonnic.chat.config.inactiveColors.g
  local b = demonnic.chat.config.inactiveColors.b
  local newr = demonnic.chat.config.activeColors.r
  local newg = demonnic.chat.config.activeColors.g
  local newb = demonnic.chat.config.activeColors.b
  local oldchat = demonnic.chat.currentTab
  if demonnic.chat.currentTab ~= chat then
    demonnic.chat.windows[oldchat]:hide()
    demonnic.chat.tabs[oldchat]:setColor(r,g,b)
    demonnic.chat.tabs[oldchat]:echo(oldchat, demonnic.chat.config.inactiveTabText, "c")
    if demonnic.chat.config.blink and demonnic.chat.tabsToBlink[chat] then
      demonnic.chat.tabsToBlink[chat] = nil
    end
    if demonnic.chat.config.blink and chat == demonnic.chat.config.Alltab then
      demonnic.chat.tabsToBlink = {}
    end
  end
  demonnic.chat.tabs[chat]:setColor(newr,newg,newb)
  demonnic.chat.tabs[chat]:echo(chat, demonnic.chat.config.activeTabText, "c")
  demonnic.chat.windows[chat]:show()
  demonnic.chat.currentTab = chat  
end

function demonnic.chat:resetUI()
  demonnic.chat.container = demonnic.chat.useContainer or Geyser.Container:new(demonnic.chat[demonnic.chat.config.location]())
  demonnic.chat.tabBox = Geyser.HBox:new({
    x=0,
    y=0,
    width = "100%",
    height = "25px",
    name = "DemonChatTabs",
  },demonnic.chat.container)

end

function demonnic.chat:create()
  --reset the UI
  demonnic.chat:resetUI()
  --Set some variables locally to increase readability
  local r = demonnic.chat.config.inactiveColors.r
  local g = demonnic.chat.config.inactiveColors.g
  local b = demonnic.chat.config.inactiveColors.b
  local winr = demonnic.chat.config.windowColors.r
  local wing = demonnic.chat.config.windowColors.g
  local winb = demonnic.chat.config.windowColors.b

  --iterate the table of channels and create some windows and tabs
  for i,tab in ipairs(demonnic.chat.config.channels) do
    demonnic.chat.tabs[tab] = Geyser.Label:new({
      name=string.format("tab%s", tab),
    }, demonnic.chat.tabBox)
    demonnic.chat.tabs[tab]:echo(tab, demonnic.chat.config.inactiveTabText, "c")
    demonnic.chat.tabs[tab]:setColor(r,g,b)
    demonnic.chat.tabs[tab]:setClickCallback("demonnicChatSwitch", tab)
    demonnic.chat.windows[tab] = Geyser.MiniConsole:new({
--      fontSize = demonnic.chat.config.fontSize,
      x = 0,
      y = 25,
      height = "100%",
      width = "100%",
      name = string.format("win%s", tab),
    }, demonnic.chat.container)
    demonnic.chat.windows[tab]:setFontSize(demonnic.chat.config.fontSize)
    demonnic.chat.windows[tab]:setColor(winr,wing,winb)
    demonnic.chat.windows[tab]:setWrap(demonnic.chat.config.width)
    demonnic.chat.windows[tab]:hide()
  end
  if demonnic.chat.config.Maptab and demonnic.chat.config.Maptab ~= "" then
    demonnic.chat.mapWindow = Geyser.Mapper:new({
      x = 15,
      y = 0,
      height = "100%",
      width = "100%",
    }, demonnic.chat.windows[demonnic.chat.config.Maptab])
    demonnic.chat.windows[demonnic.chat.config.Maptab]:hide()
  end
  local showme = demonnic.chat.config.Alltab or demonnic.chat.config.channels[1]
  demonnicChatSwitch(showme)
  --start the blink timers, if enabled
  if demonnic.chat.config.blink and not demonnic.chat.blinkTimerOn then
    demonnic.chat:blink()
  end
end

function demonnic.chat:append(chat)

  local r = demonnic.chat.config.windowColors.r
  local g = demonnic.chat.config.windowColors.g
  local b = demonnic.chat.config.windowColors.b
  selectCurrentLine()
  local ofr,ofg,ofb = getFgColor()
  local obr,obg,obb = getBgColor()
  if demonnic.chat.config.preserveBackground then
    setBgColor(r,g,b)
  end
  copy()
  if demonnic.chat.config.timestamp then
    local timestamp = getTime(true, demonnic.chat.config.timestamp)
    local tsfg = {}
    local tsbg = {}
    local colorLeader = ""
    if demonnic.chat.config.timestampCustomColor then
      if type(demonnic.chat.config.timestampFG) == "string" then
        tsfg = color_table[demonnic.chat.config.timestampFG]
      else
        tsfg = demonnic.chat.config.timestampFG
      end
      if type(demonnic.chat.config.timestampBG) == "string" then
        tsbg = color_table[demonnic.chat.config.timestampBG]
      else
        tsbg = demonnic.chat.config.timestampBG
      end
      colorLeader = string.format("&lt;%s,%s,%s:%s,%s,%s&gt;",tsfg[1],tsfg[2],tsfg[3],tsbg[1],tsbg[2],tsbg[3])
    else
      colorLeader = string.format("&lt;%s,%s,%s:%s,%s,%s&gt;",ofr,ofg,ofb,obr,obg,obb)
    end
    local fullstamp = string.format("%s%s",colorLeader,timestamp)
      demonnic.chat.windows[chat]:decho(fullstamp)
      demonnic.chat.windows[chat]:echo(" ")
      if demonnic.chat.config.Alltab then 
        demonnic.chat.windows[demonnic.chat.config.Alltab]:decho(fullstamp)
        demonnic.chat.windows[demonnic.chat.config.Alltab]:echo(" ")
      end
  end
  demonnic.chat.windows[chat]:append()
  if demonnic.chat.config.gag then 
    deleteLine() 
    tempLineTrigger(1,1, [[if isPrompt() then deleteLine() end]])
  end
  if demonnic.chat.config.Alltab then appendBuffer(string.format("win%s", demonnic.chat.config.Alltab)) end
  if demonnic.chat.config.blink and chat ~= demonnic.chat.currentTab then 
    if (demonnic.chat.config.Alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end



function demonnic.chat:blink()
  if demonnic.chat.blinkID then killTimer(demonnic.chat.blinkID) end
  if not demonnic.chat.config.blink then 
    demonnic.chat.blinkTimerOn = false
    return 
  end
  if not demonnic.chat.container.hidden then
    for tab,_ in pairs(demonnic.chat.tabsToBlink) do
      demonnic.chat.tabs[tab]:flash()
    end
  end
  demonnic.chat.blinkID = tempTimer(demonnic.chat.config.blinkTime, function () demonnic.chat:blink() end)
end

function demonnic.chat:topright()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=string.format("-%sc",demonnic.chat.config.width + 2),
    y=0,
    width= "-1px",
    height=string.format("%ic", demonnic.chat.config.lines + 1),
  }
end

function demonnic.chat:topleft()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=0,
    y=0,
    width=string.format("%sc",demonnic.chat.config.width),
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:bottomright()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=string.format("-%sc",demonnic.chat.config.width + 2),
    y=string.format("-%sc",demonnic.chat.config.lines + 2),
    width="-15px",
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:bottomleft()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=0,
    y=string.format("-%sc",demonnic.chat.config.lines + 2),
    width=string.format("%sc",demonnic.chat.config.width),
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>demonnicOnStart</name>
									<packageName></packageName>
									<script>function demonnicOnStart()
  if demonnic.chat.use then
    demonnic.chat:create()
  end
end</script>
									<eventHandlerList>
										<string>sysLoadEvent</string>
									</eventHandlerList>
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>echo functions</name>
									<packageName></packageName>
									<script>
function demonnic.chat:cecho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  cecho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    cecho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:decho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  decho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    decho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:hecho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  hecho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    hecho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:echo(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  echo(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    echo(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>demonnicOnInstall</name>
									<packageName></packageName>
									<script>function demonnicOnInstall(_, package)
  if package:find("YATCO") then
  	demonnicOnStart()
  end
end</script>
									<eventHandlerList>
										<string>sysInstall</string>
									</eventHandlerList>
								</Script>
							</ScriptGroup>
						</ScriptGroup>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Updating functions</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>echoing</name>
							<packageName></packageName>
							<script>
function snd.set_vitals()
 local class = snd.assumed_class or gmcp.Char.Status.class
 local string = "&lt;center&gt;"..gmcp.Char.Status.name.."&lt;/center&gt;&lt;center&gt;"..class.."&lt;/center&gt;"
 if snd.gui.enabled then 
  vitals:echo(string)
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Toggles</name>
							<packageName></packageName>
							<script>function snd.updateToggles()

  toggles:clear()
  toggles2:clear()
  
  local tgs = {"attacking", "bashing", "fasthunt", "questing",  "dispersing"}
  
  for tog in pairs(tgs) do
    if snd.toggles[tgs[tog]] then
      if tgs[tog] == "dispersing" then
        if snd.disperse == "callers" then
    			toggles:cecho("\n&lt;yellow&gt;dispersing")
    		elseif snd.disperse == "all" then
    			toggles:cecho("\n&lt;green&gt;dispersing")
        else
          toggles:cecho("\n&lt;red&gt;dispersing")
        end
      else
        toggles:cecho("\n&lt;green&gt;" .. tgs[tog])
      end
    else
      toggles:cecho("\n&lt;red&gt;" .. tgs[tog])
    end
  end
  
  tgs = {"affcalling", "calling", "listening", "chameleon"}
  
  for tog in pairs(tgs) do
    if snd.toggles[tgs[tog]] then
      toggles2:cecho("\n&lt;green&gt;" .. tgs[tog])
    else
      toggles2:cecho("\n&lt;red&gt;" .. tgs[tog])
    end
  end
  
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Aetolia Exploration</name>
					<packageName>Aetolia Exploration</packageName>
					<script></script>
					<eventHandlerList />
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Exploration</name>
						<packageName></packageName>
						<script>aatlas = aatlas or {}

function aatlas.echo(text)
  cecho("\n&lt;pale_turquoise&gt;[&lt;medium_aquamarine&gt;atlas&lt;pale_turquoise&gt;]: &lt;LightSeaGreen&gt;"..text)
end</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Save/Load</name>
							<packageName></packageName>
							<script>function aatlas.default()
  if not aatlas.explored then
    aatlas.explored = {}
    aatlas.echo("Atlas details not found. Starting from scratch!")
  end
  aatlas.save()
end

function aatlas.load()
	if aatlas.explored then
		return 
	end

	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
  local atlasLoad = getMudletHomeDir()..separator.."aetoliaAtlas"

	if not io.exists(atlasLoad) then
		return
	end
  aatlas.explored = {}
	table.load(atlasLoad, aatlas.explored)
	aatlas.echo("Loaded atlas details in successfully.")
  
	aatlas.save()
end

function aatlas.save()
	if not aatlas.explored then
		return false 
	end

	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
  local atlasSave = getMudletHomeDir()..separator.."aetoliaAtlas"
  
	table.save(atlasSave, aatlas.explored)
end



registerAnonymousEventHandler("sysDisconnectionEvent", "aatlas.save", true)
registerAnonymousEventHandler("sysLoadEvent", "aatlas.load")</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Exploration Functions</name>
							<packageName></packageName>
							<script>function aatlas.autoSurvey()
  if not gmcp or not gmcp.Room or not gmcp.Room.Info.area then return end
  if not aatlas.explored then return end
  
  local x,z = gmcp.Room.Info.area, getEpoch()
  if string.find(x, "unstable section") then x = x:gsub("an unstable section of ", "") end
  
  if not aatlas.explored[x] and not surveyAttempt then
    send("survey",false)
    surveyAttempt = tempTimer(1, [[surveyAttempt = nil]])
  elseif aatlas.explored[x] then
    if aatlas.explored[x].per &lt; 95 and (aatlas.dayDiff(x) &gt;= 7) and not surveyAttempt then
      send("survey",false)
      surveyAttempt = tempTimer(1, [[surveyAttempt = nil]])    
    end
  end
end

function aatlas.clean()
  local x
  for area, details in pairs(aatlas.explored) do
    if string.find(area, "an unstable section of ") then
      x = area:gsub("an unstable section of ", "")
      if aatlas.explored[x] then
        if details.per &gt; aatlas.explored[x].per then
          aatlas.explored[x].per = details.per 
        end
      else
        aatlas.explored[x] = mmp.deepcopy(aatlas.explored[area])
      end
      aatlas.explored[area] = nil
      aatlas.echo("Cleaned area: "..area..".")
    end
  end
end

function aatlas.dayDiff(area)
  if not aatlas.explored[area] then return end

  local c,t = aatlas.explored[area].checked, getEpoch()
  local diff = (t-c)
  if diff &lt; 86400 then
    return 0
  else
    local days = 0
    while diff &gt; 86400 do
      diff = diff - 86400
      days = days + 1
    end
    if days &gt; 9 then days = 9 end
    return days
  end
end

function aatlas.getColour(area)
  local x = aatlas.explored[area].per 
  if x == 100 then
    return "azure"
  elseif x &gt;= 95 then
    return "midnight_blue"
  elseif x &gt;= 75 then
    return "cornflower_blue"
  elseif x &gt;= 50 then
    return "MediumSlateBlue"
  elseif x &gt;= 25 then
    return "SteelBlue"
  else
    return "LightBlue"
  end 
end

function aatlas.output()
  aatlas.echo("Displaying areas we have explored:\n")
  local toolong = {}
  
  local count, str = 0, ""
  local c, t, s
  for area, details in spairs(aatlas.explored) do
    c = aatlas.getColour(area); t = aatlas.dayDiff(area); s = (3-string.len(details.per))
    str = "["..string.rep(" ",s)..details.per.."% / "..t.."] "..area:title()

    if string.len(str) &gt; 43 then
      table.insert(toolong, "&lt;GreenYellow&gt;[&lt;"..c.."&gt;"..string.rep(" ",s)..details.per.."% &lt;ForestGreen&gt;/ &lt;goldenrod&gt;"..t.."&lt;GreenYellow&gt;] &lt;sienna&gt;"..area:title()..string.rep(" ", 45-string.len(str)))
    else
      count = count + 1
      if (count-1)%2 == 0 then
        echo("\n ")
      end    
      cecho("&lt;GreenYellow&gt;[&lt;"..c.."&gt;"..string.rep(" ",s)..details.per.."% &lt;ForestGreen&gt;/ &lt;goldenrod&gt;"..t.."&lt;GreenYellow&gt;] &lt;sienna&gt;"..area:title()..string.rep(" ", 45-string.len(str)))
    end
  end
  if #toolong &gt;= 1 then
    for _, e in pairs(toolong) do
      cecho("\n "..e)
    end
  end
  cecho("\n\n&lt;blue&gt;"..string.rep("-",90).."\n")
  send(" ",false)
end

function aatlas.update(num, area, time)
  if string.find(area, "unstable section") then area = area:gsub("an unstable section of ", "") end

  if aatlas.explored[area] then
    if aatlas.explored[area].per &lt; num then
      aatlas.echo("We've explored more of "..area.."! - Previous percentage was: "..aatlas.explored[area].per.."%")
      aatlas.explored[area] = {per = num, checked = time}
    end
    aatlas.explored[area].checked = time
  else
    aatlas.explored[area] = {per = num, checked = time}
  end
  aatlas.save()
end

registerAnonymousEventHandler("gmcp.Room", "aatlas.autoSurvey")</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
