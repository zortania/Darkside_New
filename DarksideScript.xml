<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage />
	<TimerPackage />
	<AliasPackage />
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Darkside 5.0</name>
			<packageName>Sunder v4.12</packageName>
			<script></script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Darkside</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Core</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="no" isFolder="no">
						<name>Changes</name>
						<packageName></packageName>
						<script>--v5.0 - Split off of a Separate Shadow version called Darkside (Zortania's Attempt to Separate)

--CHANGELOG OF CHANGES

--5.08
--Starting work on merging more of Mazzsys curing into the system.
--Welt tracking for Zealots.
--Avoidance switching added.
--Updated all limb broken affs to Sunder's new format to match the game better.
--Added in Revenant/Warden defs.
--Added in Revenant aliases converted from Templar ones.
--Updated all writhe affs, too. Might have broken the old Skiva aliases.
--Indorani cards updated to match Sunder
--Updated parry/no_parry for new writhe and stuff.
--Updated deffing up to new Sunder version, more slimlined.
--Pondering updating to more slim-lined approach Bulrok/Stine started, script is in but no triggers yet.

--5.07
--Tracking for pendelum on both Zealot side and curing side.
--Updates to firstaidstart alias.
--Fixes for Zealot and limbs aliases added.
--Fixes for Archi/Scio tracking.
--Merged updates from regular sunder into Darkside, including help files/sndb/etc.
--Added more bashing paths to the big/endgame one, including new zones in Albedos.
--Updated Teradrim items from comparing Ehtias' posted information. This includes adding some of his test aliases.
--Shifter trigger updates for better accuracy and expanded functionality.
--Updates for Scio/Archi bashing from Saidenn.
--Class fixes from last two classlead rounds, that can be done in code.
--Started updates for elixir changes, and tracking your affs/cures by coloring instead of the line alone to help against illusions.

--5.06
--Cleaned up monk and zealot stuff
--Included new vivisect alias for Indorani
--Fixed some defs
--Fixed some curative stuff
--Updates to vampire things
--Lots of other just QOL changes I didn't document for myeslf so no clue

--5.05
--New toggle for questing. Queston to turn it on. This is to gate all that auto-questing and stop it from spamming.
--With this toggle comes questing for Aerie, Attica, Arbothia, and a few other places.
--Note that I will never make a full auto-quester/walker. But, having a system that'll allow you to still walk around manually and do the quests? Sure.
--Additional blackout tracking implemeneted.
--Additional curing added, primarily for clotting/standing/waking/endgame/backup sipping/tree from prompt.
--Prompt trigger actually changed to a prompt.
--First 1v1 script coded in for Archivist and tested.
--More tracking aff fixes/additions made.
--Updated Sciomancer code to not consider firefly stuff.
--Put in proper shaderot curing tracking for if darkness in room or not. Need to test.
--Lots of timers put in, just a fyi. Mostly related to advanced curing as I build it out. Yes, they have stupid names. Blame Mazz.
--Fix to mending tracking to hopefully help with shifter tracking.

--5.04b
--Minimal blackout stuff put in for testing. Mostly to build upon.
--Skiva's aliases for shapeshifter in and probably borking but mostly working.
--Golem calling on defup for Teradrim.
--Sciomancer channel shadow on defup.
--Updated Teradrim bashing from Ehtias.
--Some other shit, idk, I lost track this time.

--5.04
--Bunch of teradrim/praenomen fixes were put in and offered up in a 'a' version of 5.03.
--Fixed the 'pth' bugging in pathing (thanks Rebra)
--Took out 'eval' if you're calling and left it just for bashing.
--Added scour to 'pon' toggle for active curing. Teradrim/Carnifex/Praenomen have this setup so far.
--Teradrim routes fixed/tweaked thanks to Ehtias.
--Updated several things in appending chat, including deathsight.
--Auto-web-inviter if you have web calling on. This will invite if unstable and calling and they ask on web on raiders, or just in general if you have calling on and they send you a tell or login.
--Prepping some lines for Archivist absorb. Added new toggle for later (alias is 'sup' for support modes).
--Starting priority curing for several lifer classes. Based off Mazzsys. Needs testing.
--Fixed some shapeshifter defenses.
--Started putting monk triggers in from fallout so we can build monk defenses, but not converted, so folder is disabled. Do not enable folder or be prepared for your system to scream at you.
--New alias for sciomancers - kll. It's 1v1, but needs work.
--New alias for archivists - kll. Needs testing and work, probably best to not touch.
--Still need to work on a lot of things with curing, but panacea tracking may be improved for shaderot at least. 
--Lots of fixes in scio tracking in general.
--Some Teradrim fixes, too. Defenses. Tracking. Etc.
--LDD added for shapeshifter, but also separate ones for 'wolf' and 'bear'. Can build these out as needed.

--5.03
--Updated for when you die to clear out enemy affs/etc. Will test.
--Added alias 'whos' to check for who grouped peoples.
--Alias and all related items converted from 'pt' to 'pth'
--Alias for 'landmarks' is now 'landmarkst'
--Updated Syssin code for multi-aff checking
--Added lipreading to Syssin defense
--Put some stuff in to recognize to not channel any more. See if it helps with things.
--Testing Integration of Swarm Caller (with hybrid switch to snd.spirit if needed). Check out 'Auto Targeting' aliases. Let me know how it works.
--Vermin for Bloodloch, Spinesreach, and Duiran added. Vnums pending for Enorian. Bases which city it chooses from by your personal city.

--5.02
--Added in correction on class abilities for future curing updates.
--Scenting now, instead of reporting to WT, shows you the vnums and room numbers of people. Can click to path to them.
--Coded in counterattack stuff for Tcanna/Drakuum. It wield shield.
--Coded in a channeling feature (thanks Mjoll) to use for a 'pause'.
--Said 'pause' setup for waiting for dwarves to pop back up and go back to attacking them. Hopefully. Go into Maus/Tcanna to test.
--Auto-cham added. Type in 'tcham' to toggle it on. Thanks Zuleika!
--Put in a bunch of color echoes for auto-kill attacks, like reave and noose.
--Put in echo of when you're tumbling, and also should try to auto-cloak when you finish.
--Added echo for Ascendril enrapture, since it's something you could easily cancel someone doing.
--Alias "tr" will turn on rockharvest like before, but you can also then go to Mor and do "rockgo" and do a basic path around to rockharvest. Needs work.
--Bashing split up into Bloodwood, Vortex, Lair, Endgame, High, Medium, Low for your gogo paths.
--Several new paths added for lower level areas.
--Added in auto grab for lure, hammer throw, neckdrag for pvp aliases.
--Fixed Syssin bashing to change newbie toggle from bite to garrote.

--5.01
--Fixed the 'dison' alias to that. Whups.
--Added Khauskin to basher low.
--Updated autofisher alias to unwield all and wield pole, then cast line, for Archivist. Will build gradually for others.
--Archivist has had some route changes.
--Added in 'tumble' stops into Archivist, Teradrim, and Praenomen. These are done in the pvp aliases as they run, rather than off the tumble trigger.
--Updated some Sciomancer stuff to check for skills and whatnot. Just mostly in PvP.
--Loaded a bunch of NPCs into different zone lists.
--Added in reminder that you might want to GTFO with Calamity ticking.
--Added reset/clear of affs of you and enemy on your death. This checks by 'you are dead' message and also by having 0 health via gmcp so it should avoid illusion stuff.
--Maybe, just maybe, put in a fix that if it goes to try to parry and you don't have the skill - it turns parrying off. We'll see how bad this breaks people.
--Put in temporary fix to elevate torso curing if you are getting the message for hypothermia caloric fail.
--Updated keypad 0 for expanding 'aa' alias.

--5.0
--Reverted setup of Sciomancer triggers. Not sure why they were changed as extremely as they were, so didn't want to risk it.
--Fixed several Archivist issues.
--Fixed Carnifex purge and Praenomen purify to properly work and have alias toggle to use.
--Somehow this version was missing Sciomancer bashing. Fixed, and double-checked all bashing to confirm accurate.
--Renamed all Vampire items to Praenomen.
--Experimental vermin basher for Spinesreach added. Alias is 'vermon'. Auto-paths through part of Spinesreach and then goes to sell.
--Added aliases for 'firstaidstart' to setup basic firstaid priorities and 'OOC' to send ooc tells to someone.
--Put disperse toggle back in. 'dison' to turn it on or off, will work off faction member list.
--Replaced keypad keys with my usual, since they give you up/down/etc and make more sense.
--Added in a bunch of movement related triggers and set them up for you to call out info if you have target calling on.
--With the above item, also made it so vamps attempt to auto-feed on someone tumbling and everyone else tries to brazier.
--Fixed trigger where people ask 'where are you x' to check and call out where you are. Needs testing.
--Put in triggers to say who enters the fracture, for those who can sense it.
--Added in 'version' alias to check what version you're on.
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>init</name>
						<packageName></packageName>
						<script>
snd = snd or {}

speedWalkCounter = 0

setConsoleBufferSize("main", 100000, 1000)</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Variables</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>options</name>
							<packageName></packageName>
							<script>snd.sep = snd.sep or "\\" -- important! CONFIG SEPARATOR value
snd.mount = snd.mount or "247249" -- your horse's ID number


snd.faction = "" -- your faction, spirit or shadow
snd.class = snd.class or "" -- your class, used for bashing
snd.limb_dmg_done = 8.41 -- really only for Templars

snd.stats = { 
  xp = 0,
  last_xp = 0,
  max_xp = 0,
}


snd.toggles = {
active = true, -- is the system running?
healing = false, -- keep off, incomplete
parrying = true, -- parry most-damaged limb
defenses = true, -- maintain defenses like cloak and density
calling = false, -- call targets on web chat
listening = false, -- listening to targets on web chat
affcalling = false, -- announce afflictions as you hit
chameleon = false, -- use chameleon to change name on qw/who
standing = true, -- like healing, also incomplete
clotting = true, -- incomplete
bashing = false, -- bashing! Woo!
fasthunt = false, -- automatically clear bashing rooms as you enter
generics = false, -- target by name instead of number while bashing
gathering = true, -- pick up corpses/items/gold while bashing
lighting = true, -- light pipes
attacking = false, -- attacking with a PvP function
balecho = true, -- replace balance lines with shorthand
atkecho = true, -- replace attack lines with shorthand
newbie = false, -- use newbie bashing attacks
cobra = false, -- use of tekura cobra stance
lightning = false, -- use Luminary lightning for bashing
gallop = false, -- use gallop while pathing around
dash = false, -- use of dash while pathing around
rockharvest = false, -- are you harvesting rocks?
disperse = false, -- use disperse to remove writhes from allies
questing = false, -- Used to stop you from randomly questing while doing other stuff
channeling = false, -- this is if you need to use channeling abilities
scepter = false,
torc = false, -- if you have the torc artifact
zeal = false, -- use Templar or Revenant-type zeal for bashing
fitness = true, -- have access to the fitness ability
shrug = false, -- have access to shrug
purge = false, -- have access to Carnifex purge
purify = false, -- have access to Praenomen purify
scour = false, -- have access to Teradrim scour
roe = false, -- harvesting fishroe
support = false, -- if you want to use a support system or not
farm = false, -- farming
goggles = false,
goggle_level = 9,
gauntlet_level = 15,
nontargetgags = true, -- spam filter for removing non-target curing
aegis = false,
auto_reject = false,

}

snd.sep = "##" -- important! CONFIG SEPARATOR value
if gmcp.Char.Name.name == "Rihrin" then
  snd.mount = "93217" -- your horse's ID number
elseif gmcp.Char.Name.name == "Arukne" then
  snd.mount = "332093" -- your horse's ID number
end
snd.version = "5.08"</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>toggles</name>
							<packageName></packageName>
							<script>function snd.toggle(toggle)
  if snd.toggles[toggle] then
    snd.toggles[toggle] = false
    snd.message(string.title(toggle) .. " &lt;red&gt;OFF&lt;white&gt;!", "toggle")
    if toggle == "chameleon" then
      expandAlias("kd chameleon", false)
    end
  else
    snd.toggles[toggle] = true
    snd.message(string.title(toggle) .. " &lt;green&gt;ON&lt;white&gt;!", "toggle")
    if toggle == "chameleon" then
      snd.load_def(snd.class:lower())
      snd.defenses["def_chameleon"].needit = true
    end
  end
  
  snd.updateToggles()

  send(" ")
end

</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>vitals</name>
							<packageName></packageName>
							<script>
snd.balance = {
fitness = true,
shrug = true,
battle = true,
hound = true,
implant = true,
soulpoison = true,
scour = true,
purge = true,		
purify = true,
panacea = true,
cleanse = true,
fool = true,
fury = true,
shadowsphere = true,
chimera = true,
soulmaster = true,
envelop = true,
aeon = true,
mend = true,
expunge = true,
scour = true,
nimbleness = true,
momentum = true,
absorb = true,
earthenwill = true,
morph = true,
furor = true,
vitality = true,
mindcleanse = false,
mindpush = false,
blackout = true,
regenerate = true,
mindcommand = true,
kaistrike = true,
seize = true,
madness = true,
backstab = true,
rage = true,
lycberserk = true,
shed = true,
pendulum = true,
reset_cures = true,

}

snd.waiting = {
balance = false,
equilibrium = false,
rarm = false,
larm = false,
quest_get = false,
lighting = false,
elixir = false,
herb = false,
vial = false,
salve = false,
moss = false,
writhe = false,
concentrate = false,
tree = false,
focus = false,
clot = false,
parry = false,
queue = false,
who_here = false,
hound = false,
scour = false,
purge = false,		
purify = false,
panacea = false,
melting = false,
}

snd.limb_damage = {
head = 0,
torso = 0,
["left arm"] = 0,
["right arm"] = 0,
["left leg"] = 0,
["right leg"] = 0
}

snd.parrying = "none"
snd.pipes_lit = false
snd.emptypipe = "none"
snd.smokedpipe = "none"

snd.sent = {

}

snd.cur = {
herb = "",
drink = "",
--vial = "",
salve = "",
pipe = ""
}

snd.last = {
elixir = "",
herb = "",
smoke = "",
salve = "",
tattoo = "",
focus = "",
tree = ""
}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>misc</name>
							<packageName></packageName>
							<script>
snd.queued = nil
snd.target = "none"
snd.target_gone = false
snd.moving_to = "none"
snd.can_path = true
snd.scented = {}
snd.items = {}
snd.group = {}
snd.wielded = {left =  {name="", id=""}, right = {name="", id=""}}
snd.eld = 0
snd.pathing = false
snd.need_fitness = false
snd.need_aegis = false
snd.shopih = false
snd.toparry = "none"
snd.vermin_on = false
snd.ylem_check = false
snd.bashcounterattack = false

snd.delete_prompt = false

snd.used = {
shield = false,
rebounding = false,
paste = false
}

snd.my = {
area = "",
room = "",
room_name = "",
room_exits = "",
}

snd.new = {
room = false,
area = false
}

snd.pills = {
acuity = "a pill of acuity",
amaurosis = "a pill of amaurosis",
anabiotic = "an anabiotic pill",
antipsychotic = "an antipsychotic pill",
coagulation = "a coagulation pill",
decongestant = "a decongestant pill",
depressant = "a depressant pill",
euphoriant = "an euphoriant pill",
kawhe = "a kawhe pill",
opiate = "an opiate pill",
ototoxin = "an ototoxin pill",
panacea = "a panacea pill",
steroid = "a steroid pill",
stimulant = "a stimulant pill",
thanatonin = "a thanatonin pill",
waterbreathing = "a pill of waterbreathing",
}


snd.balance_pills = {
"antipsychotic",
"amaurosis",
"steroid",
"opiate",
"panacea",
"euphoriant",
"ototoxin",
"decongestant",
"stimulant",
"depressant",
"waterbreathing"
}

snd.outred = {
ash = 0,
bayberry = 0,
bellwort = 0,
bloodroot = 0,
cohosh = 0,
echinacea = 0,
elm = 0,
ginseng = 0,
goldenseal = 0,
hawthorn = 0,
help = 0,
kola = 0,
lobelia = 0,
moss = 0,
pear = 0,
sileris = 0,
skullcap = 0,
valerian = 0,
antipsychotic = 0,
amaurosis = 0,
steroid = 0,
opiate = 0,
panacea = 0,
euphoriant = 0,
ototoxin = 0,
decongestant = 0,
stimulant = 0,
depressant = 0,
waterbreathing = 0,
}

snd.physical_affs = {
"paresis",
"paralysis",
"left_leg_broken",
"left_arm_broken",
"right_leg_broken",
"right_arm_broken",
"physical_disruption",
"heamophilia",
"asthma",
"impairment",
"clumsiness",
"vomiting",
"sensitivity",
"ringing_ears",
"limb_veins",
"lethargy",
"blood_poison",
"blood_curse",
"crippled throat",
"sandrot",
"disfigurement",
"ablaze",
"shivering",
"frozen",
"rend",
"exhausted",
"blisters",
"allergies",
"addiction",
"hypersomnia",
"heartflutter",
"burnt_eyes",
"blurry vision",
"migraine",
"lightwound",
"hypothermia",
"magic_fire",
"whiplash",
"backstrain",
"sore_wrist",
"sore_ankle",
"deadening"
}

snd.mental_affs = {
"egocentric",
"stupidity",
"anorexia",
"epilepsy",
"mirroring",
"mental_disruption",
"peace",
"paranoia",
"hallucinations",
"dizziness",
"indifference",
"berserking",
"pacifism",
"lovers_effect",
"laxity",
"hatred",
"generosity",
"claustrophobia",
"vertigo",
"faintness",
"loneliness",
"agoraphobia",
"masochism",
"recklessness",
"weariness",
"impatience",
"confusion",
"dementia",
"nyctophobia",
"premonition"
}

snd.all_affs =  table.n_union(snd.physical_affs, snd.mental_affs, { "hypochondria", "sight" })

snd.circle_affs = {
"merciful",
"masochism",
"berserking",
"recklessness",
"sealing_circle"
}
snd.triangle_affs = {
"laxity",
"lovers_effect",
"peace",
"magnanimity",
"sealing_triangle"
}
snd.square_affs = {
"dizziness",
"faintness",
"epilepsy",
"shyness",
"sealing_square"
}

snd.weapon_types = {
"club",
"flail",
"mace",
"morningstar",
"greatmaul",
"warhammer",
"handaxe",
"javelin",
"battleaxe",
"broadsword",
"dagger",
"stiletto",
"dirk",
"falchion",
"falcata",
"flyssa",
"longsword",
"rapier",
"sarissa",
"scimitar",
"shortsword",
"spear",
"trident",
"whip",
"bardiche",
"bastard",
"falx",
"glaive",
"halberd",
"scythe",
"codex",
"staff",
"banded",
"buckler",
"cavalry",
"kite",
"tower",
"shield",
}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>landmarks</name>
							<packageName></packageName>
							<script>
snd.landmarks = {
["eno"] = "enorian",
["dui"] = "duiran",
["sp"] = "spinesreach",
["bl"] = "bloodloch",
["es"] = "esterport",
["crack"] = "9193", -- Bloodloch meeting place
["ty"] = "22066", -- templar training room
["rd"] = "64874", -- Rising dawn - hidden room in enorian
["milk"] = "21899", -- Enorian milking room
["bp"] = "9330", -- boiling point, bloodloch training room
["im"] = "52748", -- ironmaw, spinesreach training room
["dir"] = "directory",
["tear"] = "19296", -- tear of lleis
["tw"] = "three widows",
["tw1"] = "23655", -- three widows mine
["tw2"] = "23708", -- three widows cows
["tw3"] = "23137", -- jinjin
["tw4"] = "58744", -- turn in alpacas
["tw5"] = "58740", -- turn in kestrels
["stp"] = "14050", -- spinesreach stipend
["mine"] = "mines", -- in case you typo like me all the time :(
["hlb"] = "50504", -- radek in helba
["hlbp"] = "57744", -- helba pickaxes for sale
["hlbm"] = "23359", -- helba mine
["ag"] = "12335", -- agrasha
["put"] = "28511", -- putoran
["gre"] = "37005", -- grecht with the garden
["oy"] = "11203", -- oysters for bruce
["bruce"] = "11146", -- turn in sapphires
["ann"] = "23246", -- annaria
["tue"] = "23282", -- tuera
["tlm"] = "23236", -- near tellimerius, so darkies don't die
["tlmt"] = "23219", -- turn in tellimerius
["vn"] = "22908", -- venicus
["vn1"] = "22883", -- venicus turnin
["sr"] = "siroccian mountains", -- shorthand
["sr1"] = "58748", -- turn in ores, nuggets, and coal
["sr2"] = "1429", -- if you found the chest with the axe
["ms1"] = "24493",
["ms2"] = "65216",
["ms3"] = "59970",
["ms4"] = "60126",
["ms5"] = "59967",
["ms6"] = "59955",
["or"] = "62642", -- orrery
--hunting grounds
["hg"] = "4746",
["nighteye"] = "9342",
["claw"] = "9341",
["shade"] = "6090",
["staghelm"] = "9348",
["silence"] = "4614",
["rose"] = "9341",
["ivory"] = "6842",
["rowan"] = "6842",
["hgshrine"] = "23489",
}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>class_catch</name>
							<packageName></packageName>
							<script>function class_catch()

  if snd.class == "Luminary" then
    snd.defenses.def_constitution = snd.alternative_class_defenses.Luminary_constitution
  end
  
  if snd.class == "Syssin" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Syssin_shroud
  end
  
  if snd.class == "Carnifex" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Carnifex_shroud
  end
  
  if snd.class == "Warden" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Warden_shroud
    snd.defenses.def_rigor = snd.alternative_class_defenses.Warden_rigor
    snd.defenses.def_fearless = snd.alternative_class_defenses.Warden_fearless
  end
  
  if snd.class == "Sciomancer" then
    snd.defenses.def_rigor = snd.alternative_class_defenses.Sciomancer_rigor
  end
  
   if snd.class == "Indorani" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Indorani_shroud
  end
  
  if snd.class == "Templar" then
   snd.defenses.def_maingauche = snd.alternative_class_defenses.Templar_maingauche
  end
  
  if snd.class == "Revenant" then
   snd.defenses.def_maingauche = snd.alternative_class_defenses.Revenant_maingauche
  end


  if snd.assumed_class ~= nil then return end
	local stats = gmcp.Char.Vitals.charstats
	for i,v in ipairs(stats) do
 		stat = string.split(v, ": ")
 		if stat[1] == "Class" then
   			snd.class = stat[2]
  		end
	end
  
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Vitals</string>
							</eventHandlerList>
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Events</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>gmcp_room</name>
							<packageName></packageName>
							<script>
function gmcp_room()
--Check current room
 if snd.my.room ~= gmcp.Room.Info.num then
--Clear room effects
--Set current room
  snd.my.room = gmcp.Room.Info.num
	snd.my.room_name = gmcp.Room.Info.name
	snd.my.room_exits = {}
	for ex in pairs(gmcp.Room.Info.exits) do
	 table.insert(snd.my.room_exits, ex)
	end
	if snd.gui.enabled then
	 if #snd.my.room_exits &gt;= 1 then
	  exits:echo("&lt;center&gt;"..table.concat(snd.my.room_exits, ", ").."&lt;/center&gt;")
	 else
	  exits:echo("&lt;center&gt;no exits&lt;/center")
	 end
	end
	if snd.toggles.rockharvest then
	 snd.send("harvest rock")
	end
	if snd.toggles.plants then
	 snd.send("plants")
	end
  if snd.bashing_loaded or snd.toggles.rockharvest then
	 snd.vermin = 0
	 if snd.vermin_on then
 		enableTimer("moveroom")
    elseif snd.toggles.rockharvest then
      enableTimer("moveroom2")
   end
--Initiate fasthunt if necessary
   snd.need_loot = false
   snd.new.room = true
	 snd.room_clear = false
	 if (snd.my.room == 56222 or snd.my.room == 55185 or snd.my.room == 55150) and snd.toggles.fasthunt then
	  snd.send("pull lever")
	 end
	 if (snd.my.room == 55187 or snd.my.room == 55184) and snd.toggles.fasthunt then
	  snd.send("pull 2.lever")
	 end
   if snd.my.room == 16941 then
    snd.send("push bookcase")
   end
   if snd.my.room == 16949 then
    snd.send("pull lever")
   end
	end
	if snd.offense_loaded then
	 snd.class_hitting = "none"
	 snd.person_hitting = "none"
	end
	if snd.ylem_loaded then
	 if snd.my.room == tonumber(ylm.next_zone) then
	  snd.send("leylines")
	 end
	end
 end
--Check current area
 if snd.my.area ~= gmcp.Room.Info.area then
  if snd.my.area ~= "Eld" and (not (snd.my.area:find("Vortex") and gmcp.Room.Info.area == "the Shattered Vortex") 
    or  (snd.my.area:find("Vortex") and gmcp.Room.Info.area ~= "the Shattered Vortex")) 
    then --have exceptions for fracture and vortex then 
   snd.my.area = gmcp.Room.Info.area --Initiate new area targets, if necessary
   snd.new.area = true --Set current area
  end
 end
end

</script>
							<eventHandlerList>
								<string>gmcp.Room.Info</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_vitals</name>
							<packageName></packageName>
							<script>function gmcp_vitals()
  -- snd.core()
  if gmcp.Char.Vitals.prone == "1" and snd.not_entangled() and snd.not_aff("paralysis") then
    snd.aff_have("prone")
  else
    snd.aff_remove("prone")
  end
  if snd.can_cast() then
    snd.last_attack = "none"
  end
  if tonumber(gmcp.Char.Vitals.bleeding) &gt;= 200 then
    snd.aff_have("bleeding")
  else
    snd.aff_remove("bleeding")
  end
  hp = (100 * (gmcp.Char.Vitals.hp / gmcp.Char.Vitals.maxhp)) or 100
  if hp &lt; 10 then
    snd.aff_have("health_10")
  elseif hp &lt; 35 then
    snd.aff_remove("health_10")
    snd.aff_have("health_35")
  elseif hp &lt; 55 then
    snd.aff_remove("health_10")
    snd.aff_remove("health_35")
    snd.aff_have("health_55")
  elseif hp &lt; 75 then
    snd.aff_remove("health_10")
    snd.aff_remove("health_35")
    snd.aff_remove("health_55")
    snd.aff_have("health_75")
  else
    snd.aff_remove("health_10")
    snd.aff_remove("health_35")
    snd.aff_remove("health_55")
    snd.aff_remove("health_75")
  end
  if hp &lt; 65 then
    snd.aff_have("health_low")
  else
    snd.aff_remove("health_low")
  end
  mp = 100 * (gmcp.Char.Vitals.mp / gmcp.Char.Vitals.maxmp)
  if mp &lt; 10 then
    snd.aff_have("mana_10")
  elseif mp &lt; 35 then
    snd.aff_remove("mana_10")
    snd.aff_have("mana_35")
  elseif mp &lt; 55 then
    snd.aff_remove("mana_10")
    snd.aff_remove("mana_35")
    snd.aff_have("mana_55")
  elseif mp &lt; 75 then
    snd.aff_remove("mana_10")
    snd.aff_remove("mana_35")
    snd.aff_remove("mana_55")
    snd.aff_have("mana_75")
  else
    snd.aff_remove("mana_10")
    snd.aff_remove("mana_35")
    snd.aff_remove("mana_55")
    snd.aff_remove("mana_75")
  end
  if mp &lt; 65 then
    snd.aff_have("mana_low")
  else
    snd.aff_remove("mana_low")
  end
  hp = 100 * (gmcp.Char.Vitals.hp / gmcp.Char.Vitals.maxhp)
  if snd.toggles.attacking and snd.offense_loaded and snd.check_aegis() and snd.toggles.aegis and (snd.count(snd.people_hitting_me) &gt;= 3 or snd.aff_tally() &gt;= 5 or hp &lt; 50) then
    snd.need_aegis = true
  else
    snd.need_aegis = false
  end
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Vitals</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_items</name>
							<packageName></packageName>
							<script>
function gmcp_items()
 if gmcp.Char.Items.List.location == "room" then
  snd.items = {}
  for _, v in ipairs(gmcp.Char.Items.List.items) do
   if not snd.items[v.name] then snd.items[v.name] = {} end
   table.insert(snd.items[v.name], v.id)
  end
  snd.updateMonolith()
 elseif gmcp.Char.Items.List.location == "inv" then
  snd.wielded = {left =  {name="", id=""}, right = {name="", id=""}}
  if gmcp.Char.Vitals.wield_left ~= "empty" then
    snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
    snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
  end
  if gmcp.Char.Vitals.wield_right ~= "empty" then
    snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
    snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
  end
 end
 snd.updateItems()
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Items.List</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_item_add</name>
							<packageName></packageName>
							<script>
function gmcp_item_add()
 v = gmcp.Char.Items.Add.item
 if gmcp.Char.Items.Add.location == "room" then
  if not snd.items[v.name] then snd.items[v.name] = {} end
  table.insert(snd.items[v.name], v.id)
  snd.updateMonolith()
 elseif gmcp.Char.Items.List ~= nil then
  if gmcp.Char.Vitals.wield_left ~= "empty" then
    snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
    snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
  end
  if gmcp.Char.Vitals.wield_right ~= "empty" then
    snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
    snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
  end
 end
 snd.updateItems()
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Items.Add</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_item_remove</name>
							<packageName></packageName>
							<script>
function gmcp_item_remove()
 v = gmcp.Char.Items.Remove.item
 if gmcp.Char.Items.Remove.location == "room" then
 	if v == snd.bashing.target and snd.toggles.fasthunt then
		snd.runBasher()
	end
	for item in pairs(snd.items) do
	 for id in pairs(snd.items[item]) do
	  if snd.items[item][id] == v.id then
		 table.remove(snd.items[item], id)
		 if #snd.items[item] == 0 then snd.items[item] = nil end
		end
	 end
	end
  snd.updateMonolith()
 elseif gmcp.Char.Items.List ~= nil then
  if gmcp.Char.Items.List.location == "inv" then
    if gmcp.Char.Vitals.wield_left ~= "empty" then
      snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
      snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
    end
    if gmcp.Char.Vitals.wield_right ~= "empty" then
      snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
      snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
    end
  end
 end
 snd.updateItems()
end

</script>
							<eventHandlerList>
								<string>gmcp.Char.Items.Remove</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_item_update</name>
							<packageName></packageName>
							<script>
function gmcp_item_update()
 v = gmcp.Char.Items.Update.item
 --echo(v.name)
 if gmcp.Char.Items.Update.location == "inv" then
    if gmcp.Char.Vitals.wield_left ~= "empty" then
      snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
      snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
    end
    if gmcp.Char.Vitals.wield_left ~= "empty" then
      snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
      snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
    end
	else
	 if snd.wielded.left.id == v.id then
	  snd.wielded.left.name = ""
		snd.wielded.left.id = ""
	 elseif snd.wielded.right.id == v.id then
	  snd.wielded.right.name = ""
		snd.wielded.right.id = ""
	 end
	end
 snd.updateItems()
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Items.Update</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_people_update</name>
							<packageName></packageName>
							<script>function gmcp_people_update()
	snd.players_here = {}
  for k,v in ipairs(gmcp.Room.Players) do
  	if not table.contains(snd.players_here, gmcp.Room.Players[k].name) then
  		table.insert(snd.players_here, gmcp.Room.Players[k].name)
  	end
  end	
	snd.are_we_checking_ql = false
	people_update()
end



</script>
							<eventHandlerList>
								<string>gmcp.Room.Players</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_people_remove</name>
							<packageName></packageName>
							<script>function gmcp_people_remove()

local removePlayer = gmcp.Room.RemovePlayer
  if table.contains(snd.players_here, removePlayer) then
      table.remove(snd.players_here, table.index_of(snd.players_here, removePlayer))   
  end
    people_update()
end


</script>
							<eventHandlerList>
								<string>gmcp.Room.RemovePlayer</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_people_add</name>
							<packageName></packageName>
							<script>function gmcp_people_add()
 
local newPlayers = gmcp.Room.AddPlayer.name
    if not table.contains(snd.players_here, newPlayers) then
        table.insert(snd.players_here, newPlayers)
				people_update()
    end
end</script>
							<eventHandlerList>
								<string>gmcp.Room.AddPlayer</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>updating the boxes for people in room</name>
							<packageName></packageName>
							<script>people_update = function()
	spirit_people:clear()
	shadow_people:clear()
	snd.shadow_targets = {}
	snd.spirit_targets = {}
	
	local spiritpeoplehere = {}
	for name, val in pairs(snd.players_here) do
		if sndNDB.players[val] and sndNDB.players[val].tether == "Spirit" then 
			table.insert(spiritpeoplehere, val) 
		end
	end
	
	local shadowpeoplehere = {}
	for name, val in pairs(snd.players_here) do
		if sndNDB.players[val] and sndNDB.players[val].tether == "Shadow" then
			table.insert(shadowpeoplehere, val) 
		end
	end
	
	if #spiritpeoplehere &gt;= 1 then
   if snd.gui.enabled then
	  spirit_people:echo("&lt;center&gt;"..table.concat(spiritpeoplehere, "&lt;br&gt;").."&lt;/center&gt;")
   end
	 snd.spirit_targets = spiritpeoplehere
  end
	
	if #shadowpeoplehere &gt;= 1 then
	 if snd.gui.enabled then
    shadow_people:echo("&lt;center&gt;"..table.concat(shadowpeoplehere, "&lt;br&gt;").."&lt;/center&gt;")
   end
	 snd.shadow_targets = shadowpeoplehere
  end
	
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>gmcp_communication</name>
							<packageName></packageName>
							<script>function gmcp_communication()
--work in progress

	local channel = gmcp.Comm.Channel.Start
	local talker =  gmcp.Comm.Channel.Text.talker
	local text = gmcp.Comm.Channel.Text.text
  
  --You can choose whether you want it to match only names that are in the database (excluding divine)
  --Or if you want it to just match any one word name. Some NPCs might slip through.
  
 --[[ if sndNDB.players[talker] == nil then
    if not table.isMember(sndNDB.divine, talker) then 
      return 
    end
  end]]
  
  if string.match(talker, "%W") then return end
  
  local mobs_to_ignore = {
    "Nysaac",
    "Tayiv",
    "Huemotl",
    "Damari",
    "Jinjin",
    "Micotetotl",
    "Hob",
    "Saaik",
    "Eddan",
    "Gorwin",
    "Trudd",}
  if table.isMember(mobs_to_ignore, talker) then return end
  
  if channel:find("clt") then channel = "clt" end
  
  snd.who_is_talking = talker or ""
  snd.we_saw_a_thot = false
  snd.last_channel = "Misc"
  snd.channel_ignores = {
	hints = true,
}

--will maybe be useful at some point but not used right now.
--text = string.gsub (text, string.char (27) .. "%[(.-)m", "") &lt;- removes extraneous data from raw gmcp data
--demonnic.chat:append(snd.channel_list[channel], text)

	snd.channel_list = {
	["newbie"] = "Misc",
	["market"] = "Misc",
	["web"] = "Web",
	["ct"] = "City",
	["cnt"] = "City",
  ["emotes"] = "Local",
	["gt"] = "Guild",
	["gts"] = "Guild",
	["clt"] = "Clans",
	["tell"] = "Tells",
	["says"] = "Local",
	["ot"] = "Order",
  ["cot"] = "Order",
  ["congregation"] = "Order",
}

	if channel == "web" and snd.toggles.listening and table.contains(snd.callers, talker) then
      text = text:lower()
			if text:find("target:") and not text:find("list") and not text:find("calling") and not text:find("priority") and not text:find("removed") and not text:find("next") then
				local check = string.match(text, "target: (%w+)%.")
				if check:lower()~= snd.target:lower() then
					expandAlias("t " .. check)
				end
			end
	end
  
  for c, t in pairs(snd.channel_list) do
		if channel == c then
			snd.last_channel = t
			break
		end
	end
  
  if snd.channel_ignores[channel] then return false end
  enableTrigger("generic capture")
  
end</script>
							<eventHandlerList>
								<string>gmcp.Comm.Channel.Start</string>
							</eventHandlerList>
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Misc</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Skill Checking</name>
							<packageName></packageName>
							<script>	snd.skills = snd.skills or {}
  snd.skills.tattoos_on_me = snd.skills.tattoos_on_me or {}
  snd.skills.raceskills = snd.skills.raceskills or {}</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>parse_skillsets</name>
								<packageName></packageName>
								<script>function parse_skillsets()
  local tattoos = {}
  local racials = {}
  if snd.skills.tattoos_on_me ~= nil then
    tattoos = snd.skills.tattoos_on_me
  end
  if snd.skills.raceskills ~= nil then
    racials = snd.skills.raceskills
  end

	snd.skills = {}
  
  snd.skills.raceskills = racials
  snd.skills.tattoos_on_me = tattoos

	for _, set in ipairs(gmcp.Char.Skills.Groups) do
		local skills = string.format("Char.Skills.Get %s", yajl.to_string({ group = set.name }))
		sendGMCP(skills)
	end
	send("\n")
end</script>
								<eventHandlerList>
									<string>gmcp.Char.Skills.Groups</string>
								</eventHandlerList>
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>populate_skills</name>
								<packageName></packageName>
								<script>function populate_skills()

	local group = gmcp.Char.Skills.List.group
	local list = gmcp.Char.Skills.List.list
	local newlist = {}
	for i, val in ipairs(list) do
		list[i] = val:gsub("* ", "")
	end

	if group then
		if not snd.skills then snd.skills = {} end
			snd.skills[group] = list
	end
end</script>
								<eventHandlerList>
									<string>gmcp.Char.Skills.List</string>
								</eventHandlerList>
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>has_skill</name>
								<packageName></packageName>
								<script>function hasSkill(skill, tree)

	if not snd.skills then return false end

  if skill == "Generic" or skill == "Goggle" then return true end
  
  if snd.assumed_class ~= nil then return true end

	if tree then
		if snd.skills[tree:lower()] and table.contains(snd.skills[tree:lower()], skill) then
			return true
		else
			return false
		end
	else
		if table.contains(snd.skills, skill) then
			return true
		else
			return false
		end
	end
end</script>
								<eventHandlerList />
							</Script>
						</ScriptGroup>
						<Script isActive="yes" isFolder="no">
							<name>message</name>
							<packageName></packageName>
							<script>
function snd.message(string, type)
  if snd.gui.enabled then
    if type == "atk" then
      color = "magenta"
    elseif type == "death" then
      color = "red"
    elseif type == "q" then
      color = "brown"
    elseif type == "balance" then
      color = "orange"
    elseif type == "level" then
      color = "yellow"
    elseif type == "reset" then
      color = "brown"
    elseif type == "affliction" then
      color = "blue"
    elseif type == "dendara" then
      color = "green"
    else
      color = "white"
    end
    if type == "toggle" or type == "echo" then
      line = ""
    else
      line = "\n"
    end
    cecho(line.."&lt;green&gt;[&lt;white&gt;SND&lt;green&gt;]&lt;"..color.."&gt; "..string)
    if type == "reset" then
      send(" ")
    end
  end
end

function snd.attack_hit(attack, target)
 snd.message("You: &lt;green&gt;HIT&lt;magenta&gt; "..attack.."&lt;white&gt; "..target.."&lt;magenta&gt;!", "atk")
 snd.reflected = false
end

function snd.got_hit(attack, attacker)
 snd.message(attacker..": &lt;red&gt;HIT&lt;magenta&gt; "..attack.."&lt;white&gt; you&lt;magenta&gt;!", "atk")
end

function snd.third_hit(attack, attacker, target)
 snd.message("&lt;white&gt;"..attacker..": &lt;red&gt;HIT&lt;white&gt; "..attack.." "..target)
end

function snd.target_hit(attack, attacker, target)
 snd.message("&lt;grey&gt;"..attacker..": &lt;red&gt;HIT&lt;grey&gt; "..attack.." "..target)
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>able</name>
							<packageName></packageName>
							<script>
function snd.functional()
 if snd.have_aff("stun") or
    snd.have_aff("petrified") or
    snd.have_aff("asleep") then
    return false
 else
    return true
 end
end

function snd.wielding(weapon)
 if snd.weaponType(snd.wielded.left.name) == weapon or
    snd.weaponType(snd.wielded.right.name) == weapon then
	  return true
 else
    return false
 end
end

function snd.full_balance()
 if gmcp.Char == nil then return false end
 if gmcp.Char.Vitals.balance == "1" and
    gmcp.Char.Vitals.equilibrium == "1" and
    gmcp.Char.Vitals.left_arm == "1" and
    gmcp.Char.Vitals.right_arm == "1" and
    not snd.waiting.balance and
    not snd.waiting.equilibrium then
    return true
 else
    return false
 end
end

function snd.have_aff(affliction)
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 if snd.afflictions[affliction] == nil then
  return false
 end
 if snd.afflictions[affliction].state ~= "healed" then
    return true
 else
    return false
 end
end

function snd.aff_tally()
 count = 0
 for aff in pairs(snd.afflictions) do
  if snd.have_aff(aff) then
	 if snd.afflictions[aff]["cures"]["herb"] ~= nil or snd.afflictions[aff]["cures"]["salve"] ~= nil or snd.afflictions[aff]["cures"]["smoke"] ~= nil then
	  count = count+1
	 end
	end
 end
 return count
end

function snd.not_aff(affliction)
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 if snd.afflictions[affliction].state == "healed" then
    return true
 else
    return false
 end
end

function snd.can_cast()
 if snd.full_balance() and
    snd.functional() and
    snd.not_aff("paralysis") and
		snd.not_aff("pacifism") and
    gmcp.Char.Vitals.prone == "0" then
    return true
 else
    return false
 end
end

function snd.can_tattoo()
 if snd.not_aff("paresis") then
    return true
 else
    return false
 end
end

function snd.can_eat()
 if snd.not_aff("anorexia") and
    snd.not_aff("destroyed_throat") then
    return true
 else
    return false
 end
end

function snd.can_apply()
 if snd.not_aff("slickness") then
    return true
 else
    return false
 end
end

function snd.can_smoke()
 if snd.not_aff("asthma") then
    return true
 else
    return false
 end
end

function snd.can_focus()
 if snd.not_aff("impatience") and
    snd.not_aff("muddled") then
    return true
 else
    return false
 end
end

function snd.can_fitness()
 fitness_classes = {
  "Templar",
	"Carnifex",
	"Monk",
  "Revenant",
  "Warden"
 }
 if snd.not_aff("destroyed_throat") and
    hasSkill("Fitness") and
		snd.balance.fitness and
		table.contains(fitness_classes, snd.class) then
    return true
 else
    return false
 end
end

function snd.can_shrug()
 if snd.class == "Syssin" and
    hasSkill("Shrugging") and
		snd.balance.shrug then
		return true
 else
    return false
 end
end

function snd.can_rage()
 if snd.class == "Templar" or snd.class == "Revenant" and
    hasSkill("Rage") and
		snd.balance.rage then
		return true
 else
    return false
 end
end


function snd.not_entangled()
 if snd.have_aff("writhe_grappled") or
    snd.have_aff("writhe_web") or
    snd.have_aff("writhe_impaled") or
    snd.have_aff("writhe_grappled") then
    return false
 else
    return true
 end
end

function snd.not_slow()
 if snd.not_aff("aeon") then
    return true
 else
    return false
 end
end

function snd.have_slow()
 if snd.have_aff("aeon") then
    return true
 else
    return false
 end
end

function snd.can_arms()
 if snd.have_aff("left_arm_broken") or
    snd.have_aff("left_arm_damaged") or
    snd.have_aff("left_arm_mangled") or
    snd.have_aff("right_arm_broken") or
    snd.have_aff("right_arm_damaged") or
    snd.have_aff("right_arm_mangled") then
    return false
 else
    return true
 end
end

function snd.can_legs()
 if snd.have_aff("left_leg_broken") or
    snd.have_aff("left_leg_damaged") or
    snd.have_aff("left_leg_mangled") or
    snd.have_aff("right_leg_broken") or
    snd.have_aff("right_leg_damaged") or
    snd.have_aff("right_leg_mangled") then
    return false
 else
    return true
 end
end

function snd.can_firstaid()
   if not snd.firstaid_go then
    return false
   else
    return true
   end
end 

function snd.self_prone()
 local prone = false
 local proneaffs = {
  "frozen",
  "indifference",
  "paralysis",
	"writhe_transfix",
	"writhe_web",
  "writhe_feed",
	"writhe_impaled",
	"writhe_thighlock",
	"writhe_armpitlock",
	"writhe_necklock",
  "writhe_ropes",
  "writhe_vines",
  "fallen",
  "asleep",
 }
 if snd.self_checksomeAffs(proneaffs, 1) then prone = true end
 return prone
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>delay</name>
							<packageName></packageName>
							<script>
function snd.delay()
 if snd.not_slow() then
  return 0.5
 else
  return 1
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>queue</name>
							<packageName></packageName>
							<script>
function snd.set_queue(action)
 if snd.can_cast() then
  snd.send_attack(action)
 else
  snd.queued = action
  snd.message("Queued: "..string.upper(action), "q")
  send(" ")
 end
end

function snd.send_attack(action)
 if snd.can_cast() then
  snd.send(action)
  if action == snd.queued then
   snd.queued = nil
  end
 end
end

function snd.send(action)
 send(action, false)
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>movement</name>
							<packageName></packageName>
							<script>
function snd.get_moving()
 hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
 	if snd.can_path and snd.can_cast() and hp &gt;= 85 and snd.moving_to ~= "none" then
		if snd.toggles.gallop and gmcp.Char.Vitals.mounted == "0" then
	 		expandAlias("mnt", false)
	 		snd.send("path find "..snd.moving_to..snd.sep.."path go gallop")
		elseif snd.toggles.dash then
	 		snd.send("path find "..snd.moving_to..snd.sep.."path go dash")
		else
	 		snd.send("path track "..snd.moving_to)
		end
  	snd.moving_to = "none"
		if ylm.active and ylm.next_zone == "city" then
 			ylm.active = false
		end
 	end
end

function snd.parseDir(direction)
 if direction == "north" then
  return "n"
 elseif direction == "south" then
  return "s"
 elseif direction == "east" then
  return "e"
 elseif direction == "west" then
  return "w"
 elseif direction == "northeast" then
  return "ne"
 elseif direction == "northwest" then
  return "nw"
 elseif direction == "southeast" then
  return "se"
 elseif direction == "southwest" then
  return "sw"
 elseif direction == "up" then
  return "up"
 elseif direction == "down" then
  return "d"
 else
  return direction
 end
end

function snd.swapDir(direction)
 directions = {
  north = "south",
	south = "north",
	east = "west",
	west = "east",
	northeast = "southwest",
	southwest = "northeast",
	northwest = "southeast",
	southeast = "northwest",
	["in"] = "out",
	out = "in",
	up = "down",
	down = "up",
 }
 return directions[direction]
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>no target</name>
							<packageName></packageName>
							<script>
function snd.no_target()
 --deleteLine()
 --snd.message("Need new targets!")
 if snd.offense_loaded then
  snd.target_gone = true
  snd.get_new_target()
 end
 if snd.bashing_loaded then
  snd.untarget()
  snd.waiting.balance = false
  snd.waiting.equilibrium = false
  snd.bashing.target_priority = 10000
 end
end

function snd.untarget()
 snd.bashing.engaged = false
 snd.bashing.targeted = false

 snd.last_attack = "none"
 
 if snd.bashing.stopping then
  snd.message("Bashing OFF!")
  snd.toggles.bashing = false
  snd.bashing.stopping = false
 end
 
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>reset me</name>
							<packageName></packageName>
							<script>
function snd.reset_me()
 for i in pairs(snd.afflictions) do
  snd.aff_remove(i)
 end
 for i in pairs(snd.defenses) do
  snd.def_remove(i)
 end
 snd.parrying = "none"
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>misc</name>
							<packageName></packageName>
							<script>
function snd.changeClass()
 if snd.assumed_class ~= nil then
  snd.class = snd.assumed_class
 else
  snd.class = gmcp.Char.Status.class
 end
 snd.city = gmcp.Char.Status.city
 if snd.city == "Spinesreach" or snd.city == "Bloodloch" then
  snd.faction = "shadow"
 elseif snd.city == "Enorian" or snd.city == "Duiran" then
  snd.faction = "spirit"
 end
 if snd.gui.enabled then
  snd.set_vitals()
 end
 expandAlias("ldd none", false)
end

function snd.updateMonolith()
 if snd.items["a monolith sigil"] ~= nil then
  snd.monolith = true
 else
  snd.monolith = false
 end
end

function snd.updateItems()
  if snd.gui.enabled then
    if snd.monolith then
      monolith:setColor("medium_sea_green")
    else
      monolith:setColor("firebrick")
    end
    if snd.wielded.left.name == "" and snd.wielded.right.name == "" then
      wielding:echo("&lt;center&gt;empty hands&lt;/center&gt;")
    else
      local string = ""
      if snd.wielded.left.name ~= "" then
        string = string.."&lt;center&gt;"..snd.weaponType(snd.wielded.left.name).."&lt;/center&gt;"
      end
      if snd.wielded.right.name ~= "" then
        string = string.."\n&lt;center&gt;"..snd.weaponType(snd.wielded.right.name).."&lt;/center&gt;"
      end
      wielding:echo(string)
    end
  end
  if snd.questing_loaded then
    snd.runQuests()
  end
end

function snd.weaponType(weapon)
 for wtype in pairs(snd.weapon_types) do
  if string.find(weapon, snd.weapon_types[wtype]) then
	 return snd.weapon_types[wtype]
	end
 end
 return weapon
end

function snd.skillrankcheck(rank)
	local skillranks = {
	  "Transcendent",
		"Mythical",
		"Fabled",
		"Virtuoso",
		}
		
		for _, v in pairs(skillranks) do
			if string.find(rank, v) then
				return true
			end
		end		
end







</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>random functions</name>
							<packageName></packageName>
							<script>function roundUp(number, places)
   return math.ceil(number * math.pow(10,places)) / math.pow(10,places)
end

function roundDown(number, places)
   return math.floor(number * math.pow(10,places)) / math.pow(10,places)
end

function round(num, idp)
  local mult = 10 ^ (idp or 0)
  return math.floor(num * mult + 0.5) / mult
end

function table.isMember(table, member)
  for i, m in ipairs(table) do
    if m == member then
      return true
    end
  end
  return false
end

function snd.count(table)
  local count = 0
  for i, v in ipairs(table) do
    count = count + 1
  end
  return count
end

function tablelength(T)
  local count = 0
  for _ in pairs(T) do count = count + 1 end
  return count
end

function deleteFull()
  deleteLine()
  tempLineTrigger(1,1,[[if isPrompt() then
    deleteLine()
  end]])
end

function padLeft(s, l, c)
  return string.rep(c or ' ', l - #s) .. s
end

function padRight(s, l, c)
  return s .. string.rep(c or ' ', l - #s)
end

function snd.goggle_update()

  local goggle_defenses = {
    --heatsight = {level = 1, non_goggle_method = {needybalancetake = "heatsight"}, non_goggle_skill = "Heatsight"},
    nightsight = {level = 1, non_goggle = {special = "nightsight"} , non_goggle_skill = "Nightsight"},
    mindseye_tattoo = {level = 2, non_goggle = {balanceequilibrium = "touch allsight"}, non_goggle_skill = "Generic"},
    thirdeye = {level = 2, non_goggle = {eat = "acuity"}, non_goggle_skill = "Generic"},
    overwatch = {level = 5, non_goggle = {""}, non_goggle_skill = "Generic"},
    insight = {level = 8, non_goggle = {needyequilibriumtake = "mind insight on"}, non_goggle_skill = "Insight"},
    lifevision = {level = 9, non_goggle = {balanceequilibriumtake = "lifevision"}, non_goggle_skill = "Lifevision"},
    lipreading = {level = 17, non_goggle = {needybalancetake = "lipread"}, non_goggle_skill = "Lipread"},
}

  for k, v in pairs(goggle_defenses) do
    if tonumber(snd.toggles.goggle_level) &gt;= v.level and snd.toggles.goggles then
      snd.def_options.general_defs["def_"..k] = "on"
      snd.defenses["def_"..k].skill = "Goggle"
      if k:find("tattoo") then
        snd.defenses["def_"..k].balance = {special = "goggle toggle mindseye"}
      else
        snd.defenses["def_"..k].balance = {special = "goggle toggle "..k}
      end
    else
      snd.defenses["def_"..k].balance = goggle_defenses[k].non_goggle
      snd.defenses["def_"..k].skill = goggle_defenses[k].non_goggle_skill
    end
  end
end 

function snd.are_we_with_grouped()
    local good2go = true

    for _, name in pairs(snd.players_here) do
      if not table.contains(snd.group, name) and name ~= gmcp.Char.Status.name then
        good2go = false
      end
    end
    return good2go
 end   
 </script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Who groups parser</name>
							<packageName></packageName>
							<script>function snd.parse_who()
  snd.who_list = {}

  enableTrigger("Who parser")
  send("who")
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Logic</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>core</name>
							<packageName></packageName>
							<script>
function snd.core()
if not snd.channeling then
 if snd.toggles.active then
    if snd.have_aff("asthma") and snd.have_aff("slickness") then
      snd.need_fitness = true
    else
      snd.need_fitness = false
    end
    if snd.toggles.parrying and snd.offense_loaded then
      snd.parry()
    end
    if snd.emptypipe ~= "none" and not snd.waiting.lighting and snd.can_cast() then
      snd.send("outc "..snd.emptypipe..snd.sep.."put "..snd.emptypipe.." in emptypipe")
	    snd.waiting.lighting = true
	    tempTimer(snd.delay(), [[snd.waiting.lighting = false]])
    end
    snd.def_check()
    snd.aff_check()
    if snd.update_priority &gt; 0 then
      if snd.setting_priority == "burnt_skin 1" then
        snd.update_priority = 0
      end
      snd.firstaidresetlistnone()
    end
    if snd.healing_loaded then
      if snd.have_aff("asleep") and snd.toggles.standing then
        snd.send("wake")
      end
    end
    if snd.functional() then
      snd.do_queue()
      snd.do_stuff()
    end
  end
end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>priorities</name>
							<packageName></packageName>
							<script>snd.queue = {}
 
snd.priorities = {
"lighting",
"def_speed",
"aff_prone",
"aff_adder_tarot",
 
"fitness",
"purge",
"purify",
"panacea",
"scour",
"rage",
"aegis",
"reset_cures",
 
"attack",
 
"aff_bleeding",
 
"aff_voyria",

"def_safeguard",
"def_miasma",
"def_warmth",
 
"def_cloak_tattoo",
"def_focalmark",
"aff_health_10",
"aff_health_35",
"aff_health_55",
"aff_health_low",
"aff_health_75",
"aff_mana_10",
"aff_mana_35",
"aff_mana_55",
"aff_mana_low",
"aff_mana_75",
"def_chameleon",
"loot",
"def_gripping",
"def_vigor",
"def_divert_melee",
"def_dodge_melee",
"def_waterwalking",
"def_mindseye_tattoo",
"def_fearless",
"def_fortitude",
"def_ancest_victory",
"def_recklessness",
"def_battleflow",
"def_soul_harvest",
"def_soul_thirst",
"def_displacement",
"def_soul_fortify",
"def_corpus_warding",
"def_ancestral_bolster",
"def_soul_fracture",
"def_invocation",
"def_soul_body",
"def_ancest_blessing_safeguard",
"def_soul_substitute",
"def_intervention",
"def_weathering",
"def_bodyheat",
"def_metabolism",
"def_endurance",
"def_thickhide",
"def_corner",
"def_salivate",
"def_harden",
"def_lightshield",
"def_inspiration",
"def_fireblock",
"def_toughness",
"def_resistance",
"def_warding",
"def_finesse",
"def_weaving",
"def_shadowsight",
"def_ghost",
"def_hiding",
"def_shroud",
"def_shadowslip",
"def_ironskin",
"def_fortify",
"def_countercurrent",		
"def_rigor",		
"def_shadow_engulf",		
"def_shadow_mantle",		
"def_blurring",		
"def_sagacity",
"def_stealth",
"def_roaring",
"def_herculeanrage",
"queue",
"bashing",
"moving",
"def_thirdeye",
"def_blindness",
"def_deafness",
"def_kola",
"def_waterbreathing",
"def_deathsight",
"def_insomnia",
"def_frost",
"def_venom",
"def_levitation",
"def_caloric",
"def_fitness",
"def_fangbarrier",
"def_rebounding",
"def_density",
"def_nightsight",
"def_clarity",
"def_vitality",
"def_kaido_regeneration",
"def_constitution",
"def_split_mind",
"def_immunity",
"def_boosted_regen",
"aff_aeon",
 
"aff_paralysis",
"aff_paresis",
"aff_mirroring",
"aff_crippled_body",
"aff_crippled",
"aff_heartflutter",
"aff_sandrot",
"def_firefly_tattoo",
"aff_shaderot_body",
"aff_shaderot_wither",
"aff_ice_encased",
	
"aff_baldness",
"aff_clumsiness",
"aff_hypochondria",
"aff_weariness",
"aff_asthma",
"aff_sensitivity",
"aff_blood_poison",
"aff_limp_veins",
 
"aff_slickness",
"aff_disfigurement",
"aff_squelched",
"aff_migraine",
 
"aff_self-pity",
"aff_stupidity",
"aff_dizziness",
"aff_shyness",
"aff_epilepsy",
"aff_impatience",
"aff_dissonance",
"aff_infested",
"aff_itchy",
"aff_shaderot_heat",
"aff_shaderot_spirit",
 
"aff_soulfire",
"aff_soulburn",
"aff_body_odor",
"aff_haemophilia",
"aff_mental_disruption",
"aff_physical_disruption",
"aff_allergies",
"aff_vomiting",
"aff_thin_blood",
"aff_rend",
"aff_lethargy",
"aff_ringing_ears",
"aff_addiction",
"aff_exhausted",
 
"aff_hubris",
"aff_pacifism",
"aff_peace",
"aff_lovers_effect",
"aff_superstition",
"aff_generosity",
"aff_justice",
"aff_egocentric",
 
"aff_commitment_fear",
"aff_recklessness",
"aff_masochism",
"aff_agoraphobia",
"aff_loneliness",
"aff_berserking",
"aff_vertigo",
"aff_claustrophobia",
"aff_nyctophobia",
 
"aff_sadness",
"aff_confusion",
"aff_dementia",
"aff_hallucinations",
"aff_paranoia",
"aff_hypersomnia",
"aff_hatred",
"aff_blood_curse",
"aff_blighted",
 
"aff_plodding",
"aff_idiocy",
 
"aff_withering",
"aff_hellsight",
"aff_deadening",
 
"aff_anorexia",
"aff_hypothermia", 
 
"aff_head_mangled",
"aff_head_damaged",
"aff_head_bruised_critical",
"aff_head_bruised_moderate",
"aff_head_bruised",
"aff_destroyed_throat",
"aff_left_arm_amputated",
"aff_left_arm_mangled",
"aff_left_arm_damaged",
"aff_right_arm_amputated",
"aff_right_arm_mangled",
"aff_right_arm_damaged",
"aff_left_arm_broken",
"aff_right_arm_broken",
"aff_left_arm_bruised_critical",
"aff_left_arm_bruised_moderate",
"aff_crushed_elbows",
"aff_left_arm_bruised",
"aff_left_arm_dislocated",
"aff_right_arm_bruised_critical",
"aff_right_arm_bruised_moderate",
"aff_right_arm_bruised",
"aff_right_arm_dislocated",
"aff_broken_arm",
"aff_left_leg_amputated",
"aff_left_leg_mangled",
"aff_left_leg_damaged",
"aff_right_leg_amputated",
"aff_right_leg_mangled",
"aff_right_leg_damaged",
"aff_left_leg_bruised_critical",
"aff_right_leg_bruised_critical",
"aff_left_leg_broken",
"aff_right_leg_broken",
"aff_left_leg_bruised_moderate",
"aff_left_leg_bruised",
"aff_left_leg_dislocated",
"aff_right_leg_bruised_moderate",
"aff_broken_leg",
"aff_right_leg_bruised",
"aff_crushed_kneecaps",
"aff_right_leg_dislocated",
"aff_crushed_chest",
"aff_voidgaze",
"aff_torso_mangled",
"aff_torso_damaged",
"aff_torso_bruised_critical",
"aff_heatspear",
"aff_cracked_ribs",
"aff_torso_bruised_moderate",
"aff_torso_bruised",
"aff_spinal_rip",
"aff_selarnia",
"aff_mauled_face",
"aff_burnt_skin",
"aff_collapsed_lung",
"aff_ablaze",
"aff_crippled_throat",
"aff_throatclaw",
"aff_smashed_throat",
"aff_deepwound",
"aff_lightwound",
"aff_pre_restore_head",
"aff_pre_restore_left_arm",
"aff_pre_restore_left_leg",
"aff_pre_restore_right_arm",
"aff_pre_restore_right_leg",
"aff_pre_restore_torso",
 
"aff_gorged",
"aff_effused_blood",
"aff_indifference",
"aff_stuttering",
"aff_blurry_vision",
"aff_burnt_eyes",
"aff_gloom",
"aff_shaderot_benign",
"aff_frozen",
"aff_shivering",
 
 
"aff_disrupted",
"aff_fear",
"aff_premonition",
"aff_vinethorns",
 
"aff_void",
"aff_weakvoid",
 
"aff_grappled",
"aff_writhe_armpitlock",
"aff_writhe_bind",
"aff_writhe_feed",
"aff_writhe_hoist",
"aff_writhe_impaled",
"aff_writhe_lure",
"aff_writhe_necklock",
"aff_writhe_ropes",
"aff_writhe_tar",
"aff_writhe_thighlock",
"aff_writhe_transfix",
"aff_writhe_vines",
"aff_writhe_web",
"aff_writhe_grappled",
"aff_dazed",
"aff_embedded_axe",
 
"def_maingauche",
"def_pacing",
"def_heatsight",
"def_reveling",
"def_initiative",
"def_rigor",
"def_barkskin",
"def_conceal",
"def_hardiness",
"def_flexibility",
"def_lifesap",
"def_maskedscent",
"def_linked",
"def_oneness",
"def_sublimation",
"def_ameliorate",
"def_catabolism",
"def_blindsense",
"def_greenheart",
"def_endure",
"def_mountaineer",
"def_dustcoat",
"def_resilience",
"def_desolation",
"def_circulation",
"def_potence",
"def_celerity",
"def_lifescent",
"def_lifevision",
"def_veil",
"def_stalk",
"def_concentrate",
"def_entwine",
"def_ricochet",
"def_twinsoul",
"def_earth_resonance",
"def_stonebind",
"def_earthenwill",
"def_erosion",
"def_imbue_stonefury",
"def_sand_swelter",
"def_arcaneskin",
"def_missiles",
"def_firefist",
"def_tempered_body",
"def_swagger",
"def_deflection",
"def_discharge",
"def_resurgence",
"def_haste",
"def_litheness",
"def_disunion",
"def_wrath",
"def_bending",
"def_mindspark",
"def_spiritbond",
"def_protection",
"def_shaman_spiritsight",
"def_soul_spiritsight",
"def_ancest_seance",
"def_lifebloom",
"def_shaman_warding",
"def_insight",
"def_foreststride",
"def_hypersight",
"aff_magic_fire",--pretty sure this doesn't exist but its in afflict list shrug
"def_oath_forestwalker",
"def_oath_tranquility",
"def_oath_shaman",
"def_greenfoot",
"def_nimbleness",
"def_earthenform",
"def_spheres",
"def_brutality",
"def_axe_avert",
"def_axe_obstruct",
"def_axe_repel",
"def_bloodtrails",
"def_phalanx",
"def_potence_strength",
"def_potence_constitution",
"def_potence_intelligence",
"def_potence_dexterity",
"def_stalking",
"def_shadowblow",
"def_blurred",
"def_elusion",
"def_deathlink",
"def_surefooted",
"def_imbue_will",

}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>methods</name>
							<packageName></packageName>
							<script>
snd.method_priority = {
{balance = "special", func = function(current) snd.do_special(current) end},
{balance = "balanceneed", func = function(current) snd.do_balance_need(current) end},
{balance = "equilibriumneed", func = function(current) snd.do_equilibrium_need(current) end},
{balance = "balanceequilibrium", func = function(current) snd.do_balance_equilibrium_need(current) end},

{balance = "reject", func = function(current) snd.do_reject(current) end},
{balance = "concentrate", func = function(current) snd.do_concentrate(current) end},
{balance = "drink", func = function(current) snd.do_drink(current) end},
{balance = "vial", func = function(current) snd.do_vial(current) end},
{balance = "eat", func = function(current) snd.do_eat(current) end},
{balance = "smoke", func = function(current) snd.do_smoke(current) end},
{balance = "herb", func = function(current) snd.do_herb(current) end},
{balance = "salve", func = function(current) snd.do_salve(current) end},
{balance = "elixir", func = function(current) snd.do_elixir(current) end},
{balance = "moss", func = function(current) snd.do_moss(current) end},
{balance = "clot", func = function(current) snd.do_clot(current) end},
{balance = "stand", func = function(current) snd.do_stand(current) end},
{balance = "writhe", func = function(current) snd.do_writhe(current) end},
{balance = "focus", func = function(current) snd.do_focus(current) end},
{balance = "tree", func = function(current) snd.do_tree(current) end},

{balance = "tattoo", func = function(current) snd.do_tattoo(current) end},
{balance = "balancetake", func = function(current) snd.do_balance_take(current) end},
{balance = "equilibriumtake", func = function(current) snd.do_equilibrium_take(current) end},
{balance = "needybalancetake", func = function(current) snd.do_needy_balance_take(current) end},
{balance = "needyequilibriumtake", func = function(current) snd.do_needy_equilibrium_take(current) end},
{balance = "balanceequilibriumtake", func = function(current) snd.do_balance_equilibrium_take(current) end}
}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>queue</name>
							<packageName></packageName>
							<script>
function snd.do_queue()
  snd.queue = {}
  if not snd.channeling then
    if snd.toggles.active then
  if not snd.pipes_lit and snd.toggles.lighting then
   table.insert(snd.queue, "lighting")
  end
  --if snd.healing_loaded and snd.toggles.healing then
  -- for i in pairs(snd.afflictions) do
  --  if snd.afflictions[i].state ~= "healed" then
  --   table.insert(snd.queue, i)
  --  end
  -- end
  --end
  if snd.defenses_loaded and snd.toggles.defenses then
   for k in pairs(snd.defenses) do
    if snd.defenses[k].state == "down" and snd.defenses[k].needit then
			if k == "def_vitality" then
				if snd.balance.vitality then
					table.insert(snd.queue, k)
				end
			elseif (k == "def_shroud" or k == "def_ghost" or k == "def_hiding") then
				if snd.defenses.def_phase.state ~= "deffed" then
					table.insert(snd.queue, k)
				end
			elseif (k == "def_miasma" or k == "def_safeguard" or k == "def_warmth") then
				if not (snd.defenses.def_miasma.state == "deffed" 
				or snd.defenses.def_safeguard.state == "deffed" 
				or snd.defenses.def_warmth.state == "deffed") then 
					table.insert(snd.queue, k)
				end      
			else
	    	table.insert(snd.queue, k)
    	end
		end
   end
  end
      if snd.queued ~= nil then
        table.insert(snd.queue, "queue")
      end
      if snd.update_priority &gt; 0 then
        if snd.setting_priority == "burnt_skin 1" then
          snd.update_priority = 0
        end
        snd.firstaidresetlistnone()
      end
      if snd.bashing_loaded then
        if #snd.gathering &gt;= 1 then
          table.insert(snd.queue, "loot")
        end
        if snd.toggles.bashing and snd.bashing_loaded then
          table.insert(snd.queue, "bashing")
        end
        if snd.moving_to ~= "none" then
          table.insert(snd.queue, "moving")
        end
  	    if snd.need_fitness then
  	      table.insert(snd.queue, "fitness")
  	    end
  	if hasSkill("Purge") and (snd.class == "Carnifex" or snd.class == "Warden") and snd.aff_tally() &gt;= 3 then
  	 table.insert(snd.queue, "purge")
  	end
        if snd.rage_check() then
          table.insert(snd.queue, "rage")
        end
        if snd.need_aegis then
  	      table.insert(snd.queue, "aegis")
  	    end
  	    if hasSkill("Panacea") and snd.class == "Shaman" and snd.aff_tally() &gt;= 3 then
  	      table.insert(snd.queue, "panacea")
  	    end
  	    if hasSkill("Purify") and snd.class == "Praenomen" and snd.aff_tally() &gt;= 3 then
  	      table.insert(snd.queue, "purify")
  	    end
        if snd.toggles.purify and snd.class == "Teradrim" and snd.aff_tally() &gt;= 3 then
  	      table.insert(snd.queue, "scour")
        end
        if snd.toggles.attacking and snd.offense_loaded and snd.defenses.def_manipulation_aegis.state ~= "deffed" then
          table.insert(snd.queue, "attack")
        end
      end
    end
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>stuff</name>
							<packageName></packageName>
							<script>
function snd.do_stuff()
 for _,i in ipairs(snd.priorities) do
  if table.contains(snd.queue, i) then
   if i == "queue" then
    snd.send_attack(snd.queued)
   elseif i == "bashing" then
    snd.bashing_function()
   elseif i == "lighting" then
    snd.do_lighting()
   elseif i == "attack" then
    snd.attack_function()
   elseif i == "loot" then
    snd.do_loot()
   elseif i == "moving" then
    snd.get_moving()
	 elseif i == "fitness" then
	  snd.do_fitness()
		snd.do_shrug()
	 elseif i == "purge" then
	  snd.do_purge()
	 elseif i == "purify" then
	 	snd.do_purify()
	 elseif i == "scour" then
	 	snd.do_scour()
	 elseif i == "aegis" then
	 	snd.do_aegis()
   elseif i == "rage" then
    snd.do_rage()
   elseif i == "panacea" then
    snd.do_panacea()
   elseif i == "reset_cures" then
    if snd.update_priority &gt; 0 then
      if snd.setting_priority == "burnt_skin 1" then
        snd.update_priority = 0
      end
      snd.firstaidresetlistnone()
    end
   else
    for _,z in pairs(snd.method_priority) do
     if snd.afflictions[i] ~= nil then
      if snd.afflictions[i].cures[z.balance] ~= nil then
       z.func(i)
      end
     elseif snd.defenses[i] ~= nil then
      if snd.defenses[i].balance[z.balance] ~= nil then
       z.func(i)
      end
     end
    end
   end
  end
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>lighting</name>
							<packageName></packageName>
							<script>
function snd.do_lighting()
 if snd.can_cast() and (not snd.pipes_lit) and (not snd.waiting.lighting) then
  snd.light_up()
 end
end

function snd.light_up()
 snd.send("light pipes", false)
 snd.waiting.lighting = true
 tempTimer(snd.delay(), [[snd.waiting.lighting = false]])
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Tracking</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Afflictions</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>affliction table</name>
								<packageName></packageName>
								<script>
snd.afflictions = {
aff_health_75 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_health_55 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_health_35 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_health_10 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_mana_75 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_55 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_35 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_35 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_10 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_health_low = {state = "healed", cures = {moss = "send"}, assess = false, timer = createStopWatch()},
aff_mana_low = {state = "healed", cures = {moss = "send"}, assess = false, timer = createStopWatch()},
aff_bleeding = {state = "healed", cures = {clot = "send"}, assess = false, timer = createStopWatch()},

aff_prone = {state = "healed", effect = "cannot move or attack, must STAND", cures = {stand = "send"}, assess = false, timer = createStopWatch()},
aff_asleep = {state = "healed", effect = "cannot do anything other than WAKE", cures = {}, assess = false, timer = createStopWatch()},
aff_stun = {state = "healed", effect = "cannot do anything", cures = {}, assess = false, timer = createStopWatch()},
aff_aeon = {state = "healed", effect = "delays all actions", cures = {smoke = "elm"}, assess = false, timer = createStopWatch()},

aff_paresis = {state = "healed", effect = "prevents tattoos and movement", cures = {herb = "bloodroot"}, assess = false, timer = createStopWatch()},
aff_paralysis = {state = "healed", effect = "prevents attacks, movement, and tattoos", cures = {herb = "bloodroot"}, assess = false, timer = createStopWatch()},
aff_anorexia = {state = "healed", effect = "prevents eating", cures = {tree = "send", salve = "epidermal to torso", focus = "send"}, assess = false, timer = createStopWatch()},
aff_asthma = {state = "healed", effect = "prevents smoking", cures = {tree = "send", herb = "kelp"}, assess = false, timer = createStopWatch()},
aff_slickness = {state = "healed", effect = "prevents applying salves", cures = {tree = "send", smoke = "valerian", herb = "bloodroot"}, assess = false, timer = createStopWatch()},

aff_broken_arm = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_broken_leg = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_adder_tarot = {state = "healed", effect = "", cures = {balanceequilibrium = "rip card from body"}, assess = false, timer = createStopWatch()},

aff_ablaze = {state = "healed", effect = "", cures = {salve = "mending to body", tree = "send"}, assess = false, timer = createStopWatch()},
aff_achromatopsia = {state = "healed", effect = "colors leeched away", cures = {}, assess = false, timer = createStopWatch()},
aff_addiction = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_agoraphobia = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_allergies = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_amplify_asphyxiation = {state = "healed", effect = "more dmg from asphyx source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_blunt = {state = "healed", effect = "more dmg from blunt source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_cold = {state = "healed", effect = "more dmg from cold source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_cutting = {state = "healed", effect = "more dmg from cutting source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_electric = {state = "healed", effect = "more dmg from electric source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_fire = {state = "healed", effect = "more dmg from fire source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_magic = {state = "healed", effect = "more dmg from magic source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_poison = {state = "healed", effect = "more dmg from poison source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_psychic = {state = "healed", effect = "more dmg from psychic source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_shadow = {state = "healed", effect = "more dmg from shadow source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_spirit = {state = "healed", effect = "more dmg from spirit source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_unblockable = {state = "healed", effect = "more dmg from unblockable source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_airwreath = {state = "healed", effect = "dmg over time", cures = {}, assess = false, timer = createStopWatch()},
aff_arrow_wound = {state = "healed", effect = "delayed by stacks of arrows", cures = {}, assess = false, timer = createStopWatch()},
aff_asphyxiation_weakness = {state = "healed", effect = "more dmg from asphyx source", cures = {}, assess = false, timer = createStopWatch()},
aff_attuned = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_backstabbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_backstrain = {state = "healed", effect = "torso dmg on standing", cures = {tree = "send", salve = "soothing to torso"}, assess = false, timer = createStopWatch()},
aff_baldness = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_barbs = {state = "healed", effect = "dmg per stack of barbs", cures = {balanceequilibrium = "pull barbs from body"}, assess = false, timer = createStopWatch()},
aff_battle_hunger = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_berserking = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_blackout = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_blighted = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_blisters = {state = "healed", effect = "poison dmg/bleeding when using bal/eq", cures = {tree = "send", herb = "bloodroot"}, assess = false, timer = createStopWatch()},
aff_blood_curse = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_blood_poison = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_bloodlust = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_blunt_weakness = {state = "healed", effect = "more dmg from blunt source", cures = {}, assess = false, timer = createStopWatch()},
aff_blurry_vision = {state = "healed", effect = "", cures = {salve = "epidermal to body", tree = "send"}, assess = false, timer = createStopWatch()},
aff_body_odor = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_bulimia = {state = "healed", effect = "vomit the next thing you eat", cures = {}, assess = false, timer = createStopWatch()},
aff_burnt_eyes = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_burnt_skin = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_chaos_warp = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_claustrophobia = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_clumsiness = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_cold_weakness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_collapsed_lung = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_commitment_fear = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send"}, assess = false, timer = createStopWatch()},
aff_confusion = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_conviction = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_corsin_weight = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_cracked_ribs = {state = "healed", effect = "", cures = {salve = "mending to torso", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crippled = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crippled_body = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crippled_throat = {state = "healed", effect = "", cures = {salve = "mending to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crushed_chest = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_crushed_elbows = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crushed_kneecaps = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_cutting_weakness = {state = "healed", effect = "more dmg from cuttingsource", cures = {}, assess = false, timer = createStopWatch()},
aff_dazed = {state = "healed", effect = "can't regain balance normally", cures = {balanceequilibrium = "recoup"}, assess = false, timer = createStopWatch()},
aff_deadening = {state = "healed", effect = "", cures = {smoke = "elm", tree = "send"}, assess = false, timer = createStopWatch()},
aff_deepwound = {state = "healed", effect = "makes bleeding more impactful (cant clot immediately)", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_dementia = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_despair = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_destroyed_throat = {state = "healed", effect = "", cures = {salve = "mending to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_direfrost = {state = "healed", effect = "leads to frostbrand", cures = {}, assess = false, timer = createStopWatch()},
aff_disabled = {state = "healed", effect = "divine only? unsure", cures = {}, assess = false, timer = createStopWatch()},
aff_disfigurement = {state = "healed", effect = "", cures = {smoke = "valerian", tree = "send"}, assess = false, timer = createStopWatch()},
aff_disorientated = {state = "healed", effect = "delays cures by 1.5 seconds", cures = {}, assess = false, timer = createStopWatch()},
aff_disrupted = {state = "healed", effect = "", cures = {special = "concentrate"}, assess = false, timer = createStopWatch()},
aff_dissonance = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send"}, assess = false, timer = createStopWatch()},
aff_distortion = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_dizziness = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_effused_blood = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_eldritch_invocation = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_electric_weakness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_emberbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_egocentric = {state = "healed", effect = "can't help others", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_embedded_axe = {state = "healed", effect = "does major limb damage when pulled", cures = {balanceequilibrium = "pull axe from me"}, assess = false, timer = createStopWatch()},
aff_epilepsy = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_exhausted = {state = "healed", effect = "dodge cut in half, slower movement", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_farag_rot = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_faintness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_fear = {state = "healed", effect = "", cures = {special = "compose"}, assess = false, timer = createStopWatch()},
aff_fire_weakness = {state = "healed", effect = "more dmg from fire source", cures = {}, assess = false, timer = createStopWatch()},
aff_flamewreathed_limb = {state = "healed", effect = "extra limb damage if hit by fire spell", cures = {}, assess = false, timer = createStopWatch()},
aff_flared = {state = "healed", effect = "unable to stealth or go incorporeal", cures = {}, assess = false, timer = createStopWatch()},
aff_flash_blindness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_forestbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_frostbrand = {state = "healed", effect = "continually freezes over time", cures = {}, assess = false, timer = createStopWatch()},
aff_frostwreath = {state = "healed", effect = "divine only? unsure", cures = {}, assess = false, timer = createStopWatch()},
aff_frozen = {state = "healed", effect = "", cures = {salve = "caloric to torso", tree = "send"}, assess = false, timer = createStopWatch()},
aff_frozen_feet = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_generosity = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_glasslimb = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_gloom = {state = "healed", effect = "", cures = {salve = "epidermal to head"}, assess = false, timer = createStopWatch()},
aff_gorged = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_haemophilia = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hallucinations = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_halted = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_hatred = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_head_broken = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_head_bruised = {state = "healed", effect = "", cures = {salve = "mending to head"}, assess = false, timer = createStopWatch()},
aff_head_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to head"}, assess = false, timer = createStopWatch()},
aff_head_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending  to head"}, assess = false, timer = createStopWatch()},
aff_head_damaged = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_head_mangled = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_head_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_heartflutter = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hellsight = {state = "healed", effect = "", cures = {smoke = "elm", tree = "send"}, assess = false, timer = createStopWatch()},
aff_heatspear = {state = "healed", effect = "can't cure ablaze", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_hubris = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hypersomnia = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hypertension = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_hypochondria = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hypothermia = {state = "healed", effect = "", cures = {salve = "epidermal to torso", tree = "send"}, assess = false, timer = createStopWatch()},
aff_idiocy = {state = "healed", effect = "", cures = {moss = "send", tree = "send"}, assess = false, timer = createStopWatch()},
aff_impeded = {state = "healed", effect = "10% slower pills, cured by removing gravity", cures = {}, assess = false, timer = createStopWatch()},
aff_impairment = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_plodding = {state = "healed", effect = "", cures = {moss = "send", tree = "send"}, assess = false, timer = createStopWatch()},
aff_ice_encased = {state = "healed", effect = "longer salve bal, extra blunt dmg", cures = {}, assess = false, timer = createStopWatch()},
aff_imbued = {state = "healed", effect = "auto gravity from scio spells", cures = {}, assess = false, timer = createStopWatch()},
aff_impatience = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_indifference = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_infernal_seal = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_infernal_shroud = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_infested = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send"}, assess = false, timer = createStopWatch()},
aff_insomnia = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_itchy = {state = "healed", effect = "tree has to cure this first always", cures = { tree = "send" }, assess = false, timer = createStopWatch()},
aff_intimidated = {state = "healed", effect = "can't heal above 90%", cures = {}, assess = false, timer = createStopWatch()},
aff_justice = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_laxity = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_leeched_aura = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_left_arm_amputated = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_broken = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_left_arm_bruised = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_damaged = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_dislocated = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_mangled = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_left_arm_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_left_leg_amputated = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_broken = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_left_leg_bruised = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_damaged = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_dislocated = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_mangled = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_left_leg_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_lemniscate = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_lethargy = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_lifebane = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_lightwound = {state = "healed", effect = "extra bleeding", cures = {salve = "mending to body"}, assess = false, timer = createStopWatch()},
aff_limp_veins = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_loneliness = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_lovers_effect = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_magic_fire = {state = "healed", effect = "ablaze mask aff", cures = {salve = "mending"}, assess = false, timer = createStopWatch()},
aff_magic_weakness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_magnanimity = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_malevolence = {state = "healed", effect = "destroys shield, extra damage from weather", cures = {}, assess = false, timer = createStopWatch()},
aff_marked  = {state = "healed", effect = "marked by a mage", cures = {}, assess = false, timer = createStopWatch()},
aff_masochism = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_mauled_face = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_mental_disruption = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_mental_fatigue = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_merciful = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_migraine = {state = "healed", effect = "", cures = {smoke = "valerian", tree = "send"}, assess = false, timer = createStopWatch()},
aff_turmoil = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_mind_clamped = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_mirroring = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_mistbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_muddled = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_muscle_spasms = {state = "healed", effect = "chance to apply incorrectly", cures = {tree = "send", salve = "soothing to torso"}, assess = false, timer = createStopWatch()},
aff_mutagen = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_mutation_sickness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_nightmare  = {state = "healed", effect = "???", cures = {}, assess = false, timer = createStopWatch()},
aff_nyctophobia  = {state = "healed", effect = "can't move in to/out of darkness", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_numb_arms = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_numbed_skin = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_oiled = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_omen = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_pacifism = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_paranoia = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_patterns = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_peace = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_penance = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_petrified = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_physical_disruption = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_polymorph = {state = "healed", effect = "divine only? unsure", cures = {}, assess = false, timer = createStopWatch()},
aff_poison_weakness = {state = "healed", effect = "more dmg from poison source", cures = {}, assess = false, timer = createStopWatch()},
aff_pre_restore_head = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_pre_restore_left_arm = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_pre_restore_left_leg = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_pre_restore_right_arm = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_pre_restore_right_leg = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_pre_restore_torso = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_premonition = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_psi_tether = {state = "healed", effect = "hurts you if you walk too far from zealot", cures = {}, assess = false, timer = createStopWatch()},
aff_psychic_weakness = {state = "healed", effect = "more dmg from psychic source", cures = {}, assess = false, timer = createStopWatch()},
aff_punished_arms = {state = "healed", effect = "unable to parry", cures = {}, assess = false, timer = createStopWatch()},
aff_punished_legs = {state = "healed", effect = "movement has 33% chance to fail", cures = {}, assess = false, timer = createStopWatch()},
aff_quicksand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ravaged = {state = "healed", effect = "applying salves hurts you", cures = {}, assess = false, timer = createStopWatch()},
aff_recklessness = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_rend = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_resin_glauxe = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_resonance = {state = "healed", effect = "templar can assess/diagnose you for free", cures = {}, assess = false, timer = createStopWatch()},
aff_right_arm_amputated = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_right_arm_broken = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_right_arm_bruised = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_damaged = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_right_arm_dislocated = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_mangled = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_right_arm_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_right_arm_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_right_leg_amputated = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_right_leg_broken = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_right_leg_bruised = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_damaged = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_right_leg_dislocated = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_mangled = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_right_leg_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_right_leg_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_ringing_ears = {state = "healed", effect = "unable to become deaf until cured", cures = {herb = "lobelia", tree = "send"}, assess = false, timer = createStopWatch()},
aff_ripped_groin = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ripped_spleen = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ripped_throat = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ruptured_eardrum = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sadness = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_salve_seared = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sand_trapped = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sandrot = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_sapped_constitution = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_dexterity = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_intelligence = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_stats = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_strength = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sealing_circle = {state = "healed", effect = "circle affs cant be cured by pill", cures = {}, assess = false, timer = createStopWatch()},
aff_sealing_square = {state = "healed", effect = "square affs cant be cured by pill", cures = {}, assess = false, timer = createStopWatch()},
aff_sealing_triangle = {state = "healed", effect = "triangle affs cant be cured by pill", cures = {}, assess = false, timer = createStopWatch()},
aff_selarnia = {state = "healed", effect = "", cures = {salve = "mending to torso", tree = "send"}, assess = false, timer = createStopWatch()},
["aff_self-pity"] = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send"}, assess = false, timer = createStopWatch()},
aff_seduction = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sensitivity = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_shaderot_benign = {state = "healed", effect = "shaderot1 - no affs", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_shaderot_body = {state = "healed", effect = "shaderot5 - salve recovery doubled", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_shaderot_heat = {state = "healed", effect = "shaderot3 - can't apply caloric", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_shaderot_spirit = {state = "healed", effect = "shaderot2 - shadow damage", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_shaderot_wither = {state = "healed", effect = "shaderot4 - passive lethargy", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_shadow_coat = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_shadow_weakness = {state = "healed", effect = "more dmg from shadow source", cures = {}, assess = false, timer = createStopWatch()},
aff_shadowbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_shadowed = {state = "healed", effect = "gain affs if luminary shine hits you", cures = {}, assess = false, timer = createStopWatch()},
aff_shadowsphere = {state = "healed", effect = "hides scio affs and generally a bad time", cures = {}, assess = false, timer = createStopWatch()},
aff_shivering = {state = "healed", effect = "", cures = {salve = "caloric", tree = "send"}, assess = false, timer = createStopWatch()},
aff_shyness = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_smashed_throat = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_sore_ankle = {state = "healed", effect = "leg dmg on movement", cures = {tree = "send", salve = "soothing to legs"}, assess = false, timer = createStopWatch()},
aff_sore_wrist = {state = "healed", effect = "arm dmg on parry", cures = {tree = "send", salve = "soothing to arms"}, assess = false, timer = createStopWatch()},
aff_soul_disease = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soul_poison = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soulchill = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soulburn = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_soulfire = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_soulpuncture = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soulroot = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_spinal_rip = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_spiritbane = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_spiritbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_spirit_weakness = {state = "healed", effect = "more dmg from spirit source", cures = {}, assess = false, timer = createStopWatch()},
aff_squelched = {state = "healed", effect = "", cures = {smoke = "valerian", tree = "send"}, assess = false, timer = createStopWatch()},
aff_stiffness = {state = "healed", effect = "lower dodge/divert, soothing cured affs can break bones", cures = {tree = "send", salve = "soothing to torso"}, assess = false, timer = createStopWatch()},
aff_stonebrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_stonevice = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_stormtouched = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_stupidity = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_stuttering = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_superstition = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_temptation = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_taunted = {state = "healed", effect = "can only hit who taunted you", cures = {}, assess = false, timer = createStopWatch()},
aff_terror = {state = "healed", effect = "prevents ability to compose", cures = {}, assess = false, timer = createStopWatch()},
aff_thin_blood = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_thorns = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_throatclaw = {state = "healed", effect = "", cures = {salve = "mending to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_throatslice = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_thunderstorm = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_torso_bruised = {state = "healed", effect = "", cures = {salve = "mending to torso"}, assess = false, timer = createStopWatch()},
aff_torso_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to torso"}, assess = false, timer = createStopWatch()},
aff_torso_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to torso"}, assess = false, timer = createStopWatch()},
aff_torso_damaged = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_torso_mangled = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_torso_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_tree_seared = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_trick_flame = {state = "healed", effect = "doubles ablaze stacks, easier re-application of stacks", cures = {}, assess = false, timer = createStopWatch()},
aff_troubled_breathing = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_vertigo = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_vinethorns = {state = "healed", effect = "", cures = {special = "pull thorn from body"}, assess = false, timer = createStopWatch()},
aff_vitalbane = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_void = {state = "healed", effect = "", cures = {salve = "caloric"}, assess = false, timer = createStopWatch()},
aff_voidgaze = {state = "healed", effect = "gives stacking affs while active", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_voidtrapped = {state = "healed", effect = "stuck prone for a bit via voidgaze", cures = {}, assess = false, timer = createStopWatch()},
aff_vomiting = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_voyria = {state = "healed", effect = "", cures = {vial = "immunity"}, assess = false, timer = createStopWatch()},
aff_weak_grip = {state = "healed", effect = "bypass fist sigil", cures = {tree = "send", salve = "soothing to arms"}, assess = false, timer = createStopWatch()},
aff_weakvoid = {state = "healed", effect = "", cures = {salve = "caloric"}, assess = false, timer = createStopWatch()},
aff_whiplash = {state = "healed", effect = "head dmg", cures = {tree = "send", salve = "soothing to legs"}, assess = false, timer = createStopWatch()},
aff_weariness = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_windbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_withering = {state = "healed", effect = "", cures = {smoke = "elm", tree = "send"}, assess = false, timer = createStopWatch()},
aff_wraith = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_writhe_armpitlock = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_bind = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_feed = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_hoist = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_impaled = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_lure = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_necklock = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_ropes = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_gunk = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_thighlock = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_transfix = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_vines = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_web = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_grappled = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_stasis = {state = "healed", effect = "can't move, can attack", cures = {}, assess = false, timer = createStopWatch()},

}</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>give/take afflictions</name>
								<packageName></packageName>
								<script>
function snd.aff_check()
 for i in pairs(snd.afflictions) do
  if snd.afflictions[i].cures.writhe ~= nil or string.find(i, "damaged") or string.find(i, "mangled") or string.find(i, "pre_restore") or i == "aff_concussion" then
   if getStopWatchTime(snd.afflictions[i].timer) &gt; 7 and snd.afflictions[i].state == "waiting" then
    snd.aff_timeout(i)
   end
  elseif snd.afflictions[i].state == "waiting" and getStopWatchTime(snd.afflictions[i].timer) &gt; 2 then
   snd.aff_timeout(i)
  end
 end
end

function snd.aff_timeout(affliction)
 snd.afflictions[affliction].state = "afflicted"
 snd.message("[Resetting: &lt;white&gt;"..affliction.."&lt;brown&gt;]", "reset")
end

function snd.aff_gain(affliction)
 if affliction == "aeon" then
  if snd.defenses.def_speed.state == "deffed" then
   snd.def_take("speed")
   return
  end
 end
--  deleteLine()
 snd.message("You: &lt;red&gt;GOT&lt;blue&gt; "..affliction..".", "affliction")
 snd.aff_have(affliction)
 if affliction == "amnesia" then
  for i = 1,5 do
   snd.send("stand")
  end
 elseif affliction == "paresis" then
  if snd.paraTimer then killTimer(snd.paraTimer) end
  snd.paraTimer = tempTimer(3, [[if snd.have_aff("paresis") then snd.send("firstaid elevate paresis") end]])
 elseif affliction == "allergies" then
  if snd.allergyTimer then killTimer(snd.allergyTimer) end
	snd.allergyTimer = tempTimer(18, [[if snd.have_aff("allergies") then snd.send("firstaid elevate allergies") end]])
 end
 if snd.gui.enabled then 
  display_my_affs()
  color_self_limbs()
 end
end

function snd.aff_have(affliction)
 if snd.class_hitting == "archivist" then
	if table.contains(snd.circle_affs, affliction) then
	 hit_aff = false
	 for aff in pairs(snd.circle_affs) do
	  if not hit_aff then
		 snd.send("firstaid predict "..snd.circle_affs[aff])
		 if snd.circle_affs[aff] == affliction then
		  hit_aff = true
		 end
		end
	 end
	end
	if table.contains(snd.square_affs, affliction) then
	 hit_aff = false
	 for aff in pairs(snd.square_affs) do
	  if not hit_aff then
		 snd.send("firstaid predict "..snd.square_affs[aff])
		 if snd.square_affs[aff] == affliction then
		  hit_aff = true
		 end
		end
	 end
	end
	if table.contains(snd.triangle_affs, affliction) then
	 hit_aff = false
	 for aff in pairs(snd.triangle_affs) do
	  if not hit_aff then
		 snd.send("firstaid predict "..snd.triangle_affs[aff])
		 if snd.triangle_affs[aff] == affliction then
		  hit_aff = true
		 end
		end
	 end
	end
 end
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 if snd.afflictions[affliction].state == "healed" then
  snd.afflictions[affliction].state = "afflicted"
	if snd.gui.enabled then 
    display_my_affs()
	  color_self_limbs()
  end
 end
end

function snd.aff_diag(affliction)
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 snd.aff_have(affliction)
 if snd.gui.enabled then 
  deleteLine()
 end
 if snd.afflictions[affliction].cures.herb ~= nil then
  if string.find(snd.afflictions[affliction].cures.herb, "eat") then
   snd.aff_color = "&lt;red&gt;"
  elseif string.find(snd.afflictions[affliction].cures.herb, "smoke") then
   snd.aff_color = "&lt;blue&gt;"
  end
 elseif snd.afflictions[affliction].cures.salve ~= nil then
   snd.aff_color = "&lt;green&gt;"
 end
 snd.aff_color = "&lt;yellow&gt;"
 cecho(snd.aff_color.."\n"..affliction)
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 echo(" "..snd.afflictions[affliction].effect)
 if snd.gui.enabled then 
  display_my_affs()
  color_self_limbs()
 end
end

function snd.aff_cure(affliction)
 snd.message("You: &lt;green&gt;HEAL&lt;blue&gt; "..affliction..".", "affliction")
 snd.aff_remove(affliction)
 if snd.gui.enabled then 
  display_my_affs()
  color_self_limbs()
 end
end

function snd.aff_remove(affliction)
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 if snd.afflictions[affliction].cures.writhe ~= nil then
--  snd.status.writhing = false
 end
 snd.afflictions[affliction].state = "healed"
 if snd.gui.enabled then 
  display_my_affs()
  color_self_limbs()
 end
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>clear</name>
								<packageName></packageName>
								<script>
function snd.clear_afflictions(type)
 snd.clear_affs = {}
 for i in pairs(snd.afflictions) do
  if snd.afflictions[i].cures[type] ~= nil then
   if snd.afflictions[i].cures[type] == snd.last[type] and snd.afflictions[i].state ~= "healed" then
    table.insert(snd.clear_affs, i)
    snd.aff_remove(i)
   end
  end
 end
 if #snd.clear_affs &gt; 0 then
  cecho("&lt;red&gt;\n[Removing:")
  for k in pairs(snd.clear_affs) do
   if snd.clear_affs[k] then
    cecho("&lt;blue&gt; "..snd.clear_affs[k])
   end
  end
  cecho("&lt;red&gt;]")
  send(" ")
 end
end
</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Timer</name>
								<packageName></packageName>
								<script>timer = timer or {}
timer.values = timer.values or {}

-- Usage:
--
-- timer:init() - create master timer
-- timer:get(xname) - return current value or nil
-- timer:set(xname, xduration) -- set timer 'xname' to value 'xduration' (duration=nil removes timer)
-- timer:custom - if created, this script will be called every second after all timers are updated
--
-- If a function exists matching the name of the timer, it will be called every second with arguments (functionname, timervalue).
-- When time remaining reaches 0, the timer will then be removed.


function timer:init()
	if exists("MudTimer", "timer") == 0 then
		permTimer("MudTimer", "", 1, [[timer:script()]] )
	end

	enableTimer("MudTimer")
end

function timer:set(xname, xduration)
	self.values[xname] = xduration
end

function timer:get(xname)
	if self.values[xname] == nil then
		return(nil)
	end

	return (self.values[xname])
end

function timer:script()
	-- decrement all timers
	for k, v in pairs(timer.values) do
		timer.values[k] = timer.values[k]-1

		-- Timer has reached 0 (expired)
		if timer.values[k] &lt; 1 and k ~= "" then
			timer.values[k] = nil	

			if _G[k] ~= nil then
				-- call timer with 0 (expired)
				_G[k](k, 0)
			end
		else
			-- have timer called every second with "fname, time" as argument
			if _G[k] ~= nil then
				_G[k](k, timer.values[k])
			end
		end
	end

	if timer.custom ~= nil then
		timer:custom()
	end
end</script>
								<eventHandlerList />
							</Script>
						</ScriptGroup>
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Defenses</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>defense table</name>
								<packageName></packageName>
								<script>
snd.defenses = {
-- Probably handled by firstaid anyways, otherwise auto assume people have plants/vials. 
def_deafness = {defense = "deafness", type = "normal", effect = "Protects from sonic effects", balance = {herb = "ototoxin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_blindness = {defense = "blindness", type = "normal", effect = "Protects from visual effects", balance = {herb = "amaurosis"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_waterbreathing = {defense = "waterbreathing", type = "normal", effect = "Prevents choking underwater", balance = {herb = "waterbreathing"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_kola = {defense = "instawake", type = "normal", effect = "Removes the WAKE delay", balance = {eat = "stimulant"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_insomnia = {defense = "insomnia", type = "normal", effect = "Prevents sleep effects", balance = {eat = "kawhepill"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_deathsight = {defense = "deathsight", type = "normal", effect = "Reports player deaths", balance = {eat = "thanatonin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_thirdeye = {defense = "thirdeye", type = "normal", effect = "Adds locations to WHO", balance = {eat = "acuity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_venom = {defense = "venom_resistance", type = "normal", effect = "Protects against poison damage", balance = {vial = "antivenin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_levitation = {defense = "levitation", type = "normal", effect = "Protects against falling effects", balance = {vial = "levitation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_frost = {defense = "temperance", type = "normal", effect = "Protects against fire damage", balance = {vial = "frost"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_speed = {defense = "speed", type = "green", effect = "Protects against aeon affliction", balance = {drink = "speed"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_caloric = {defense = "insulation", type = "normal", effect = "Protects against cold damage", balance = {salve = "caloric"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_vigor = {defense = "vigor", type = "normal", effect = "Critical hits heal you", balance = {drink = "vigor"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_fangbarrier = {defense = "fangbarrier", type = "normal", effect = "Protects against syssin bites", balance = {special = "apply paste"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_rebounding = {defense = "rebounding", type = "blue", effect = "Causes weapon attacks to backfire", balance = {smoke = "reishi"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--Generic skills or occurs in more than one
def_nightsight = {defense = "nightsight", type = "normal", effect = "Allows glancing at night", balance = {special = "nightsight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Nightsight"},
def_fitness = {defense = "fitness", type = "normal", effect = "Protects from asthma", balance = {balanceequilibriumtake = "fitness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fitness"},
def_divert_melee = {defense = "divert_melee", type = "normal", effect = "Protects from melee damage", balance = {special = "divert melee"}, state = "down", needit = false, timer = createStopWatch(), skill = "Jerk"},
def_dodge_melee = {defense = "dodge_melee", type = "normal", effect = "Protects from melee damage", balance = {special = "dodge melee"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sidestep"},
def_clarity = {defense = "clarity", type = "normal", effect = "Protects against some mental affs", balance = {needyequilibriumtake = "clarity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Clarity"},
def_shroud = { }, -- handled and set per class elsewhere
def_manipulation_aegis = {defense = "manipulation_aegis", type = "normal", effect = "cheap prism", balance = {needyequilibriumtake = "manipulate pylon for aegis"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_gripping = {defense = "gripping", type = "normal", effect = "Prevents disarming", balance = {balanceequilibrium = "grip"}, state = "down", needit = false, timer = createStopWatch(), skill = "Gripping"},
def_starburst = {defense = "starburst", type = "blue", effect = "Instant revival on death", balance = {tattoo = "starburst"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_density = {defense = "density", type = "red", effect = "Resists forced movement", balance = {salve = "mass"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_waterwalking = {defense = "waterwalking", type = "normal", effect = "Allows you to walk on water", balance = {special = "touch waterwalking"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_overwatch = {defense = "overwatch", type = "normal", effect = "See items in the air/trees", balance = {special = "goggle toggle overwatch"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_divine_speed = {defense = "divine_speed", type = "normal", effect = "Faster movement through Divine Grace", balance = {balanceequilibriumtake = "grace"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_hypersight = {defense = "hypersight", type = "normal", effect = "see through shenanigans", balance = {needyequilibriumtake = "hypersight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_nimbleness = {defense = "nimbleness", type = "normal", effect = "dodge some attacks", balance = {needyequilibriumtake = "nimbleness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Nimbleness"},

--Ylem
def_amber_orb = {defense= "amber_orb", type = "ansi_light_yellow", effect = "5% increase in experience", balance = {special = "activate amber orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_green_orb = {defense= "green_orb", type = "lawn_green", effect = "25% increase in vigour healing", balance = {special = "activate green orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_crimson_orb = {defense= "crimson_orb", type = "firebrick", effect = "more damage to and less from denizens", balance = {special = "activate crimson orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_cerulean_orb = {defense= "cerulean_orb", type = "ansiLightBlue", effect = "protection from damage", balance = {special = "activate cerulean orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_white_orb = {defense= "white_orb", type = "ghost_white", effect = "increased ylem gain from eld", balance = {special = "activate white orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},


--Generic endgame
def_safeguard = {defense = "safeguard", type = "normal", effect = "Increased resistances", balance = {special = "safeguard"}, state = "down", needit = false, timer = createStopWatch(), skill = "Instill"},
def_warmth = {defense = "warmth", type = "normal", effect = "Increased resistances", balance = {special = "warmth"}, state = "down", needit = false, timer = createStopWatch(), skill = "Instill"},
def_miasma = {defense = "miasma", type = "normal", effect = "Increased resistances", balance = {special = "miasma"}, state = "down", needit = false, timer = createStopWatch(), skill = "Instill"},

--Raceskills or tattoos
def_pacing = {defense = "pacing", type = "red", effect = "Keep up while following", balance = {needybalancetake = "pacing on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Pacing"},
def_heatsight = {defense = "heatsight", type = "normal", effect = "See hidden people", balance = {needybalancetake = "heatsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Heatsight"},
def_chameleon = {defense = "chameleon", type = "normal", effect = "Change your name on QW/WHO", balance = {balanceequilibrium = "touch chameleon "}, state = "down", needit = false, timer = createStopWatch(), skill = "ChameleonTattoo"},
def_cloak_tattoo = {defense = "cloak", type = "blue", effect = "Protects from unwanted summons", balance = {tattoo = "cloak"}, state = "down", needit = false, timer = createStopWatch(), skill = "CloakTattoo"},
def_mindseye_tattoo = {defense = "mindseye", type = "green", effect = "Allows deaf/blind hearing/vision", balance = {balanceequilibrium = "touch allsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_firefly_tattoo = {defense = "firefly", type = "green", effect = "Protects you against them Sciomancers", balance = {tattoo = "firefly"},state = "down", needit = false, timer = createStopWatch(), skill = "FireflyTattoo"},
def_flame_tattoo = {defense = "flame", type = "green", effect = "Helps protect against writhe affs", balance = {tattoo = "flame"},state = "down", needit = false, timer = createStopWatch(), skill = "FlameTattoo"},
def_shield_tattoo = {defense = "shielded", type = "green", effect = "Magical shield to stop attacks", balance = {tattoo = "shield"},state = "down", needit = false, timer = createStopWatch(), skill = "ShieldTattoo"},
--balance = {needyequilibriumtake = "heatsight"}

--Templar
def_maingauche = {defense = "maingauche", type = "normal", effect = "Chance to counter attack", balance = {needyequilibriumtake = "battlefury maingauche"}, state = "down", needit = false, timer = createStopWatch(), skill = "MainGauche"},

--Carnifex
def_fearless = {defense = "fearless", type = "normal", effect = "Protects against fear affliction.", balance = {special = "fearless"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fearless"},
def_reveling = {defense = "reveling", type = "normal", effect = "Periodic heal on damage done.", balance = {needybalancetake = "reveling on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Reveling"},
def_recklessness = {defense = "reckless", type = "normal", effect = "Can attack with 1 broken arm.", balance = {needybalancetake = "recklessness on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Reckless"},
def_soul_harvest = {defense = "soulharvest", type = "normal", effect = "Automatically harvest souls.", balance = {special = "soul harvest on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Harvest"},
def_soul_fracture = {defense = "soul_fracture", type = "normal", effect = "Boosts defenses and weapon damage.", balance = {special = "soul fracture"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fracture"},
def_soul_body = {defense = "soul_body", type = "normal", effect = "Boosts physical defense.", balance = {needyequilibriumtake = "soul embed in body"}, state = "down", needit = false, timer = createStopWatch(), skill = "EmbedBody"},
def_soul_fortify = {defense = "soul_fortify", type = "normal", effect = "Increased constitution.", balance = {needyequilibriumtake = "soul fortify"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fortify"},
def_soul_thirst = {defense = "soulthirst", type = "normal", effect = "Steals soul on hit.", balance = {equilibriumtake = "soul thirst"}, state = "down", needit = false, timer =createStopWatch(), skill = "Soulthirst"},
def_soul_substitute = {defense = "substitute", type = "normal", effect = "Protected from death.", balance = {needyequilibriumtake = "soul substitute"}, state = "down", needit = false, timer = createStopWatch(), skill = "Substitute"},
def_soul_spiritsight = {defense = "soul_spiritsight", type = "normal", effect = "You can see the hidden.", balance = {needyequilibriumtake = "soul spiritsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spiritsight"},
def_hound_opening = {defense = "hound_opening", type = "normal", effect = "Increases damage done to mobs.", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Openings"},
def_bruteforce = {defense = "bruteforce", type = "normal", effect = "Attacks hit through parry.", balance = {needybalancetake = "hammer force"}, state = "down", needit = false, timer = createStopWatch(), skill = "BruteForce"},
def_herculeanrage = {defense = "herculean rage", type = "normal", effect = "Make them prone/off bal.", balance = {needybalancetake = "hammer rage on"}, state = "down", needit = false, timer = createStopWatch(), skill = "HerculeanRage"},
def_houndmark = {defense = "houndmark", type = "yellow", effect = "hounds go zoom", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--Shapeshifter
def_weathering = {defense = "weathering", type = "normal", effect = "Cold resistance", balance = {special = "weathering"}, state = "down", needit = false, timer = createStopWatch(), skill = "Weathering"},
def_bodyheat = {defense = "bodyheat", type = "normal", effect = "Protects against chill", balance = {needyequilibriumtake = "bodyheat"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bodyheat"},
def_metabolize = {defense = "metabolism", type = "normal", effect = "Increase strength", balance = {balancetake = "metabolize on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Metabolize"},
def_endurance = {defense = "celerity", type = "normal", effect = "Faster movement", balance = {needybalancetake = "endurance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Endurance"},
def_thickhide = {defense = "thickhide", type = "normal", effect = "Physical protection", balance = {balancetake = "thickhide"}, state = "down", needit = false, timer = createStopWatch(), skill = "Thickhide"},
def_corner = {defense = "cornering", type = "normal", effect = "Increase dodge chance", balance = {needybalancetake = "corner on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cornering"},
def_salivate = {defense = "salivating", type = "normal", effect = "Bites give haemophilia", balance = {equilibriumneed = "salivate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Salivate"},
def_harden = {defense = "hardening", type = "normal", effect = "Chance to prevent crippled limbs", balance = {needyequilibriumtake = "harden bones"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hardening"},
def_fury = {defense = "fury", type = "normal", effect = "Can use claws off balance", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Fury"},
def_bracing = {defense = "bracing", type = "normal", effect = "Bracing for physical attacks", balance = {needybalancetake = "brace"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bracing"},
def_stealth = {defense = "stealth", type = "normal", effect = "Hide yourself", balance = {needybalancetake = "stealth on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stealth"},

--Luminary
def_lightshield = {defense = "lightshield", type = "normal", effect = "Light-based damage resistance", balance = {needyequilibriumtake = "evoke lightshield"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lightshield" },
def_inspiration = {defense = "inspiration_strength", type = "normal", effect = "Increases strength", balance = {needyequilibriumtake = "perform inspiration strength"}, state = "down", needit = false, timer = createStopWatch(), skill = "Inspiration" },
def_fireblock = {defense = "fireblock", type = "normal", effect = "Resists fire attacks", balance = {needybalancetake = "evoke fireblock"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fireblock"},
def_shine = {defense = "shine", type = "normal", effect = "Dealing AoE room damage to enemies", balance = {needybalancetake = "evoke shine"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shine"},

--Syssin
def_hiding = {defense = "hiding", type = "blue", effect = "Conceals your presence", balance = {needybalancetake = "hide"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hide"},
def_warding = {defense = "warding", type = "normal", effect = "Physical resistance", balance = {needybalancetake = "warding"}, state = "down", needit = false, timer = createStopWatch(), skill = "Warding"},
def_finesse = {defense = "finesse", type = "normal", effect = "Protects against rebounding", balance = {needybalancetake = "finesse"}, state = "down", needit = false, timer = createStopWatch(), skill = "Finesse"},
def_weaving = {defense = "weaving", type = "red", effect = "Increases dodge rate", balance = {needybalancetake = "weaving on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Weaving"},
def_shadowsight = {defense = "shadowsight", type = "normal", effect = "See hidden people", balance = {equilibriumtake = "shadowsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shadowsight"},
def_ghost = {defense = "ghosted", type = "normal", effect = "Conceals movement", balance = {needyequilibriumtake = "conjure ghost"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ghost"},
def_shadowslip = {defense = "shadowslip", type = "normal", effect = "HIDE on killing blow", balance = {needybalancetake = "shadowslip on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shadowslip"},
def_phase = {defense = "phased", type = "yellow", effect = "On another plane", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Phase"},
def_lipreading = {defense = "lipreading", type = "normal", effect = "Hear through DEAF", balance = {needybalancetake = "lipread"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lipread"},

--Monk
def_vitality = {defense = "vitality", type = "normal", effect = "You will get a burst of HP when near death", balance = {needyequilibriumtake = "vitality"}, state = "down", needit = false, timer = createStopWatch(), skill = "Vitality"},
def_kaido_regeneration = {defense = "kaido_regeneration", type = "normal", effect = "HP regen", balance = {special = "regeneration on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Regeneration"},
def_constitution = {defense = "constitution", type = "normal", effect = "Protection from nausea", balance = {needyequilibriumtake = "constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Constitution"},
def_split_mind = {defense = "split_mind", type = "normal", effect = "Constant meditation", balance = {needyequilibriumtake = "split mind"}, state = "down", needit = false, timer = createStopWatch(), skill = "Splitting"},
def_kaido_immunity = {defense = "kaido_immunity", type = "normal", effect = "You will auto cure the next poison you are hit with", balance = {needyequilibriumtake = "immunity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Immunity"},
def_boosted_regen = {defense = "boosted_regen", type = "normal", effect = "Even more HP regen", balance = {special = "boost regeneration"}, state = "down", needit = false, timer = createStopWatch(), skill = "Boosting"},
def_insight = {defense = "insight", type = "normal", effect = "See the thoughts of others", balance = {needyequilibriumtake = "mind insight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Insight"},
def_toughness = {defense = "toughness", type = "normal", effect = "Cutting resistance", balance = {needyequilibriumtake = "toughness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Toughness"},
def_resistance = {defense = "resistance", type = "normal", effect = "Magic resistance", balance = {needyequilibriumtake = "resistance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resistance"},


--Sentinel
def_barkskin = {defense = "barkskin", type = "normal", effect = "10% Resist to Cutting/Blunt", balance = {needyequilibriumtake = "barkskin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Barkskin"},
def_lifesap = {defense = "lifesap", type = "normal", effect = "Gain health on melee attack", balance = {needyequilibriumtake = "lifesap"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifesap" },
def_hardiness = {defense = "hardiness", type = "normal", effect = "15% Resist to Cold/Venom", balance = {needyequilibriumtake = "hardiness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hardiness" },
def_flexibility = {defense = "flexibility", type = "normal", effect = "Increased writhe", balance = {balanceequilibriumtake = "flexibility"}, state = "down", needit = false, timer = createStopWatch(), skill = "Flexibility" },
def_maskedscent = {defense = "masked_scent", type = "normal", effect = "Not listed on scent", balance = {balanceequilibriumtake = "mask scent"}, state = "down", needit = false, timer = createStopWatch(), skill = "Masking" },
def_conceal = {defense = "concealed", type = "normal", effect = "You are a shadowy figure", balance = {balanceequilibriumtake = "conceal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Conceal" },
def_foreststride = {defense = "foreststride", type = "normal", effect = "You move faster outdoors &amp; in forests", balance = {balanceequilibriumtake = "foreststride"}, state = "down", needit = false, timer = createStopWatch(), skill = "Foreststriding" },

--Wayfarer
def_ironskin = {defense = "ironskin", type = "normal", effect = "Resist physical damage", balance = {balanceequilibriumtake = "wayfare ironskin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ironskin" },
def_blindsense = {defense = "blindsense", type = "normal", effect = "Resistance to accuracy reduction", balance = {balanceequilibriumtake = "wayfare blindsense on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blindsense" },
def_greenheart = {defense = "greenheart", type = "normal", effect = "Tree Tattoo is sped up", balance = {balanceequilibriumtake = "outc greenink"..snd.sep.."wayfare greenheart on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Greenheart" },
def_endure = {defense = "endure", type = "normal", effect = "Endurance usage reduced", balance = {balanceequilibriumtake = "wayfare endure on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Endure" },
def_mountaineer = {defense = "mountaineer", type = "normal", effect = "You're shoutin' room-wide", balance = {balanceequilibriumtake = "wayfare mountaineer on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mountaineer" },
def_dustcoat = {defense = "dustcoat", type = "normal", effect = "Soulmask while moving", balance = {balanceequilibriumtake = "wayfare dustcoat"}, state = "down", needit = false, timer = createStopWatch(), skill = "Dustcoat" },
def_resilience = {defense = "resilience", type = "normal", effect = "Assess is wonky vs you", balance = {balanceequilibriumtake = "wayfare resilience on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resilience" },
def_desolation = {defense = "desolation", type = "normal", effect = "You do more melee damage, ranged speed down", balance = {balanceequilibriumtake = "wayfare desolation on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Desolation" },
def_circulation = {defense = "circulation", type = "normal", effect = "+1STR, clot under haemophilia, clot cost up", balance = {balanceequilibriumtake = "wayfare circulation on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Circulation" },
def_brutality = {defense = "brutality", type = "normal", effect = "Fear people and maybe regen fury", balance = {balanceequilibriumtake = "fury brutality on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Brutality"},
def_axe_avert = {defense = "axe_avert", type = "normal", effect = "Knock away projectiles", balance = {balanceequilibriumtake = "axe avert on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Avert"},
def_axe_obstruct = {defense = "axe_obstruct", type = "normal", effect = "Smack those feared away", balance = {balanceequilibriumtake = "axe obstruct on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Obstruct"},
def_axe_repel = {defense = "axe_repel", type = "normal", effect = "Stop them from cleaving you", balance = {balanceequilibriumtake = "axe repel on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Repel"},
def_bloodtrails = {defense = "bloodtrails", type = "normal", effect = "Trace those bloody trails", balance = {balanceequilibriumtake = "wayfare bloodtrails on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bloodtrails"},
def_phalanx = {defense = "phalanx", type = "normal", effect = "Give group cut/blunt defense bonus", balance = {balanceequilibriumtake = "fury battlechant phalanx"}, state = "down", needit = false, timer = createStopWatch(), skill = "Phalanx"},

--Archivist
def_spheres = {defense = "spheres", type = "normal", effect = "Spheres defense for Archivist", balance = {needyequilibriumtake = "contemplate spheres"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spheres" },
def_linked = {defense = "linked", type = "normal", effect = "Yay link", balance = {balanceequilibriumtake = "elicit link 50"}, state = "down", needit = false, timer = createStopWatch(), skill = "Link" },
def_oneness = {defense = "oneness", type = "normal", effect = "oneness", balance = {balanceequilibriumtake = "elicit oneness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Oneness" },
def_sublimation = {defense = "sublimation", type = "normal", effect = "sublimation", balance = {balanceequilibrium = "elicit sublimation me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sublimation" },
def_ameliorate = {defense = "ameliorate", type = "normal", effect = "ameliorate", balance = {balanceequilibriumtake = "bio ameliorate on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ameliorate" },
def_catabolism = {defense = "catabolism", type = "normal", effect = "catabolism", balance = {balanceequilibriumtake = "bio catabolism"}, state = "down", needit = false, timer = createStopWatch(), skill = "Catabolism" },
def_geo_invert = {defense = "Token Inverted", type = "normal", effect = "You Have Inverted Your Token", balance = {balanceequilibriumtake = "drop token##geo invert"}, state = "down", needit = false, timer = createStopWatch(), skill = "Invert" },
def_geo_trace = {defense = "Token Tracing You", type = "normal", effect = "You Have Traced Your Token", balance = {balanceequilibriumtake = "geo trace me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Trace" },
def_empower_jhako = {defense = "Empowering Jhako", type = "normal", effect = "You Have Empowered Jhako", balance = {balanceequilibriumtake = "empower jhako"}, state = "down", needit = false, timer = createStopWatch(), skill = "Empower" },
def_nexus = {defense = "nexus", type = "normal", effect = "Setup your nexus", balance = {balanceequilibriumtake = "bio nexus one"}, state = "down", needit = false, timer = createStopWatch(), skill = "Nexus" },

--Indorani
def_soulmask = {defense = "soulmask", type = "normal", effect = "Your soul is harder to sense.", balance = {balanceequilibriumtake = "soulmask"}, state = "down", needit = false, timer = createStopWatch(), skill = "Soulmask" },
def_vengeance = {defense = "vengeance", type = "normal", effect = "You will deal AoE damage to enemies upon death.", balance = {balanceequilibriumtake = "vengeance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Vengeance" },
def_deathaura = {defense = "deathaura", type = "normal", effect = "You deal damage to enemies in room passively.", balance = {balanceequilibriumtake = "deathaura on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Deathaura" },
def_gravechill = {defense = "gravechill", type = "normal", effect = "Cold damage on decay instead of magic.", balance = {balanceequilibriumtake = "gravechill"}, state = "down", needit = false, timer = createStopWatch(), skill = "Gravechill" },
def_lifevision = {defense = "lifevision ", type = "normal", effect = "See all things living, sometimes identify illusions.", balance = {balanceequilibriumtake = "lifevision"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifevision" },
def_soulcage = {defense = "soulcage", type = "normal", effect = "You come back to life upon death instantly.", balance = {balanceequilibriumtake = "soulcage"}, state = "down", needit = false, timer = createStopWatch(), skill = "Soulcage" },
def_devilpact = {defense = "devil", type = "normal", effect = "Throw 2 cards at once.", balance = {balanceequilibriumtake = "outc blank as devil"..snd.sep.."fling devil at ground"}, state = "down", needit = false, timer = createStopWatch(), skill = "Devil" },
def_eclipse = {defense = "eclipse", type = "normal", effect = "Every 3rd card is hidden, sun/moon only.", balance = {balanceequilibriumtake = "outc blank as eclipse"..snd.sep.."fling eclipse at me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Eclipse" },
def_chariot = {defense = "chariot", type = "normal", effect = "+Celerity, +bal for cards", balance = {balanceequilibriumtake = "outc blank as chariot"..snd.sep.."fling chariot at ground"}, state = "down", needit = false, timer = createStopWatch(), skill = "Chariot" },
def_hierophant = {defense = "hierophant", type = "normal", effect = "Protect against disloyalty.", balance = {balanceequilibriumtake = "outc blank as hierophant"..snd.sep.."fling hierophant at me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hierophant"},


--Shaman
def_spiritbond = {defense = "spiritbond", type = "normal", effect = "Share damage with your spirit.", balance = {balanceequilibriumtake = "familiar spiritbond on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spiritbond" },
def_protection = {defense = "protection", type = "normal", effect = "Resistance to cutting/blunt.", balance = {balanceequilibriumtake = "shaman protection"}, state = "down", needit = false, timer = createStopWatch(), skill = "Protection"},
def_shaman_spiritsight = {defense = "shaman_spiritsight", type = "normal", effect = "You get loki 2.0.", balance = {balanceequilibriumtake = "shaman spiritsight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spiritsight" },
def_lifebloom = {defense = "lifebloom", type = "normal", effect = "Restore HP upon getting low health.", balance = {balanceequilibriumtake = "commune lifebloom"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifebloom"},
def_shaman_warding  = {defense = "shaman_warding", type = "normal", effect = "Give mental affs when your parry is hit.", balance = {balanceequilibriumtake = "shaman warding"}, state = "down", needit = false, timer = createStopWatch(), skill = "Warding" },
def_oath_forestwalker  = {defense = "forestwalker", type = "normal", effect = "Heals you in forests", balance = {balanceequilibriumtake = "oath forestwalker activate"}, state = "down", needit = false, timer = createStopWatch(), skill ="Generic"},
def_oath_tranquility  = {defense = "tranquility", type = "normal", effect = "Heals afflictions", balance = {balanceequilibriumtake = "oath tranquility activate"}, state = "down", needit = false, timer = createStopWatch(), skill ="Generic"},
def_oath_shaman  = {defense = "elder shaman", type = "normal", effect = "Heals mental afflictions", balance = {balanceequilibriumtake = "oath eldershaman activate"}, state = "down", needit = false, timer = createStopWatch(), skill ="Generic"},
def_greenfoot  = {defense = "greenfoot", type = "normal", effect = "Bring your nature with you", balance = {balanceequilibriumtake = "nature greenfoot on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Greenfoot"},

--Praenomen
def_potence_strength = {defense = "potence strength", type = "normal", effect = "+1 STR", balance = {balanceequilibriumtake = "potence strength"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence"},
def_potence_constitution = {defense = "potence constitution", type = "normal", effect = "+1 CON", balance = {balanceequilibriumtake = "potence constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence"},
def_potence_intelligence = {defense = "potence intelligence", type = "normal", effect = "+1 INT", balance = {balanceequilibriumtake = "potence intelligence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence"},
def_potence_dexterity = {defense = "potence dexterity", type = "normal", effect = "+1 DEX", balance = {balanceequilibriumtake = "potence dexterity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence" },
def_fortify = {defense = "fortify", type = "normal", effect = "Fortify your body to take less physical damage", balance = {balanceequilibriumtake = "fortify"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fortify" },
def_corpus_warding = {defense = "corpus_warding", type = "normal", effect = "Fortify your body to take less magical damage", balance = {balanceequilibriumtake = "ward"}, state = "down", needit = false, timer = createStopWatch(), skill = "Warding" },
def_celerity = {defense = "celerity", type = "normal", effect = "Increased movement speed", balance = {balanceequilibriumtake = "celerity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Celerity" },
def_lifescent = {defense = "lifescent", type = "normal", effect = "Detect nearby prey movements", balance = {balanceequilibriumtake = "lifescent"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifescent" },
def_lifevision = {defense = "lifevision", type = "normal", effect = "See things in the shadows", balance = {balanceequilibriumtake = "lifevision"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifevision" },
def_veil = {defense = "veil", type = "normal", effect = "Hide deeper in the shadows", balance = {balanceequilibriumtake = "veil"}, state = "down", needit = false, timer = createStopWatch(), skill = "Veil"},
def_stalk = {defense = "stalk", type = "normal", effect = "Nighttime hiding in the shadows", balance = {balanceequilibriumtake = "stalk"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stalking" },
def_concentrate = {defense = "concentrate", type = "normal", effect = "Make your blood use more efficient", balance = {balanceequilibriumtake = "blood concentrate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Concentration" },
def_shadowblow = {defense = "shadowblow", type = "normal", effect = "Your shadow strikes out at your attacker", balance = {balanceequilibriumtake = "blood shadow"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shadow" },
def_blurred = {defense = "blurred", type = "normal", effect = "Others cannot see your vitals", balance = {balanceequilibriumtake = "blood blur"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blur" },
def_elusion = {defense = "elusion", type = "normal", effect = "You avoid opponents' blows", balance = {balanceequilibriumtake = "elusion on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Elusion" },
def_deathlink = {defense = "deathlink", type = "normal", effect = "You are linked to your coffin", balance = {balanceequilibriumtake = "deathlink"}, state = "down", needit = false, timer = createStopWatch(), skill = "Deathlink" },

--Teradrim
def_earthenform = {defense = "earthenform", type = "normal", effect = "Embrace your earthen features", balance = {balanceequilibriumtake = "earthenform embrace"}, state = "down", needit = false, timer = createStopWatch(), skill = "Earthenform" },
def_entwine = {defense = "entwine", type = "normal", effect = "Disarm when someone goes for your parried limb", balance = {balanceequilibriumtake = "earth entwine"}, state = "down", needit = false, timer = createStopWatch(), skill = "Entwine" },
def_ricochet =  {defense = "ricochet", type = "normal", effect = "Bounce attacks back to cripple limbs at times", balance = {balanceequilibriumtake = "earth ricochet"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ricochet" },
def_twinsoul = {defense = "twinsoul", type = "normal", effect = "Link your soul to your golem", balance = {balanceequilibriumtake = "golem twinsoul on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Twinsoul" },
def_earth_resonance = {defense = "earth_resonance", type = "normal", effect = "Boosted health/mana regen", balance = {balanceequilibriumtake = "earth resonance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resonance" },
def_stonebind = {defense = "stonebind", type = "normal", effect = "They can't take your weapon", balance = {balanceequilibriumtake = "earth stonebind"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stonebind" },
def_imbue_will = {defense = "imbue_will", type = "normal", effect = "Golem can hit freely next time", balance = {balanceequilibriumtake = "prepare earthenwill"}, state = "down", needit = false, timer = createStopWatch(), skill = "Earthenwill" },
def_erosion = {defense = "erosion", type = "normal", effect = "Erosion is useful on your weapon if you're sand sweltering", balance = {balanceequilibriumtake = "earth imbue erosion"}, state = "down", needit = false, timer = createStopWatch(), skill = "Erosion" },
def_imbue_stonefury = {defense = "imbue_stonefury", type = "normal", effect = "Stonefury is useful on your weapon for bashing", balance = {balanceequilibriumtake = "earth imbue stonefury"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stonefury" },
def_sand_swelter = {defense = "sand_swelter", type = "normal", effect = "Your sands hit people in the room", balance = {balanceequilibriumtake = "sand swelter on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Swelter" },


--Ascendril
def_missiles = {defense = "missiles", type = "normal", effect = "PvE damage", balance = {balanceequilibriumtake = "cast missiles on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Missiles" },
def_sagacity = {defense = "sagacity", type = "normal", effect = "extra mana recovery", balance = {balanceequilibriumtake = "cast sagacity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sagacity" },
def_arcaneskin = {defense = "arcaneskin", type = "normal", effect = "Increased cutting/blunt resistances", balance = {balanceequilibrium = "cast arcaneskin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Arcaneskin"},
def_countercurrent = {defense = "countercurrent", type = "normal", effect = "chance to resist venoms", balance = {balanceequilibrium = "cast countercurrent"}, state = "down", needit = false, timer = createStopWatch(), skill = "Countercurrent"},
def_stalled = {defense = "stalled", type = "normal", effect = "holding an attack", balance = {balanceequilibrium = ""}, state = "down", needit = false, timer = createStopWatch(), skill = "Stall"},

--Sciomancer
def_rigor  = {defense = "rigor", type = "normal", effect = "WP drain but better crit chance", balance = {balanceequilibriumtake = "cast rigor on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Rigor" },
def_shadow_engulf   = {defense = "shadow_engulf", type = "normal", effect = "Mask your movements", balance = {balanceequilibriumtake = "cast engulf on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Engulf" },
def_shadow_mantle  = {defense = "shadow_mantle", type = "normal", effect = "Reduce damage taken from elements", balance = {balanceequilibriumtake = "cast mantle"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mantle" },
def_blurring  = {defense = "blurring", type = "normal", effect = "Better diverting", balance = {balanceequilibriumtake = "cast blurring"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blurring" },

--Zealot
def_firefist = {defense = "firefist", type = "normal", effect = "makes your fists attack cause ablaze", balance = {balanceequilibriumtake = "enact firefist"}, state = "down", needit = false, timer = createStopWatch(), skill = "Firefist" },
def_focalmark = {defense = "focalmark", type = "normal", effect = "Enabled your use of purification abilities", balance = {balanceequilibriumtake = "enact focalmark"}, state = "down", needit = false, timer = createStopWatch(), skill = "Focalmark" },
def_tempered_body = {defense = "tempered_body", type = "normal", effect = "Resist cutting and blunt dmg", balance = {balanceequilibriumtake = "enact tempering"}, state = "down", needit = false, timer = createStopWatch(), skill = "Tempering" },
def_swagger = {defense = "swagger", type = "normal", effect = "Negates paresis only once", balance = {needybalancetake = "swagger"}, state = "down", needit = false, timer = createStopWatch(), skill = "Swagger" },
def_deflection = {defense = "deflection", type = "normal", effect = "Deflect arrows by chance, return them on success", balance = {balanceequilibriumtake = "enact deflection"}, state = "down", needit = false, timer = createStopWatch(), skill = "Deflection"},
def_discharge = {defense = "discharge", type = "normal", effect = "Store up dmgs until threshold, then it heal some of your wounds", balance = {balanceequilibriumtake = "enact discharge"}, state = "down", needit = false, timer = createStopWatch(), skill = "Discharge"},
def_resurgence = {defense = "resurgence", type = "normal", effect = "Revive you once you died", balance = {balanceequilibriumtake = "enact resurgence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resurgence" },
def_haste = {defense = "haste", type = "normal", effect = " +2 to movement", balance = {special = "haste"}, state = "down", needit = false, timer = createStopWatch(), skill = "Haste" },
def_litheness = {defense = "litheness", type = "normal", effect = "Suffer no malus to dodge chance when use channeling action", balance = {needybalance = "litheness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Litheness" },
def_disunion = {defense = "disunion", type = "normal", effect = "give chance to reduce eq and bal timer", balance = {balanceequilibriumtake = "disunion"}, state = "down", needit = false, timer = createStopWatch(), skill = "Disunion" },
def_wrath = {defense = "wrath", type = "normal", effect = "see what other would parries in very short time", balance = {needybalancetake = "wrath"}, state = "down", needit = false, timer = createStopWatch(), skill = "Wrath" },
def_zenith = {defense = "zenith", type = "normal", effect = "cure a random AFF, use certain attacks off bal", balance = {balanceequilibriumtake = "enact zenith"}, state = "down", needit = false, timer = createStopWatch(), skill = "Zenith" },
def_mindspark = {defense = "mindspark", type = "normal", effect = "raises your intelligence", balance = {balanceequilibrium = "psi mindspark"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mindspark" },
def_bending = {defense = "bending", type = "normal", effect = "magical damage reduction or something", balance = {balanceequilibrium = "psi bending"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bending"},

--Warden
def_battleflow = {defense = "battleflow", type = "normal", effect = "Can attack with 1 broken arm.", balance = {needybalancetake = "warden battleflow on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battleflow"},
def_ancest_victory = {defense = "victory", type = "normal", effect = "Automatically harvest renown.", balance = {special = "ancest victory on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Victory"},
def_invocation = {defense = "invocation", type = "normal", effect = "Boosts defenses and weapon damage.", balance = {special = "ancest invocation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Invocation"},
def_ancest_blessing_safeguard = {defense = "ancest_blessing_safeguard", type = "normal", effect = "Boosts physical defense.", balance = {needyequilibriumtake = "ancest blessing safeguard"}, state = "down", needit = false, timer = createStopWatch(), skill = "Safeguard"},
def_ancestral_bolster = {defense = "ancestral_bolster", type = "normal", effect = "Increased constitution.", balance = {needyequilibriumtake = "ancest bolster"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bolster"},
def_intervention = {defense = "intervention", type = "normal", effect = "Protected from death.", balance = {needyequilibriumtake = "ancest intervention"}, state = "down", needit = false, timer = createStopWatch(), skill = "Intervention"},
def_tacticianmark = {defense = "tacticianmark", type = "yellow", effect = "simuls go zoom", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_initiative = {defense = "initiative", type = "normal", effect = "Periodic heal on damage done.", balance = {needybalancetake = "warden initiative on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Initiative"},
def_displacement = {defense = "displacement", type = "normal", effect = "Steals soul on hit.", balance = {equilibriumtake = "ancest displacement"}, state = "down", needit = false, timer =createStopWatch(), skill = "Displacement"},
def_simulacrum_opening = {defense = "simulacrum_opening", type = "normal", effect = "Increases damage done to mobs.", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Openings"},
def_severity = {defense = "severity", type = "normal", effect = "Attacks hit through parry.", balance = {needybalancetake = "warden severity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Severity"},
def_roaring = {defense = "roaring", type = "normal", effect = "Make them prone/off bal.", balance = {needybalancetake = "warden roaring on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Roaring"},

}


snd.alternative_class_defenses = {
Luminary_constitution = {defense = "constitution", type = "normal", effect = "Protection against vomiting", balance = {needyequilibriumtake = "perform constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Constitution"},
Indorani_shroud = { defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "shroud"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shroud" },
Carnifex_shroud = {defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "soul shroud"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shroud" },
Warden_shroud = {defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "ancest distort"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shroud" },
Syssin_shroud = { defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "conjure cloak"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cloak" },
Revenant_maingauche = {defense = "maingauche", type = "normal", effect = "Chance to counter attack", balance = {needyequilibriumtake = "riving maingauche"}, state = "down", needit = false, timer = createStopWatch(), skill = "MainGauche"},
Templar_maingauche = {defense = "maingauche", type = "normal", effect = "Chance to counter attack", balance = {needyequilibriumtake = "battlefury maingauche"}, state = "down", needit = false, timer = createStopWatch(), skill = "MainGauche"},
Sciomancer_rigor = {defense = "rigor", type = "normal", effect = "WP drain but better crit chance", balance = {balanceequilibriumtake = "cast rigor on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Rigor"},
Warden_rigor = {defense = "rigor", type = "normal", effect = "Cheap Furor.", balance = {needybalancetake = "warden rigor"}, state = "down", needit = false, timer = createStopWatch(), skill = "Rigor"},
Warden_fearless = {defense = "fearless", type = "normal", effect = "Protects against fear affliction.", balance = {special = "warden fortitude"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fortitude"},


}


</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>give/take defenses</name>
								<packageName></packageName>
								<script>
function snd.def_check()
 for i in pairs(snd.defenses) do
  if i == "def_speed" or i == "def_rebounding" or i == "def_deafness" or i == "def_fangbarrier" then
   if snd.defenses[i].state == "waiting" and getStopWatchTime(snd.defenses[i].timer) &gt;= 10 then
    snd.def_timeout(i)
   end
  elseif snd.defenses[i].state == "waiting" and getStopWatchTime(snd.defenses[i].timer) &gt; 2 then
   snd.def_timeout(i)
  end
 end
end

function snd.def_timeout(defense)
 snd.defenses[defense].state = "down"
 snd.message("[Resetting: &lt;white&gt;"..defense.."&lt;brown&gt;]", "reset")
end

function snd.def_gain(defense)
--  deleteLine()
 snd.message("You: &lt;green&gt;GAIN &lt;white&gt;"..defense..".", "defense")
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 x = stopStopWatch(snd.defenses[defense].timer)
-- resetStopWatch(snd.defenses[defense].timer)
 snd.def_have(defense)
 snd.defenses[defense].timer = createStopWatch()
end

function snd.def_have(defense)
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 snd.defenses[defense].state = "deffed"
 if snd.less_defs~= nil then
   for i in pairs(snd.less_defs) do
    if snd.less_defs[i] == defense then
     snd.defenses[defense].needit = false
     table.remove(snd.less_defs, i)
    end
   end
  end
end

function snd.def_def(defense)
 if snd.gui.enabled then 
  deleteLine()
 end
 if snd.defenses["def_"..defense].type == "normal" then
  cecho("&lt;white&gt;\n"..defense)
 else
  cecho("&lt;"..snd.defenses["def_"..defense].type.."&gt;\n"..defense)
 end
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 echo(" "..snd.defenses[defense].effect)
 snd.def_have(defense)
end

function snd.def_take(defense)
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end

 if snd.defenses[defense].state == "deffed" then
--  deleteLine()
  snd.message("You: &lt;red&gt;LOSE &lt;white&gt;"..defense..".", "defense")
 end
 snd.def_remove(defense)
end

function snd.def_remove(defense)
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 snd.defenses[defense].state = "down"
end</script>
								<eventHandlerList />
							</Script>
						</ScriptGroup>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Sunder NDB</name>
						<packageName></packageName>
						<script>sndNDB = sndNDB or {}

function sndNDB_Install()
	--Will only probably be used on initial loading of system.
	sndNDB = {}
	sndNDB = {
		installed = true,
		players = {},
		highlightNames = false,
		highlighting = {
			Bloodloch = "firebrick",
			Duiran = "a_green",
			Enorian = "a_darkcyan",
			Spinesreach = "a_darkmagenta",
			Rogues = "a_brown",
      Enemies = "IndianRed",
			
		},
      divine = {
			"Keroc", "Razmael", "Tiur", "Varian",
			"Avareti", "Damariel", "Dhar", "Chakrasul", "Ethne", "Haern", "Iosyne", "Ivoln",
			"Tanixalthas", "Omei", "Severn", "Slyphe", "Bamathis",
		
			"Alecto", "Megaera", "Tisiphone", "Veritas", "Imvra",
			"Becue", "Ere", "Nalus", "Tsoede",
		},
		cityEnemies = {},
		highlightPriority = "city",
		enemySettings = {bold = false, italics = false, underline = false},
	}

	snd.message("Sunder NDB installed perfectly and is ready to go.")
	sndNDB_Unhighlight()
	sndNDB_saveSettings(false)
	--Save on install, as a failsafe.
end</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Saving and Loading</name>
							<packageName></packageName>
							<script>function sndNDB_saveSettings(disp)
	if not sndNDB or not sndNDB.installed then
		return false
	end

	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local ndb_loc = getMudletHomeDir() .. separator .. "SunderNDB"

	table.save(ndb_loc, sndNDB)
	
	if disp then
		snd.message("Player information saved safely.")
	end	
end

function sndNDB_loadSettings()
	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local ndb_loc = getMudletHomeDir() .. separator .. "SunderNDB"

	if not io.exists(ndb_loc) then 
		snd.message("Name database not found. Use 'sndb install' to fix this.")
		return
	end

	sndNDB = {}
	table.load(ndb_loc, sndNDB)
	snd.message("Player information found and loaded in.")

	sndNDB_saveSettings(false)
end

registerAnonymousEventHandler("sysDisconnectionEvent", "sndNDB_saveSettings", true)
registerAnonymousEventHandler("sysLoadEvent", "sndNDB_loadSettings")

</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Grab Information</name>
							<packageName></packageName>
							<script>function sndNDB_GetOnline()
	local path = getMudletHomeDir().."/sndndb"
	
	if not lfs.attributes(path) then
		--We'll need a folder to store downloaded data. Don't worry, it won't cause issues.
		lfs.mkdir(path)
		snd.message("Created folder to store downloaded data at: "..path)
	end
	
	downloadFile(path .. "/Online.json", "http://api.aetolia.com/characters.json")

	snd.message("Let me find a list of online players really quick...")

	ndbWatcher = ndbWatcher or createStopWatch()
	startStopWatch(ndbWatcher)
end

function sndNDB_Acquire(person)

	assert(person)
	local person = person:title()
	local path = getMudletHomeDir().."/sndndb"

	if not lfs.attributes(path) then
		--We'll need a folder to store downloaded data. Don't worry, it won't cause issues.
		lfs.mkdir(path)
		snd.message("Created folder to store downloaded data at: "..path)
	end
	
	downloadFile(path .. "/"..person..".json", "http://api.aetolia.com/characters/"..person..".json")

end

function sndNDB_NameList(names)
	--Parse list to see who isn't tracked.
	for _, name in pairs(names) do
		if not table.contains(sndNDB.divine, name) then
			sndNDB_Acquire(name)
		end
	end
	snd.message("Name database is now up to date.")
end</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>ndb_download_failed</name>
								<packageName></packageName>
								<script>function ndb_download_failed(_, filepath)
	if not filepath:find("sndndb") and not filepath:find("gamefeed") then return end 
	
	snd.message("Error downloading information.")
	if filepath:find("gamefeed") then
		snd.message("Unknown error while downloading: " .. filepath)
		os.remove(getMudletHomeDir().."/gamefeed.json")
	elseif filepath:match("server replied: Not Found") then
		
		local person = filepath:match("/(%w+).json")
		local fpr = getMudletHomeDir().."/sndndb/"..person..".json"

		snd.message("This person does not exist: "..person)
		sndNDB_Remove(person)
		os.remove(fpr)
	else
		snd.message("Unknown error while downloading: " .. filepath)
	end
end</script>
								<eventHandlerList>
									<string>sysDownloadError</string>
								</eventHandlerList>
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>ndb_download_success</name>
								<packageName></packageName>
								<script>function ndb_download_success(_, filepath)
	--Do not mess with if it's not Sunder NDB information.
	if not filepath:find("sndndb", 1, true) and not filepath:find("gamefeed",1,true) then return end

	if filepath:find("Online",1,true) then
		sndNDB_SortOnline(filepath)
		return
	elseif filepath:find("gamefeed",1,true) then
		sndNDB_parseFeed(filepath)
		return
	end

	local f, s = io.open(filepath)
	if f then s = f:read("*l"); io.close(f) end

	-- didn't get JSON data? 
	if s:find("Internal error", 1, true) or s:find("DOCTYPE html PUBLIC", 1, true) then
		cecho("\n&lt;red&gt;Data Acquisition Failed!") 
		return 
	end
	local t = yajl.to_value(s)
	local cities = {"Bloodloch", "Duiran", "Enorian", "Spinesreach"}
	local name = t.name
	local title = t.fullname
	local guild = t.guild:title()
	local xp_rank = t["xp rank"]:gsub("th", ""):gsub("nd", ""):gsub("st", ""):gsub("rd", "")
	if xp_rank == "Unranked" then xp_rank = 0 else local xp_rank = tonumber(xp_rank) end
	local city = t.city:title()
  local tether = ""
    if (city == "Duiran" or city == "Enorian") then 
      tether = "Spirit"
    elseif (city == "Spinesreach" or city == "Bloodloch") then 
      tether = "Shadow" 
    end
	local class = t.class:title()
	local level = tonumber(t.level)
  local race = t.race
  
	sndNDB.players[name] = {
		name = name,
		title = title,
		guild = guild,
		xp_rank = xp_rank,
		city = city,
		level = level,
		class = class,
    race = race,
    tether = tether
	}

	if guild:find("none") then
		sndNDB.players[name].guild = "None"
	else
		sndNDB.players[name].guild = guild:title()
	end

	if city:find("none") or city == "" then
		sndNDB.players[name].city = "None"
	else
		sndNDB.players[name].city = city:title()
	end

  	os.remove(filepath)
	
  raiseEvent("sndNDB Check Highlight", t.name)

end</script>
								<eventHandlerList>
									<string>sysDownloadDone</string>
								</eventHandlerList>
							</Script>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Ndb API</name>
							<packageName></packageName>
							<script>function sndNDB_getColour(name)
	if not sndNDB_Exists(name) then
		return "white"
	else
		return sndNDB.highlighting[sndNDB_getCitizenship(name)]
	end
end
function sndNDB_getClass(name)
	if sndNDB.players[name] then
		return sndNDB.players[name:title()].class
	else
		return "Unknown"
	end
end

function sndNDB_Exists(name)
	if not sndNDB.players[name] then
		return false
	else
		return true
	end
end

function sndNDB_isCitizenOf(city, name)
	if sndNDB_Exists(name) then
		return (sndNDB.players[name:title()].city == city:title() and true or false)
	else
		snd.message("The information for "..name.." has not yet been gathered.")
		return false
	end
end

function sndNDB_getCitizenship(name)
	if sndNDB_Exists(name) then
		if sndNDB.players[name].city:lower() == "none" or sndNDB.players[name].city:lower() == "(hidden)" then
			return "Rogues"
		else
			return sndNDB.players[name].city
		end
	else
		return "Unknown"
	end
end


function sndNDB_Remove(name)
	local person = name:title()
	if sndNDB_Exists(person) then
		sndNDB.players[person] = nil
		--If any highlight available, then clear it.
		if sndNDB.highlightTriggers and sndNDB.highlightTriggers[person] then
			killTrigger(sndNDB.highlightTriggers[person])
		end
		snd.message(person.." has been removed from the database.")
	else
		snd.message(person.." is not in the database, anyway.")
	end
end

function sndNDB_SortOnline(name_group)

  local player_list = {}
  if type(name_group) ~= "table" then

  	local f, s = io.open(name_group)
    if f then s = f:read("*l"); io.close(f) end

  	-- didn't get JSON data? 
  	if s:find("Internal error", 1, true) or s:find("DOCTYPE html PUBLIC", 1, true) then
  		cecho("\n&lt;red&gt;Data Acquisition Failed!") 
  		return 
  	end
  
  	local t = yajl.to_value(s)
  
  	apiOnlineFound = {}
  	apiNeedUpdate = {}
  	for ind, tab in pairs(t.characters) do
  		if not tab.name:find("masked") and not table.contains(sndNDB.divine, tab.name) then
  			table.insert(apiOnlineFound, tab.name)
  		end
  	end
  
  	for ind, tab in pairs(gmcp.Comm.Channel.Players) do
  		if not table.contains(apiOnlineFound, tab.name) and not tab.name:find("masked") and not table.contains(sndNDB.divine, tab.name) then
  			table.insert(apiOnlineFound, tab.name)
  		end
  	end
  
  	os.remove(name_group)
  	table.sort(apiOnlineFound)
    player_list = apiOnlineFound
    
  else
    apiNeedUpdate = {}
    player_list = name_group
  
  end

	--Parse the list to see who needs to be added.
	local count = 0
  
	for index, name in pairs(player_list) do
		if not sndNDB_Exists(name) and not table.contains(sndNDB.divine, name) then
			count = count + 1
			table.insert(apiNeedUpdate, name)
		end
	end 
	if count &gt; 0 then
		snd.message(count.." new names identified, grabbing their info.")
		cecho("\n&lt;a_darkgrey&gt; - "..table.concat(apiNeedUpdate, ", ")..".")
		sndNDB_NameList(apiNeedUpdate)
	else
		if parsingCity then
			if parsingCity:lower() == "classes" then
				sndNDB_displayOnlineClass(player_list)
			else
				sndNDB_displayOnlineCity(player_list)
			end
		else
			sndNDB_displayOnline(player_list)
		end
	end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Ndb Highlighting</name>
							<packageName></packageName>
							<script>function sndNDB_Unhighlight()
	if not sndNDB.highlightTriggers or not next(sndNDB.highlightTriggers) then return end

  	local killTrigger = killTrigger
  	for k,v in pairs(sndNDB.highlightTriggers) do
    		killTrigger(v)
  	end

  	sndNDB.highlightTriggers = {}
end

function sndNDB_enemyHighlights()
	snd.message("Clearing all highlights to prevent errors. One moment, please.")
	sndNDB_Unhighlight()
	tempTimer(2, [[ snd.message("Loading new highlights now."); sndNDB_loadHighlights() ]])	
end


local my_names_not_to_color = {
  "Example",
  }

function sndNDB_loadHighlights()
	sndNDB.highlightTriggers = sndNDB.highlightTriggers or {}
	collectgarbage("stop")

	sndNDB_Unhighlight()

	if sndNDB.highlightNames then
		for index, person in pairs(sndNDB.players) do
			 sndNDB_highlightName( person.name, person.city )
		end
	end

	collectgarbage()
end

function sndNDB_addHighlight(_, name)

	if not sndNDB.highlightNames then return end	
	if not name then return end
	if not sndNDB.players[name] then return end

	sndNDB_highlightName( sndNDB.players[name].name, sndNDB.players[name].city)
end


function sndNDB_updateHighlights(city, colour)

	sndNDB.highlighting[city] = colour
	
  	local killTrigger = killTrigger
  	for name, trig in pairs(sndNDB.highlightTriggers) do
  		if sndNDB.players[name].city == city then
      			killTrigger(trig)
  			if sndNDB.highlightNames then
  				sndNDB_highlightName( sndNDB.players[name].name, sndNDB.players[name].city )
  			end
  		elseif city == "Rogues" or city == "(hidden)" then
  			if sndNDB_getCitizenship(name) == "None" then
  				killTrigger(trig)
  				if sndNDB.highlightNames then
  					sndNDB_highlightName( sndNDB.players[name].name, sndNDB.players[name].city )
  				end
  			end
  		end
  	end

end


function sndNDB_highlightName(who, city)
	--If any highlight available, then clear it.
	if sndNDB.highlightTriggers and sndNDB.highlightTriggers[who] then
		killTrigger(sndNDB.highlightTriggers[who])
	end

	local colour = sndNDB.highlighting.Rogues

	--Get the necessary colour.
		--Check enemy list first
	if sndNDB.highlightPriority == "enemies" then
		if table.contains(sndNDB.cityEnemies, who) then
			colour = sndNDB.highlighting.Enemies
		else
			if city == "None" or city == "(hidden)" then
				colour = sndNDB.highlighting.Rogues
			else
				colour = sndNDB.highlighting[city]
			end
		end
	else
		if city == "None" or city == "(hidden)" then
			colour = sndNDB.highlighting.Rogues
		else
			colour = sndNDB.highlighting[city]
		end
	end

	sndNDB.highlightTriggers = sndNDB.highlightTriggers or {}
	if not table.isMember(my_names_not_to_color, who) then
    sndNDB.highlightTriggers[who] = tempTrigger(who, ([[sndNDB_highlight("%s", %s)]]):format(who,
		(colour and '"' .. colour .. '"' or "false")
	 ))
  end
end

function sndNDB_highlight(name, colour)
	local c, k = 1, 1
	while k &gt; 0 do
		k = line:find(name, k)
		if k == nil then return end
		c = c + 1

		if k == line:find("%f[%a]"..name.."%f[%A]", k) then
			if selectString(name, c-1) &gt; -1 then
				if colour then fg(colour) end
				if sndNDB.highlightPriority == "enemies" and table.contains(sndNDB.cityEnemies, name) then
					if sndNDB.enemySettings.bold then setBold(true) end
					if sndNDB.enemySettings.underline then setUnderline(true) end
					if sndNDB.enemySettings.italics then setItalics(true) end
				end
				resetFormat()
			else 
				return 
			end
    		end
		k = k + 1
	end
end
registerAnonymousEventHandler("sndNDB Check Highlight", "sndNDB_addHighlight")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Display API</name>
							<packageName></packageName>
							<script>function sndNDB_displayOnlineClass(players)
	local classList = {
		"Ascendril", "Luminary", "Sentinel", "Shaman", "Zealot", "Templar", "Warden", 
		"Monk", "Shapeshifter", "Syssin", "Wayfarer",
		"Archivist", "Carnifex", "Indorani", "Praenomen", "Sciomancer", "Teradrim", "Revenant",
	}
	local classes = {
		Ascendril = {}, Luminary = {}, Sentinel = {}, Shaman = {}, Zealot = {}, Templar = {}, Warden = {},
		Monk = {}, Shapeshifter = {}, Syssin = {}, Wayfarer = {}, 
		Archivist = {}, Carnifex = {}, Indorani = {}, Praenomen = {}, Sciomancer = {}, Teradrim = {}, Revenant = {},
	}

	for _, player in pairs(players) do
		local class = sndNDB.players[player].class
		table.insert(classes[class], player)
	end
	
	snd.message("Data acqusition completed and analysed. Showing class count for online players.")

	for _, class in ipairs(classList) do
		cecho("\n &lt;DimGrey&gt;[&lt;NavajoWhite&gt;"..class:title().."&lt;DimGrey&gt;]"..string.rep(" ", 13-string.len(class)).."- &lt;NavajoWhite&gt;"..#classes[class].." tracked people are "..class..".")
	end
	send(" ")
	parsingCity = nil
end

function sndNDB_displayOnlineCity(players)
	local peopleFound = {}

	snd.message("Data acqusition completed and analysed. Showing online players from &lt;"..sndNDB.highlighting[parsingCity:title()].."&gt;"..parsingCity:title()..".")

	for _, person in pairs(players) do
		if sndNDB_isCitizenOf(parsingCity:title(), person) then
			cecho("\n &lt;"..sndNDB.highlighting[parsingCity:title()].."&gt;"..person..string.rep(" ", 13-string.len(person)).."- &lt;NavajoWhite&gt;"..sndNDB_getClass(person))
		end
	end
	send(" ")
	parsingCity = nil
end

function sndNDB_displayOnline(players)
	local onlinePeople = {
		Bloodloch = {}, Duiran = {}, Enorian = {}, Spinesreach = {}, Rogues = {}, Untracked = {},
	}

	for _, person in pairs(players) do
		if not sndNDB_Exists(person) then
			table.insert(onlinePeople.Untracked, person)
		elseif sndNDB_getCitizenship(person):lower() == "none" or sndNDB_getCitizenship(person) == "(hidden)"  or sndNDB_getCitizenship(person) == "Unknown" then
			table.insert(onlinePeople.Rogues, person)
		else
			table.insert(onlinePeople[sndNDB_getCitizenship(person)], person)
		end
	end

	--snd.message("Data acquisition completed and analysed. List of players online:")
	--echo("\n"..table.concat(players, ", ")..".\nTotal players visible to us: "..#players..".\n")
  echo("\n")
	snd.message(" City affiliations of currently online people:")
	cecho(string.format("\n&lt;%s&gt;[Bloodloch]   :&lt;white&gt;(&lt;orange&gt;%d&lt;white&gt;)&lt;%s&gt; %s.", sndNDB.highlighting.Bloodloch, #onlinePeople.Bloodloch, sndNDB.highlighting.Bloodloch, table.concat(onlinePeople.Bloodloch, ", ")))
	cecho(string.format("\n&lt;%s&gt;[Duiran]      :&lt;white&gt;(&lt;orange&gt;%d&lt;white&gt;)&lt;%s&gt; %s.", sndNDB.highlighting.Duiran, #onlinePeople.Duiran, sndNDB.highlighting.Duiran, table.concat(onlinePeople.Duiran, ", ")))
	cecho(string.format("\n&lt;%s&gt;[Enorian]     :&lt;white&gt;(&lt;orange&gt;%d&lt;white&gt;)&lt;%s&gt; %s.", sndNDB.highlighting.Enorian, #onlinePeople.Enorian, sndNDB.highlighting.Enorian, table.concat(onlinePeople.Enorian, ", ")))
	cecho(string.format("\n&lt;%s&gt;[Spinesreach] :&lt;white&gt;(&lt;orange&gt;%d&lt;white&gt;)&lt;%s&gt; %s.", sndNDB.highlighting.Spinesreach, #onlinePeople.Spinesreach, sndNDB.highlighting.Spinesreach, table.concat(onlinePeople.Spinesreach, ", ")))
	cecho(string.format("\n&lt;%s&gt;[Rogues]      :&lt;white&gt;(&lt;orange&gt;%d&lt;white&gt;)&lt;%s&gt; %s.", sndNDB.highlighting.Rogues, #onlinePeople.Rogues, sndNDB.highlighting.Rogues, table.concat(onlinePeople.Rogues, ", ")))
	echo("\n ")
	send(" ")

end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Gamefeed Parser</name>
							<packageName></packageName>
							<script>function sndNDB_parseFeed(fp)

	local f, s = io.open(fp)
	if f then s = f:read("*l"); io.close(f) end

	-- didn't get JSON data? 
	if s:find("Internal error", 1, true) or s:find("DOCTYPE html PUBLIC", 1, true) then
		cecho("\n&lt;red&gt;Data Acquisition Failed!") 
		return 
	end
	local t = yajl.to_value(s)
	
	local colours = {LDN = "a_darkred", LUP = "a_darkgreen",
		DEA = "tomato",
	}
	local gcolour	= false
	snd.message("Aetolia Game Feed")
	for _, list in pairs(t) do
		if table.contains(colours, list.type) then
			gcolour = colours[list.type]
		else
			gcolour = "NavajoWhite"
		end
		cecho("\n&lt;NavajoWhite&gt;[&lt;"..gcolour.."&gt;"..list.date.."&lt;NavajoWhite&gt;]:")
		cecho(string.rep(" ", 23-string.len(list.date)).."&lt;"..gcolour.."&gt;"..string.trim(list.description))
	end
	send(" ")
  os.remove(fp)

end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Custom Colour Table</name>
							<packageName></packageName>
							<script>color_table = {
        snow                  = {255, 250, 250},
        ghost_white           = {248, 248, 255},
        GhostWhite            = {248, 248, 255},
        white_smoke           = {245, 245, 245},
        WhiteSmoke            = {245, 245, 245},
        gainsboro             = {220, 220, 220},
        floral_white          = {255, 250, 240},
        FloralWhite           = {255, 250, 240},
        old_lace              = {253, 245, 230},
        OldLace               = {253, 245, 230},
        linen                 = {250, 240, 230},
        antique_white         = {250, 235, 215},
        AntiqueWhite          = {250, 235, 215},
        papaya_whip           = {255, 239, 213},
        PapayaWhip            = {255, 239, 213},
        blanched_almond       = {255, 235, 205},
        BlanchedAlmond        = {255, 235, 205},
        bisque                = {255, 228, 196},
        peach_puff            = {255, 218, 185},
        PeachPuff             = {255, 218, 185},
        navajo_white          = {255, 222, 173},
        NavajoWhite           = {255, 222, 173},
        moccasin              = {255, 228, 181},
        cornsilk              = {255, 248, 220},
        ivory                 = {255, 255, 240},
        lemon_chiffon         = {255, 250, 205},
        LemonChiffon          = {255, 250, 205},
        seashell              = {255, 245, 238},
        honeydew              = {240, 255, 240},
        mint_cream            = {245, 255, 250},
        MintCream             = {245, 255, 250},
        azure                 = {240, 255, 255},
        alice_blue            = {240, 248, 255},
        AliceBlue             = {240, 248, 255},
        lavender              = {230, 230, 250},
        lavender_blush        = {255, 240, 245},
        LavenderBlush         = {255, 240, 245},
        misty_rose            = {255, 228, 225},
        MistyRose             = {255, 228, 225},
        white                 = {255, 255, 255},
        black                 = {0, 0, 0},
        dark_slate_gray       = {47, 79, 79},
        DarkSlateGray         = {47, 79, 79},
        dark_slate_grey       = {47, 79, 79},
        DarkSlateGrey         = {47, 79, 79},
        dim_gray              = {105, 105, 105},
        DimGray               = {105, 105, 105},
        dim_grey              = {105, 105, 105},
        DimGrey               = {105, 105, 105},
        slate_gray            = {112, 128, 144},
        SlateGray             = {112, 128, 144},
        slate_grey            = {112, 128, 144},
        SlateGrey             = {112, 128, 144},
        light_slate_gray      = {119, 136, 153},
        LightSlateGray        = {119, 136, 153},
        light_slate_grey      = {119, 136, 153},
        LightSlateGrey        = {119, 136, 153},
        gray                  = {190, 190, 190},
        grey                  = {190, 190, 190},
        light_grey            = {211, 211, 211},
        LightGrey             = {211, 211, 211},
        light_gray            = {211, 211, 211},
        LightGray             = {211, 211, 211},
        midnight_blue         = {25, 25, 112},
        MidnightBlue          = {25, 25, 112},
        navy                  = {0, 0, 128},
        navy_blue             = {0, 0, 128},
        NavyBlue              = {0, 0, 128},
        cornflower_blue       = {100, 149, 237},
        CornflowerBlue        = {100, 149, 237},
        dark_slate_blue       = {72, 61, 139},
        DarkSlateBlue         = {72, 61, 139},
        slate_blue            = {106, 90, 205},
        SlateBlue             = {106, 90, 205},
        medium_slate_blue     = {123, 104, 238},
        MediumSlateBlue       = {123, 104, 238},
        light_slate_blue      = {132, 112, 255},
        LightSlateBlue        = {132, 112, 255},
        medium_blue           = {0, 0, 205},
        MediumBlue            = {0, 0, 205},
        royal_blue            = {65, 105, 225},
        RoyalBlue             = {65, 105, 225},
        blue                  = {0, 0, 255},
        dodger_blue           = {30, 144, 255},
        DodgerBlue            = {30, 144, 255},
        deep_sky_blue         = {0, 191, 255},
        DeepSkyBlue           = {0, 191, 255},
        sky_blue              = {135, 206, 235},
        SkyBlue               = {135, 206, 235},
        light_sky_blue        = {135, 206, 250},
        LightSkyBlue          = {135, 206, 250},
        steel_blue            = {70, 130, 180},
        SteelBlue             = {70, 130, 180},
        light_steel_blue      = {176, 196, 222},
        LightSteelBlue        = {176, 196, 222},
        light_blue            = {173, 216, 230},
        LightBlue             = {173, 216, 230},
        powder_blue           = {176, 224, 230},
        PowderBlue            = {176, 224, 230},
        pale_turquoise        = {175, 238, 238},
        PaleTurquoise         = {175, 238, 238},
        dark_turquoise        = {0, 206, 209},
        DarkTurquoise         = {0, 206, 209},
        medium_turquoise      = {72, 209, 204},
        MediumTurquoise       = {72, 209, 204},
        turquoise             = {64, 224, 208},
        cyan                  = {0, 255, 255},
        light_cyan            = {224, 255, 255},
        LightCyan             = {224, 255, 255},
        cadet_blue            = {95, 158, 160},
        CadetBlue             = {95, 158, 160},
        medium_aquamarine     = {102, 205, 170},
        MediumAquamarine      = {102, 205, 170},
        aquamarine            = {127, 255, 212},
        dark_green            = {0, 100, 0},
        DarkGreen             = {0, 100, 0},
        dark_olive_green      = {85, 107, 47},
        DarkOliveGreen        = {85, 107, 47},
        dark_sea_green        = {143, 188, 143},
        DarkSeaGreen          = {143, 188, 143},
        sea_green             = {46, 139, 87},
        SeaGreen              = {46, 139, 87},
        medium_sea_green      = {60, 179, 113},
        MediumSeaGreen        = {60, 179, 113},
        light_sea_green       = {32, 178, 170},
        LightSeaGreen         = {32, 178, 170},
        pale_green            = {152, 251, 152},
        PaleGreen             = {152, 251, 152},
        spring_green          = {0, 255, 127},
        SpringGreen           = {0, 255, 127},
        lawn_green            = {124, 252, 0},
        LawnGreen             = {124, 252, 0},
        green                 = {0, 255, 0},
        chartreuse            = {127, 255, 0},
        MediumSpringGreen     = {0, 250, 154},
        green_yellow          = {173, 255, 47},
        GreenYellow           = {173, 255, 47},
        lime_green            = {50, 205, 50},
        LimeGreen             = {50, 205, 50},
        yellow_green          = {154, 205, 50},
        YellowGreen           = {154, 205, 50},
        forest_green          = {34, 139, 34},
        ForestGreen           = {34, 139, 34},
        olive_drab            = {107, 142, 35},
        OliveDrab             = {107, 142, 35},
        dark_khaki            = {189, 183, 107},
        DarkKhaki             = {189, 183, 107},
        khaki                 = {240, 230, 140},
        pale_goldenrod        = {238, 232, 170},
        PaleGoldenrod         = {238, 232, 170},
        light_yellow          = {255, 255, 224},
        LightYellow           = {255, 255, 224},
        yellow                = {255, 255, 0},
        gold                  = {255, 215, 0},
        light_goldenrod       = {238, 221, 130},
        LightGoldenrod        = {238, 221, 130},
        goldenrod             = {218, 165, 32},
        dark_goldenrod        = {184, 134, 11},
        DarkGoldenrod         = {184, 134, 11},
        rosy_brown            = {188, 143, 143},
        RosyBrown             = {188, 143, 143},
        indian_red            = {205, 92, 92},
        IndianRed             = {205, 92, 92},
        saddle_brown          = {139, 69, 19},
        SaddleBrown           = {139, 69, 19},
        sienna                = {160, 82, 45},
        peru                  = {205, 133, 63},
        burlywood             = {222, 184, 135},
        beige                 = {245, 245, 220},
        wheat                 = {245, 222, 179},
        sandy_brown           = {244, 164, 96},
        SandyBrown            = {244, 164, 96},
        tan                   = {210, 180, 140},
        chocolate             = {210, 105, 30},
        firebrick             = {178, 34, 34},
        brown                 = {165, 42, 42},
        dark_salmon           = {233, 150, 122},
        DarkSalmon            = {233, 150, 122},
        salmon                = {250, 128, 114},
        light_salmon          = {255, 160, 122},
        LightSalmon           = {255, 160, 122},
        orange                = {255, 165, 0},
        dark_orange           = {255, 140, 0},
        DarkOrange            = {255, 140, 0},
        coral                 = {255, 127, 80},
        light_coral           = {240, 128, 128},
        LightCoral            = {240, 128, 128},
        tomato                = {255, 99, 71},
        orange_red            = {255, 69, 0},
        OrangeRed             = {255, 69, 0},
        red                   = {255, 0, 0},
        hot_pink              = {255, 105, 180},
        HotPink               = {255, 105, 180},
        deep_pink             = {255, 20, 147},
        DeepPink              = {255, 20, 147},
        pink                  = {255, 192, 203},
        light_pink            = {255, 182, 193},
        LightPink             = {255, 182, 193},
        pale_violet_red       = {219, 112, 147},
        PaleVioletRed         = {219, 112, 147},
        maroon                = {176, 48, 96},
        medium_violet_red     = {199, 21, 133},
        MediumVioletRed       = {199, 21, 133},
        violet_red            = {208, 32, 144},
        VioletRed             = {208, 32, 144},
        magenta               = {255, 0, 255},
        violet                = {238, 130, 238},
        plum                  = {221, 160, 221},
        orchid                = {218, 112, 214},
        medium_orchid         = {186, 85, 211},
        MediumOrchid          = {186, 85, 211},
        dark_orchid           = {153, 50, 204},
        DarkOrchid            = {153, 50, 204},
        dark_violet           = {148, 0, 211},
        DarkViolet            = {148, 0, 211},
        blue_violet           = {138, 43, 226},
        BlueViolet            = {138, 43, 226},
        purple                = {160, 32, 240},
        medium_purple         = {147, 112, 219},
        MediumPurple          = {147, 112, 219},
        thistle               = {216, 191, 216},

        a_darkred             = {128, 0, 0},
        a_darkgreen           = {0, 179, 0},
        a_brown               = {128, 128, 0},
        a_darkblue            = {0, 0, 128},
        a_darkmagenta         = {128, 0, 128},
        a_darkcyan            = {0, 128, 128},
        a_grey                = {192, 192, 192},
        a_darkgrey            = {128, 128, 128},
        a_red                 = {255, 0, 0},
        a_green               = {0, 255, 0},
        a_yellow              = {255, 255, 0},
        a_blue                = {0, 85, 255},
        a_magenta             = {255, 0, 255},
        a_cyan                = {0, 255, 255},
		a_white               = {255, 255, 255},

		chat_bg 				 = {25, 25, 25},
}

function fgcolor(color)
	setFgColor(color_table[color][1], color_table[color][2], color_table[color][3])
end

function bgcolor(color)
	setBgColor(color_table[color][1], color_table[color][2], color_table[color][3])
end

function cfgcolor(console, color)
	setFgColor(console, color_table[color][1], color_table[color][2], color_table[color][3])
end

function cbgcolor(console, color)
	setBgColor(console, color_table[color][1], color_table[color][2], color_table[color][3])
end

function showColours(num)
	cecho("\n&lt;green&gt; Showing a list of available colours, with "..num.." columns: \n")
	local lineBreak = num
	local linecount = 0
	local padding = math.floor(90/num)
	
	for col, tab in pairs(color_table) do
		linecount = linecount + 1
		cecho(string.rep(" ", padding-#col).."&lt;"..col.."&gt;"..col.."&lt;NavajoWhite&gt;,")
		if linecount &gt;= lineBreak then
			echo("\n")
			linecount = 0
		end
	end
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Sunder Toggles</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Toggles load + save</name>
							<packageName></packageName>
							<script>function snd_toggleSave(disp)
	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local save_loc = getMudletHomeDir() .. separator .. "sunderToggles"
  
	table.save(save_loc, snd.toggles)
	
	if disp then
		snd.message("Current toggle configuration saved.")
	end	
end

function snd_toggleLoad()
	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local load_loc = getMudletHomeDir() .. separator .. "sunderToggles"
 
	if not io.exists(load_loc) then 
		snd.message("Toggle save file not found; will save when you next disconnect/QQ.")
		return
	end
	
	table.load(load_loc, snd.toggles)
	snd.message("Toggles found; we loaded them in just fine.")
  snd.goggle_update()
	snd_toggleSave(false)
end

registerAnonymousEventHandler("sysDisconnectionEvent", "snd_toggleSave", true)
registerAnonymousEventHandler("sysLoadEvent", "snd_toggleLoad")

</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>toggle info</name>
							<packageName></packageName>
							<script>snd.toggle_info = {
active = {info = "System full stop of on/off.", command = "sndon and sndoff"},
parrying = {info = "Basic parry set-up.", command = "tpry or toggle parry"},
defenses = {info = "Maintain defenses automatically.", command = "defup"},
calling = {info = "Call targets over web.", command = "tcl"},
listening = {info = "Accept targets over web.", command = "ls &lt;name name name&gt;"},
affcalling = {info = "Call affs over web.", command = "acl"},
chameleon = {info = "Use chameleon tattoo/racial.", command = "tcm"},
bashing = {info = "Kill NPCs in your room.", command = "aa"},
fasthunt = {info = "Toggle on to clear rooms as you walk around.", command = "ff"},
generics = {info = "Uses name instead of number while bashing.", command = "toggle generic"}, 
gathering = {info = "Pick up items while bashing.", command = "On when fasthunt is active"}, 
lighting = {info = "Toggle lighting pipes.", command = "lgt or toggle (lighting|pipes)"},
attacking = {info = "Turns on/off based on aliases for PvP.", command = "See Sunder Help PK"},
balecho = {info = "Replaces bal/eq with colorful echoes.", command = "automatic"}, 
atkecho = {info = "Replaces attack lines with shorthand.", command = "tatk or toggle attack echo"},
newbie = {info = "Newbie bashing attacks only.", command = "tnewb or toggle newbie"},
cobra = {info = "Toggle cobra bashing for monks.", command = "toggle cobra"}, 
lightning = {info = "Toggle luminary lightning to bash.", command = "tlgt or toggle lightning"},
gallop = {info = "Use gallop while pathing around.", command = "tgl or toggle gallop"},
dash =  {info = "Use of dash while pathing around.", command = "tds or toggle dash"},
rockharvest = {info = "Harvest rocks as you walk around.", command = "tr or toggle rockharvest"},
plants = {info = "Shows plants in the room as you walk.", command = "toggle plants"}, 
disperse = {info = "Use disperse to remove writhes from allies.", command = "toggle disperse (all|callers|none)"},
questing = {info = "Toggle questing.", command = "toggle questing"},
vermin = {info = "Vermin walking/killing/turnin.", command = "toggle vermin"},
goggles = {info = "Telling Sunder you have antiquated goggles.", command = "toggle goggles"},
goggle_level = {info = "What level are your goggles?", command = "mygoggles or mygoggles &lt;level&gt;"},
nontargetgags = {info = "Remove nontarget cures from output.", command = "toggle non target gagging"},
aegis = {info = "Do you want Sunder to auto aegis for you?", command = "toggle aegis"},
auto_reject = {info = "Should we auto reject lust attempts?", command = "toggle reject"},
}</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Bashing</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Auto Bashing</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>init</name>
							<packageName></packageName>
							<script>
bot = bot or {}

bot.info = {
room = "",
area = "",
next = ""
}

bot.new_room = false
bot.going = false
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>bot_room_info</name>
							<packageName></packageName>
							<script>
function bot_room_info()
--echo("I see you")
 if bot.info.room ~= gmcp.Room.Info.num then
  bot.new_room = true
  bot.info.room = gmcp.Room.Info.num
  bot.info.area = gmcp.Room.Info.area
 end
end</script>
							<eventHandlerList>
								<string>gmcp.Room.Info</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>paths</name>
							<packageName></packageName>
							<script>function sndpathpick()

local check = {}

if snd.which_path == "verminspines" then
check = {
--Spinesreach
v11687 = "11695",
v11695 = "11696",
v11696 = "11701",
v11701 = "11702",
v11702 = "11703",
v11703 = "14984",
v14984 = "13029",
v13029 = "13041",
v13041 = "13895",
v13895 = "13893",
v13893 = "14328",
v14328 = "12994",
v12994 = "15145",
v15145 = "18453",
v18453 = "12992",
v12992 = "33219",
v33219 = "18458",
v18458 = "18461",
v18461 = "18457",
v18457 = "18460",
v18460 = "18456",
v18456 = "12664",
v12664 = "13707",
v13707 = "18455",
v18455 = "18459",
v18459 = "12662",
v12662 = "56625",
v56625 = "56627",
v56627 = "56628",
v56628 = "56626",
v56626 = "18454",
v18454 = "51752",
v51752 = "54055",
v54055 = "54058",
v54058 = "54059",
v54059 = "54057",
v54057 = "54056",
v54056 = "51979",
v51979 = "51455",
v51455 = "52744",
v52744 = "52753",
v52753 = "52745",
v52745 = "55191",
v55191 = "55192",
v55192 = "56735",
v56735 = "58448",
v58448 = "58449",
v58449 = "58450",
v58450 = "23501",
v23501 = "23500",
v23500 = "23499",
v23499 = "23498",
v23498 = "23497",
v23497 = "23496",
v23496 = "23491",
v23491 = "23502",
v23502 = "23503",
v23503 = "23492",
v23492 = "23494",
v23494 = "23495",
v23495 = "23493",
v23493 = "23490",
v23490 = "14481",
v14481 = "14487",
v14487 = "12965",
v12965 = "12966",
v12966 = "12970",
v12970 = "12973",
v12973 = "44585",

}

elseif snd.which_path == "verminduiran" then
check = {

v44060 = "44062",
v44058 = "44058",
v44046 = "44046",
v44053 = "44053",
v44042 = "44042",
v44045 = "44045",
v44044 = "44044",
v44043 = "44043",
v44051 = "44051",
v44050 = "44050",
v44055 = "44055",
v44047 = "44047",
v44048 = "44048",
v44067 = "44067",
v44059 = "44059",
v44064 = "44064",
v44068 = "44065",
v44065 = "44061",
v44061 = "44069",
v44069 = "44060",
v44060 = "44073",
v44073 = "44072",
v44072 = "44071",
v44071 = "44070",
v44070 = "44063",
v44063 = "44066",
v44066 = "43984",
v43984 = "43978",
v43978 = "43975",
v43975 = "43973",
v43973 = "43962",
v43962 = "43963",
v43963 = "43964",
v43964 = "43754",
v43754 = "43965",
v43965 = "43966",
v43966 = "43972",
v43972 = "43969",
v43969 = "43968",
v43968 = "44037",
v44037 = "44036",
v44036 = "44034",
v44034 = "44033",
v44033 = "44030",
v44030 = "44027",
v44027 = "44026",
v44026 = "44023",
v44023 = "44022",
v44022 = "44025",
v44025 = "44013",
v44013 = "44020",
v44020 = "44019",
v44019 = "44018",
v44018 = "44016",
v44016 = "44014",
v44014 = "44015",
v44015 = "44017",
v44017 = "44041",
v44041 = "43758",
v43758 = "43757",
v43757 = "43740",
v43740 = "43739",
v43739 = "43755",
v43755 = "43756",
v43756 = "44001",
v44001 = "44006",
v44006 = "44000",
v44000 = "43999",
v43999 = "43885",

}

elseif snd.which_path == "verminenorian" then
check = {

v56484 = "56471",
v56471 = "56483",
v56483 = "56485",
v56485 = "56487",
v56487 = "56486",
v56486 = "56481",
v56481 = "56482",
v56482 = "56470",
v56470 = "56473",
v56473 = "56474",
v56474 = "56469",
v56469 = "56480",
v56480 = "56479",
v56479 = "56451",
v56451 = "56450",
v56450 = "56464",
v56464 = "56447",
v56447 = "56446",
v56446 = "56465",
v56465 = "55808",
v55808 = "56452",
v56452 = "56443",
v56443 = "56442",
v56442 = "56448",
v56448 = "56449",
v56449 = "56441",
v56441 = "56445",
v56445 = "56444",
v56444 = "56438",
v56438 = "56440",
v56440 = "56439",
v56439 = "56437",
v56437 = "54105",
v54105 = "54111",
v54111 = "54112",
v54112 = "54113",
v54113 = "54114",
v54114 = "55820",
v55820 = "55827",
v55827 = "55834",
v55834 = "55864",
v55864 = "55866",
v55866 = "55839",
v55839 = "55830",
v55830 = "55829",
v55829 = "55828",
v55828 = "54115",
v54115 = "54089",
v54089 = "54088",
v54088 = "54087",
v54087 = "54086",
v54086 = "54085",
v54085 = "54101",
v54101 = "54100",
v54100 = "54099",
v54099 = "54098",
v54098 = "51959",
v51959 = "51960",
v51960 = "55003",
v55003 = "51961",
v51961 = "55146",
v55146 = "55194",
v55194 = "55705",
v55705 = "55347",
v55347 = "55738",
v55738 = "55759",
v55759 = "55739",
v55739 = "55743",
v55743 = "55740",
v55740 = "55744",
v55744 = "55745",
v55745 = "55746",
v55746 = "55754",
v55754 = "55755",
v55755 = "54097",
v54097 = "54096",
v54096 = "56525",

}

elseif snd.which_path == "verminbloodloch" then
check = {

v9193 = "9194",
v9194 = "9195",
v9195 = "9196",
v9196 = "9197",
v9197 = "9201",
v9201 = "9202",
v9202 = "9206",
v9206 = "1331",
v1331 = "1333",
v1333 = "9376",
v9376 = "4974",
v4974 = "4963",
v4963 = "42903",
v42903 = "6817",
v6817 = "6819",
v6819 = "6821",
v6821 = "4719",
v4719 = "4690",
v4690 = "8007",
v8007 = "18278",
v18278 = "24197",
v24197 = "12636",
v12636 = "4683",
v4683 = "4680",
v4680 = "5554",
v5554 = "4429",
v4429 = "4400",
v4400 = "5553",
v5553 = "9207",
v9207 = "9208",
v9208 = "9209",
v9209 = "9210",
v9210 = "3490",
v3490 = "1538",
v1538 = "5451",
v5451 = "5458",
v5458 = "5461",
v5461 = "5638",
v5638 = "6157",
v6157 = "1537",
v1537 = "1338",
v1338 = "1337",
v1337 = "2905",
v2905 = "5440",
v5440 = "5441",
v5441 = "5450",
v5450 = "7678",
v7678 = "7689",
v7679 = "4674",
v4674 = "9190",

}

elseif snd.which_path == "arbothia" then
check = {
-- Arbothia Mansion

v15409 = "15410",
v15410 = "15427",
v15427 = "28115",
v28115 = "15410",
v15410 = "15412",
v15412 = "15422",
v15422 = "15412",
v15412 = "15417",
v15417 = "15420",
v15420 = "15421",
v15421 = "15429",
v15429 = "15430",
v15430 = "15428",
v15428 = "15419",
v15419 = "27100",
v27100 = "27101",
v27101 = "27102",
v27102 = "27111",
v27111 = "27110",
v27110 = "15415",
v15415 = "15416",
v15416 = "27119",
v27119 = "27115",
v27115 = "27114",
v27114 = "27113",
v27113 = "27103",
v27103 = "27116",
v27116 = "27120",
v27120 = "27121",
v27121 = "27122",
v27122 = "27123",
v27123 = "27112",
v27112 = "27117",
v27117 = "27118",
v27118 = "27106",
v27106 = "27105",
v27105 = "15411",
v15411 = "27105",
v27105 = "27104",
v27104 = "15418",
v15418 = "27107",
v27107 = "27109",
v27109 = "27107",
v27107 = "27108",
v27108 = "27107",
v27107 = "15418",
v15418 = "27104",
v27104 = "15413",
v15413 = "36677",

}

elseif snd.which_path == "bloodwood" then
check = {

v57548 = "57547",
v57547 = "57543",
v57543 = "57542",
v57542 = "57541",
v57541 = "57533",
v57533 = "57529",
v57529 = "57527",
v57527 = "57526",
v57526 = "57525",
v57525 = "57524",
v57524 = "57522",
v57522 = "57521",
v57521 = "57523",
v57523 = "57578",
v57578 = "57592",
v57592 = "57591",
v57591 = "57594",
v57594 = "57595",
v57595 = "57609",
v57609 = "57616",
v57616 = "57615",
v57615 = "57614",
v57614 = "57613",
v57613 = "57612",
v57612 = "57611",
v57611 = "57610",
v57610 = "57596",
v57596 = "57597",
v57597 = "57601",
v57601 = "57602",
v57602 = "57603",
v57603 = "57607",
v57607 = "57608",
v57608 = "57606",
v57606 = "57605",
v57605 = "57604",
v57604 = "57600",
v57600 = "57599",
v57599 = "57598",
v57598 = "57593",
v57593 = "57579",
v57579 = "57580",
v57580 = "57590",
v57590 = "57589",
v57589 = "57588",
v57588 = "57586",
v57586 = "57587",
v57587 = "57585",
v57585 = "57584",
v57584 = "57581",
v57581 = "57582",
v57582 = "57583",
v57583 = "57564",
v57564 = "57560",
v57560 = "57561",
v57561 = "57562",
v57562 = "57563",
v57563 = "57556",
v57556 = "57557",
v57557 = "57558",
v57558 = "57559",
v57559 = "57550",
v57550 = "57549",
v57549 = "57546",
v57546 = "57545",
v57545 = "57553",
v57553 = "57552",
v57552 = "57554",
v57554 = "57555",
v57555 = "57551",
v57551 = "57544",
v57544 = "57537",
v57537 = "57538",
v57538 = "57539",
v57539 = "57532",
v57532 = "57540",
v57540 = "57528",
v57528 = "57530",
v57530 = "57531",
v57531 = "57534",
v57534 = "57535",
v57535 = "57536",
v57536 = "57548",
v57548 = "57547",
v57547 = "57543",
v57543 = "57542",
v57542 = "57541",
v57541 = "57533",
v57533 = "57529",
v57529 = "57527",
v57527 = "57526",
v57526 = "57525",
v57525 = "57524",
v57524 = "57522",
v57522 = "57521",
v57521 = "57523",
v57523 = "57578",
v57578 = "57592",
v57592 = "57591",
v57591 = "57594",
v57594 = "57595",
v57595 = "57609",
v57609 = "57616",
v57616 = "57615",
v57615 = "57614",
v57614 = "57613",
v57613 = "57612",
v57612 = "57611",
v57611 = "57610",
v57610 = "57596",
v57596 = "57597",
v57597 = "57601",
v57601 = "57602",
v57602 = "57603",
v57603 = "57607",
v57607 = "57608",
v57608 = "57606",
v57606 = "57605",
v57605 = "57604",
v57604 = "57600",
v57600 = "57599",
v57599 = "57598",
v57598 = "57593",
v57593 = "57579",
v57579 = "57580",
v57580 = "57590",
v57590 = "57589",
v57589 = "57588",
v57588 = "57586",
v57586 = "57587",
v57587 = "57585",
v57585 = "57584",
v57584 = "57581",
v57581 = "57582",
v57582 = "57583",
v57583 = "57564",
v57564 = "57560",
v57560 = "57561",
v57561 = "57562",
v57562 = "57563",
v57563 = "57556",
v57556 = "57557",
v57557 = "57558",
v57558 = "57559",
v57559 = "57550",
v57550 = "57549",
v57549 = "57546",
v57546 = "57545",
v57545 = "57553",
v57553 = "57552",
v57552 = "57554",
v57554 = "57555",
v57555 = "57551",
v57551 = "57544",
v57544 = "57537",
v57537 = "57538",
v57538 = "57539",
v57539 = "57532",
v57532 = "57540",
v57540 = "57528",
v57528 = "57530",
v57530 = "57531",
v57531 = "57534",
v57534 = "57535",
v57535 = "57536",
v57536 = "57548",

}

elseif snd.which_path == "tcanna" then
check = {

v51239 = "51242",
v51242 = "51244",
v51244 = "52633",
v52633 = "52634",
v52634 = "52635",
v52635 = "52636",
v52636 = "53331",
v53331 = "53339",
v53339 = "53560",
v53560 = "53566",
v53566 = "53567",
v53567 = "53592",
v53592 = "53593",
v53593 = "53618",
v53618 = "53619",
v53619 = "53633",
v53633 = "53634",
v53634 = "53635",
v53635 = "53636",
v53636 = "53637",
v53637 = "53639",
v53639 = "53640",
v53640 = "53641",
v53641 = "53642",
v53642 = "53643",
v53643 = "53644",
v53644 = "53645",
v53645 = "53828",
v53828 = "53996",
v53996 = "53997",
v53997 = "53998",
v53998 = "53999",
v53999 = "54000",
v54000 = "54001",
v54001 = "54002",
v54002 = "54003",
v54003 = "54004",
v54004 = "54005",
v54005 = "54006",
v54006 = "54007",
v54007 = "54008",
v54008 = "54009",
v54009 = "54010",
v54010 = "54011",
v54011 = "54012",
v54012 = "54013",
v54013 = "54018",
v54018 = "54019",
v54019 = "54020",
v54020 = "54021",
v54021 = "54022",
v54022 = "54023",
v54023 = "54024",
v54024 = "54028",
v54028 = "54029",
v54029 = "54030",
v54030 = "54031",
v54031 = "54037",
v54037 = "54038",
v54038 = "54039",
v54039 = "54040",
v54040 = "54042",
v54042 = "54043",
v54043 = "54044",
v54044 = "54045",
v54045 = "54046",
v54046 = "54048",
v54048 = "54049",
v54049 = "54050",
v54050 = "54052",
v54052 = "54053",
v54053 = "54054",
v54054 = "54060",
v54060 = "54062",
v54062 = "54065",
v54065 = "54069",
v54069 = "54125",
v54125 = "54126",
v54126 = "54127",
v54127 = "54128",
v54128 = "54131",
v54131 = "54132",
v54132 = "54136",
v54136 = "54137",
v54137 = "54140",
v54140 = "54141",
v54141 = "54142",
v54142 = "54143",
v54143 = "54144",
v54144 = "54145",
v54145 = "54146",
v54146 = "54147",
v54147 = "54148",
v54148 = "54149",
v54149 = "54150",
v54150 = "54156",
v54156 = "54157",
v54157 = "54158",
v54158 = "54159",
v54159 = "54164",
v54164 = "54165",
v54165 = "54223",
v54223 = "54224",
v54224 = "54225",
v54225 = "54226",
v54226 = "54230",
v54230 = "54235",
v54235 = "54236",
v54236 = "54239",
v54239 = "54240",
v54240 = "54241",
v54241 = "54254",
v54254 = "54255",
v54255 = "54258",
v54258 = "54264",
v54264 = "54265",
v54265 = "54266",
v54266 = "54268",
v54268 = "54272",
v54272 = "54273",
v54273 = "54274",
v54274 = "54275",
v54275 = "54288",
v54288 = "54289",
v54289 = "54290",
v54290 = "54292",
v54292 = "54295",
v54295 = "54296",
v54296 = "54298",
v54298 = "54301",
v54301 = "54309",
v54309 = "54310",
v54310 = "54312",
v54312 = "54313",
v54313 = "54314",
v54314 = "54316",
v54316 = "54317",
v54317 = "54320",
v54320 = "54321",
v54321 = "54322",
v54322 = "54323",
v54323 = "54324",
v54324 = "54325",
v54325 = "54326",
v54326 = "54327",
v54327 = "54328",
v54328 = "54330",
v54330 = "54333",
v54333 = "54334",
v54334 = "54335",
v54335 = "54336",
v54336 = "54337",
v54337 = "54339",
v54339 = "54341",
v54341 = "54342",
v54342 = "54343",
v54343 = "54344",
v54344 = "54345",
v54345 = "54346",
v54346 = "54347",
v54347 = "54348",
v54348 = "54349",
v54349 = "54350",
v54350 = "54351",
v54351 = "54352",
v54352 = "54353",
v54353 = "54354",
v54354 = "54355",
v54355 = "54356",
v54356 = "54357",
v54357 = "54358",
v54358 = "54361",
v54361 = "54362",
v54362 = "54363",
v54363 = "54368",
v54368 = "54371",
v54371 = "54372",
v54372 = "54373",
v54373 = "54374",
v54374 = "54375",
v54375 = "54389",
v54389 = "54390",
v54390 = "54391",
v54391 = "54392",
v54392 = "54393",
v54393 = "54401",
v54401 = "54402",
v54402 = "54447",
v54447 = "54448",
v54448 = "54453",
v54453 = "54454",
v54454 = "54455",
v54455 = "54457",
v54457 = "54458",
v54458 = "54459",
v54459 = "54460",
v54460 = "54461",
v54461 = "54462",
v54462 = "54463",
v54463 = "54464",
v54464 = "54465",
v54465 = "54467",
v54467 = "54468",
v54468 = "54469",
v54469 = "54475",
v54475 = "54476",
v54476 = "54477",
v54477 = "54479",
v54479 = "54480",
v54480 = "54481",
v54481 = "54484",
v54484 = "54485",
v54485 = "54486",
v54486 = "54487",
v54487 = "54488",
v54488 = "54489",
v54489 = "54490",
v54490 = "54491",
v54491 = "54492",
v54492 = "54496",
v54496 = "54498",
v54498 = "54502",
v54502 = "54507",
v54507 = "54508",
v54508 = "54509",
v54509 = "54510",
v54510 = "54511",
v54511 = "54512",
v54512 = "54519",
v54519 = "54520",
v54520 = "54521",
v54521 = "54522",
v54522 = "54523",
v54523 = "54524",
v54524 = "54525",
v54525 = "54529",
v54529 = "54574",
v54574 = "54575",
v54575 = "54576",
v54576 = "54577",
v54577 = "54578",
v54578 = "54580",
v54580 = "54581",
v54581 = "54582",
v54582 = "54583",
v54583 = "54584",
v54584 = "54586",
v54586 = "54587",
v54587 = "54588",
v54588 = "54593",
v54593 = "54594",
v54594 = "54595",
v54595 = "54596",
v54596 = "54597",
v54597 = "54598",
v54598 = "54599",
v54599 = "54600",
v54600 = "54601",
v54601 = "54602",
v54602 = "54603",
v54603 = "54604",
v54604 = "54605",
v54605 = "54606",
v54606 = "54608",
v54608 = "54611",
v54611 = "54623",
v54623 = "54625",
v54625 = "54627",
v54627 = "54628",
v54628 = "54629",
v54629 = "54630",
v54630 = "54631",
v54631 = "54632",
v54632 = "54633",
v54633 = "54634",
v54634 = "54635",
v54635 = "54636",
v54636 = "54637",
v54637 = "54682",
v54682 = "54683",
v54683 = "54713",
v54713 = "54714",
v54714 = "54715",
v54715 = "54716",
v54716 = "54717",
v54717 = "54718",
v54718 = "54719",
v54719 = "54720",
v54720 = "54721",
v54721 = "54722",
v54722 = "54741",
v54741 = "54742",
v54742 = "54743",
v54743 = "54744",
v54744 = "54745",
v54745 = "54747",
v54747 = "54748",
v54748 = "54749",
v54749 = "54750",
v54750 = "54751",
v54751 = "54752",
v54752 = "54753",
v54753 = "54754",
v54754 = "54755",
v54755 = "54756",
v54756 = "54798",
v54798 = "54799",
v54799 = "54800",
v54800 = "54801",
v54801 = "54802",
v54802 = "54803",
v54803 = "54804",
v54804 = "54806",
v54806 = "54807",
v54807 = "54808",
v54808 = "54809",
v54809 = "54810",
v54810 = "54811",
v54811 = "54812",
v54812 = "54813",
v54813 = "54814",
v54814 = "54815",
v54815 = "54819",
v54819 = "54820",
v54820 = "54821",
v54821 = "54822",
v54822 = "54823",
v54823 = "54824",
v54824 = "54825",
v54825 = "54826",
v54826 = "54827",
v54827 = "54828",
v54828 = "54829",
v54829 = "54830",
v54830 = "54831",
v54831 = "54832",
v54832 = "54833",
v54833 = "54834",
v54834 = "54835",
v54835 = "54836",
v54836 = "54837",
v54837 = "54838",
v54838 = "54839",
v54839 = "54840",
v54840 = "54841",
v54841 = "54842",
v54842 = "54843",
v54843 = "54844",
v54844 = "54845",
v54845 = "54846",
v54846 = "54847",
v54847 = "54848",
v54848 = "54849",
v54849 = "54850",
v54850 = "54851",
v54851 = "54852",
v54852 = "54853",
v54853 = "54854",
v54854 = "54855",
v54855 = "54857",
v54857 = "54858",
v54858 = "54859",
v54859 = "54860",
v54860 = "54861",
v54861 = "54862",
v54862 = "54863",
v54863 = "54864",
v54864 = "54865",
v54865 = "54866",
v54866 = "54867",
v54867 = "54868",
v54868 = "54869",
v54869 = "54870",
v54870 = "54871",
v54871 = "54872",
v54872 = "54873",
v54873 = "54874",
v54874 = "54875",
v54875 = "54876",
v54876 = "54877",
v54877 = "54878",
v54878 = "54879",
v54879 = "54880",
v54880 = "54881",
v54881 = "54902",
v54902 = "54992",
v54992 = "54993",
v54993 = "54994",
v54994 = "54995",
v54995 = "54996",
v54996 = "54997",
v54997 = "54998",
v54998 = "54999",
v54999 = "55000",
v55000 = "55001",
v55001 = "55237",
v55237 = "55238",
v55238 = "55239",
v55239 = "55240",
v55240 = "55241",
v55241 = "54166",
v54166 = "51224", --FLY Here
v51224 = "51239",
v51239 = "51242",
v51242 = "51244",
v51244 = "52633",
v52633 = "52634",
v52634 = "52635",
v52635 = "52636",
v52636 = "53331",
v53331 = "53339",
v53339 = "53560",
v53560 = "53566",
v53566 = "53567",
v53567 = "53592",
v53592 = "53593",
v53593 = "53618",
v53618 = "53619",
v53619 = "53633",
v53633 = "53634",
v53634 = "53635",
v53635 = "53636",
v53636 = "53637",
v53637 = "53639",
v53639 = "53640",
v53640 = "53641",
v53641 = "53642",
v53642 = "53643",
v53643 = "53644",
v53644 = "53645",
v53645 = "53828",
v53828 = "53996",
v53996 = "53997",
v53997 = "53998",
v53998 = "53999",
v53999 = "54000",
v54000 = "54001",
v54001 = "54002",
v54002 = "54003",
v54003 = "54004",
v54004 = "54005",
v54005 = "54006",
v54006 = "54007",
v54007 = "54008",
v54008 = "54009",
v54009 = "54010",
v54010 = "54011",
v54011 = "54012",
v54012 = "54013",
v54013 = "54018",
v54018 = "54019",
v54019 = "54020",
v54020 = "54021",
v54021 = "54022",
v54022 = "54023",
v54023 = "54024",
v54024 = "54028",
v54028 = "54029",
v54029 = "54030",
v54030 = "54031",
v54031 = "54037",
v54037 = "54038",
v54038 = "54039",
v54039 = "54040",
v54040 = "54042",
v54042 = "54043",
v54043 = "54044",
v54044 = "54045",
v54045 = "54046",
v54046 = "54048",
v54048 = "54049",
v54049 = "54050",
v54050 = "54052",
v54052 = "54053",
v54053 = "54054",
v54054 = "54060",
v54060 = "54062",
v54062 = "54065",
v54065 = "54069",
v54069 = "54125",
v54125 = "54126",
v54126 = "54127",
v54127 = "54128",
v54128 = "54131",
v54131 = "54132",
v54132 = "54136",
v54136 = "54137",
v54137 = "54140",
v54140 = "54141",
v54141 = "54142",
v54142 = "54143",
v54143 = "54144",
v54144 = "54145",
v54145 = "54146",
v54146 = "54147",
v54147 = "54148",
v54148 = "54149",
v54149 = "54150",
v54150 = "54156",
v54156 = "54157",
v54157 = "54158",
v54158 = "54159",
v54159 = "54164",
v54164 = "54165",
v54165 = "54223",
v54223 = "54224",
v54224 = "54225",
v54225 = "54226",
v54226 = "54230",
v54230 = "54235",
v54235 = "54236",
v54236 = "54239",
v54239 = "54240",
v54240 = "54241",
v54241 = "54258",
v54258 = "54264",
v54264 = "54265",
v54265 = "54266",
v54266 = "54268",
v54268 = "54272",
v54272 = "54273",
v54273 = "54274",
v54274 = "54275",
v54275 = "54288",
v54288 = "54289",
v54289 = "54290",
v54290 = "54292",
v54292 = "54295",
v54295 = "54296",
v54296 = "54298",
v54298 = "54301",
v54301 = "54309",
v54309 = "54310",
v54310 = "54312",
v54312 = "54313",
v54313 = "54314",
v54314 = "54316",
v54316 = "54317",
v54317 = "54320",
v54320 = "54321",
v54321 = "54322",
v54322 = "54323",
v54323 = "54324",
v54324 = "54325",
v54325 = "54326",
v54326 = "54327",
v54327 = "54328",
v54328 = "54330",
v54330 = "54333",
v54333 = "54334",
v54334 = "54335",
v54335 = "54336",
v54336 = "54337",
v54337 = "54339",
v54339 = "54341",
v54341 = "54342",
v54342 = "54343",
v54343 = "54344",
v54344 = "54345",
v54345 = "54346",
v54346 = "54347",
v54347 = "54348",
v54348 = "54349",
v54349 = "54350",
v54350 = "54351",
v54351 = "54352",
v54352 = "54353",
v54353 = "54354",
v54354 = "54355",
v54355 = "54356",
v54356 = "54357",
v54357 = "54358",
v54358 = "54361",
v54361 = "54362",
v54362 = "54363",
v54363 = "54368",
v54368 = "54371",
v54371 = "54372",
v54372 = "54373",
v54373 = "54374",
v54374 = "54375",
v54375 = "54389",
v54389 = "54390",
v54390 = "54391",
v54391 = "54392",
v54392 = "54393",
v54393 = "54447",
v54447 = "54448",
v54448 = "54453",
v54453 = "54454",
v54454 = "54455",
v54455 = "54457",
v54457 = "54458",
v54458 = "54459",
v54459 = "54460",
v54460 = "54461",
v54461 = "54462",
v54462 = "54463",
v54463 = "54464",
v54464 = "54465",
v54465 = "54467",
v54467 = "54468",
v54468 = "54469",
v54469 = "54475",
v54475 = "54476",
v54476 = "54477",
v54477 = "54479",
v54479 = "54480",
v54480 = "54481",
v54481 = "54484",
v54484 = "54485",
v54485 = "54486",
v54486 = "54487",
v54487 = "54488",
v54488 = "54489",
v54489 = "54490",
v54490 = "54491",
v54491 = "54492",
v54492 = "54496",
v54496 = "54498",
v54498 = "54502",
v54502 = "54507",
v54507 = "54508",
v54508 = "54509",
v54509 = "54510",
v54510 = "54511",
v54511 = "54512",
v54512 = "54519",
v54519 = "54520",
v54520 = "54521",
v54521 = "54522",
v54522 = "54523",
v54523 = "54524",
v54524 = "54525",
v54525 = "54529",
v54529 = "54574",
v54574 = "54575",
v54575 = "54576",
v54576 = "54577",
v54577 = "54578",
v54578 = "54580",
v54580 = "54581",
v54581 = "54582",
v54582 = "54583",
v54583 = "54584",
v54584 = "54586",
v54586 = "54587",
v54587 = "54588",
v54588 = "54593",
v54593 = "54594",
v54594 = "54595",
v54595 = "54596",
v54596 = "54597",
v54597 = "54598",
v54598 = "54599",
v54599 = "54600",
v54600 = "54601",
v54601 = "54602",
v54602 = "54603",
v54603 = "54604",
v54604 = "54605",
v54605 = "54606",
v54606 = "54608",
v54608 = "54611",
v54611 = "54623",
v54623 = "54625",
v54625 = "54682",
v54682 = "54713",
v54713 = "54714",
v54714 = "54715",
v54715 = "54716",
v54716 = "54717",
v54717 = "54718",
v54718 = "54719",
v54719 = "54720",
v54720 = "54721",
v54721 = "54722",
v54722 = "54741",
v54741 = "54742",
v54742 = "54743",
v54743 = "54744",
v54744 = "54745",
v54745 = "54747",
v54747 = "54748",
v54748 = "54749",
v54749 = "54750",
v54750 = "54751",
v54751 = "54752",
v54752 = "54753",
v54753 = "54754",
v54754 = "54755",
v54755 = "54756",
v54756 = "54798",
v54798 = "54799",
v54799 = "54800",
v54800 = "54801",
v54801 = "54802",
v54802 = "54803",
v54803 = "54804",
v54804 = "54806",
v54806 = "54807",
v54807 = "54808",
v54808 = "54809",
v54809 = "54810",
v54810 = "54811",
v54811 = "54812",
v54812 = "54813",
v54813 = "54814",
v54814 = "54815",
v54815 = "54819",
v54819 = "54820",
v54820 = "54821",
v54821 = "54822",
v54822 = "54823",
v54823 = "54824",
v54824 = "54825",
v54825 = "54826",
v54826 = "54827",
v54827 = "54828",
v54828 = "54829",
v54829 = "54830",
v54830 = "54831",
v54831 = "54832",
v54832 = "54833",
v54833 = "54834",
v54834 = "54835",
v54835 = "54836",
v54836 = "54837",
v54837 = "54838",
v54838 = "54839",
v54839 = "54840",
v54840 = "54841",
v54841 = "54842",
v54842 = "54843",
v54843 = "54844",
v54844 = "54845",
v54845 = "54847",
v54847 = "54848",
v54848 = "54849",
v54849 = "54850",
v54850 = "54851",
v54851 = "54852",
v54852 = "54853",
v54853 = "54854",
v54854 = "54855",
v54855 = "54857",
v54857 = "54858",
v54858 = "54859",
v54859 = "54860",
v54860 = "54861",
v54861 = "54862",
v54862 = "54863",
v54863 = "54864",
v54864 = "54865",
v54865 = "54866",
v54866 = "54867",
v54867 = "54868",
v54868 = "54869",
v54869 = "54870",
v54870 = "54871",
v54871 = "54872",
v54872 = "54873",
v54873 = "54874",
v54874 = "54875",
v54875 = "54876",
v54876 = "54877",
v54877 = "54878",
v54878 = "54879",
v54879 = "54880",
v54880 = "54881",
v54881 = "54902",
v54902 = "54992",
v54992 = "54993",
v54993 = "54994",
v54994 = "54995",
v54995 = "54996",
v54996 = "54997",
v54997 = "54998",
v54998 = "54999",
v54999 = "55000",
v55000 = "55001",
v55001 = "55237",
v55237 = "55238",
v55238 = "55239",
v55239 = "55240",
v55240 = "55241",
v55241 = "54166",

}

elseif snd.which_path == "vortex" then
check = {

--Shattered Vortex
v36079 = "36080",
v36080 = "36081",
v36081 = "36082",
v36082 = "36083",
v36083 = "36084",
v36084 = "36085",
v36085 = "36086",
v36086 = "36087",
v36087 = "36091",
v36091 = "36096",
v36096 = "36093",
v36093 = "36092",
v36092 = "36089",
v36089 = "36088",
v36088 = "36090",
v36090 = "36094",
v36094 = "36095",
v36095 = "36335",
v36335 = "36330",
v36330 = "36326",
v36326 = "36323",
v36323 = "36325",
v36325 = "36324",
v36324 = "36293",
v36293 = "36315",
v36315 = "36329",
v36329 = "36334",
v36334 = "36316",
v36316 = "36328",
v36328 = "36333",
v36333 = "36332",
v36332 = "36331",
v36331 = "36327",
v36327 = "36322",
v36322 = "36321",
v36321 = "36320",
v36320 = "36319",
v36319 = "36318",
v36318 = "36317",
v36317 = "36314",
v36314 = "36313",
v36313 = "36312",
v36312 = "36311",
v36311 = "36310",
v36310 = "36309",
v36309 = "36306",
v36306 = "36298",
v36298 = "36300",
v36300 = "36301",
v36301 = "36308",
v36308 = "36307",
v36307 = "36304",
v36304 = "36305",
v36305 = "36303",
v36303 = "36302",
v36302 = "36299",
v36299 = "36297",
v36297 = "36296",
v36296 = "36103",
v36103 = "36102",
v36102 = "36101",
v36101 = "36100",
v36100 = "36099",
v36099 = "36098",
v36098 = "36104",
v36104 = "36105",
v36105 = "36106",
v36106 = "36107",
v36107 = "36272",
v36272 = "36273",
v36273 = "36278",
v36278 = "36281",
v36281 = "36280",
v36280 = "36279",
v36279 = "36277",
v36277 = "36276",
v36276 = "36282",
v36282 = "36283",
v36283 = "36284",
v36284 = "36285",
v36285 = "36286",
v36286 = "36287",
v36287 = "36288",
v36288 = "36289",
v36289 = "36290",
v36290 = "36291",
v36291 = "36292",
v36292 = "36097",
v36097 = "36294",
v36294 = "36295",
v36295 = "36336",
v36336 = "36347",
v36347 = "36339",
v36339 = "36340",
v36340 = "36346",
v36346 = "36337",
v36337 = "36338",
v36338 = "36345",
v36345 = "36341",
v36341 = "36343",
v36343 = "36344",
v36344 = "36342",
v36342 = "36351",
v36351 = "36350",
v36350 = "36349",
v36349 = "36354",
v36354 = "36357",
v36357 = "36358",
v36358 = "36360",
v36360 = "36361",
v36361 = "36362",
v36362 = "36363",
v36363 = "36364",
v36364 = "36365",
v36365 = "36455",
v36455 = "36456",
v36456 = "36457",
v36457 = "36458",
v36458 = "36459",
v36459 = "36460",
v36460 = "36461",
v36461 = "36359",
v36359 = "36419",
v36419 = "36418",
v36418 = "36417",
v36417 = "36438",
v36438 = "36439",
v36439 = "36440",
v36440 = "36356",
v36356 = "36352",
v36352 = "36355",
v36355 = "36444",
v36444 = "36443",
v36443 = "36442",
v36442 = "36446",
v36446 = "36450",
v36450 = "36451",
v36451 = "36447",
v36447 = "36448",
v36448 = "36452",
v36452 = "36453",
v36453 = "36400",
v36400 = "36353",
v36353 = "36368",
v36368 = "36369",
v36369 = "36462",
v36462 = "36463",
v36463 = "36370",
v36370 = "36371",
v36371 = "36464",
v36464 = "36465",
v36465 = "36372",
v36372 = "36373",
v36373 = "36466",
v36466 = "36467",
v36467 = "36374",
v36374 = "36375",
v36375 = "36468",
v36468 = "36376",
v36376 = "36377",
v36377 = "36378",
v36378 = "36380",
v36380 = "36470",
v36470 = "36469",
v36469 = "36475",
v36475 = "36471",
v36471 = "36381",
v36381 = "36382",
v36382 = "36472",
v36472 = "36476",
v36476 = "36477",
v36477 = "36473",
v36473 = "36383",
v36383 = "36384",
v36384 = "36385",
v36385 = "36386",
v36386 = "36474",
v36474 = "36478",
v36478 = "36387",
v36387 = "36388",
v36388 = "36479",
v36479 = "36480",
v36480 = "36389",
v36389 = "36390",
v36390 = "36481",
v36481 = "36482",
v36482 = "36391",
v36391 = "36392",
v36392 = "36483",
v36483 = "36484",
v36484 = "36393",
v36393 = "36394",
v36394 = "36454",
v36454 = "36449",
v36449 = "36395",
v36395 = "36396",
v36396 = "36445",
v36445 = "36441",
v36441 = "36397",
v36397 = "36398",
v36398 = "36437",
v36437 = "36416",
v36416 = "36399",
v36399 = "36420",
v36420 = "36421",
v36421 = "36422",
v36422 = "36423",
v36423 = "36424",
v36424 = "36425",
v36425 = "36426",
v36426 = "36427",
v36427 = "36433",
v36433 = "36434",
v36434 = "36435",
v36435 = "36436",
v36436 = "36366",
v36366 = "36367",
v36367 = "36379",
v36379 = "36401",
v36401 = "36432",
v36432 = "36431",
v36431 = "36402",
v36402 = "36403",
v36403 = "36430",
v36430 = "36429",
v36429 = "36404",
v36404 = "36405",
v36405 = "36428",
v36428 = "36406",
v36406 = "36407",
v36407 = "36408",
v36408 = "36409",
v36409 = "36410",
v36410 = "36411",
v36411 = "36412",
v36412 = "36413",
v36413 = "36414",
v36414 = "36415",
v36415 = "36508",
v36508 = "36509",
v36509 = "36510",
v36510 = "36511",
v36511 = "36512",
v36512 = "36513",
v36513 = "36514",
v36514 = "36518",
v36518 = "36522",
v36522 = "36523",
v36523 = "36519",
v36519 = "36515",
v36515 = "36516",
v36516 = "36520",
v36520 = "36524",
v36524 = "36525",
v36525 = "36521",
v36521 = "36517",
v36517 = "36526",
v36526 = "36527",
v36527 = "36528",
v36528 = "36529",
v36529 = "36533",
v36533 = "36532",
v36532 = "36530",
v36530 = "36531",
v36531 = "36534",
v36534 = "36535",
v36535 = "36536",
v36536 = "36541",
v36541 = "36537",
v36537 = "36538",
v36538 = "36539",
v36539 = "36540",
v36540 = "36079",

}

elseif snd.which_path == "lair" then
check = {
--Luzith's Lair
v16282 = "16284",
v16284 = "16286",
v16286 = "16285",
v16285 = "16290",
v16290 = "16292",
v16292 = "16311",
v16311 = "16291",
v16291 = "16293",
v16293 = "16287",
v16287 = "16288",
v16288 = "16283",
v16283 = "16289",
v16289 = "16294",
v16294 = "16296",
v16296 = "16295",
v16295 = "16297",
v16297 = "16298",
v16298 = "16300",
v16300 = "16301",
v16301 = "16303",
v16303 = "16305",
v16305 = "16310",
v16310 = "16306",
v16306 = "16307",
v16307 = "16299",
v16299 = "16302",
v16302 = "16304",
v16304 = "16308",
v16308 = "16309",
v16309 = "16359",
v16359 = "16358",
v16358 = "16334",
v16334 = "16333",
v16333 = "16335",
v16336 = "16360",
v16360 = "16335",
v16335 = "16366",
v16366 = "16340",
v16340 = "16362",
v16362 = "16337",
v16337 = "16338",
v16338 = "16339",
v16339 = "16357",
v16357 = "16341",
v16341 = "16342",
v16342 = "16343",
v16343 = "16361",
v16361 = "16344",
v16344 = "16367",
v16367 = "16345",
v16345 = "16346",
v16346 = "16350",
v16350 = "16351",
v16351 = "16347",
v16347 = "16370",
v16370 = "16352",
v16352 = "16372",
v16372 = "16356",
v16356 = "16348",
v16348 = "16353",
v16353 = "16368",
v16368 = "16354",
v16354 = "16371",
v16371 = "16355",
v16355 = "16349",
v16349 = "16369",
v16369 = "16363",
v16363 = "16364",
v16364 = "16365",
v16365 = "16373",
v16373 = "16374",
v16374 = "16375",
v16375 = "16383",
v16383 = "16374",
v16374 = "16375",
v16375 = "16376",
v16376 = "16377",
v16377 = "16379",
v16379 = "16378",
v16378 = "16380",
v16380 = "16381",
v16381 = "16382",
v16382 = "16402",
v16402 = "16386",
v16386 = "16387",
v16387 = "16394",
v16394 = "16388",
v16388 = "16389",
v16389 = "16403",
v16403 = "16404",
v16404 = "16405",
v16405 = "16406",
v16406 = "16390",
v16390 = "16400",
v16400 = "16401",
v16401 = "16391",
v16391 = "16392",
v16392 = "16393",
v16393 = "16395",
v16395 = "16396",
v16396 = "16397",
v16397 = "16398",
v16398 = "16399",
v16399 = "16407",
v16407 = "16408",
v16408 = "16409",
v16409 = "16410",
v16410 = "16411",
v16411 = "16412",
v16412 = "city",

}

elseif snd.which_path == "endgame" then
check = {

--Bastion of Illdon
v4964 = "24410",
v24410 = "24411",
v24411 = "24412",
v24412 = "24413",
v24413 = "24414",
v24414 = "24415",
v24415 = "24416",
v24416 = "24417",
v24417 = "24418",
v24418 = "24424",
v24424 = "24426",
v24426 = "24425",
v24425 = "24419",
v24419 = "24420",
v24420 = "24421",
v24421 = "24422",
v24422 = "24423",
v24423 = "24531",
v24531 = "24532",
v24532 = "24533",
v24533 = "24534",
v24534 = "24535",
v24535 = "24536",
v24536 = "24538",
v24538 = "24539",
v24539 = "24542",
v24542 = "24543",
v24543 = "24544",
v24544 = "24545",
v24545 = "24537",
v24537 = "24926",
v24926 = "24927",
v24927 = "24928",
v24928 = "24613",
v24613 = "24600",
v24600 = "24614",
v24614 = "24599",
v24599 = "24598",
v24598 = "24547",
v24547 = "24546",
v24546 = "24612",
v24612 = "24615",
v24615 = "24619",
v24619 = "24617",
v24617 = "24623",
v24623 = "24622",
v24622 = "24621",
v24621 = "24624",
v24624 = "24625",
v24625 = "24884",
v24884 = "24886",
v24886 = "24885",
v24885 = "24892",
v24892 = "24891",
v24891 = "24893",
v24893 = "24894",
v24894 = "24895",
v24895 = "24896",
v24896 = "24897",
v24897 = "24898",
v24898 = "24899",
v24899 = "24906",
v24906 = "24911",
v24911 = "24912",
v24912 = "24913",
v24913 = "24915",
v24915 = "24916",
v24916 = "24917",
v24917 = "24918",
v24918 = "24920",
v24920 = "24919",
v24919 = "24921",
v24921 = "24908",
v24908 = "24910",
v24910 = "24909",
v24909 = "24907",
v24907 = "24626",
v24626 = "24882",
v24882 = "24887",
v24887 = "24883",
v24883 = "24890",
v24890 = "24888",
v24888 = "24889",
v24889 = "24900",
v24900 = "24901",
v24901 = "24902",
v24902 = "24903",
v24903 = "24904",
v24904 = "24905",
v24905 = "36271",

--Spiral of the Corrupt
v36271 = "36596",
v36596 = "36622",
v36622 = "36624",
v36624 = "36625",
v36625 = "36634",
v36634 = "36639",
v36639 = "36648",
v36648 = "36598",
v36598 = "36599",
v36599 = "36600",
v36600 = "36601",
v36601 = "36602",
v36602 = "36603",
v36603 = "36604",
v36604 = "36605",
v36605 = "36606",
v36606 = "36607",
v36607 = "36608",
v36608 = "36609",
v36609 = "36610",
v36610 = "36611",
v36611 = "36612",
v36612 = "36613",
v36613 = "36614",
v36614 = "36615",
v36615 = "36616",
v36616 = "36617",
v36617 = "36618",
v36618 = "36619",
v36619 = "36620",
v36620 = "36621",
v36621 = "36623",
v36623 = "36626",
v36626 = "36627",
v36627 = "36628",
v36628 = "36629",
v36629 = "36630",
v36630 = "36631",
v36631 = "36632",
v36632 = "36633",
v36633 = "36635",
v36635 = "36636",
v36636 = "36637",
v36637 = "36638",
v36638 = "36640",
v36640 = "36641",
v36641 = "36642",
v36642 = "36643",
v36643 = "36644",
v36644 = "36645",
v36645 = "36647",
v36647 = "36649",
v36649 = "36650",
v36650 = "36646",
v36646 = "38894",

--Upper Tiyen
v38894 = "38896",
v38896 = "38897",
v38897 = "38898",
v38898 = "38899",
v38899 = "38900",
v38900 = "38901",
v38901 = "38902",
v38902 = "38903",
v38903 = "38904",
v38904 = "38905",
v38905 = "38906",
v38906 = "38907",
v38907 = "38908",
v38908 = "38909",
v38909 = "38915",
v38915 = "38912",
v38912 = "38911",
v38911 = "38910",
v38910 = "38913",
v38913 = "38914",
v38914 = "38916",
v38916 = "38918",
v38918 = "38926",
v38926 = "38921",
v38921 = "38927",
v38927 = "38922",
v38922 = "38928",
v38928 = "38930",
v38930 = "38936",
v38936 = "38935",
v38935 = "38937",
v38937 = "38944",
v38944 = "38943",
v38943 = "38941",
v38941 = "38946",
v38946 = "38945",
v38945 = "38958",
v38958 = "38948",
v38948 = "38947",
v38947 = "38950",
v38950 = "38949",
v38949 = "38951",
v38951 = "38954",
v38954 = "38952",
v38952 = "38956",
v38956 = "38957",
v38957 = "38959",
v38959 = "38960",
v38960 = "38961",
v38961 = "38962",
v38962 = "38963",
v38963 = "38964",
v38964 = "38994",
v38994 = "38966",
v38966 = "38965",
v38965 = "38993",
v38993 = "38967",
v38967 = "38999",
v38999 = "39000",
v39000 = "39001",
v39001 = "38995",
v38995 = "38996",
v38996 = "38997",
v38997 = "38998",
v38998 = "39002",
v39002 = "39004",
v39004 = "39003",
v39003 = "39005",
v39005 = "39007",
v39007 = "39006",
v39006 = "39008",
v39008 = "39010",
v39010 = "39009",
v39009 = "39011",
v39011 = "39014",
v39014 = "39015",
v39015 = "39016",
v39016 = "39017",
v39017 = "39019",
v39019 = "39020",
v39020 = "38919",
v38919 = "38917",
v38917 = "38920",
v38920 = "38924",
v38924 = "38925",
v38925 = "38923",
v38923 = "39021",
v39021 = "39022",
v39022 = "39023",
v39023 = "39024",
v39024 = "39025",
v39025 = "38888",
v38888 = "38892",
v38892 = "38893",
v38893 = "39037",
v39037 = "39039",
v39039 = "39043",
v39043 = "39041",
v39041 = "39042",
v39042 = "39044",
v39044 = "39040",
v39040 = "39038",
v39038 = "39026",
v39026 = "39027",
v39027 = "38826",
v38826 = "38827",
v38827 = "38828",
v38828 = "38829",
v38829 = "38835",
v38835 = "38830",
v38830 = "39031",
v39031 = "39033",
v39033 = "39034",
v39034 = "38833",
v38833 = "39029",
v39029 = "39030",
v39030 = "38817",
v38817 = "38818",
v38818 = "38819",
v38819 = "38820",
v38820 = "38832",
v38832 = "38821",
v38821 = "38822",
v38822 = "38823",
v38823 = "38824",
v38824 = "38825",
v38825 = "38836",
v38836 = "38837",
v38837 = "38838",
v38838 = "38840",
v38840 = "38839",
v38839 = "38867",
v38867 = "38870",
v38870 = "38873",
v38873 = "38877",
v38877 = "38841",
v38841 = "38842",
v38842 = "38843",
v38843 = "38844",
v38844 = "38847",
v38847 = "38849",
v38849 = "38851",
v38851 = "38855",
v38855 = "38857",
v38857 = "38861",
v38861 = "38863",
v38863 = "38864",
v38864 = "38866",
v38866 = "38868",
v38868 = "38871",
v38871 = "38879",
v38879 = "38880",
v38880 = "38886",
v38886 = "38887",
v38887 = "38845",
v38845 = "38846",
v38846 = "38848",
v38848 = "38850",
v38850 = "38852",
v38852 = "38856",
v38856 = "38858",
v38858 = "38862",
v38862 = "38865",
v38865 = "39045",
v39045 = "39065",
v39065 = "39064",
v39064 = "39063",
v39063 = "39062",
v39062 = "39048",
v39048 = "39047",
v39047 = "39046",
v39046 = "39066",
v39066 = "39067",
v39067 = "39068",
v39068 = "39069",
v39069 = "39070",

--Lower Tiyen
v39070 = "39071",
v39071 = "39072",
v39072 = "39073",
v39073 = "39076",
v39076 = "39075",
v39075 = "39074",
v39074 = "39077",
v39077 = "39078",
v39078 = "39079",
v39079 = "39080",
v39080 = "39101",
v39101 = "39081",
v39081 = "39098",
v39098 = "39096",
v39096 = "39083",
v39083 = "39082",
v39082 = "39084",
v39084 = "39085",
v39085 = "39097",
v39097 = "39099",
v39099 = "39102",
v39102 = "39929",
v39929 = "39931",
v39931 = "39934",
v39934 = "39935",
v39935 = "39938",
v39938 = "39937",
v39937 = "39936",
v39936 = "39932",
v39932 = "39933",
v39933 = "39930",
v39930 = "39928",
v39928 = "39100",
v39100 = "39927",
v39927 = "39967",
v39967 = "39969",
v39969 = "39971",
v39971 = "39975",
v39975 = "39979",
v39979 = "39982",
v39982 = "39985",
v39985 = "39989",
v39989 = "39991",
v39991 = "39990",
v39990 = "39988",
v39988 = "39984",
v39984 = "39981",
v39981 = "39978",
v39978 = "39974",
v39974 = "39970",
v39970 = "39968",
v39968 = "39973",
v39973 = "39977",
v39977 = "39980",
v39980 = "39983",
v39983 = "39987",
v39987 = "39986",
v39986 = "39976",
v39976 = "39972",
v39972 = "39940",
v39940 = "39939",
v39939 = "39942",
v39942 = "39941",
v39941 = "39943",
v39943 = "39951",
v39951 = "39949",
v39949 = "39947",
v39947 = "39945",
v39945 = "39944",
v39944 = "39946",
v39946 = "39948",
v39948 = "39950",
v39950 = "39953",
v39953 = "39956",
v39956 = "39958",
v39958 = "39955",
v39955 = "39952",
v39952 = "39954",
v39954 = "39957",
v39957 = "39959",
v39959 = "39962",
v39962 = "39960",
v39960 = "36677",

--Upper Xaanhal
v36677 = "36678",
v36678 = "36679",
v36679 = "36680",
v36680 = "36681",
v36681 = "36682",
v36682 = "36683",
v36683 = "36684",
v36684 = "36685",
v36685 = "36686",
v36686 = "36687",
v36687 = "36689",
v36689 = "36690",
v36690 = "36691",
v36691 = "36692",
v36692 = "36693",
v36693 = "36694",
v36694 = "36695",
v36695 = "36696",
v36696 = "36697",
v36697 = "36698",
v36698 = "36699",
v36699 = "36700",
v36700 = "36701",
v36701 = "36703",
v36703 = "36702",
v36702 = "36704",
v36704 = "36707",
v36707 = "36706",
v36706 = "36705",
v36705 = "36708",
v36708 = "36709",
v36708 = "36688",
v36688 = "38090",

--Nal'jin Depths
v38090 = "38091",
v38091 = "38092",
v38092 = "38093",
v38093 = "38096",
v38096 = "38095",
v38095 = "38094",
v38094 = "38097",
v38097 = "38099",
v38099 = "38110",
v38110 = "38111",
v38111 = "38107",
v38107 = "38104",
v38104 = "38103",
v38103 = "38100",
v38100 = "38102",
v38102 = "38101",
v38101 = "38105",
v38105 = "38108",
v38108 = "38109",
v38109 = "38112",
v38112 = "38106",
v38106 = "38131",
v38131 = "38124",
v38124 = "38117",
v38117 = "38113",
v38113 = "38116",
v38116 = "38123",
v38123 = "38122",
v38122 = "38115",
v38115 = "38114",
v38114 = "38121",
v38121 = "38129",
v38129 = "38128",
v38128 = "38130",
v38130 = "38135",
v38135 = "38142",
v38142 = "38143",
v38143 = "38136",
v38136 = "38137",
v38137 = "38144",
v38144 = "38149",
v38149 = "38145",
v38145 = "38138",
v38138 = "38139",
v38139 = "38146",
v38146 = "38147",
v38147 = "38140",
v38140 = "38141",
v38141 = "38133",
v38133 = "38134",
v38134 = "38132",
v38132 = "38127",
v38127 = "38120",
v38120 = "38119",
v38119 = "38126",
v38126 = "38125",
v38125 = "38118",
v38118 = "38164",
v38164 = "38158",
v38158 = "38154",
v38154 = "38151",
v38151 = "38155",
v38155 = "38159",
v38159 = "38166",
v38166 = "38173",
v38173 = "38180",
v38180 = "38184",
v38184 = "38188",
v38188 = "38190",
v38190 = "38187",
v38187 = "38183",
v38183 = "38179",
v38179 = "38172",
v38172 = "38165",
v38165 = "38171",
v38171 = "38178",
v38178 = "38177",
v38177 = "38170",
v38170 = "38163",
v38163 = "38162",
v38162 = "38169",
v38169 = "38176",
v38176 = "38182",
v38182 = "38175",
v38175 = "38168",
v38168 = "38161",
v38161 = "38157",
v38157 = "38153",
v38153 = "38150",
v38150 = "38152",
v38152 = "38156",
v38156 = "38160",
v38160 = "38167",
v38167 = "38174",
v38174 = "38181",
v38181 = "38185",
v38185 = "38189",
v38189 = "38186",
v38186 = "56107",

--Forgotten Dome
v56107 = "56108",
v56108 = "56110",
v56110 = "56197",
v56197 = "56217",
v56217 = "56218",
v56218 = "56219",
v56219 = "56220",
v56220 = "56196",
v56196 = "56213",
v56213 = "56214",
v56214 = "56215",
v56215 = "56216",
v56216 = "56192",
v56192 = "56193",
v56193 = "56194",
v56194 = "56195",
v56195 = "56205",
v56205 = "56206",
v56206 = "56207",
v56207 = "56208",
v56208 = "56209",
v56209 = "56210",
v56210 = "56211",
v56211 = "56212",
v56212 = "56191",
v56191 = "56201",
v56201 = "56202",
v56202 = "56203",
v56203 = "56204",
v56204 = "56190",
v56190 = "56200",
v56200 = "56199",
v56199 = "56198",
v56198 = "56109",
v56109 = "56186",
v56186 = "56187",
v56187 = "56188",
v56188 = "56189",
v56189 = "56221",
v56221 = "56104",
v56104 = "56103",
v56103 = "56102",
v56102 = "56101",
v56101 = "56100",
v56100 = "56106",
v56106 = "56105",
v56105 = "56099",
v56099 = "56098",
v56098 = "56097",
v56097 = "56091",
v56091 = "56093",
v56093 = "56094",
v56094 = "56083",
v56083 = "56084",
v56084 = "56085",
v56085 = "56075",
v56075 = "56076",
v56076 = "56077",
v56077 = "56080",
v56080 = "56082",
v56082 = "56081",
v56081 = "56079",
v56079 = "56078",
v56078 = "55015",
v55015 = "55188",
v55188 = "56071",
v56071 = "56072",
v56072 = "56073",
v56073 = "56074",
v56074 = "56086",
v56086 = "56087",
v56087 = "56088",
v56088 = "56092",
v56092 = "56095",
v56095 = "56096",
v56096 = "55711",
v55711 = "56247",
v56247 = "55708",
v55708 = "55709",
v55709 = "55706",
v55706 = "55707",
v55707 = "56245",
v56245 = "56239",
v56239 = "56238",
v56238 = "56243",
v56243 = "56244",
v56244 = "56241",
v56241 = "56242",
v56242 = "56227",
v56227 = "56230",
v56230 = "56231",
v56231 = "56228",
v56228 = "56229",
v56229 = "56224",
v56224 = "56226",
v56226 = "56240",
v56240 = "55712",
v55712 = "56246",
v56246 = "56232",
v56232 = "56233",
v56233 = "56236",
v56236 = "56237",
v56237 = "56234",
v56234 = "56235",
v56235 = "56225",
v56225 = "56223",
v56223 = "56222",
v56222 = "57392",
v55183 = "57392",

--Dovan Hollow
v57392 = "49286",
v49286 = "48747",
v48747 = "49287",
v49287 = "49288",
v49288 = "49289",
v49289 = "49291",
v49291 = "49292",
v49292 = "49293",
v49293 = "49294",
v49294 = "48767",
v48767 = "49295",
v49295 = "49296",
v49296 = "48746",
v48746 = "48745",
v48745 = "48744",
v48744 = "48743",
v48743 = "48742",
v48742 = "49297",
v49297 = "49298",
v49298 = "49300",
v49300 = "49299",
v49299 = "49301",
v49301 = "45757",
v45757 = "48405",
v48405 = "49307",
v49307 = "49306",
v49306 = "49309",
v49309 = "49310",
v49310 = "49311",
v49311 = "49324",
v49324 = "49325",
v49325 = "49326",
v49326 = "49327",
v49327 = "49328",
v49328 = "49329",
v49329 = "49330",
v49330 = "48763",
v48763 = "49331",
v49331 = "49332",
v49332 = "49333",
v49333 = "49334",
v49334 = "49335",
v49335 = "44515",
v44515 = "48748",
v48748 = "48749",
v48749 = "48750",
v48750 = "48751",
v48751 = "48752",
v48752 = "48753",
v48753 = "48754",
v48754 = "48755",
v48755 = "48761",
v48761 = "48762",
v48762 = "49305",
v49305 = "49308",
v49308 = "48768",
v48768 = "49303",
v49303 = "49304",
v49304 = "48766",
v48766 = "49302",
v49302 = "49290",
v49290 = "49314",
v49314 = "49313",
v49313 = "49312",
v49312 = "49315",
v49315 = "49316",
v49316 = "49317",
v49317 = "48740",
v48740 = "48741",
v48741 = "49318",
v49318 = "49319",
v49319 = "49320",
v49320 = "49321",
v49321 = "49323",
v49323 = "49322",
v49322 = "58207",

-- Dramedo

v58207 = "58208",
v58208 = "58209",
v58209 = "58210",
v58210 = "58211",
v58211 = "58212",
v58212 = "58213",
v58213 = "58215",
v58215 = "58214",
v58214 = "58236",
v58236 = "58237",
v58237 = "58240",
v58240 = "58241",
v58241 = "58238",
v58238 = "58246",
v58246 = "58239",
v58239 = "58242",
v58242 = "58216",
v58216 = "58217",
v58217 = "58218",
v58218 = "58211",
v58211 = "58243",
v58243 = "58244",
v58244 = "58245",
v58245 = "58247",
v58247 = "58248",
v58248 = "58249",
v58249 = "58250",
v58250 = "58252",
v58252 = "58253",
v58253 = "58254",
v58254 = "58255",
v58255 = "58256",
v58256 = "58257",
v58257 = "58262",
v58262 = "58261",
v58261 = "58260",
v58260 = "58259",
v58259 = "58253",
v58253 = "58251",
v58251 = "58258",
v58258 = "58264",
v58264 = "58266",
v58266 = "58267",
v58267 = "58268",
v58268 = "58269",
v58269 = "58270",
v58270 = "58272",
v58272 = "58273",
v58273 = "58274",
v58274 = "58270",
v58270 = "58271",
v58271 = "58275",
v58275 = "58276",
v58276 = "58277",
v58277 = "58278",
v58278 = "58279",
v58279 = "58271",
v58271 = "58280",
v58280 = "58281",
v58281 = "58282",
v58282 = "58283",
v58283 = "58284",
v58284 = "58285",
v58285 = "58289",
v58289 = "58288",
v58288 = "58286",
v58286 = "58287",
v58287 = "58290",
v58290 = "58291",
v58291 = "58292",
v58292 = "58293",
v58293 = "58294",
v58294 = "58295",
v58295 = "58296",
v58296 = "58297",
v58297 = "58305",
v58305 = "5517",

-- Ia'shal

v5517 = "8670",
v8670 = "6841",
v6841 = "6843",
v6843 = "7670",
v7670 = "6867",
v6867 = "4410",
v4410 = "6716",
v6716 = "6816",
v6816 = "8671",
v8671 = "8673",
v8673 = "8672",
v8672 = "8675",
v8675 = "8674",
v8674 = "8671",
v8671 = "4410",
v4410 = "5519",
v5519 = "5521",
v5521 = "5520",
v5520 = "8680",
v8680 = "5513",
v5513 = "8684",
v8684 = "8683",
v8683 = "6818",
v6818 = "8760",
v8760 = "8765",
v8765 = "8680",
v8680 = "8677",
v8677 = "8679",
v8679 = "8682",
v8682 = "8681",
v8681 = "8678",
v8678 = "8676",
v8676 = "49031",
v49031 = "49032",
v49032 = "49033",
v49033 = "49034",
v49034 = "49035",
v49035 = "49037",
v49037 = "49036",
v49036 = "49038",
v49038 = "48869",
v48869 = "48871",
v48871 = "48870",
v48870 = "48871",
v48871 = "8685",
v8685 = "5514",
v5514 = "6826",
v6826 = "57086",

--forgotten depths of Mount Helba
v57086 = "57087",
v57087 = "57088",
v57088 = "57089",
v57089 = "57090",
v57090 = "57091",
v57091 = "57092",
v57092 = "57093",
v57093 = "57094",
v57094 = "57095",
v57095 = "57096",
v57096 = "57097",
v57097 = "57098",
v57098 = "57099",
v57099 = "57100",
v57100 = "57101",
v57101 = "57102",
v57102 = "57103",
v57103 = "57105",
v57105 = "57104",
v57104 = "57106",
v57106 = "57107",
v57107 = "57108",
v57108 = "57109",
v57109 = "57110",
v57110 = "57111",
v57111 = "57112",
v57112 = "57113",
v57113 = "57114",
v57114 = "57115",
v57115 = "57116",
v57116 = "57117",
v57117 = "57118",
v57118 = "57119",

--basilisk lair
v57119 = "68354",
v68354 = "69128",
v69128 = "69129",
v69129 = "69130",
v69130 = "69131",
v69131 = "69132",
v69132 = "69133",
v69133 = "68784",
v68784 = "68785",
v68785 = "68786",
v68786 = "68787",
v68787 = "68783",
v68783 = "68564",
v68564 = "68606",
v68606 = "68597",
v68597 = "68598",
v68598 = "68617",
v68617 = "68615",
v68615 = "68604",
v68604 = "68607",
v68607 = "68608",
v68608 = "68611",
v68611 = "68613",
v68613 = "68609",
v68609 = "68610",
v68610 = "68612",
v68612 = "68614",
v68614 = "68616",
v68616 = "68618",
v68618 = "68619",
v68619 = "68620",
v68620 = "68622",
v68622 = "68623",
v68623 = "68624",
v68624 = "68625",
v68625 = "68626",
v68626 = "68627",
v68627 = "68621",
v68621 = "68628",
v68628 = "68629",
v68629 = "68705",
v68705 = "68706",
v68706 = "68708",
v68708 = "68712",
v68712 = "68713",
v68713 = "68714",
v68714 = "68710",
v68710 = "68709",
v68709 = "68715",
v68715 = "61011",

--bakal chasm
v68715 = "61011",
v61011 = "61063",
v61063 = "61064",
v61064 = "61065",
v61065 = "61066",
v61066 = "61067",
v61067 = "61069",
v61069 = "61117",
v61117 = "61116",
v61116 = "61117",
v61117 = "61069",
v61069 = "61073",
v61073 = "61115",
v61115 = "61118",
v61118 = "61115",
v61115 = "61114",
v61114 = "61113",
v61113 = "61121",
v61121 = "61122",
v61122 = "61121",
v61121 = "61113",
v61113 = "61112",
v61112 = "61080",
v61080 = "61079",
v61079 = "61119",
v61119 = "61079",
v61079 = "61120",
v61120 = "61135",
v61135 = "61136",
v61136 = "61135",
v61135 = "61120",
v61120 = "61079",
v61079 = "61078",
v61078 = "61131",
v61131 = "61078",
v61078 = "61077",
v61077 = "61076",
v61076 = "61128",
v61128 = "61076",
v61076 = "61075",
v61075 = "61074",
v61074 = "61075",
v61075 = "61076",
v61076 = "61128",
v61128 = "61076",
v61076 = "61077",
v61077 = "61078",
v61078 = "61131",
v61131 = "61078",
v61078 = "61079",
v61079 = "61120",
v61120 = "61135",
v61135 = "61136",
v61136 = "61135",
v61135 = "61120",
v61120 = "61079",
v61079 = "61119",
v61119 = "61079",
v61079 = "61080",
v61080 = "61112",
v61112 = "61113",
v61113 = "61121",
v61121 = "61122",
v61122 = "61121",
v61121 = "61113",
v61113 = "61114",
v61114 = "61115",
v61115 = "61118",
v61118 = "61115",
v61115 = "61073",
v61073 = "61069",
v61069 = "61117",
v61117 = "61116",
v61116 = "61117",
v61117 = "61069",
v61069 = "61067",
v61067 = "61066",
v61066 = "61065",
v61065 = "61064",
v61064 = "61063",
v61063 = "61011",
v61011 = "61013",
v61013 = "61014",
v61014 = "61024",
v61024 = "61025",
v61025 = "61024",
v61024 = "61026",
v61026 = "61027",
v61027 = "61037",
v61037 = "61027",
v61027 = "61040",
v61040 = "61027",
v61027 = "61062",
v61062 = "61061",
v61061 = "61060",
v61060 = "61059",
v61059 = "61058",
v61058 = "61057",
v61057 = "61056",
v61056 = "61055",
v61055 = "61047",
v61047 = "61048",
v61048 = "61049",
v61049 = "61048",
v61048 = "61051",
v61051 = "61048",
v61048 = "61052",
v61052 = "61048",
v61048 = "61047",
v61047 = "61045",
v61045 = "61040",
v61040 = "61041",
v61041 = "61043",
v61043 = "61044",
v61044 = "61057",
v61057 = "50236",

-- the maul
v50236 = "50237",
v50237 = "50238",
v50238 = "50239",
v50239 = "50240",
v50240 = "50246",
v50246 = "50243",
v50243 = "50242",
v50242 = "50241",
v50241 = "50247",
v50247 = "50248",
v50248 = "50249",
v50249 = "50250",
v50250 = "50251",
v50251 = "50252",
v50252 = "50253",
v50253 = "50254",
v50254 = "50255",
v50255 = "50256",
v50256 = "50257",
v50257 = "57980",
v57980 = "50260",
v50260 = "50259",
v50259 = "50258",
v50258 = "50261",
v50261 = "50262",
v50262 = "50260",
v50260 = "50263",
v50263 = "57979",
v57979 = "50268",
v50268 = "50265",
v50265 = "50264",
v50264 = "50266",
v50266 = "50267",
v50267 = "50268",
v50268 = "50269",
v50269 = "50270",
v50270 = "50271",
v50271 = "50272",
v50272 = "50273",
v50273 = "50274",
v50274 = "57978",
v57978 = "50277",
v50277 = "57977",
v57977 = "50276",
v50276 = "50275",
v50275 = "50271",
v50271 = "city",


}

elseif snd.which_path == "high" then
check = {

--Aurer Haven (we are evil after all)
v19321 = "19443",
v19443 = "19444",
v19444 = "19445",
v19445 = "19446",
v19446 = "19447",
v19447 = "19448",
v19448 = "19449",
v19449 = "19450",
v19450 = "19451",
v19451 = "19452",
v19452 = "19453",
v19453 = "19454",
v19454 = "19455",
v19455 = "19456",
v19456 = "19504",
v19504 = "19505",
v19505 = "19457",
v19457 = "19458",
v19458 = "19459",
v19459 = "19460",
v19460 = "19461",
v19461 = "19462",
v19462 = "19463",
v19463 = "19464",
v19464 = "19465",
v19465 = "19466",
v19466 = "19467",
v19467 = "19468",
v19468 = "19469",
v19469 = "19470",
v19470 = "19471",
v19471 = "19472",
v19472 = "19473",
v19473 = "19474",
v19474 = "19476",
v19476 = "19477",
v19477 = "19478",
v19478 = "19479",
v19479 = "19481",
v19481 = "19475",
v19475 = "19480",
v19480 = "19482",
v19482 = "19483",
v19483 = "19484",
v19484 = "19485",
v19485 = "19486",
v19486 = "19489",
v19489 = "19490",
v19490 = "19491",
v19491 = "19492",
v19492 = "19488",
v19488 = "19487",  
v19487 = "19493",
v19493 = "19494",
v19494 = "19495",
v19495 = "19496",
v19496 = "19497",
v19497 = "19498",
v19498 = "19499",
v19499 = "19500",
v19500 = "19501",
v19501 = "19502",
v19502 = "15344",

-- Eresh
v15344 = "15346",
v15346 = "15347",
v15347 = "15350",
v15350 = "15349",
v15349 = "15351",
v15351 = "15352",
v15352 = "15354",
v15354 = "15353",
v15353 = "15355",
v15355 = "15356",
v15356 = "15367",
v15367 = "15368",
v15368 = "15348",
v15348 = "15369",
v15369 = "15370",
v15370 = "15372",
v15372 = "15373",
v15373 = "15371",
v15371 = "15374",
v15374 = "15390",
v15390 = "15375",
v15375 = "15376",
v15376 = "15377",
v15377 = "15391",
v15391 = "15392",
v15392 = "15393",
v15393 = "15394",
v15394 = "15404",
v15404 = "15405",
v15405 = "15395",
v15395 = "15396",
v15396 = "19344",

--Caverns of Mor
v19344 = "19346",
v19346 = "19351",
v19351 = "19352",
v19352 = "19353",
v19353 = "19354",
v19354 = "19355",
v19355 = "19356",
v19356 = "19357",
v19357 = "19358",
v19358 = "19360",
v19360 = "19359",
v19359 = "19361",
v19361 = "19362",
v19362 = "19363",
v19363 = "19364",
v19364 = "19365",
v19365 = "19417",
v19417 = "19416",
v19416 = "19415",
v19415 = "19413",
v19413 = "19414",
v19414 = "19418",
v19418 = "19419",
v19419 = "19424",
v19424 = "19425",
v19425 = "19426",
v19426 = "19427",
v19427 = "19420",
v19420 = "19421",
v19421 = "19423",
v19423 = "19429",
v19429 = "19430",
v19430 = "19431",
v19431 = "19432",
v19432 = "19433",
v19433 = "19434",
v19434 = "19435",
v19435 = "19436",
v19436 = "19437",
v19437 = "19438",
v19438 = "19439",
v19439 = "19440",
v19440 = "19441",
v19441 = "19442",
v19442 = "19506",
v19506 = "19507",
v19507 = "19508",
v19508 = "19509",
v19509 = "19510",  -- need to add "open door sw" in the gmpc_room for here, just in case it's closed
v19510 = "19511",  -- need to add "open door nw" in the gmpc_room for here, just in case it's closed
v19511 = "19512",
v19512 = "19514",
v19514 = "19513",
v19513 = "19515",
v19515 = "19516",
v19516 = "19517",
v19517 = "19518",
v19518 = "19519",
v19519 = "62102",

--Saliltul Swamp

v62102 = "59254",
v59254 = "59257",
v59257 = "61882",
v61882 = "61883",
v61883 = "61884",
v61884 = "61885",
v61885 = "61886",
v61886 = "61878",
v61878 = "61879",
v61879 = "61880",
v61880 = "61881",
v61881 = "61877",
v61877 = "61848",
v61848 = "59256",
v59256 = "61901",
v61901 = "61902",
v61902 = "61903",
v61903 = "61904",
v61904 = "61905",
v61905 = "61906",
v61906 = "61924",
v61924 = "61925",
v61925 = "61927",
v61927 = "62097",
v62097 = "62548",
v62548 = "61900",
v61900 = "61899",
v61899 = "59255",
v59255 = "61887",
v61887 = "61890",
v61890 = "61891",
v61891 = "61892",
v61892 = "61893",
v61893 = "61894",
v61894 = "60845",

--Sparklight
v60845 = "60846",
v60846 = "60847",
v60847 = "60848",
v60848 = "60844",
v60844 = "60855",
v60855 = "60854",
v60854 = "60849",
v60849 = "60851",
v60851 = "60850",
v60850 = "60853",
v60853 = "60852",
v60852 = "60856",
v60856 = "60857",
v60857 = "60858",
v60858 = "60909",
v60909 = "60910",
v60910 = "60911",
v60911 = "60912",
v60912 = "60913",
v60913 = "60914",
v60914 = "60859",
v60859 = "60860",
v60860 = "60904",
v60904 = "60905",
v60905 = "60906",
v60906 = "60907",
v60907 = "60908",
v60908 = "60915",
v60915 = "60916",
v60916 = "60920",
v60920 = "60921",
v60921 = "60922",
v60922 = "60923",
v60923 = "60924",
v60924 = "60925",
v60925 = "60926",
v60926 = "60927",
v60927 = "60928",
v60928 = "60929",
v60929 = "19810",


--Kalydian Forest
v19810 = "19811",
v19811 = "19813",
v19813 = "19812",
v19812 = "19869",
v19869 = "19870",
v19870 = "19871",
v19871 = "19875",
v19875 = "19874",
v19874 = "19873",
v19873 = "19893",
v19893 = "19896",
v19896 = "19894",
v19894 = "19895",
v19895 = "19909",
v19909 = "19910",
v19910 = "19897",
v19897 = "19901",
v19901 = "19903",
v19903 = "19902",
v19902 = "19900",
v19900 = "19881",
v19881 = "19899",
v19899 = "19898",
v19898 = "19876",
v19876 = "19872",
v19872 = "19855",
v19855 = "19877",
v19877 = "19882",
v19882 = "19886",
v19886 = "19890",
v19890 = "19887",
v19887 = "19888",
v19888 = "19891",
v19891 = "19889",
v19889 = "19884",
v19884 = "19885",
v19885 = "19879",
v19879 = "19883",
v19883 = "19878",
v19878 = "19999",

--Ayhesa Cliffs
v19999 = "20000",
v20000 = "20001",
v20001 = "20002",
v20002 = "20003",
v20003 = "20004",
v20004 = "20005",
v20005 = "20006",
v20006 = "20007",
v20007 = "20008",
v20008 = "20009",
v20009 = "20010",
v20010 = "20011",
v20011 = "20012",
v20012 = "20013",
v20013 = "20014",
v20014 = "20015",
v20015 = "20016",
v20016 = "20018",
v20018 = "20019",
v20019 = "20020",
v20020 = "20021",
v20021 = "20022",
v20022 = "20023",
v20023 = "20024",
v20024 = "20025",
v20025 = "20026",
v20026 = "20027",
v20027 = "20028",
v20028 = "20029",
v20029 = "20030",
v20030 = "20031",
v20031 = "20032",
v20032 = "62996",

--Fractal Bloom
v62996 = "63002",
v63002 = "63003",
v63003 = "63004",
v63004 = "63009",
v63009 = "63026",
v63026 = "63027",
v63027 = "63028",
v63028 = "63029",
v63029 = "63030",
v63030 = "63035",
v63035 = "63036",
v63036 = "63037",
v63037 = "63038",
v63038 = "63039",
v63039 = "23113",


--Augerweald
v23113 = "23750",
v23750 = "23751",
v23751 = "23778",
v23778 = "23779",
v23779 = "23777",
v23777 = "23780",
v23780 = "23781",
v23781 = "23782",
v23782 = "23796",
v23796 = "23784",
v23784 = "23785",
v23785 = "23786",
v23786 = "23787",
v23787 = "23913",
v23913 = "23914",
v23914 = "23915",
v23915 = "23916",
v23916 = "23922",
v23922 = "24338",
v24338 = "24339",
v24339 = "24340",
v24340 = "24341",
v24341 = "23912",
v23912 = "23790",
v23790 = "23791",
v23791 = "23792",
v23792 = "23797",
v23797 = "23789",
v23789 = "23788",
v23788 = "23923",
v23923 = "23924",
v23924 = "23936",
v23936 = "23937",
v23937 = "23938",
v23938 = "23798",
v23798 = "23804",
v23804 = "23795",
v23795 = "23925",
v23925 = "23926",
v23926 = "23927",
v23927 = "23928",
v23928 = "23929",
v23929 = "23930",
v23930 = "23931",
v23931 = "23932",
v23932 = "23933",
v23933 = "23934",
v23934 = "23935",
v23935 = "23064",
v23064 = "23063",
v23063 = "23062",
v23062 = "23061",
v23061 = "23060",
v23060 = "23052",
v23052 = "23051",
v23051 = "23050",
v23050 = "23049",
v23049 = "23048",
v23048 = "23065",
v23065 = "23107",
v23107 = "23108",
v23108 = "23109",
v23109 = "23110",
v23110 = "23907",
v23907 = "23908",
v23908 = "23909",
v23909 = "23910",
v23910 = "23911",
v23911 = "20855",

--Mamashi Tunnels
v20855 = "20856",
v20856 = "20857",
v20857 = "20858",
v20858 = "20859",
v20859 = "20861",
v20861 = "20862",
v20862 = "20863",
v20863 = "20866",
v20866 = "20864",
v20864 = "20865",
v20865 = "20860",
v20860 = "20867",
v20867 = "20868",
v20868 = "20869",
v20869 = "20871",
v20871 = "20870",
v20870 = "20877",
v20877 = "20878",
v20878 = "20879",
v20879 = "20876",
v20876 = "20875",
v20875 = "20874",
v20874 = "20901",
v20901 = "20900",
v20900 = "20899",
v20899 = "20898",
v20898 = "20909",
v20909 = "20908",
v20908 = "20907",
v20907 = "20906",
v20906 = "20905",
v20905 = "20904",
v20904 = "20902",
v20902 = "20903",
v20903 = "20912",
v20912 = "20913",
v20913 = "20916",
v20916 = "20917",
v20917 = "20918",
v20918 = "20919",
v20919 = "20920",
v20920 = "20921",
v20921 = "19626",

--Isle of Ollin
v19626 = "19624",
v19624 = "19598",
v19598 = "19594",
v19594 = "19625",
v19625 = "20270",
v20270 = "20269",
v20269 = "20268",
v20268 = "20267",
v20267 = "20272",
v20272 = "20273",
v20273 = "20274",
v20274 = "20275",
v20275 = "20220",
v20220 = "20221",
v20221 = "20223",
v20223 = "20224",
v20224 = "20222",
v20222 = "20233",
v20233 = "20234",
v20234 = "20235",
v20235 = "20236",
v20236 = "20237",
v20237 = "20251",
v20251 = "20252",
v20252 = "20226",
v20226 = "20253",
v20253 = "20254",
v20254 = "20242",
v20242 = "20238",
v20238 = "20241",
v20241 = "20240",
v20240 = "20239",
v20239 = "20248",
v20248 = "20243",
v20243 = "20247",
v20247 = "20249",
v20249 = "20246",
v20246 = "20245",
v20245 = "20244",
v20244 = "20250",
v20250 = "20218",
v20218 = "20219",
v20219 = "20217",
v20217 = "20214",
v20214 = "19521",
v19521 = "19520",
v19520 = "19523",
v19523 = "19525",
v19525 = "20227",
v20227 = "20228",
v20228 = "20229",
v20229 = "20230",
v20230 = "20231",
v20231 = "20232",
v20232 = "19526",
v19526 = "19524",
v19524 = "19593",
v19593 = "19595",
v19595 = "19597",
v19597 = "19627",
v19627 = "20255",
v20255 = "20256",
v20256 = "20257",
v20257 = "20259",
v20259 = "20258",
v20258 = "20260",
v20260 = "20261",
v20261 = "20263",
v20263 = "20262",
v20262 = "20264",
v20264 = "20265",
v20265 = "20266",
v20266 = "23202",

--the Torturers' Caverns
v23202 = "23203",
v23203 = "23204",
v23204 = "23205",
v23205 = "23206",
v23206 = "23207",
v23207 = "23208",
v23208 = "23209",
v23209 = "23210",
v23210 = "23211",
v23211 = "23212",
v23212 = "23213",
v23213 = "23214",
v23214 = "23215",
v23215 = "23216",
v23216 = "23217",
v23217 = "23218",
v23218 = "23219",
v23219 = "23220",
v23220 = "23221",
v23221 = "23222",
v23222 = "23223",
v23223 = "23224",
v23224 = "23225",
v23225 = "23226",
v23226 = "23227",
v23227 = "23228",
v23228 = "23229",
v23229 = "23230",
v23230 = "23231",
v23231 = "23232",
v23232 = "23233",
v23233 = "23234",
v23234 = "23235",
v23235 = "23236",
v23236 = "23237",
v23237 = "23238",
v23238 = "23257",
v23257 = "23256",
v23256 = "23255",
v23255 = "23254",
v23254 = "23253",
v23253 = "23243",
v23243 = "23245",
v23244 = "23245",
v23245 = "23246",
v23246 = "23247",
v23247 = "23248",
v23248 = "23249",
v23249 = "23250",
v23250 = "23251",
v23251 = "23252",
v23252 = "23242",
v23242 = "23241",
v23241 = "23240",
v23240 = "23239",
v23239 = "23265",
v23265 = "23266",
v23266 = "23267",
v23267 = "23268",
v23268 = "23269",
v23269 = "23270",
v23270 = "23271",
v23271 = "23272",
v23272 = "23279",
v23279 = "23280",
v23280 = "23273",
v23273 = "23284",
v23284 = "23283",
v23283 = "23282",
v23282 = "23274",
v23274 = "23281",
v23281 = "23275",
v23275 = "23276",
v23276 = "23277",
v23277 = "23285",
v23285 = "23278",
v23278 = "23286",
v23286 = "23287",
v23287 = "23288",
v23288 = "23289",
v23289 = "23291",
v23291 = "23290",
v23290 = "23292",
v23292 = "23293",
v23293 = "23294",
v23294 = "23295",
v23295 = "23296",
v23296 = "23297",
v23297 = "23298",
v23298 = "23300",
v23300 = "23301",
v23301 = "23302",
v23302 = "23303",
v23303 = "23304",
v23304 = "23305",
v23305 = "23306",
v23306 = "23307",
v23307 = "23308",
v23308 = "23309",
v23309 = "23310",
v23310 = "23311",
v23311 = "23312",
v23312 = "23313",
v23313 = "23314",
v23314 = "23315",
v23315 = "23316",
v23316 = "23317",
v23317 = "23318",
v23318 = "23319",
v23319 = "23321",
v23321 = "23322",
v23322 = "22866",

--the Lich Gardens
v22866 = "22867",
v22867 = "22868",
v22868 = "22869",
v22869 = "22870",
v22870 = "22871",
v22871 = "22872",
v22872 = "22873",
v22873 = "22874",
v22874 = "22875",
v22875 = "22876",
v22876 = "22877",
v22877 = "22878",
v22878 = "22879",
v22879 = "22880",
v22880 = "22881",
v22881 = "22882",
v22882 = "22884",
v22884 = "22885",
v22885 = "22886",
v22886 = "22911",
v22911 = "22912",
v22912 = "22913",
v22913 = "22914",
v22914 = "22915",
v22915 = "22916",
v22916 = "22917",
v22917 = "22918",
v22918 = "22919",
v22919 = "22920",
v22920 = "22921",
v22921 = "22922",
v22922 = "22923",
v22923 = "22924",
v22924 = "22925",
v22925 = "22890",
v22890 = "22891",
v22891 = "22892",
v22892 = "22893",
v22893 = "22894",
v22894 = "22895",
v22895 = "22896",
v22896 = "22897",
v22897 = "22898",
v22898 = "22899",
v22899 = "22900",
v22900 = "22901",
v22901 = "22902",
v22902 = "22903",
v22903 = "22904",
v22904 = "22905",
v22905 = "22906",
v22906 = "22907",
v22907 = "22908",
v22908 = "22909",
v22909 = "22910",
v22910 = "22883",
v22883 = "19854",

--Drakuum
v19854 = "20076",
v20076 = "20077",
v20077 = "20078",
v20078 = "20079",
v20079 = "20086",
v20086 = "20087",
v20087 = "20088",
v20088 = "20089",
v20089 = "20083",
v20083 = "20084",
v20084 = "20085",
v20085 = "20080",
v20080 = "20081",
v20081 = "20082",
v20082 = "20090",
v20090 = "20091",
v20091 = "20092",
v20092 = "20093",
v20093 = "20094",
v20094 = "20095",
v20095 = "20096",
v20096 = "20097",
v20097 = "20098",
v20098 = "20099",
v20099 = "20100",
v20100 = "20101",
v20101 = "20102",
v20102 = "20103",
v20103 = "20104",
v20104 = "20105",
v20105 = "20106",
v20106 = "20107",
v20107 = "20108",
v20108 = "20109",
v20109 = "20110",
v20110 = "20111",
v20111 = "20112",
v20112 = "20113",
v20113 = "20114",
v20114 = "20115",
v20115 = "20116",
v20116 = "20117",
v20117 = "20118",
v20118 = "20119",
v20119 = "20120",
v20120 = "20121",
v20121 = "20122",
v20122 = "20123",
v20123 = "20124",
v20124 = "20125",
v20125 = "20126",
v20126 = "20127",
v20127 = "20128",
v20128 = "20129",
v20129 = "20130",
v20130 = "20131",
v20131 = "20132",
v20132 = "20133",
v20133 = "20134",
v20134 = "20135",
v20135 = "20136",
v20136 = "20137",
v20137 = "20138",
v20138 = "20139",
v20139 = "20140",
v20140 = "20141",
v20141 = "20142",
v20142 = "20143",
v20143 = "20144",
v20144 = "20145",
v20145 = "20146",
v20146 = "20147",
v20147 = "20148",
v20148 = "20149",
v20149 = "20150",
v20150 = "20151",
v20151 = "20152",
v20152 = "55276",

--Teshen Caldera
v55276 = "55277",
v55277 = "55287",
v55287 = "55289",
v55289 = "55290",
v55290 = "55291",
v55291 = "55288",
v55288 = "55281",
v55281 = "55285",
v55285 = "55286",
v55286 = "55278",
v55278 = "55279",
v55279 = "55280",
v55280 = "55292",
v55292= "55294",
v55294= "55316",
v55316= "55315",
v55315= "55317",
v55317= "55318",
v55318= "55319",
v55319= "55326",
v55326= "55320",
v55320= "55321",
v55321= "55322",
v55322= "55323",
v55323= "55324",
v55324= "55325",
v55325= "55293",
v55293= "55327",
v55327= "55330",
v55330= "55341",
v55341= "55342",
v55342= "55343",
v55343= "55344",
v55344= "55328",
v55328= "55336",
v55336= "55331",
v55331= "55329",
v55329= "55337",
v55337= "55335",
v55335= "55338",
v55338= "55332",
v55332= "55340",
v55340= "55333",
v55333= "55334",
v55334= "55339",
v55339= "53178",
v53178= "53179",
v53179= "53180",
v53180= "53883",
v53883= "54203",
v54203= "54204",
v54204= "54205",
v54205= "54206",
v54206= "53181",
v53181= "53241",
v53241= "55356",
v55356= "55357",
v55357= "55358",
v55358= "55359",
v55359= "55360",
v55360= "55361",
v55361= "55362",
v55362= "55363",
v55363= "55364",
v55364= "55365",
v55365= "55366",
v55366= "55367",
v55367= "55368",
v55368= "55369",
v55369= "55370",
v55370= "54207",
v54207= "54209",
v54209= "54242",
v54242= "54243",
v54243= "54256",
v54256= "54257",
v54257= "54259",
v54259= "54260",
v54260= "54261",
v54261= "54244",
v54244= "54262",
v54262= "54270",
v54270= "54249",
v54249= "54271",
v54271= "54250",
v54250= "54253",
v54253= "54252",
v54252= "54251",
v54251= "54394",
v54394= "54395",
v54395= "54396",
v54396= "54397",
v54397= "54398",
v54398= "54399",
v54399= "54400",
v54400= "city",


}

elseif snd.which_path == "medium" then
check = {

--a snake pit
v56942 = "56790",
v56790 = "56793",
v56793 = "56795",
v56795 = "57174",
v57174 = "57176",
v57176 = "57177",
v57177 = "57178",
v57178 = "57179",
v57179 = "57180",
v57180 = "57181",
v57181 = "57182",
v57182 = "57183",
v57183 = "57184",
v57184 = "57175",
v57175 = "57185",
v57185 = "57186",
v57186 = "57187",
v57187 = "57188",
v57188 = "57246",
v57246 = "57247",
v57247 = "57252",
v57252 = "57253",
v57253 = "57244",
v57244 = "57245",
v57245 = "57251",
v57251 = "57248",
v57248 = "57249",
v57249 = "57250",
v57250 = "57243",
v57243 = "57052",
v57052 = "57049",
v57049 = "57050",
v57050 = "57051",
v57051 = "56796",
v56796 = "56797",
v56797 = "56808",
v56808 = "57042",
v57042 = "57043",
v57043 = "57044",
v57044 = "57045",
v57045 = "57046",
v57046 = "57047",
v57047 = "57048",
v57048 = "56807",
v56807 = "56794",
v56794 = "56792",
v56792 = "56791",
v56791 = "57242",
v57242 = "56786",
v56786 = "25408",

--Khauskin Mines
v25408 = "25409",
v25409 = "25411",
v25411 = "25410",
v25410 = "25412",
v25412 = "25413",
v25413 = "25414",
v25414 = "25415",
v25415 = "25416",
v25416 = "25417",
v25417 = "25418",
v25418 = "25419",
v25419 = "25420",
v25420 = "25421",
v25421 = "25422",
v25422 = "25426",
v25426 = "25423",
v25423 = "25424",
v25424 = "25425",
v25425 = "25427",
v25427 = "25428",
v25428 = "25429",
v25429 = "25430",
v25430 = "25431",
v25431 = "25432",
v25432 = "25433",
v25433 = "25434",
v25434 = "25435",
v25435 = "25436",
v25436 = "25437",
v25437 = "25438",
v25438 = "25439",
v25439 = "25440",
v25440 = "25441",
v25441 = "25447",
v25447 = "25448",
v25448 = "25449",
v25449 = "25450",
v25450 = "25451",
v25451 = "25452",
v25452 = "25453",
v25453 = "25454",
v25454 = "25455",
v25455 = "25456",
v25456 = "25457",
v25457 = "25458",
v25458 = "25459",
v25459 = "25460",
v25460 = "25461",
v25461 = "25462",
v25462 = "25463",
v25463 = "25464",
v25464 = "25465",
v25465 = "25466",
v25466 = "25467",
v25467 = "25468",
v25468 = "25469",
v25469 = "25470",
v25470 = "25471",
v25471 = "25472",
v25472 = "25473",
v25473 = "25474",
v25474 = "25475",
v25475 = "25476",
v25476 = "25477",
v25477 = "25478",
v25478 = "20281",

--Three Rock Outpost
v20281 = "20282",
v20282 = "20284",
v20284 = "20285",
v20285 = "20286",
v20286 = "20287",
v20287 = "20288",
v20288 = "20289",
v20289 = "20290",
v20290 = "20291",
v20291 = "20292",
v20292 = "20293",
v20293 = "20294",
v20294 = "20295",
v20295 = "20296",
v20296 = "20297",
v20297 = "20298",
v20298 = "20299",
v20299 = "20300",
v20300 = "20310",
v20310 = "20311",
v20311 = "20312",
v20312 = "20309",
v20309 = "20301",
v20301 = "20318",
v20318 = "20317",
v20317 = "20316",
v20316 = "20315",
v20315 = "20314",
v20314 = "20313",
v20313 = "20319",
v20319 = "20320",
v20320 = "20321",
v20321 = "20322",
v20322 = "20323",
v20323 = "20324",
v20324 = "20325",
v20325 = "20327",
v20327 = "20328",
v20328 = "20353",
v20353 = "20329",
v20329 = "20331",
v20331 = "20333",
v20333 = "20334",
v20334 = "20335",
v20335 = "20336",
v20336 = "20337",
v20337 = "20339",
v20339 = "20340",
v20340 = "20342",
v20342 = "20343",
v20343 = "20344",
v20344 = "20345",
v20345 = "20346",
v20346 = "20347",
v20347 = "20348",
v20348 = "20349",
v20349 = "48414",
v48414 = "48415",
v48415 = "48416",
v48416 = "48413",
v48413 = "48417",
v48417 = "48418",
v48418 = "48419",
v48419 = "19602",

--Salma
v19602 = "19603",
v19603 = "19608",
v19608 = "19609",
v19609 = "19610",
v19610 = "19611",
v19611 = "19613",
v19613 = "19672",
v19672 = "19671",
v19671 = "19679",
v19679 = "19681",
v19681 = "19683",
v19683 = "19685",
v19685 = "19687",
v19687 = "19686",
v19686 = "19684",
v19684 = "19682",
v19682 = "19680",
v19680 = "19674",
v19674 = "19675",
v19675 = "19677",
v19677 = "19678",
v19678 = "19676",
v19676 = "19673",
v19673 = "19669",
v19669 = "19670",
v19670 = "19688",
v19688 = "19689",
v19689 = "19690",
v19690 = "19668",
v19668 = "19667",
v19667 = "19666",
v19666 = "19665",
v19665 = "19664",
v19664 = "19663",
v19663 = "19662",
v19662 = "19661",
v19661 = "19657",
v19657 = "19656",
v19656 = "19659",
v19659 = "19655",
v19655 = "19653",
v19653 = "19654",
v19654 = "19658",
v19658 = "19660",
v19660 = "19652",
v19652 = "19651",
v19651 = "19650",
v19650 = "19649",
v19649 = "19646",
v19646 = "19647",
v19647 = "19648",
v19648 = "19636",
v19636 = "19637",
v19637 = "19638",
v19638 = "19639",
v19639 = "19640",
v19640 = "19639",
v19639 = "5128",

--Dun Fortress
v5128 = "5129",
v5129 = "5130",
v5130 = "5131",
v5131 = "3886",
v3886 = "city",

}

else


check = {

--Temple of Sonn
v16706 = "16707",
v16707 = "16716",
v16716 = "16715",
v16715 = "16714",
v16714 = "16713",
v16713 = "16708",
v16708 = "16709",
v16709 = "16710",
v16710 = "16712",
v16712 = "16711",
v16711 = "16717",
v16717 = "16718",
v16718 = "16719",
v16719 = "16720",
v16720 = "16721",
v16721 = "16724",
v16724 = "16725",
v16725 = "16726",
v16726 = "16727",
v16727 = "16728",
v16728 = "16729",
v16729 = "16730",
v16730 = "16731",
v16731 = "16732",
v16732 = "16733",
v16733 = "16734",
v16734 = "16735",
v16735 = "16736",
v16736 = "16722",
v16722 = "16723",
v16723 = "16740",
v16740 = "16741",
v16741 = "16742",
v16742 = "16743",
v16743 = "16744",
v16744 = "16745",
v16745 = "16746",
v16746 = "16747",
v16747 = "16748",
v16748 = "16749",
v16749 = "16750",
v16750 = "16751",
v16751 = "16752",
v16752 = "16753",
v16753 = "16754",
v16754 = "16755",
v16755 = "16756",
v16756 = "16757",
v16757 = "16758",
v16758 = "16944",
v16944 = "16945",
v16945 = "16946",
v16946 = "16947",
v16947 = "16948",
v16948 = "16939",
v16939 = "16949",
v16949 = "16956",
v16956 = "16958",
v16958 = "16959",
v16959 = "16957",
v16957 = "16953",
v16953 = "16954",
v16954 = "16955",
v16955 = "16951",
v16951 = "16952",
v16952 = "16943",
v16943 = "16942",
v16942 = "16940",
v16940 = "16941",
v16941 = "16979",
v16979 = "16980",
v16980 = "16981",
v16981 = "16982",
v16982 = "16983",
v16983 = "16984",
v16984 = "16985",
v16985 = "16986",
v16986 = "16987",
v16987 = "16988",
v16988 = "16989",
v16989 = "16990",
v16990 = "16991",
v16991 = "16992",
v16992 = "16993",
v16993 = "16994",
v16994 = "16995",
v16995 = "16996",
v16996 = "16997",
v16997 = "16998",
v16998 = "16999",
v16999 = "17000",
v17000 = "17001",
v17001 = "17002",
v17002 = "17003",
v17003 = "17004",
v17004 = "17005",
v17005 = "17006",
v17006 = "17007",
v17007 = "17008",
v17008 = "17009",
v17009 = "17010",
v17010 = "17011",
v17011 = "17012",
v17012 = "17013",
v17013 = "17014",
v17014 = "17015",
v17015 = "17016",
v17016 = "17017",
v17017 = "17018",
v17018 = "17019",
v17019 = "17020",
v17020 = "17021",
v17021 = "17022",
v17022 = "17023",
v17023 = "21365",

--Vilimo
v21365 = "21366",
v21366 = "21367",
v21367 = "21368",
v21368 = "21369",
v21369 = "21370",
v21370 = "21371",
v21371 = "21372",
v21372 = "21373",
v21373 = "21374",
v21374 = "21375",
v21375 = "21376",
v21376 = "21377",
v21377 = "21378",
v21378 = "21379",
v21379 = "21380",
v21380 = "21381",
v21381 = "21382",
v21382 = "21383",
v21383 = "21384",
v21384 = "21385",
v21385 = "21386",
v21386 = "21387",
v21387 = "21388",
v21388 = "21389",
v21389 = "21390",
v21390 = "21391",
v21391 = "21392",
v21392 = "21393",
v21393 = "21394",
v21394 = "21395",
v21395 = "21396",
v21396 = "21397",
v21397 = "21398",
v21398 = "21399",
v21399 = "21400",
v21400 = "21401",
v21401 = "21402",
v21402 = "21403",
v21403 = "21404",
v21404 = "21405",
v21405 = "21406",
v21406 = "21407",
v21407 = "21408",
v21408 = "21409",
v21409 = "21410",
v21410 = "21411",
v21411 = "21413",
v21413 = "21414",
v21414 = "21415",
v21415 = "21416",
v21416 = "21417",
v21417 = "21418",
v21418 = "21419",
v21419 = "21420",
v21420 = "21421",
v21421 = "21422",
v21422 = "21423",
v21423 = "19324",


--Dolbodi
v19324 = "19334",
v19334 = "19335",
v19335 = "19336",
v19336 = "19337",
v19337 = "19338",
v19338 = "19339",
v19339 = "19340",
v19340 = "19341",
v19341 = "19342",
v19342 = "19345",
v19345 = "19347",
v19347 = "19348",
v19348 = "19349",
v19349 = "19350",
v19350 = "19366",
v19366 = "19367",
v19367 = "19368",
v19368 = "19369",
v19369 = "19370",
v19370 = "19371",
v19371 = "19372",
v19372 = "19373",
v19373 = "19374",
v19374 = "19375",
v19375 = "19376",
v19376 = "19377",
v19377 = "19378",
v19378 = "19379",
v19379 = "19380",
v19380 = "19381",
v19381 = "19382",
v19382 = "19383",
v19383 = "19384",
v19384 = "19385",
v19385 = "19386",
v19386 = "19387",
v19387 = "19388",
v19388 = "19389",
v19389 = "19390",
v19390 = "19391",
v19391 = "19392",
v19392 = "19393",
v19393 = "19394",
v19394 = "19395",
v19395 = "19396",
v19396 = "19397",
v19397 = "19398",
v19398 = "19399",
v19399 = "19400",
v19400 = "19401",
v19401 = "19402",
v19402 = "19403",
v19403 = "19404",
v19404 = "19405",
v19405 = "19406",
v19406 = "19407",
v19407 = "19408",
v19408 = "19409",
v19409 = "19411",
v19411 = "19412",
v19412 = "19522",
v19522 = "19600",
v19600 = "19601",
v19601 = "19604",
v19604 = "19605",
v19605 = "19606",
v19606 = "19607",
v19607 = "19323",
v19323 = "19607",
v19607 = "22824",

--Centipede Caverns
v22824 = "22825",
v22825 = "22826",
v22826 = "22828",
v22828 = "22829",
v22829 = "22830",
v22830 = "22831",
v22831 = "22832",
v22832 = "22833",
v22833 = "22834",
v22834 = "22836",
v22836 = "22837",
v22837 = "22838",
v22838 = "22839",
v22839 = "22840",
v22840 = "22841",
v22841 = "22842",
v22842 = "22843",
v22843 = "22844",
v22844 = "22845",
v22845 = "22846",
v22846 = "22847",
v22847 = "22848",
v22848 = "22849",
v22849 = "22850",
v22850 = "22851",
v22851 = "22852",
v22852 = "60267",
v60267 = "60268",
v60268 = "60269",
v60269 = "60270",
v60270 = "60271",
v60271 = "60272",
v60272 = "60273",
v60273 = "60274",
v60274 = "21001",

--Maghuir Fissure
v21001 = "21168",
v21168 = "21169",
v21169 = "21170",
v21170 = "21171",
v21171 = "21172",
v21172 = "21173",
v21173 = "21174",
v21174 = "21175",
v21175 = "21176",
v21176 = "21177",
v21177 = "21178",
v21178 = "21179",
v21179 = "21180",
v21180 = "21181",
v21181 = "21182",
v21182 = "21183",
v21183 = "21184",
v21184 = "21185",
v21185 = "21186",
v21186 = "21187",
v21187 = "21188",
v21188 = "21189",
v21189 = "21190",
v21190 = "21191",
v21191 = "21192",
v21192 = "21193",
v21193 = "21194",
v21194 = "21195",
v21195 = "21196",
v21196 = "21197",
v21197 = "21198",
v21198 = "21199",
v21199 = "21200",
v21200 = "21201",
v21201 = "21202",
v21202 = "21203",
v21203 = "21204",
v21204 = "21205",
v21205 = "21206",
v21206 = "21210",
v21210 = "21211",
v21211 = "21209",
v21209 = "21208",
v21208 = "21207",
v21207 = "21212",
v21212 = "21213",
v21213 = "21214",
v21214 = "21215",
v21215 = "21216",
v21216 = "21217",
v21217 = "21218",
v21218 = "21219",
v21219 = "21220",
v21220 = "21221",
v21221 = "21222",
v21222 = "city",

--Mausoleum
--Endgame fengard, yuzurai, isle of despair
--High morgun, bihrkaen, siro tunnels, salma, raugol, morass,
--Medium mannaseh, masilia, gloaming, humgurd, azdun, dun, torston, telfinne, three widows, ivio, farsai, hubride, heylai
--Low raim, rotfang, riparium, kornar, alaqsii, scidve, rebels ridge, festering, tornos

--have: gloaming, raim, maus, tornos, yuzurai

}
end

return check

end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<Script isActive="yes" isFolder="no">
						<name>bashing variables</name>
						<packageName></packageName>
						<script>
snd.bashing_loaded = true

snd.room_clear = false

snd.bashing = {
target = "none",
target_type = "long",
target_word = "",
old_target = "",
target_number = "",
target_desc = "",
corpse_word = "",
corpse_number = "",
corpse_desc = "",
target_priority = 10000,
engaged = false,
targeted = false,
stopping = false
}

snd.area_found = false
snd.possible_targets = {}
snd.possible_items = {}
snd.corpses = {}
snd.gathering = {}
snd.have_items = false
snd.need_loot = false
snd.vermin = 0
snd.vermhit = true</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>table</name>
						<packageName></packageName>
						<script>
snd.areas = {

{area = "Bloodloch", level = "globes only", targets = {"a massive elemental"}},
{area = "Duiran", level = "globes only", targets = {"a massive elemental"}},
{area = "the City of Enorian", level = "globes only", targets = {"a massive elemental"}},
{area = "Spinesreach", level = "globes only", targets = {"a massive elemental"}},
{area = "Tainhelm", level = "30-40", targets = { "a stout Dwarven guard", "an elderly female Dwarf", "an elderly Dwarven man", "a calm Dwarven woman", "an elderly dwarf", "a tanned Dwarven farmer", "a female Dwarf", "an elderly Dwarven gardener", "a male Dwarf", "a Dwarven craftsman", "the Dwarven alemaster", "a Dwarven boy", "Gwenil, the Dwarven blacksmith", "Baruin, the Dwarven mason", "a Dwarven miner", "Tohrul, the Dwarven supervisor", "a Dwarven girl", "a Dwarven boy", "Nolid, the Dwarven fisherman", "the Dwarven miller", "Mayor Thurgil Redstein", "a liveried Dwarf servant"} },
{area = "the Holy Impire of Sehal", level = "newbie", targets = {"a soulless pixie", "a stern Imp warrior", "a boisterous Imp boy", "a charming Imp girl", "a fluffy white sheep", "a fuzzy grey rabbit"}, items = {}},
{area = "the Valley of Lodi", level = "newbie", targets = {"a cave bat", "a sheep", "a white hen", "a juvenile wildcat", "an adult wildcat"}, items = {}},
{area = "the village of Gorshire", level = "newbie", targets = {"a guard pig", "a portly gnome sentry", "a gnome man", "a gnome woman", "a little gnome boy", "a gnome sentry", "a little gnome girl", "a skinny gnome sentry", "a deputy constable", "a lithe weasel", "a large grey goose", "a large gray goose"}, items = {}},
{area = "the Tarean Caverns", level = "Newbie", targets = {"a small, black bat", "an unkempt Trog", "a chubby Trog woman", "a rambunctious young Trog", "a hulking Trog man", "a rotting rattlesnake", "an irritable, rabid zebra", "a blood-spattered leopard", "a frothing, manic buffalo", "a gigantic cave bear"}, items = {"a jagged stone shard"}},
{area = "the Crags", level = "Newbie", targets = {"a light grey stone worm", "a dark grey stone worm", "an infant-like cragling", "a steady cragling", "a vile snatcher", "a hulking snatcher"}, items = {"a dull, irregular gem"}},
{area = "the village of Rahveir", level = "Newbie", targets = {"a disgustingly warped missionary", "a malevolent poltergeist", "a corrupted spirit"}, items = {"a strange black sphere"}},
{area = "Forsaken Evlasu", level = "Newbie", targets = {"an unnaturally lithe, shadowy aberration", "a hideous winged aberration", "a grotesque, warped aberration", "a corrupted cultist"}, items = {"a cluster of pure white starflower", "a corrupted aberration's feather", "a blighted branch", "a minute, corrupted totem"}},
{area = "Yohanan Village", level = "Newbie", targets = {"a fleshless skeleton", "a female villager", "a villager", "an old guard", "a small girl", "a young village guard", "a mangy rat", "a cave bat"}, items = {}},
{area = "Difohr Passage", level = "Quest", targets = {"a skittering onyx eld"}},
{area = "Myesian Run", level = "Quest", targets = {"a skittering verdant eld"}},
{area = "Cinderbreach Mine", level = "Quest", targets = {"a fiery crimson fragmented eld", "a shattered eld monstrosity", "a skittering crimson eld"}, items = {}},
{area = "Radial Dig Shaft #15", level = "Quest", targets = {"a shattered eld monstrosity", "an icy azure fragmented eld", "a skittering azure eld"}, items = {}},
{area = "the Centipede Cave", level = "25-35", targets = {"a large centipede", "a skittering centipede", "a chitinous centipede", "a venomous centipede", "a juvenile centipede", "a massive centipede queen"}, items = {}},
{area = "Riparium", level = "25-50", targets = {"a large red crab", "a moray eel", "a mantaglow fish", "a large, deepwater salmon", "an angler fish"}, items = {}},
{area = "the Siroccian Mountains", level = "30+", targets = {"a vicious wolverine", "a powerful wolverine"}},
{area = "the Festering Wastes", level = "30-40", targets = {"a darkly patterned sand viper", "a gray, spotted bobcat", "a ragged brown coyote", "a tiny black scorpion", "a deep green lizard", "a shivering jackrabbit", "a small yellow rattlesnake"}, items = {}},
{area = "Halls of Tornos", level = "30-40", targets = {"a speckled tinyok", "a snowy armadilleon", "a malformed beast", "a botched phase-hound", "a rabid blood-fiend", "a crazed blood-fiend", "a mutated blood-fiend"}},
{area = "Rebels' Ridge", level = "30-40", targets = {"a tenacious tough", "a rebellious rancher", "a former farmer", "a naive neo-Ankyrean", "a seditious scholar", "a dingy dog", "a gamey goat", "a chittering chicken"}, items = {}},
{area = "Scidve", level = "30-45", targets = {"a large gray and black dugger", "a rock devil", "a Drakt guard"}},
{area = "the Central Wilderness", level = "35-50", targets = {"a mottled green bullfrog", "a dragonfly"}},
{area = "Mount Humgurd", level = "40+", targets = {"a black-spotted cow"}},
{area = "the Western Itzatl Rainforest", level = "40-50", targets = {"a xenosaurus lizard", "a razor nahuac", "a playful oniro", "a frilled lizard", "a lithe black panther", "a katydid", "a spunky white tamarin", "a serpentine couatl", "an ecru axolotl", "an energetic orangutan", "a rojalli cub", "a tiny aurivv bug", "a furry coatimundi", "an orange, black-striped tiger", "a colorful toucan", "an iridescent tizapez", "a poisonous purple lora", "an enormous anaconda", "a swarm of tsetse flies", "a striped tzatica", "a menacing black rojalli"}, items = {"a glistening iridescent pearl", "a beautiful rough sapphire"}},
{area = "the Azdun dungeon", level = "40-50", targets = {"a huge pulsating spider", "medium pulsating spider", "a large pulsating spider"}},
{area = "the Dolbodi Campsite", level = "45-60", targets = {"a brawny hunter", "a slender forager", "a burly lumberjack", "a grizzly foreman", "a lithe buckawn"}, items = {}},
{area = "Dun Fortress", level = "45-60", targets = {"an orc guard", "a demonic screamer", "a serpentine blademistress", "a slime-encrusted spitter", "a dangerous water snake", "a large catfish"},},
{area = "a snake pit", level = "50-60", targets = {"a venenigol snake", "an andragil snake", "a tiny hatchling", "a large sertag snake", "a grassel snake","a muselon snake", "Nandqua, mate of Namaqua", "Namaqua, Queen of Serpents"}, items = {"a small snake's egg",}},
{area = "Alaqsii Inlet", level = "50-60", targets = {"an arctic wolf", "a small, ruddy turnstone", "a rotund, white ptarmigan", "a white-collared lemming", "a white gyrfalcon"}},
{area = "the Ruins of Farsai", level = "50-60", targets = {"an unctuous creepling", "a shadowdrop", "a darkling", "a panther-like Rajamala", "a menacing black rojalli", "a shadow", }},
{area = "the Ruins of Masilia", level = "50-60", targets = {"a corrupted hackle", "a ravenous locust", "a mutated hare", "a Masilidean etherealist", "Fermian, excavation foreman", "a Masilidean mentalist", "a Dwarven archeologist", "a Dwarven excavator", "a Masilidean focus", "a Masilidean etherealist", "a Masilidean physicalist", "Head Archeologist, Dolus", "Fermian, excavation foreman", }},
{area = "Asper", level = "50-60", targets = {"a fearsome icewyrm", "a malevolent spectre", "a failed experiment", "an animated golem of flesh", "a wild bobcat", "a snowshoe hare"}, items = {}},
{area = "the Undercity of Djeir", level = "50+", targets = {"a gargantuan spider", "a mutated crawler fish", "a striped siriskal fish", "an electric eel", "an elusive black fish", "a giant squid", "a monstrous coelacanth", "a carnivorous weed", "a fearsome Suria serpent"}},
{area = "the Three Rock Outpost", level = "60+", targets = {"a huge, scarred wildcat","a beautiful wild horse","a mountain wildcat",  "a wildcat kitten", "a long-haired buffalo", "an enormous Troll bandit","a shifty bandit", "the cave bear, White Ghost"}},
{area = "the village of Bihrkaen", level = "60-80", targets = {"a grotesque snapping turtle", "a mire hound", "a bog hound", "a mire pup", "an alpha female hound", "a slender mud adder", "a speckled, brown turtle", "an alpha male hound"}},
{area = "the Augerweald", level = "65-80", targets = {"an agitated direwolf", "a large, snowy fox", "silver-feathered orel", "a large bhfaol", "a gargantuan Augerweald rabbit", "a tall, white elk", }},
{area = "the Fractal Bloom", level = "65+", targets = {"a towering crystalline entity", "a slender crystalline entity", "a radiant crystalline entity", "a squat crystalline entity", "a fractured crystalline entity", "a faceted crystalline entity"}}, 
{area = "the Kalydian Forest", level = "65+", targets = {"a gaunt elk",  "a rabid rabbit", "a ravenous squirrel"}},
{area = "the Salma Settlement", level = "70-80", targets = {"a busy mage", "a bemused artist", "an engrossed scholar", "an ordinary woman", "a dark-haired woman", "a Salmati guard", "a dark-furred bear", "a Salmati warrior", "a common man", "an energetic child", "an unclean miner", "a wild-eyed scientist"}},
{area = "the Maghuir Fissure", level = "65+", targets = {"an amorphous black umbra","a darkly robed priest"}},
{area = "the Torturers' Caverns", level = "70-80", targets = {"Mellias, an elegant Tsol'aa consanguine", "Tuera, the torturer", "Sentinel Rozhirr", "a rank ghoul", "a vampiric overseer", "a maggot-ridden skeleton", "a flesh golem sentry", "a vile inquisitor", "a hulking ghast", "a scheming terramancer"}},
{area = "the Caverns of Mor", level = "70-85", targets = {"a ravenous, shadowy ghast", "a robed, skeletal lich", "a stench-ridden ghoul", "a skeletal warrior", "a vampiric warrior", "a vampiric sentry"}, items = {}},
{area = "the Sparklight Rift", level = "75+", targets = {"an oversized efreeti","a churning fire elemental","a fire elemental minion","a greater fire elemental","a colossal elemental"}},
{area = "the Mamashi Tunnels", level = "75+", targets = {"a greater nalas", "a young nalas", "a mature nalas","a Mit'olk bladesman", "a Mit'olk axeman", "a Mit'olk illusionist"}},
{area = "the Lich Gardens", level = "75-90", targets = {"a commanding lich scientist", "a dark Cabalist scholar", "a monstrous Carnifex guard", "a mindless experiment", "a guardian wraith", "a tattered Bahkatu experiment", "a student of the lich"}, items = {}},
{area = "the Isle of Ollin", level = "80-90", targets = {"a ferocious Alpha Syll","a giant, rabid Syll", "a massive, verdant-furred Syll", "a young Syll cub", "a blackened, ravenous shark", "a massive black crab", "a dark-furred, rabid boar", "a towering Nazetu guard", "a stinking Nazetu soldier", "a rotting Nazetu ghoul", "a Nazetu comfort woman", "a boisterous Nazetu child", "a sharp-clawed Boru prowler", "a fiendish, tainted Syll", "a diligent Boru harvester"}, items = {}},
{area = "the Itzatl Morass", level = "80-90", targets = {"an oversized fly", "an oversized earthworm", "a capybara", "a poisonous water moccasin", "a green slime toad", "a silent reed cat", "a vicious snapping turtle", "a long-toothed beaver"}},
{area = "Saliltul Swamp", level = "80-90", targets = {"a rabid direwolf", "a mutilated humanoid", "a red-eyed water snake"}},
{area = "the Iernian Fracture", level = "80+", targets = {"an unstable white eld", "a colossal crystalline eld", "a churning, unstable eld", "an enormous, three-cored eld", "an effulgent platinum eld", "a discordant, buzzing eld", "a cacophonous cluster of eld", "a shrieking mass of eld", "a flickering green eld", "a coruscating swarm of eld"}},
{area = "Drakuum", level = "70+", targets = {"a savage shade", "a blackened darkwalker", "a hideous lich",  "a misty apparition","a gnarled spirit"}}, 
{area = "the Ia'shal Barrow", level = "85+", targets = { "a foul spiderling", "a ravenous cave spider", "a bulbous cave spider", "an egg-laden spider"}},
{area = "Arbothia", level = "85-95", targets = {"an enraged female servant", "an enraged male servant", "an enraged female villager", "an enraged male villager"}},
{area = "the Eresh Mines", level = "85-95", targets = {"an angry vampire bat", "a blind wolf spider", "a swarm of black beetles"}, items = {}},
{area = "the Fengard Keep", level = "85-95", targets = {"a massive argobole", "a fiery phenkyre", "an ogre berserker", "a horrid basilwyrm", "a shrieking grimshrill", "a vicious horned garwhol", "a brawny glaive knight", "a tall chempala", "a radiant lumore", "a pious invoker", "a pungent lichosphere"}, items = {}},
{area = "the Ayhesa Cliffs", level = "90-100", targets = {"a Spellshaper Archon", "a Spellshaper Master", "a Spellshaper Adept"}, items = {"a flat metal disc"}},
{area = "Yuzurai village", level = "90-100", targets = {"a massive rojalli matriarch", "a sleek black rojalli", "a savage rojalli"}},
{area = "the Dramedo Warrens", level = "90-100", targets = {"a vast ochre ooze", "a winged fungal horror", "a shambling fungal abomination", "a gigantic fungal strider", "a cloud of fungal spores"}}, 
{area = "the Isle of Despair", level = "90-100", targets = {"a darkened soul", "a severed male head"}},
{area = "the Shattered Vortex (Low Level)", level = "90-100", targets = {"a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone"}, items = {}},
{area = "the Shattered Vortex (All)", level = "90-100", targets = {"a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a warped turtle", "a warrior of the Demonsbane", "a reinforcement warrior of the demonsbane", "a fetish-decorated shaman", "a nimble sentinel", "a stalwart templar", "an agile Sentaari monk", "a battle-worn Ascendril", "an Ascendril mage", "a Sciomancer mage", "a warped indorani", "a strained indorani", "a crazed indorani", "a reinforcement warrior of the aztob", "a warrior of the Aztob", "a warped turtle", "a petrified treant", "a piece of an amalgamation"}, items = {"a finger", "a chunk grey stone", "a chunk of obsidian glass", "a chunk of green and blue stone", "a broken shard of ruby"}},
{area = "the Shattered Vortex (Spirit)", level = "90-100", targets = {"a chaos worm", "a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a Sciomancer mage", "a warped indorani", "a strained indorani", "a crazed indorani", "a reinforcement warrior of the aztob", "a warrior of the Aztob", "a warped turtle", "a petrified treant", "a piece of an amalgamation"}, items = {"a finger", "a chunk grey stone", "a chunk of obsidian glass", "a chunk of green and blue stone", "a broken shard of ruby"}},
{area = "the Shattered Vortex (Shadow)", level = "90-100", targets = {"a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a warped turtle", "a warrior of the Demonsbane", "a reinforcement warrior of the demonsbane", "a fetish-decorated shaman", "a nimble sentinel", "a stalwart templar", "an agile Sentaari monk", "a battle-worn Ascendril", "an Ascendril mage", "a warped turtle", "a petrified treant", "a piece of an amalgamation"}, items = {"a finger", "a chunk grey stone", "a chunk of obsidian glass", "a chunk of green and blue stone", "a broken shard of ruby"}},
{area = "Arbothia", level = "85-95", targets = {"an enraged female servant", "an enraged male servant", "an enraged female villager", "an enraged male villager"}},
{area = "Tiyen Esityi", level = "95+", targets = {"Commander Marakhi", "Tirahl the Necromancer", "Lieutenant Gharvoi", "a ball of chitinous legs", "insubstantial whispers", "Quartermaster Kuius", "Lieutenant Chiakhi", "a crazed Nazetu cutter", "a mutated Nazetu intercessor", "a Nazetu cook", "a Nazetu halberdier", "a Nazetu provost", "a deformed Nazetu priest", "a Nazetu crossbowman", "a bound shade", "a Nazetu corrupter", "a Nazetu necromancer", "a supply officer", "a victimised intruder", "a Nazetu captain", "a canerous stallion", "a tangible malevolence"}},
{area = "the Nal'jin Depths", level = "95+", targets = {"an enormous spinelash fish", "a sinewy Nal'jin eel", "a shadow ray", "a serpentine jawsnapper"}},
{area = "the Forgotten Dome", level = "95+", targets = {"a gibbering kelki reaver", "a deformed kelki ravener", "a mutated kelki ravager", "a vile kelki prowler"}},
{area = "Luzith's Lair", level = "95+", targets = {"a mass of deadly trap spiders", "a deadly trap spider", "a monstrous arachnid", "a vicious little spider", "a large, crystalline spider", "a flying spider", "a sentinel spider", "a slender, female arachnoid"}},
{area = "the Bastion of Illdon", level = "95+", targets = {"a rabid plant", "a rabid hound", "a nightmare shadow", "a shadowy, mindless demon", "a mutated experiment"}},
{area = "Spiral of the Corrupt", level = "95+", targets = {"an ethereal, scarred jellyfish", "a rot-infested swordfish", "a five-tentacled octopus of jade", "a taint-infested shark", "a miasma-wreathed electric eel"}},
{area = "the Shastaan Warrens", level = "95+", targets = {"an aberrant, obscenely deformed Kelki", "a wild-eyed Kelki cultist", "a ragged Kelki cultist"}},
{area = "the Bloodwood", level = "95+", targets = {"a distressed spirit", "a wailing spirit", "a lingering spirit"}},
{area = "Dovan Hollow", level = "95+", targets = {"a gaunt Aslinn slaver", "a scarred Aslinn slaver", "a sinewy Aslinn slaver", "a haughty Caentoi slaver", "a hulking Ursal brute", "a grim Aslinn slaver"}},
{area = "the Feral Caves", level = "95+", targets = {"a small green blob", "a slimy green blob", "a massive green blob", "a gigantic green blob"}},
{area = "The Forgotten Mausoleum", level = "95+", targets = {"a reanimated Dwarf woman", "a rotting Dwarf archer", "a decomposing Dwarf", "a robed reanimated Dwarf"}},
{area = "Tcanna Island", level = "95+", targets = {"a massive elemental", "a brown and tan python",	"a box jellyfish", "a vicious copperhead snake", "a dark green alligator", "a white goose", "an oversized tortoise", "a blue crab", "a black bear", "a white-tailed deer", "a lithe cougar", "a spotted jaguar", "a ragged coyote", "a great white stag", "a diseased raccoon", "a black and white badger", "a spotted leopard", "a striped tiger", "a howler monkey", "a large capybara", "an enormous elephant", "a water buffalo", "a Horkvali butcher", "a small ocelot", "a long billed toucan", "a scarlet macaw", "a bald eagle", "a gray wolf", "a Troll guard", "a Troll cook", "a white goose", "a Nazetu officer", "a thick boa constrictor", "a brown-furred bat", "an ebon crow", "a silverback gorilla", "a venomous bushmaster", "a long-billed toucan",}},
{area = "Xaanhal", level = "really high", targets = {"an arrogant Xorani master at arms", "a helpless Xorani nestling", "a suspicious Xorani patrol", "a wiry Xorani guard", "a cautious Xorani guard", "a merciless Xorani warrior", "a willowy nest guardian", "a bejeweled Xorani harem girl", "Caelakan, an arrogant prince", "Kithan, a young Xorani girl"}, items = {"a fragment of a mosaic"}},
{area = "Trapped within a mirror", level = "Quest", targets = {"a fragment of living glass"}},
{area = "the Teshen Caldera", level = "40-60? Maybe", targets  = {"a Teshen raider", "a Teshen scout", "a Teshen reaver", "a Teshen worker"}},
{area = "the Temple of Sonn", level = "40+", targets = {"a menacing black rojalli", "a choke creeper", "a darkling", "a shadowdrop", "a giant mosquito", "an elongated black serpent", "a glossy black silk-spinner", "a giant fly"}},
{area = "Perilaus", level = "50+", targets = { "a school of spinebacks", "a striped sea krait", "a school of shadowy minnows", "a water viper", "a grey spider" }},
{area = "the Shattered Vortex (All)", level = "90-100", targets = {"a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a warped turtle", "a warrior of the Demonsbane", "a reinforcement warrior of the demonsbane", "a fetish-decorated shaman", "a guardian angel", "a nimble sentinel", "a stalwart templar", "an agile Sentaari monk", "a battle-worn Ascendril", "an Ascendril mage","a chaos worm", "a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a Sciomancer mage", "a warped indorani", "a strained indorani", "a crazed indorani", "a reinforcement warrior of the aztob", "a warped turtle", "a petrified treant", "a piece of an amalgamation"}, items = {"a finger", "a chunk grey stone", "a chunk of obsidian glass", "a chunk of green and blue stone", "a broken shard of ruby"}},
{area = "a volcano", level = "lolnope", targets = {"a large earth elemental", "a large smoke elemental", "a large fire elemental", "a lava daemon", "a glowing lava daemon" } },
{area = "Raim Vale", level = "20-30", targets = {"a misshapen woman", "a rabid dog", "Jehanne", "a deformed man", "a diseased man", "Midolo Raim", "a mutilated creature"} },
{area = "Raugol Fissure", level = "20-30", targets = {"a scything skitterer", "a stonescale ravager", "a stonescale mephit", "a splintering earthrager"} },
{area = "Chapel Garden", level = "90+", targets = {"a diminutive necromancer", "a zombie cleric", "a foul-smelling zombie", "Broondac, the vampire strategist"  } },
{area = "the Caverns of Telfinne", level = "40-60", targets = {"a cave-dwelling avisme", "a fanged lugore", "a slimy aryeim", "a tentacled morbol", "a draconic zogura", "a slender synicant",  } },
{area = "the Village of Kornar", level = "25-35", targets = {"a necromantic guard", "a Bloodloch soldier", "a conjured wraith", "a Bloodloch lich", "a female villager", "an undead villager", "Mala, the Artisan", "Firthar", "Hassik, the village elder", "an undead minion", "an undead child", "Moritsio, Owner of the Pub", "Igrar, Captain of the Gral", "a wealthy sailor"  } },
{area = "the Arurer Haven", level = "60", targets = {"a youthful priest", "a savvy priestess", "a budding priestess", "an aged priest", "Gunder, a retired sailor", "Father Garron, the priest", "Tisian, a young priest", "a young celestial angel" } },
{area = "the lost city of Iviofiyiedu", level = "45-55", targets = { "a ghost of a Mhun guard", "a ghost of a Mhun soldier", "General Abeshentesh", "a ghost of a male Mhun", "a ghost of a female Mhun", "a ghost of a young Mhun", "a mhun instructor", "Blacksmith Udhomentesh", "Fathientesh, a mhun crafter", "Dhemosh, a mhun miner" } },
{area = "the Village of Torston", level = "40+", targets = {"a mottled brown frog", "a venomous water snake", "a vicious snapping turtle", "a fierce crocodile", "an irritated crow", "a tall Horkvali woman", "a wary Xorani guard", "a stalwart Horkvali guard", "Estok, the guard captain", "a dusky-skinned Grook man", "a plump white grub", "a dark-skinned Grook woman", "a carefree Grook boy", "the impish outcast, Qezirath", "a frail Xorani man", "a little Grook girl", "Lesiv, the Torstonite chieftain"}},
{area = "the Cathedral of Gloaming", level = "35-40", targets = {"a Dwarven priest"}},
{area = "the Vilimo Fields", level = "35-40", targets = {"Nysaac", "a field harvester", "a field monitor", "a decaying donkey", "Laoghaire, the monitor", "Maeron, the Quartermaster", "Administrator Kamakshi", "a semi-conscious young woman", "a semi-conscious young man","a semi-conscious elderly man", "a semi-conscious elderly woman", "a semi-conscious man", "a semi-conscious woman", "an undead bloodhound", "a field hauler", "a spectral minion"}},
{area = "the Mannaseh Swamp", level = "35-40", targets = {"a savage mutant pumpkin", "a muddy Trollish child", "a slender mud adder", "a rugged Trollish man", "a plump Trollish woman", "a lumbering Troll guard", "an elderly Troll priest", "a lean guard hound", "a traitorous Mitrine hunter","a black ram", "a militant Troll warrior", "a Troll ritualist", "an arachnid Chiav guard", "an arachnid Chiav enforcer", "an arachnid Chiav archer","an immense Trollish chieftain", "a lanky, Trollish witch doctor"}},
{area = "Mount Hubride", level = "55-60", targets = {"a troll warrior", "a rugged roll miner", "a female troll villager", "a small, troll child", "a male troll villager"}},
{area = "Mount Heylai", level = "55-60", targets = {"a young dwarf", "an adolescent dwarf", "an armored dwarf", "a dwarf geared up for battle", "a dwarven warrior", "a dwarven miner", "a female dwarven villager", "a dwarven girl", "a dwarven boy"}},
{area = "the Siroccian Tunnels", level = "65-75", targets = {"a lurking shadow", "a spatial anomaly", "a crystal-encrusted golem", "a massive striped worm", "a disembodied soul", "a voracious blind-fish"}},
{area = "Rotfang Warren", level = "20-30", targets = {"a large rat", "a robed and cowled priest", "a spindly village alpha", "a white-nosed bat", "a large, juicy cavehopper", "a hunched villager", "a gaunt villager", "a drooling village child"}},
{area = "the Isle of Polyargos", level = "20-25", targets = {"a filthy harpy", "a barnacle-encrusted oyster", "a pathetic leper", "a leper child", "an old leper", "Kru'lax, the Harpy Queen", "a speckled, brown turtle"}},
{area = "the Khauskin Mines", level = "50-60", targets = {"a soft-shelled klikkin", "a grotesque fangtooth", "a burly Dwarven miner"}, items = {"a durable pickaxe", "a rough and jagged diamond", "a rough and jagged emerald", "a rough and jagged sapphire", "a small sack of black powder"}},
{area = "the Morgun Forest", level = "45+", targets = {"a sturdy oak", "a poisonous hemlock bush", "a pine sapling", "a strong pine", "a young beech tree", "a sinuous willow tree", "a willow sappling", "an enchanting meayan", "an oak sapling", "a prickly raspberry bush", "a handsom nayar", "a young willow tree", "a fluffy jambaali", "a young maple tree", "a young pine tree", "a young oak", "a wild boar", "a young beech tree"}},
{area = "Catacombs beneath Djeir", level = "40+", targets = {"a djeirani ghost",}},
{area = "the beaches of Liris", level = "5+", targets = {"a small, red crab", "a red hermit crab", "a slimy red-shelled snail", "a blue-shelled snail", "an orange-and-yellow stripped starfish", "a gargantuan crab", "a yellow-finned bream fish"}},
{area = "the Western Tundra", level = "40+", targets = {"a fur-clad troll worker", "a squat penguin", "a hunter clad in furs", "a massive orgyuk", "a bull mugyik", "a dusky mugyik", "a female mugyik", "a white mugyik calf"}},
{area = "the Ilhavon Forest", level = "40+", targets = {"a burrowing owl", "a golden scale rattlesnake", "a lumbering brown bear", "a plump duck", "a loosely clad Trollish woman", "a scarred Trollish man", "a blackbird", "a bear cub", "a giant pugnax crab", "a catfish", "a lake trout", "a school of fish", "an eerily glowing jellyfish", "a harpoon scorpion", "a dull brown lamprey", "a large buck", "a white tailed doe", "a young foal", "a moth", "a gargantuan cicada", "a magpie", "a frazzled-looking possum"}},
{area = "the Dakhota hills", level = "25+", targets = {"a striped sea krait", "a brown rockling", "a grey wolf"}},
{area = "Siha Dylis", level = "30-35", targets = {"Krrtig, the goblin guard captain", "Tithy, the burial guard", "a goblin batrider",  "a goblin man", "a goblin woman", "a kobold male", "a kobold woman", "Head Foreman Cadric", "Foreman Dugan", "Lissta, a kobold spirit-mage",  "Deela, a kobold spirit-mage", "Mo, a kobold spirit-mage", "Riku, a goblin boy", "a disoriented cave bat", "a small red squirrel", "Maggie, a goblin woman", "Trak, a goblin boy"}},
{area = "the Barony of Dun Valley", level = "40-45", targets = {"a black and tan bloodhound", "a capybara", "an insignificant lime caterpillar",  "a dangerous water snake", "a male gorilla", "a spotted jaguar", "a poisonous snake", "a squirming white grub", "a tree frog", "a speckled, brown turtle",  "an opossum", "a slender mud adder", "a katydid", "a greyish green crocodile", "the Great Bull Elephant", "a crab", "a large red crab", "a school of piranha", "a raccoon", "a rune-covered lodestone golem", "a muscular mountain lion", "a bighorn sheep"}},
{area = "the Hlugnic Labyrinth", level = "70+", targets = {"a rune-covered lodestone golem", "an enormous spinelash fish", "a Hlugnic runeguard",  "a warden of the Hlugnic clans", "a boisterous Hlugna man", "Deorkaan, the Hlugna smithy", "a burly, stone-fisted laborer", "Foreman Grummosh"}},
{area = "the Valley of Kalebb", level = "1", targets = {"a long, thin grass snake", "Loraine, a village priestess", "Shanea, a village elder", "Morrid, a village elder", "a small child", "a female villager", "a villager", "a village farmer", "Lassorn, a village cooper", "a tower guard",  "Elenina, the astrologer", "a tower watchman", "the head scholar of Kalebb", "a scholar of Kalebb", "Muiran, a trapper", "a plump wild rabbit",  "a speckled, brown turtle", "a bald eagle", "a large, speckled turtle", "a small green water snake", "Edgar, the gardener", "Gaerath, the guard captain"}},
{area = "the Tarean Ice Caverns", level = "80+", targets = {"a ravenous ice fly", "a baby icewyrm", "a skilled Indyuk warrior", "an ornery frost gremlin", "a gigantic mother icewyrm", "an icy elemental guard", "a reanimated ice wolf"}},
{area = "Court of the Consortium", level = "50-60", targets = {"a shambling skeleton", "a spatial anomaly", "a crystal-encrusted golem", "a massive striped worm", "a disembodied soul"}},
{area = "Three Widows", level = "45", targets = {"a short-horned chamois", "a white-coated chinchilla", "a ruffled grouse"}},
{area = "the Mamashi Grasslands", level = "45", targets = {"a prairie dog", "a swiftly moving dragonfly", "a black rhinoceros", "a Mamashi lioness", "a Mamashi lion cub", "a banded scrubland racer", "a Mamashi lion"}},
{area = "the Ebon Basin", level = "Quest", targets = {"a speckled ash monitor"}},
{area = "the Squal", level ="99+", targets = {"a thuggish Keeper brute", "a camouflaged Keeper guerrilla", "a sly Keeper tamer", }},
{area = "the Karak Forest", level = "95+", targets = {"a speckled ptarmigan", "a regally-mantled red hart", "a black mountain hare", "a svelte red hind"}},
{area = "Clawhook Range", level = "95+", targets = {"an oversized, grey basilisk", "a spiked basilisk", "a grey and brown basilisk", "a spine-necked arrex", "a shaggy, white mountain goat", "a worried-looking mangy goat", "a sabre-toothed abosvi", "a mottled grey mountain goat", "a prowling barbed abosvi", "an armored, brown basilisk"}},
{area = "the Maul", level = "99", targets = {"a gaunt Aslinn guard", "an Aslinn slave catcher", "a snarling vakmut warhound", "a ravenous vakmut warhound", "a lithe Aslinn houndmaster", "a wary Aslinn slaver", "a wretched Aslinn slaver", "a cruel Aslinn guard", "a menacing Aslinn gladiator", "a scarred Aslinn gladiator"}},
{area = "the forgotten depths of Mount Helba", level = "99", targets = {"a towering fungal abomination", "a withered fungal abomination"}},
{area = "a basilisk lair", level = "100+", targets = {"the basilisk queen", "a cave basilisk", "an Ursal elite guard", "a blindfolded Utari"}, items = {"the corpse of a Utari soldier", "a large piece of debris",}},
{area = "the Bakal Chasm", level = "100+", targets = {"an agitated basilisk", "an oversized, grey basilisk", "an armored, brown basilisk", "a spiked basilisk", "a grey and brown basilisk", "a blinded basilisk", "a juvenile basilisk", "a basilisk hatchling"}},
{area = "Clawhook Range", level = "100+", targets = {"an agitated basilisk", "an oversized, grey basilisk", "an armored, brown basilisk", "a spiked basilisk", "a grey and brown basilisk", "a blinded basilisk", "a juvenile basilisk", "a basilisk hatchling", "a spine-necked arrex", "a sabre-toothed abosvi", "a prowling barbed abosvi" }},
}

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>load targets</name>
						<packageName></packageName>
						<script>
function snd.load_targets(area)	
 snd.my.area = area
 snd.area_found = false
 snd.possible_targets = {}
 snd.possible_items = {}
 for i in ipairs(snd.areas) do
  if snd.areas[i].area == area then
   snd.area_found = true
   snd.bashing.target_type = "long"
   snd.possible_targets = snd.areas[i].targets
   echo("\n Level Range: "..snd.areas[i].level)
   cecho("\n&lt;green&gt;Possible Targets:")
   for h in ipairs(snd.possible_targets) do
    echo("\n "..snd.possible_targets[h])
   end
   if snd.areas[i].items then
    snd.possible_items = snd.areas[i].items
   end
   if snd.areas[i].items then
    snd.possible_items = snd.areas[i].items
    cecho("\n&lt;green&gt;Gathering Items:")
    for k in ipairs(snd.possible_items) do
     echo("\n "..snd.possible_items[k])
    end
   end
  end
 end
 if not snd.area_found then
  cecho("\n&lt;green&gt;Unknown Area.")
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>looting</name>
						<packageName></packageName>
						<script>
function snd.do_loot()
 if #snd.gathering &gt;= 1 then
  if snd.can_cast() and not snd.waiting.loot then
   snd.loot_it()
  end
 end
end

function snd.loot_it()
 for i in ipairs(snd.corpses) do
  snd.send("get 50 corpse")
 end
 for h in ipairs(snd.gathering) do
  snd.send("get "..snd.gathering[h])
 end
 snd.corpses = {}
 snd.gathering = {}
 snd.have_items = false
 snd.need_loot = false
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>global items</name>
						<packageName></packageName>
						<script>
snd.global_items = {
"antipsychotic",
"decongestant",
"steroid",
"opiate",
"ototoxin",
"amaurosis",
"panacea",
"thanatonin",
"paste",
"stimulant",
"kawhe",
"waterbreathing",
"coagulation",
"anabiotic",
"euphoriant",
}

snd.global_targets = {
--elds
"a massive flame-covered eld",
"a vibrating black eld",
"a skittering onyx eld",
"a fragmented eld of shadowy onyx",
"a shattered eld monstrosity",
"a billowing dust eld",
"an oozing magma eld",
"a silvery pink salmon",
"a pulsating amber eld",
"a shimmering azure eld",
"a whirling violet eld",
"a shadow-laden grey eld",
"a sinuous eld of rust",
"a vicious crimson eld",
"a vibrating black eld",
"a shimmering azure eld",
"a stalwart iron eld",
"a towering translucent eld",
"a spherical armored eld",
"a dominating frostbound eld",
"a tenebrous ash eld",
"a massive flame-covered eld",
"a jagged citrine eld",
"a crackling lightning eld",
"a crystalline opal eld",
"a crudely-formed silver eld",
"an amorphous red eld",
"an immature jade eld",
"a meager golden eld",
"a shattered eld monstrosity",
"a fiery crimson fragmented eld",
"a skittering verdant eld",

--survivor
"a living puppet",
"a sorcerous puppetmaster",
"a fearsome bone dragon",
"a deep purple hydra",
"a monstrous sandman",
"a towering treant",
"an ethereal construct",
"a black cobra",
"a ravenous, shadowy ghast",
"a warlock apprentice",
"a large, venomous tarantula",
"a massive elemental",
"a muscular mountain lion",
"a skeletal soldier",
"a Troll sentry",
"a mind flayer",
"a horrendous abomination",
"an enormous black scorpion",
"a black hell-hound",
 "a reaper of death",
        "a headless dullahan",
        "a thin-skinned wendigo",
        "a shadow being",
        "a giant centipede",
        "a black rat",

--misc hunting
"a massive elemental",



}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>run basher</name>
						<packageName></packageName>
						<script>function snd.runBasher()

  snd.gathering = {}
  snd.bashing.targeted = false
  snd.bashing.target_priority = 10000
  snd.bashing.target = "none"
  for item in pairs(snd.items) do
    if item == "some gold sovereigns" and #snd.items[item] &gt;= 1 then
      table.insert(snd.gathering, "sovereigns")
    elseif
      (string.find(item, "the corpse of") and not string.find(item, "staked")) or
      table.contains(snd.possible_items, item) or
      table.contains(snd.global_items, item)
    then
      for id in pairs(snd.items[item]) do
        table.insert(snd.gathering, snd.items[item][id])
      end
    elseif
      (table.contains(snd.possible_targets, item) or table.contains(snd.global_targets, item)) and
      #snd.items[item] &gt;= 1
    then
      for targ in pairs(snd.possible_targets) do
        if snd.possible_targets[targ] == item and targ &lt; snd.bashing.target_priority then
          snd.bashing.targeted = true
          if snd.toggles.generics then
            snd.bashing.target = generic_bashing_name(snd.possible_targets[targ])
            if snd.bashing.target ~= snd.bashing.old_target then
              if snd.toggles.calling then snd.send("wt target: "..snd.bashing.target) end
              snd.bashing.old_target = snd.bashing.target
            end
          else
            snd.bashing.target = snd.items[item][1]
            snd.bashing.target_priority = targ
          end   
        end
      end
      for targ in pairs(snd.global_targets) do
        if snd.global_targets[targ] == item and targ &lt; snd.bashing.target_priority then
          snd.bashing.targeted = true
          snd.bashing.target = snd.items[item][1]
          snd.bashing.target_priority = targ
        end        --if
      end      --for
    end    --elseif
  end  --for
  --if #snd.gathering &gt;= 1 then
  -- snd.loot_it()
  --end
  if not snd.bashing.targeted then
    snd.toggles.bashing = false
    if bot.going then
      expandAlias("move", false)
      --  tempTimer(1.5, [[expandAlias("move")]])
    end
  else
    snd.bashcounterattack = false
    if snd.toggles.calling and snd.bashing.old_target ~= snd.bashing.target and snd.bashing.target ~= "none" then
      snd.send("wt target: " .. snd.bashing.target)
    end
  end
  snd.core()
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>class bashing functions</name>
						<packageName></packageName>
						<script>
snd.class_list = {
{class = "Templar", func = function(current) snd.templar_bash() end},
{class = "Revenant", func = function(current) snd.revenant_bash() end},
{class = "Luminary", func = function(current) snd.luminary_bash() end}, 
{class = "Ascendril", func = function(current) snd.ascendril_bash() end},
{class = "Zealot", func = function(current) snd.zealot_bash() end}, 
{class = "Shaman", func = function(current) snd.shaman_bash() end}, 
{class = "Sentinel", func = function(current) snd.sentinel_bash() end}, 
{class = "Monk", func = function(current) snd.monk_bash() end}, 
{class = "Wayfarer", func = function(current) snd.wayfarer_bash() end},
{class = "Syssin", func = function(current) snd.syssin_bash() end}, 
{class = "Shapeshifter", func = function(current) snd.shapeshifter_bash() end}, 
{class = "Archivist", func = function(current) snd.archivist_bash() end}, 
{class = "Sciomancer", func = function(current) snd.sciomancer_bash() end}, 
{class = "Teradrim", func = function(current) snd.teradrim_bash() end}, 
{class = "Praenomen", func = function(current) snd.praenomen_bash() end}, 
{class = "Indorani", func = function(current) snd.indorani_bash() end}, 
{class = "Carnifex", func = function(current) snd.carnifex_bash() end},  
{class = "Warden", func = function(current) snd.warden_bash() end},
}

function snd.shield_check()
  if snd.defenses.def_shield_tattoo.state ~= "deffed" then
    return true
  end
end

function snd.bashing_function()
 if not snd.room_clear then return end
 if not snd.waiting.queue then
  if not snd.bashing.targeted then
	 snd.runBasher()
	else
   battack = "none"
--   snd.waiting.balance = true
--   tempTimer(0.5, [[snd.waiting.balance = false]])
    --if not snd.bashcounterattack then
      for k,v in pairs(snd.class_list) do
        if snd.class_list[k].class == snd.class then
          v.func()
        end
      end
    --end
    if tonumber(snd.toggles.gauntlet_level) &gt;= 2 then battack = battack..snd.sep.."absorb ylem" end
    if battack ~= snd.last_attack and snd.ylem_check == false then
      snd.last_attack = battack
      snd.send("qeb stand"..snd.sep..snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
   end
  end
 end
end



function snd.templar_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  if snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack and snd.shield_check() then
			battack = "touch shield"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
  end
  if hp &lt; 50 then
		battack = "touch shield"
	elseif snd.toggles.newbie then
		battack = "battlefury strike "..snd.bashing.target
  elseif snd.wielded.left.name:find("warhammer") or snd.wielded.left.name:find("bastard") then
    battack = "battlefury dsw "..snd.bashing.target
  else
  	battack = "battlefury dsk "..snd.bashing.target
	end
	if hp &gt; 60 then 
    battack = battack.. " sacrifice sacrifice"
  else
    battack = "bladefire cleanse left"..snd.sep.."bladefire cleanse right"..snd.sep..battack
  end
 
end

function snd.revenant_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  if snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack and snd.shield_check() then
			battack = "touch shield"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
  end  
	if hp &lt; 50 then
		battack = "touch shield"
	elseif snd.toggles.newbie then
		battack = "riving rive "..snd.bashing.target
  elseif snd.wielded.left.name:find("warhammer") or snd.wielded.left.name:find("bastard") then
    battack = "riving fell "..snd.bashing.target
  else
  	battack = "riving duplicity "..snd.bashing.target
	end
	if hp &gt; 60 then 
    battack = battack.. " duskosa duskosa"
  else
    battack = "annul left"..snd.sep.."annul right"..snd.sep..battack
  end
 
end

function snd.luminary_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;= 60 then
  	battack = "angel aura me"
	elseif snd.bashcounterattack then
		battack = "angel aura me"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
	elseif snd.toggles.lightning then
  	battack = "evoke lightning "..snd.bashing.target
 	else
  	battack = "smite "..snd.bashing.target.." secret"
 	end
end

function snd.monk_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  if snd.probed then
  else
    if gmcp.Room.Info.area == "Tcanna Island" or gmcp.Room.Info.area == "Drakuum" then   
      send("probe "..snd.bashing.target)
      snd.probed = true
    end
  end

  if tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if mp &gt;= 50 then
      if snd.shield_check() then
        battack = "clot 500"..snd.sep.."touch shield"
      else
        battack = "clot 500"
      end
    end
	elseif snd.bashcounterattack then
		if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			  battack = "point wand at me"
      else
        battack = "strum lyre"
      end
    else
      battack = "touch shield"
    end
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
  elseif snd.have_aff("blackout") then
		if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			 battack = "point wand at me"
      end
    else
      battack = "touch shield"
    end
  elseif snd.stance ~= "scorpion" and not snd.toggles.cobra then
    battack = "scs"
 	elseif hp &lt;= 75 then
    if not snd.numbness_used then
      battack = "transmute mana 1000"..snd.sep.. "numb"
    elseif snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			 battack = "point wand at me"
      end
    else
      battack = "touch shield"
    end
	elseif snd.toggles.cobra then
    if snd.stance ~= "cobra" then
      battack = "cbs"
    else
  	  battack = "combo "..snd.bashing.target.." sdk sdk"
    end
	else 
		battack = "combo "..snd.bashing.target.." sdk ucp ucp"
	end

end

function snd.shaman_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  if snd.familiar then
	  if hp &lt;= 60 then
      if snd.balance.morph then
        if snd.shamanpet == "bear" then
          battack = "familiar morph spider"..snd.sep.."touch shield"
        elseif snd.shamanpet == "spider" then
      	 battack = "familiar morph bear"..snd.sep.."touch shield"
        elseif snd.shamanpet == ("raven" or "wyvern" or "cougar" or "serpent") then
      	 battack = "familiar morph bear"..snd.sep.."touch shield"
        end
      else
        if snd.shield_check() then
          battack = "touch shield"
        end
      end
	  elseif snd.bashcounterattack then
      if snd.balance.morph then
        if snd.shamanpet == "bear" then
          battack = "familiar morph spider"..snd.sep.."touch shield"
        elseif snd.shamanpet == "spider" then
      	  battack = "familiar morph bear"..snd.sep.."touch shield"
        elseif snd.shamanpet == ("raven" or "wyvern" or "cougar" or "serpent") then
      	  battack = "familiar morph bear"..snd.sep.."touch shield"
        end
      else
        if snd.shield_check() then
          battack = "touch shield"
        end
      end
	  elseif snd.pushattack then
      if snd.balance.morph then
        if snd.shamanpet == "bear" then
          battack = "familiar morph spider"..snd.sep.."push "..snd.bashing.target
        elseif snd.shamanpet == "spider" then
      	  battack = "familiar morph bear"..snd.sep.."push "..snd.bashing.target
        elseif snd.shamanpet == ("raven" or "wyvern" or "cougar" or "serpent") then
      	  battack = "familiar morph bear"..snd.sep.."push "..snd.bashing.target
        end
      else
		    battack = "push "..snd.bashing.target
		    snd.pushattack = false
      end
	  else
      if snd.balance.morph then
        if snd.shamanpet == "bear" then
          if wp&gt;=45 and tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
		        battack = "familiar morph spider"..snd.sep.."order spirit follow me"..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.bashing.target
          else
            battack = "familiar morph spider"..snd.sep.."order spirit follow me"..snd.sep.."commune lightning "..snd.bashing.target
          end
        elseif snd.shamanpet == "spider" then
        if wp&gt;=45 and tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
		        battack = "familiar morph bear"..snd.sep.."order spirit follow me"..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.bashing.target
          else
            battack = "familiar morph bear"..snd.sep.."order spirit follow me"..snd.sep.."commune lightning "..snd.bashing.target
          end
        elseif snd.shamanpet == ("raven" or "wyvern" or "cougar" or "serpent") then
          if wp&gt;=45 and tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
		        battack = "familiar morph bear"..snd.sep.."order spirit follow me"..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.bashing.target
          else
            battack = "familiar morph bear"..snd.sep.."order spirit follow me"..snd.sep.."commune lightning "..snd.bashing.target
          end
        end
      else
        if wp&gt;=45 and tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
		      battack = "order spirit follow me"..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.bashing.target
        else
          battack = "commune lightning "..snd.bashing.target
        end
      end
	  end   
  else
    battack = "familiar recall##order spirit follow me"
  end
end

function snd.sentinel_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;= 60 and snd.shield_check() then
  	battack = "touch shield"
  elseif snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack and snd.shield_check() then
		battack = "touch shield"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
	elseif snd.toggles.newbie then
  	battack = "dhuriv combo "..snd.bashing.target.." slash stab"
 	else
  	battack = "dhuriv combo "..snd.bashing.target.." crosscut thrust"
 	end
end

function snd.wayfarer_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;= 60 and snd.shield_check() then
  	battack = "touch shield"
  elseif snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack and snd.shield_check() then
			battack = "touch shield"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
	else
    battack = "axe chop "..snd.bashing.target
	end
end

function snd.syssin_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;= 60 and snd.shield_check() then
  	battack = "touch shield"
  elseif snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack and snd.shield_check() then
			battack = "touch shield"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
	elseif not snd.toggles.newbie then
 		if snd.defenses.def_hiding.state == "deffed" then
	 		battack = "backstab "..snd.bashing.target
		else
   		battack = "bite "..snd.bashing.target.." camus"
		end
 	else
  	if snd.defenses.def_hiding.state == "deffed" then
	 		if snd.wielding("dirk") or snd.wielding("stilleto") then
	  		battack = "backstab "..snd.bashing.target
	 		else
	  		battack = "quickwield left dirk"..snd.sep.."backstab "..snd.bashing.target
	 		end
		else
	 		if snd.wielding("whip") then
	  		battack = "garrote "..snd.bashing.target
	 		else
    		battack = "quickwield left whip"..snd.sep.."garrote "..snd.bashing.target
	 		end
		end
 	end
end

function snd.shapeshifter_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;= 60 then
  	battack = "touch shield"
  elseif snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack then
			battack = "touch shield"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
	else
    battack = "combo "..snd.bashing.target.." slash slash"
	end
end

function snd.indorani_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;= 60 and snd.shield_check() then
  	battack = "touch shield"
  elseif snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack and snd.shield_check() then
			battack = "touch shield"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
	else
    battack = "flick bonedagger at "..snd.bashing.target
	end
end

function snd.carnifex_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;= 60 and snd.shield_check() then
  	battack = "touch shield"
  elseif snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack and snd.shield_check() then
			battack = "touch shield"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
	else
    battack = "hammer doublebash "..snd.bashing.target
	end
end

function snd.warden_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;= 60 and snd.shield_check() then
  	battack = "touch shield"
  elseif snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack and snd.shield_check() then
			battack = "touch shield"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
	else
    battack = "warden maul "..snd.bashing.target
	end
end

function snd.archivist_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
bioessence = tonumber(gmcp.Char.Vitals.bio) 

  if tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if mp &gt;= 50 and not snd.shield_check() then
      battack = "clot 500"
    elseif mp &gt;= 50 and snd.shield_check()then
      battack = "clot 500"..snd.sep.."touch shield"
    else
      if snd.shield_check() then
        battack = "touch shield"
      end
    end
	elseif hp &lt;= 75 and bioessence &gt; 1 then
    if not snd.knit then
      battack = "bio knitting"
		elseif not snd.balance.ethereal then
			battack = "bio ethereal"
    else
      if snd.shield_check() then
        battack = "touch shield"
      end
		end
	elseif hp &lt;= 70 and snd.shield_check() then
  	battack = "touch shield"
  elseif snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack then
		battack = "touch shield"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
	else
    battack = "incite crux "..snd.bashing.target
	end
end

function snd.zealot_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  if snd.probed then
  else
    if gmcp.Room.Info.area == "Tcanna Island" or gmcp.Room.Info.area == "Drakuum" then   
      send("probe "..snd.bashing.target)
      snd.probed = true
    end
  end

  if tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if mp &gt;= 50 then
      if snd.shield_check() then
        battack = "clot 500"..snd.sep.."touch shield"
      else
        battack = "clot 500"
      end
    end
	elseif snd.bashcounterattack then
		if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			  battack = "point wand at me"
      else
        battack = "strum lyre"
      end
    else
      battack = "touch shield"
    end
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
  elseif hp &lt;= 70 then
    if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			 battack = "point wand at me"
      end
    else
      battack = "touch shield"
    end
  elseif snd.have_aff("blackout") then
		if snd.punisher then
      if snd.reflection_charge &gt; 0 and not snd.reflected then
			 battack = "point wand at me"
      end
    else
      battack = "touch shield"
    end
	else
		battack = "flow "..snd.bashing.target.." pummel pummel"
	end
end

function snd.praenomen_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;= 70 then
		if snd.balance.mend and hasSkill("Mend") then 
			battack = "mend"
    else
      if snd.shield_check() then
        battack = "touch shield"
      end
		end
	elseif hp &lt;= 60 and snd.shield_check() then
    battack = "touch shield"
  elseif snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack and snd.shield_check() then
			battack = "touch shield"
	elseif snd.pushattack then
		battack = "push "..snd.bashing.target
		snd.pushattack = false
	else
		battack = "frenzy "..snd.bashing.target
	end
end

function snd.teradrim_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
endur = 100*(gmcp.Char.Vitals.ep/gmcp.Char.Vitals.maxep)
    if hp &lt;= 60 then
    	battack = "sand shield me"
    elseif snd.bashcounterattack then
      battack = "sand shield me"
	  elseif snd.pushattack then
		  battack = "push "..snd.bashing.target
		  snd.pushattack = false
    elseif snd.balance.momentum and endur&gt;=45 then
      battack = "earth momentum "..snd.sep.."earth skullbash "..snd.bashing.target..snd.sep.."golem recover"
    elseif snd.balance.momentum and endur&lt;=45 then
      battack = "earth momentum "..snd.sep.."earth batter "..snd.bashing.target..snd.sep.."golem recover"
    elseif endur&gt;=45 then
      battack = "earth skullbash "..snd.bashing.target..snd.sep.."golem recover"
    else 
      battack = "earth batter "..snd.bashing.target..snd.sep.."golem recover"
    end
end

function snd.ascendril_bash()
	hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  if hp &lt;=40 and snd.shield_check() then
	 	battack = "touch shield"
	elseif hp &lt;= 60 then
		if snd.reflection_charge &gt; 0 then
      battack = "cast reflection"
		else
      if snd.shield_check() then
			 battack = "touch shield"
      end
		end
  elseif snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack and snd.shield_check() then
			battack = "touch shield"
	elseif snd.pushattack then
		  battack = "push "..snd.bashing.target
		  snd.pushattack = false
  else
    if gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "" or gmcp.Char.Vitals.resonance == "air"  then
   		battack = "cast frostblade "..snd.bashing.target
    elseif gmcp.Char.Vitals.resonance == "water" then
   		battack = "cast firelash "..snd.bashing.target
    elseif gmcp.Char.Vitals.resonance == "fire" then
    	battack = "cast windlance "..snd.bashing.target
    end
	end
end

function snd.sciomancer_bash()
hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 then
    if mp &gt;= 50 and not snd.shield_check() then
      battack = "clot 500"
    elseif mp &gt;= 50 and snd.shield_check()then
      battack = "clot 500"..snd.sep.."touch shield"
    else
      if snd.shield_check() then
        battack = "touch shield"
      end
    end
	elseif hp &lt;= 40 and snd.shield_check() then
    battack = "touch shield"
  elseif hp &lt;= 60 then
		if snd.reflection_charge &gt; 0 then
			battack = "cast reflection"
		else
      if snd.shield_check() then
    	 battack = "touch shield"
      end
		end
  elseif snd.have_aff("blackout") and snd.shield_check() then
		battack = "touch shield"
	elseif snd.bashcounterattack and snd.shield_check() then
			battack = "touch shield"
	elseif snd.pushattack then
		  battack = "push "..snd.bashing.target
		  snd.pushattack = false
	elseif snd.toggles.newbie then
  	  battack = "cast ruin "..snd.bashing.target
 	else
		if table.contains(gmcp.Char.Defences.List, "shadow_mantle") then
      if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
        battack = "shadowprice gloom " ..snd.bashing.target..snd.sep.."cast fever "..snd.bashing.target
      else
        battack = "cast fever " ..snd.bashing.target
      end
    else
      if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 2 then
        battack = "shadowprice gloom " ..snd.bashing.target..snd.sep.."cast fever "..snd.bashing.target..snd.sep.."absorb ylem"
      else
        battack = "cast fever " ..snd.bashing.target..snd.sep.."absorb ylem"
      end
    end
 	end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="no" isFolder="no">
						<name>Rock Runner</name>
						<packageName></packageName>
						<script>function snd.runRock()

   if bot.going then
      expandAlias("move", false)
    end

  snd.core()
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Generic bashing targets</name>
						<packageName></packageName>
						<script>
function generic_bashing_name(mob)

  local area = gmcp.Room.Info.area
  local target = ""
  if snd.generic_bashing_table_by_area[area] then 
    target = snd.generic_bashing_table_by_area[area] 
  elseif snd.generic_bashing_table_specific_names[mob] then
    target = snd.generic_bashing_table_specific_names[mob]
  else
    for k, v in ipairs(snd.generic_bashing_table_duplicate_names) do
     if string.match(' '.. mob:lower() ..' ', '%A'.. v ..'%A') ~= nil then
      target = v
     end
    end
  end
  return target
  
end


snd.generic_bashing_table_by_area = {
  ["the Forgotten Dome"] = "kelki",
  ["Xaanhal"] = "xorani",
  ["Luzith's Lair"] = "spider",
  ["the Bloodwood"] = "spirit",
  ["the Fractal Bloom"] = "entity",
  ["the Ayhesa Cliffs"] = "spellshaper",
  ["the Caverns of Mor"] = "undead",
  ["the Sparklight Rift"] = "elemental",
  ["the Centipede Cave"] = "centipede",
  ["the Teshen Caldera"] = "teshen",
  ["a snake pit"] = "snake",
}


snd.generic_bashing_table_specific_names = {
  ["a monstrous Carnifex guard"] = "carnifex",
  ["a fluffy jambaali"] = "jambaali",
  ["a howler monkey"] = "monkey",
  ["a spunky white tamarin"] = "tamarin",
  ["a beautiful wild horse"] = "horse",
  ["a white-tailed deer"] = "deer",
  ["a tiny hatchling"] = "hatchling",
  ["a school of spinebacks"] = "spinebacks",
  ["a Masilidean physicalist"] = "physicalist",
  ["a bemused artist"] = "artist",
  ["a deputy constable"] = "constable",
  ["a stonescale mephit"] = "mephit",
  ["a soulless pixie"] = "pixie",
  ["a playful oniro"] = "oniro",
  ["a Dwarven craftsman"] = "craftsman",
  ["a petrified treant"] = "treant",
  ["a fanged lugore"] = "lugore",
  ["a white hen"] = "hen",
  ["a piece of an amalgamation"] = "piece",
  ["a ball of chitinous legs"] = "legs",
  ["a rabid plant"] = "plant",
  ["a pungent lichosphere"] = "lichosphere",
  ["Igrar, Captain of the Gral"] = "igrar",
  ["the impish outcast, Qezirath"] = "qezirath",
  ["a large, snowy fox"] = "fox",
  ["a scything skitterer"] = "skitterer",
  ["a stonescale ravager"] = "ravager",
  ["a shambling fungal abomination"] = "abomination",
  ["a stalwart templar"] = "templar",
  ["a horrid basilwyrm"] = "basilwyrm",
  ["a chittering chicken"] = "chicken",
  ["a Dwarven boy"] = "dwarf",
  ["a lanky, Trollish witch doctor"] = "troll",
  ["a massive orgyuk"] = "orgyuk",
  ["an energetic orangutan"] = "orangutan",
  ["a rot-infested swordfish"] = "swordfish",
  ["a vast ochre ooze"] = "ooze",
  ["an ogre berserker"] = "ogre",
  ["a giant squid"] = "squid",
  ["an amorphous black umbra"] = "umbra",
  ["a swarm of tsetse flies"] = "flies",
  ["a male gorilla"] = "gorilla",
  ["a naive neo-Ankyrean"] = "neo-ankyrean",
  ["a bald eagle"] = "eagle",
  ["a vicious horned garwhol"] = "garwhol",
  ["a Masilidean etherealist"] = "etherealist",
  ["a guard pig"] = "pig",
  ["an irritated crow"] = "crow",
  ["a black and white badger"] = "badger",
  ["a lithe cougar"] = "cougar",
  ["a serpentine couatl"] = "couatl",
  ["a barnacle-encrusted oyster"] = "oyster",
  ["a long-toothed beaver"] = "beaver",
  ["a tentacled morbol"] = "morbol",
  ["a frazzled-looking possum"] = "possum",
  ["a battle-worn Ascendril"] = "ascendril",
  ["a fetish-decorated shaman"] = "shaman",
  ["a burly, stone-fisted laborer"] = "laborer",
  ["Mellias, an elegant Tsol'aa consanguine"] = "consanguine",
  ["a boisterous Imp boy"] = "imp",
  ["a slender, female arachnoid"] = "arachnoid",
  ["a moth"] = "moth",
  ["a chaos storm"] = "storm",
  ["a large gray and black dugger"] = "dugger",
  ["a black-spotted cow"] = "cow",
  ["a black ram"] = "ram",
  ["a gnat"] = "gnat",
  ["a splintering earthrager"] = "earthrager",
  ["a willowy nest guardian"] = "guardian",
  ["Gwenil, the Dwarven blacksmith"] = "dwarf",
  ["a tree frog"] = "frog",
  ["a Masilidean mentalist"] = "mentalist",
  ["a spindly village alpha"] = "alpha",
  ["a corrupted hackle"] = "hackle",
  ["a poisonous purple lora"] = "lora",
  ["an iridescent tizapez"] = "tizapez",
  ["Sentinel Rozhirr"] = "rozhirr",
  ["a panther-like Rajamala"] = "rajamala",
  ["a chaos orb"] = "orb",
  ["Muiran, a trapper"] = "muiran",
  ["a handsom nayar"] = "nayar",
  ["a lava daemon"] = "daemon",
  ["a glowing lava daemon"] = "daemon",
  ["a long billed toucan"] = "toucan",
  ["a shadowy, mindless demon"] = "demon",
  ["a chimera"] = "chimera",
  ["an enchanting meayan"] = "meayan",
  ["a slimy aryeim"] = "aryeim",
  ["a malevolent spectre"] = "spectre",
  ["an enormous anaconda"] = "anaconda",
  ["a rebellious rancher"] = "rancher",
  ["a rabid blood-fiend"] = "blood-fiend",
  ["a strong pine"] = "pine",
  ["insubstantial whispers"] = "whispers",
  ["a Dwarven archeologist"] = "dwarf",
  ["Head Foreman Cadric"] = "cadric",
  ["an ethereal firelord"] = "firelord",
  ["Quartermaster Kuius"] = "kuius",
  ["a foul-smelling zombie"] = "zombie",
  ["a shrieking grimshrill"] = "grimshrill",
  ["a cloud of fungal spores"] = "spores",
  ["a spatial anomaly"] = "anomoly",
  ["a Troll cook"] = "cook",
  ["a swarm of black beetles"] = "beetles",
  ["an opossum"] = "opossum",
  ["Blacksmith Udhomentesh"] = "udhomentesh",
  ["a banded scrubland racer"] = "racer",
  ["a black rhinoceros"] = "rhinoceros",
  ["a ruffled grouse"] = "grouse",
  ["Tuera, the torturer"] = "tuera",
  ["a willow sappling"] = "willow",
  ["Tohrul, the Dwarven supervisor"] = "dwarf",
  ["a demonic screamer"] = "screamer",
  ["Edgar, the gardener"] = "edgar",
  ["a silent reed cat"] = "cat",
  ["a monstrous arachnid"] = "arachnid",
  ["a tower watchman"] = "watchman",
  ["Elenina, the astrologer"] = "elenina",
  ["a field hauler"] = "hauler",
  ["Morrid, a village elder"] = "morrid",
  ["a bloodleech"] = "bloodleech",
  ["silver-feathered orel"] = "orel",
  ["a victimised intruder"] = "intruder",
  ["Foreman Grummosh"] = "grummosh",
  ["Deorkaan, the Hlugna smithy"] = "deorkaan",
  ["a warden of the Hlugnic clans"] = "warden",
  ["a blackened darkwalker"] = "darkwalker",
  ["a school of piranha"] = "piranha",
  Jehanne = "jehanne",
  ["an insignificant lime caterpillar"] = "caterpillar",
  ["a humbug"] = "humbug",
  ["a ravenous locust"] = "locust",
  ["a shadowdrop"] = "shadowdrop",
  ["a mire pup"] = "pup",
  ["Commander Marakhi"] = "marakhi",
  ["Foreman Dugan"] = "dugan",
  ["a monstrous coelacanth"] = "coelacanth",
  ["a brown rockling"] = "rockling",
  ["a magpie"] = "magpie",
  ["a severed male head"] = "head",
  ["Lassorn, a village cooper"] = "lassorn",
  ["a large buck"] = "buck",
  ["a soft-shelled klikkin"] = "klikkin",
  ["a green slime"] = "slime",
  ["a lake trout"] = "trout",
  ["a blackbird"] = "blackbird",
  ["a Hlugnic runeguard"] = "runeguard",
  ["a crazed blood-fiend"] = "blood-fiend",
  ["a mutated blood-fiend"] = "blood-fiend",
  ["a Mamashi lioness"] = "lioness",
  ["a large bhfaol"] = "bhfaol",
  ["a spotted jaguar"] = "jaguar",
  ["a winged fungal horror"] = "horror",
  ["a burrowing owl"] = "owl",
  ["a squat penguin"] = "penguin",
  ["an agile Sentaari monk"] = "monk",
  ["a grotesque fangtooth"] = "fangtooth",
  ["a dark green alligator"] = "alligator",
  ["a colorful toucan"] = "toucan",
  ["a Bloodloch soldier"] = "soldier",
  ["a djeirani ghost"] = "ghost",
  ["a striped tzatica"] = "tzatica",
  ["a cave-dwelling avisme"] = "avisme",
  ["a pious invoker"] = "invoker",
  ["a brawny glaive knight"] = "knight",
  ["a vile inquisitor"] = "inquisitor",
  ["a student of the lich"] = "student",
  ["a fragment of living glass"] = "fragment",
  ["the Dwarven alemaster"] = "alemaster",
  ["a bubonis"] = "bubonis",
  ["a dull brown lamprey"] = "lamprey",
  ["a burly lumberjack"] = "lumberjack",
  ["a fiery phenkyre"] = "phenkyre",
  ["a large, juicy cavehopper"] = "cavehopper",
  ["Nolid, the Dwarven fisherman"] = "fisherman",
  ["a voracious blind-fish"] = "blind-fish",
  ["a disembodied soul"] = "soul",
  ["a lithe weasel"] = "weasel",
  ["a lurking shadow"] = "shadow",
  ["a dwarven boy"] = "boy",
  ["a mottled green bullfrog"] = "bullfrog",
  ["a tenacious tough"] = "tough",
  ["a glossy black silk-spinner"] = "silk-spinner",
  ["a gigantic fungal strider"] = "strider",
  ["a Masilidean focus"] = "focus",
  ["a five-tentacled octopus of jade"] = "octopus",
  ["a Dwarven excavator"] = "excavator",
  ["a zombie cleric"] = "cleric",
  ["a draconic zogura"] = "zogura",
  ["Head Archeologist, Dolus"] = "dolus",
  ["Lieutenant Chiakhi"] = "chiakhi",
  ["an immense Trollish chieftain"] = "chieftain",
  ["a sering Sycophant"] = "sycophant",
  ["a field monitor"] = "monitor",
  ["a white-coated chinchilla"] = "chinchilla",
  ["a pathfinder"] = "pathfinder",
  ["a brown and tan python"] = "python",
  ["an unctuous creepling"] = "creepling",
  ["Moritsio, Owner of the Pub"] = "moritsio",
  ["Baruin, the Dwarven mason"] = "baruin",
  ["Maeron, the Quartermaster"] = "maeron",
  ["a decaying donkey"] = "donkey",
  ["a field harvester"] = "harvester",
  ["a gamey goat"] = "goat",
  ["Lesiv, the Torstonite chieftain"] = "lesiv",
  ["a malevolent poltergeist"] = "poltergeist",
  ["a short-horned chamois"] = "chamois",
  ["Laoghaire, the monitor"] = "laoghaire",
  ["Lieutenant Gharvoi"] = "gharvoi",
  ["a rock devil"] = "devil",
  ["the Dwarven miller"] = "miller",
  ["a tall chempala"] = "chempala",
  ["Administrator Kamakshi"] = "kamakshi",
  ["a carefree Grook boy"] = "boy",
  ["an oversized efreeti"] = "efreeti",
  ["a gargantuan cicada"] = "cicada",
  ["a large, deepwater salmon"] = "salmon",
  ["Midolo Raim"] = "midolo",
  ["General Abeshentesh"] = "abeshentesh",
  ["a mutilated creature"] = "creature",
  ["a corrupted cultist"] = "cultist",
  ["a diminutive necromancer"] = "necromancer",
  ["a choke creeper"] = "creeper",
  ["a wealthy sailor"] = "sailor",
  ["a savage mutant pumpkin"] = "pumpkin",
  ["a white-collared lemming"] = "lemming",
  ["Hassik, the village elder"] = "elder",
  Firthar = "firthar",
  ["Mala, the Artisan"] = "mala",
  ["a darkened soul"] = "soul",
  ["a mass of deadly trap spiders"] = "spider",
  ["a darkling"] = "darkling",
  ["Broondac, the vampire strategist"] = "broondac",
  ["a radiant lumore"] = "lumore",
  ["an irritable, rabid zebra"] = "zebra",
  ["a snowy armadilleon"] = "armadilleon",
  ["a lithe buckawn"] = "buckawn",
  ["a furry coatimundi"] = "coatimundi",
  ["Gunder, a retired sailor"] = "gunder",
  ["Fermian, excavation foreman"] = "fermian",
  ["a poisonous water moccasin"] = "moccasin",
  ["a serpentine blademistress"] = "blademistress",
  ["a shadow ray"] = "ray",
  ["a rotund, white ptarmigan"] = "ptarmigan",
  ["a mutilated humanoid"] = "humanoid",
  ["a grizzly foreman"] = "foreman",
  ["a razor nahuac"] = "nahuac",
  ["a young foal"] = "foal",
  ["a school of shadowy minnows"] = "minnows",
  ["a striped sea krait"] = "krait",
  ["a tiny aurivv bug"] = "bug",
  ["a shivering jackrabbit"] = "jackrabbit",
  ["a soulmaster"] = "soulmaster",
  ["a vampiric overseer"] = "vampire",
  ["a carnivorous weed"] = "weed",
  ["a scarlet macaw"] = "macaw",
  ["a great white stag"] = "stag",
  ["a lithe black panther"] = "panther",
  ["an orange-and-yellow stripped starfish"] = "starfish",
  ["an oversized tortoise"] = "tortoise",
  ["a bound shade"] = "shade",
  ["a small ocelot"] = "ocelot",
  ["a suspicious Xorani patrol"] = "xorani",
  ["a slime-encrusted spitter"] = "spitter",
  ["an ecru axolotl"] = "axolotl",
  ["a serpentine jawsnapper"] = "jawsnapper",
  ["a foul spiderling"] = "spiderling",
  ["a slender synicant"] = "synicant",
  ["a giant mosquito"] = "mosquito",
  ["a katydid"] = "katydid",
  ["a malformed beast"] = "beast",
  ["a nightmare shadow"] = "shadow",
  ["a white gyrfalcon"] = "gyrfalcon",
  ["a dervish"] = "dervish",
  ["Tirahl the Necromancer"] = "tirahl",
  ["a savage shade"] = "shade",
  ["a scheming terramancer"] = "terramancer",
  ["a plump duck"] = "duck",
  ["a nimble sentinel"] = "sentinel",
  ["a massive argobole"] = "argobole",
  ["Shanea, a village elder"] = "shanea",
  ["a withered crone"] = "crone",
  ["an elderly Dwarven gardener"] = "gardener",
  ["a slender mud adder"] = "adder",
  ["a white tailed doe"] = "doe",
  ["a disgustingly warped missionary"] = "missionary",
  ["a speckled tinyok"] = "tinyok",
  ["a misty apparition"] = "apparition",
  ["a wild-eyed scientist"] = "scientist",
  ["a slender forager"] = "forager",
  ["a green slime toad"] = "toad",
  ["a small, ruddy turnstone"] = "turnstone",
  ["a shadow"] = "shadow",
  ["Mayor Thurgil Redstein"] = "thurgil",
  ["an oversized earthworm"] = "earthworm",
  ["a warden of the Hlugnic clans"] = "warden",
  ["an enormous Troll bandit"] = "bandit",
  ["Nysaac"] = "nysaac",
  ["a cave basilisk"] = "basilisk",
  ["an agitated basilisk"] = "basilisk",
  ["an Utari warrior"] = "utari",
  ["an oversized, grey basilisk"] = "basilisk", 
  ["an armored, brown basilisk"] = "basilisk", 
  ["a spiked basilisk"] = "basilisk", 
  ["a grey and brown basilisk"] = "basilisk", 
  ["a blinded basilisk"] = "basilisk", 
  ["a juvenile basilisk"] = "basilisk", 
  ["a basilisk hatchling"] = "basilisk", 
  ["a spine-necked arrex"] = "arrex", 
  ["a sabre-toothed abosvi"] = "abosvi",
  ["a prowling barbed abosvi"] = "abosvi", 
  ["a gaunt Aslinn guard"] = "aslinn",
  ["an Aslinn slave catcher"] = "aslinn",
  ["a snarling vakmut warhound"] = "vakmut",
  ["a ravenous vakmut warhound"] = "vakmut", 
  ["a lithe Aslinn houndmaster"] = "aslinn",
  ["a wary Aslinn slaver"] = "aslinn", 
  ["a wretched Aslinn slaver"] = "aslinn",
  ["a cruel Aslinn guard"] = "aslinn",
  ["a menacing Aslinn gladiator"] = "aslinn",
  ["a scarred Aslinn gladiator"] = "aslinn",
  ["a gaunt Aslinn slaver"] = "slaver",
  ["a scarred Aslinn slaver"] = "slaver",
  ["a sinewy Aslinn slaver"] = "slaver",
  ["a haughty Caentoi slaver"] = "slaver",
  ["a hulking Ursal brute"] = "brute",
  ["a grim Aslinn slaver"] = "slaver",
  ["a large earth elemental"] = "elemental", 
  ["a large smoke elemental"] = "elemental", 
  ["a large fire elemental"] = "elemental",
  ["a mottled brown frog"] = "frog",
}

snd.generic_bashing_table_duplicate_names = {
  "keeper",
  "eld",
  "snake",
  "bandit",
  "syll",
  "coyote",
  "kobold",
  "xorani",
  "gnome",
  "angel",
  "wildcat",
  "entity",
  "lion",
  "cragling",
  "woman",
  "centipede",
  "leper",
  "dwarf",
  "snail",
  "sheep",
  "dog",
  "sapling",
  "ghast",
  "priest",
  "priestess",
  "leopard",
  "blob",
  "slaver",
  "hound",
  "viper",
  "hunter",
  "scholar",
  "indorani",
  "experiment",
  "gremlin",
  "sycophant",
  "teshen",
  "wolf",
  "direwolf",
  "girl",
  "tiger",
  "hound",
  "bloodhound",
  "child",
  "officer",
  "spirit",
  "spellshaper",
  "warrior",
  "miner",
  "mhun",
  "kelki",
  "villager",
  "worm",
  "nazetu",
  "lich",
  "goblin",
  "fly",
  "dragonfly",
  "guard",
  "boru",
  "skeleton",
  "scorpion",
  "sentry",
  "capybara",
  "elemental",
  "snatcher",
  "tree",
  "eel",
  "boar",
  "shark",
  "bear",
  "buffalo", 
  "raccoon",
  "fish",
  "ghoul",
  "jellyfish",
  "lizard",
  "spider",
  "rattlesnake",
  "wolverine",
  "chiav",
  "squirrel",
  "trog",
  "catfish",
  "golem",
  "hare",
  "grub",
  "mit'olk",
  "harpy",
  "bat",
  "nalas",
  "mage",
  "mugyik",

  "troll",
  "rat",
  "bush",
  "farmer",
  "oak",
  "serpent",
  "minion",
  "crocodile",
  "bobcat",
  "servant",
  "blood-fiend",
  "elephant",
  "rojalli",
  "aberration",
  "goose",
  "turtle",
  "crab",
  "icewyrm",
  "man",
  "rabbit",
  "wraith",
  "elk",
  }</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Adv bashing route making + using</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Custom Basher Paths</name>
							<packageName></packageName>
							<script>function snd_createPather()
  local n = gmcp.Room.Info.num 
  sap_List = {}
  sap_Area = gmcp.Room.Info.area 
  snd.message("Path creation enabled for "..sap_Area.."; starting from v"..n..".")
  table.insert(sap_List, n)
end

function snd_patherAdd()
  local n = gmcp.Room.Info.num 
  if not sap_List then
    snd.message("Can't add rooms if you don't enable pather first. Use 'path create' to begin.")
  elseif not table.contains(sap_List, n) then
    table.insert(sap_List, n)
    snd.message("Added v"..n.." to path list. Total rooms thus far: "..#sap_List..".")
  else
    snd.message("Room is already in the list.")
  end
end

function snd_patherCompile()
  if #sap_List &lt; 10 then
    snd.message("The path size is far too small to be useful. Try making it bigger than 10 rooms, at least.")
    return
  end
  
  sunder_areaPaths = sunder_areaPaths or {}
  sunder_areaPaths[sap_Area] = {}
  
  local str = ""
  for x, n in pairs(sap_List) do
    if x == #sap_List then
      sunder_areaPaths[sap_Area]["v"..n] = "pthcity"
    else
      sunder_areaPaths[sap_Area]["v"..n] = ""..sap_List[x+1]..""
    end
  end
  snd.message("Created path for "..sap_Area..". You can now use it with 'goarea' if you want.")
  snd_saveAreas(true)
end

function snd_bashArea()
  local area = gmcp.Room.Info.area 
  if not sunder_areaPaths then
    snd.message("Area table not found.")
  elseif not sunder_areaPaths[area] then
    snd.message("Path not found for current area.")
  else
    snd.message("Let's bash out "..area.."!")
    bot.going = true
    bot.path = sunder_areaPaths[area]
    if not snd.toggles.fasthunt then
      expandAlias("ff")
    end    
    expandAlias("aa") 
  end
end

function snd_saveAreas(disp)
  sunder_areaPaths = sunder_areaPaths or {}

	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local paths_loc = getMudletHomeDir() .. separator .. "sunderBasherPaths"

	table.save(paths_loc, sunder_areaPaths)
	
	if disp then
		snd.message("Saved autopath information successfully.")
	end	
end

function snd_loadAreas()
	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local paths_loc = getMudletHomeDir() .. separator .. "sunderBasherPaths"

	if not io.exists(paths_loc) then 
		snd.message("Autopather table not found; will create the next time you try to make a path, or load mudlet.")
		return
	end

	sunder_areaPaths = {}
	table.load(paths_loc, sunder_areaPaths)
	snd.message("Autopather table found and successfully loaded in.")

end

registerAnonymousEventHandler("sysDisconnectionEvent", "snd_saveAreas", true)
registerAnonymousEventHandler("sysLoadEvent", "snd_loadAreas")


</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Custom bashing route making</name>
							<packageName></packageName>
							<script>-- Used for automatic custom path making

function snd_bashAreas(areas_chosen)
  local areas = string.split(areas_chosen, ", ")
  local num_areas = #areas - 1
  local full_list_of_areas = mmp.deepcopy(sunder_areaPaths)
  if not sunder_areaPaths then
    snd.message("Area table not found.")
  else
    local path_being_constructed = {}
    cecho("\n&lt;CadetBlue&gt;We are checking your area request:")
    for _, v in pairs(areas) do
      for x, y in pairs(full_list_of_areas) do
        area_being_checked = x:lower()
        if area_being_checked:find(v) then
        cecho("\n&lt;MediumSeaGreen&gt;Found: "..x)
          local area_to_be_added = full_list_of_areas[x]
          if #path_being_constructed ~= 0 then
            for l, m in pairs(path_being_constructed) do
              local areas_added = 0
              for a, b in pairs(m) do
                if b == "pthcity" and areas_added &lt; num_areas then 
                  path_being_constructed[l][a] = snd.bashing_area_beginning_rooms[x]
                  areas_added = areas_added + 1
                end --21
              end--20
            end--18
          end--17
          table.insert(path_being_constructed, area_to_be_added)
          break
        end
      end
    end
    
    local final_path = {}
    
    for myareastobash, roomsinthoseareas in pairs(path_being_constructed) do
      for first_room, next_room in pairs(roomsinthoseareas) do
        final_path[first_room] = next_room
      end
    end
  
    snd.message("If that's right, "..gmcp.Char.Status.name..", head on over to the first area!")
    bot.going = true
    bot.path = final_path
    if not snd.toggles.fasthunt then
      expandAlias("ff")
    end    
    expandAlias("aa") 
  end

end

snd.bashing_area_beginning_rooms ={
  ["the Dolbodi Campsite"] = "19323",
  ["the Khauskin Mines"] = "25408",
  ["the Feral Caves"] = "16274",
  ["Spiral of the Corrupt"] = "36271",
  ["Forsaken Evlasu"] = "53280",
  ["the Maghuir Fissure"] = "ptmaghuir",
  ["the Village of Torston"] = "17612",
  ["the Kalydian Forest"] = "19810",
  ["the Torturers' Caverns"] = "23202",
  ["the Forgotten Dome"] = "54770",
  ["the Tarean Ice Caverns"] = "22226",
  ["the Eresh Mines"] = "15344",
  ["Yohanan Village"] = "19802",
  ["the Salma Settlement"] = "19602",
  ["Arbothia"] = "15168",
  ["Mount Heylai"] = "54482",
  ["Raim Vale"] = "20389",
  ["Three Widows"] = "58675",
  ["the Valley of Kalebb"] = "8694",
  ["Court of the Consortium"] = "27704",
  ["the Dakhota hills"] = "1155",
  ["the Augerweald"] = "23791",
  ["a snake pit"] = "56942",
  ["Catacombs beneath Djeir"] = "12332",
  ["Tcanna Island"] = "36824",
  ["the Mannaseh Swamp"] = "1745",
  ["the Arurer Haven"] = "19320",
  [" Dovan Hollow"] = "49286",
  ["the Mamashi Tunnels"] = "20855",
  ["the Itzatl Morass"] = "15714",
  ["Scidve"] = "10813",
  ["the Bastion of Illdon"] = "4964",
  ["Rebels' Ridge"] = "18462",
  ["Mount Hubride"] = "13425",
  ["Asper"] = "13292",
  ["the Lich Gardens"] = "22866",
  ["the Shastaan Warrens"] = "45483",
  ["the Three Rock Outpost"] = "20281",
  ["the Shattered Vortex"] = "56731",
  ["Alaqsii Inlet"] = "22477",
  ["the lost city of Iviofiyiedu"] = "55190",
  ["Siha Dylis"] = "3106",
  ["Rotfang Warren"] = "63763",
  ["the Ruins of Farsai"] = "17032",
  ["the Caverns of Telfinne"] = "20932",
  ["the Valley of Lodi"] = "3883",
  ["the Ruins of Masilia"] = "20450",
  ["The Forgotten Mausoleum"] = "59862",
  ["the Ilhavon Forest"] = "26690",
  ["the Bloodwood"] = "57521",
  ["the Isle of Polyargos"] = "36824",
  ["Mount Humgurd"] = "23128",
  ["the Teshen Caldera"] = "55276",
  ["the Nal'jin Depths"] = "38090",
  ["Drakuum"] = "19854",
  ["the Fengard Keep"] = "3273",
  ["the Isle of Ollin"] = "19626",
  ["Raugol Fissure"] = "49749",
  ["the village of Bihrkaen"] = "56647",
  ["the Barony of Dun Valley"] = "5029",
  ["Luzith's Lair"] = "16282",
  ["the Morgun Forest"] = "4740",
  ["the Western Tundra"] = "18082",
  ["the beaches of Liris"] = "19814",
  ["Yuzurai village"] = "59609",
  ["Halls of Tornos"] = "21908",
  ["the Ayhesa Cliffs"] = "19987",
  ["the Village of Kornar"] = "21286",
  ["the Iernian Fracture"] = "10046",
  ["the Hlugnic Labyrinth"] = "57334",
  ["Xaanhal"] = "36677",
  ["the Sparklight Rift"] = "60845",
  ["a volcano"] = "35217",
  ["Tainhelm"] = "16437",
  ["the Dramedo Warrens"] = "58207",
  ["Dun Fortress"] = "3887",
  ["the Temple of Sonn"] = "16706",
  ["Riparium"] = "5599",
  ["the Azdun dungeon"] = "1773",
  ["the Festering Wastes"] = "20754",
  ["Tiyen Esityi"] = "38894",
  ["the Siroccian Tunnels"] = "26820",
  ["the Centipede Cave"] = "22824",
  ["the Holy Impire of Sehal"] = "24475",
  ["the Isle of Despair"] = "2030",
  ["the Tarean Caverns"] = "22305",
  ["Chapel Garden"] = "26920",
  ["the Vilimo Fields"] = "24628",
  ["the Crags"] = "19311",
  ["the village of Rahveir"] = "18968",
  ["the Caverns of Mor"] = "19344",
  ["the village of Gorshire"] = "66078",
  ["the Undercity of Djeir"] = "11994",
  ["the Cathedral of Gloaming"] = "22702",
  ["Three Widows"] = "58675",
  ["Court of the Consortium"] = "ptcourt",
  ["the Siroccian Mountains"] = "4354",
  ["the Central Wilderness"] = "11326",
  ["the Western Itzatl Rainforest"] = "9853",
  ["the Fractal Bloom"] = "ptfractal",
  ["Saliltul Swamp"] = "62102",
  ["the Ia'shal Barrow"] = "ptis'shal",
  ["the Isle of Despair"] = "ptdespair",
  ["Trapped within a mirror"] = "n/a",
  ["Perilaus"] = "11962",
  ["Dovan Hollow"] = "49286",
  ["the Squal"] = "14926",
  [ "the Maul"] = "50236",
  ["the forgotten depths of Mount Helba"] = "57086",
  ["the Bakal Chasm"] = "61011",
}
</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>GUI</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>setup</name>
						<packageName></packageName>
						<script>local windowwidth, windowheight = getMainWindowSize()
alteredwindowwidth = math.ceil(windowwidth*.08)

snd.gui = {
  enabled = true,
  height = windowheight,
  width_right = 400,
  width_left = alteredwindowwidth,
 
}
    setBorderLeft(snd.gui.width_left);
    setBorderRight(snd.gui.width_right); 
    
    rightContainer = Geyser.Container:new({
        name = "rightContainer", x = -snd.gui.width_right, y = 0,
        width = snd.gui.width_right, height = "100%",
    });

    leftContainer = Geyser.Container:new({
    		name = "leftContainer", x = 1, y = 0,
    		width = snd.gui.width_left-5, height = "100%",
    });
</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Left</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>vitals</name>
							<packageName></packageName>
							<script>  vitals = Geyser.Label:new({
   name = "vitals",
   x = 0, y = 0,
   width = "100%", height = "5%",
   fgColor = "white",
  }, leftContainer);
  vitals:setFontSize(11)
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>wielding</name>
							<packageName></packageName>
							<script>  wielding = Geyser.Label:new({
   name = "wielding",
   x = 0, y = "5%",
   width = "100%", height = "3%",
   color = "SteelBlue", fgColor = "white",
   message = [[wielding]],
  }, leftContainer);
  wielding:setFontSize(9)
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>time_update</name>
							<packageName></packageName>
							<script>  time = Geyser.Label:new({
   name = "time",
   x = 0, y = "8%",
   width = "100%", height = "1.75%",
   color = "black", fgColor = "white",
   message = [[time]],
  }, leftContainer);
  time:setFontSize(7.45)

function time_update()
  if snd.gui.enabled then
    sendGMCP("IRE.Time.Request")
    
    local d = gmcp.IRE.Time.List.day
    local m = gmcp.IRE.Time.List.month
    local y = gmcp.IRE.Time.List.year
    
    local t = gmcp.IRE.Time.List.time 
    	if t:find("late night, approaching midnight") then
    		time:setFontSize(8)
     		t = "Late night"
    	elseif t:find("It is deep night in Aetolia") then
    		t = "Almost midnight"
    		time:setFontSize(7.45)
    	elseif t:find("It is deepest midnight.") then
    		t = "Midnight"
    		time:setFontSize(8)
    	elseif t:find("It is the middle of the night in Aetolia") then
    		t = "After midnight"
    		time:setFontSize( 7.45)
    	elseif t:find("early morning in Aetolia") then
    		t = "Early morning"
    		time:setFontSize(7.45)
    	elseif t:find("approaching dawn.") then
    		t = "Almost dawn"
    		time:setFontSize(7.45)
    	elseif t:find("It is dawn.") then
    		t = "Dawn"
    		time:setFontSize(8)
    	elseif t:find("It's mid-") then
    		t = "Mid-morning"
    		time:setFontSize(8)
    	elseif t:find("approaching noon") then
    		t = "Almost noon"
    		time:setFontSize(7.45)
    	elseif t:find("exactly noon") then
    		t = "Hiiiigh noooon"
    		time:setFontSize(7.45)
    	elseif t:find("early afternoon") then
    		t = "Early afternoon"
    		time:setFontSize(7.45)
    	elseif t:find("It is late afternoon in Aetolia") then
    		t = "Late afternoon"
    		time:setFontSize(7.45)
    	elseif t:find("dusk in Aet") then
    		t = "Dusk"
    		time:setFontSize(8)
    	elseif t:find("Twilight has overtaken the light") then
    		t = "Early evening"
    		time:setFontSize(7.45)
    	else 
    		--This should only come about if they add a new time to the cycle.
    	end
    
    time:echo("&lt;center&gt;"..t.." "..m.."/"..d.."/"..y.."&lt;/center&gt;")
  end
end</script>
							<eventHandlerList>
								<string>gmcp.IRE.Time.Update</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>my status</name>
							<packageName></packageName>
							<script>
  mystatus = Geyser.Label:new({
   name = "mystatus",
   x = 0, y = "10%",
   width = "35%", height = "10.5%",
   color = "slate_gray", fgColor = "white",
   message = [[mystatus]],
  }, leftContainer);
  mystatus:setFontSize(9)
  	mystatus:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkCyan;
  		
  	]])
  mystatus:echo("&lt;center&gt;".."PASN".."&lt;/center&gt;\n&lt;center&gt;prone&lt;/center&gt;")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>my limbs</name>
							<packageName></packageName>
							<script>  mylimbs = Geyser.Label:new({
   name = "mylimbs",
   x = 0, y = "20%",
   width = "35%", height = "10%",
   color = "dim_gray", fgColor = "white",
   message = [[mylimbs]],
  }, leftContainer);
  mylimbs:setFontSize(9)
  	mylimbs:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkCyan;
  		
  	]])
  mylimbs:echo("&lt;center&gt;0&lt;/center&gt;\n&lt;center&gt;/|\\&lt;/center&gt;\n&lt;center&gt;/\\&lt;/center&gt;")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>my affs</name>
							<packageName></packageName>
							<script>
  myaffs = Geyser.Label:new({
   name = "myaffs",
   x = "35%", y = "10%",
   width = "65%", height = "20%",
   color = "dark_slate_gray", fgColor = "white",
   message = [[my affs]],
  }, leftContainer);
  myaffs:setFontSize(9)
    myaffs:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: DarkCyan;
  ]])
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>enemy name</name>
							<packageName></packageName>
							<script>
enemy = Geyser.Label:new({
 name = "enemy",
 x = 0, y = "30%",
 width = "100%", height = "3%",
 color = "black", fgColor = "red",
}, leftContainer);
enemy:setFontSize(10)
enemy:echo("&lt;center&gt;Target:&lt;/center&gt;")</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>enemy status</name>
							<packageName></packageName>
							<script>
  estatus = Geyser.Label:new({
   name = "estatus",
   x = 0, y = "33%",
   width = "35%", height = "11.75%",
   color = "slate_gray", fgColor = "white",
   message = [[estatus]],
  }, leftContainer);
  estatus:setFontSize(9)
  	estatus:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkSlateBlue;
  		
  	]])
  estatus:echo("&lt;center&gt;".."PASN".."&lt;/center&gt;\n&lt;center&gt;prone&lt;/center&gt;")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>enemy limbs</name>
							<packageName></packageName>
							<script>
  elimbs = Geyser.Label:new({
   name = "elimbs",
   x = 0, y = "44.5%",
   width = "35%", height = "11.5%",
   color = "black", fgColor = "white",
   message = [[elimbs]],
  }, leftContainer);
  elimbs:setFontSize(9)
  	elimbs:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkSlateBlue;
  		
  	]])
  --border-radius: 10px;
  elimbs:echo("&lt;center&gt;0&lt;/center&gt;\n&lt;center&gt;/|\\&lt;/center&gt;\n&lt;center&gt;/\\&lt;/center&gt;")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>enemy affs</name>
							<packageName></packageName>
							<script>
  eaffs = Geyser.Label:new({
   name = "eaffs",
   x = "35%", y = "33%",
   width = "65%", height = "23%",
   color = "dark_slate_gray", fgColor = "white",
   message = [[&lt;center&gt;enemy affs&lt;/center&gt;]],
  }, leftContainer);
  eaffs:setFontSize(9)
  eaffs:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: DarkSlateBlue;
  ]])
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>toggles</name>
							<packageName></packageName>
							<script>
  toggles = Geyser.MiniConsole:new({
   name = "toggles",
   x = 0, y = "57.5%",
   width = "50%", height = "10%",
   color = "black", fgColor = "white",
   message = [[toggles]],
  }, leftContainer);
  toggles:setFontSize(9)
  toggles:clear()
  toggles:cecho("\nattacking")
  toggles:echo("\nbashing")
  toggles:echo("\nfasthunt")
  toggles:echo("\nquesting")
  toggles:echo("\ndispersing")

  --toggles:echo("attacking\n&lt;center&gt;&lt;/center&gt;bashing\n&lt;center&gt;&lt;/center&gt;fasthunt")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>toggles2</name>
							<packageName></packageName>
							<script>
  toggles2 = Geyser.MiniConsole:new({
   name = "toggles2",
   x = "50%", y = "57.5%",
   width = "50%", height = "10%",
   color = "black", fgColor = "white",
   message = [[toggles2]],
  }, leftContainer);
  toggles2:setFontSize(9)
  toggles2:clear()
  toggles2:cecho("\naffcalling")
  toggles2:echo("\ncalling")
  toggles2:echo("\nlistening")
  toggles2:echo("\nchameleon")
  --toggles2:echo("affcalling\n&lt;center&gt;&lt;/center&gt;calling\n&lt;center&gt;&lt;/center&gt;listening")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>monolith</name>
							<packageName></packageName>
							<script>
  monolith = Geyser.Label:new({
   name = "monolith",
   x = 0, y = "70%",
   width = "100%", height = "2%",
   color = "firebrick", fgColor = "black",
  }, leftContainer);
  monolith:setFontSize(12)
  monolith:echo("&lt;center&gt;monolith&lt;/center&gt;")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>exits</name>
							<packageName></packageName>
							<script>
  exits = Geyser.Label:new({
   name = "exits",
   x = 0, y = "72%",
   width = "100%", height = "3.1%",
   color = "midnight_blue", fgColor = "white",
   message = [[exits]],
  }, leftContainer);
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>spirit in room</name>
							<packageName></packageName>
							<script>
  spirit_people = Geyser.Label:new({
   name = "spirit_people",
   x = 0, y = "75%",
   width = "50%", height = "25%",
   color = "SlateGray", fgColor = "DeepSkyBlue",
   message = [[&lt;center&gt;Spirit&lt;\center&gt;]],
  }, leftContainer);
      spirit_people:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: SlateGray;
  ]])
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>shadow in room</name>
							<packageName></packageName>
							<script>
  shadow_people = Geyser.Label:new({
   name = "shadow_people",
   x = "-50%", y = "75%",
   width = "50%", height = "25%",
   color = "SlateGray", fgColor = "tomato",
   message = [[&lt;center&gt;Shadow&lt;\center&gt;]],
  }, leftContainer);
        shadow_people:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: SlateGray;
  ]])
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Coloring these things</name>
							<packageName></packageName>
							<script>snd.display = {
--Begin self 
--locking affs
self_paralysis = "P",
self_paralysis_color = "",
self_asthma = "A",
self_asthma_color = "",
self_slickness = "S",
self_slickness_color = "",
self_anorexia = "N",
self_anorexia_color = "",
--prone/pseudo prone
self_prone = "prone",
self_prone_color = "",
--limb damage
self_head = "0",
self_head_color = "",
self_leftleg = "/",
self_leftleg_color = "",
self_rightleg = "\\",
self_rightleg_color = "",
self_leftarm = "/",
self_leftarm_color = "",
self_rightarm = "\\",
self_rightarm_color = "",
self_torso = "|",
self_torso_color = "",


--Begin enemy
--locking affs
enemy_paralysis = "P",
enemy_paralysis_color = "",
enemy_asthma = "A",
enemy_asthma_color = "",
enemy_slickness = "S",
enemy_slickness_color = "",
enemy_anorexia = "N",
enemy_anorexia_color = "",
--prone/pseudo prone
enemy_prone = "prone",
enemy_prone_color = "",
--limb damage
enemy_head = "0",
enemy_head_color = "",
enemy_leftleg = "/",
enemy_leftleg_color = "",
enemy_rightleg = "\\",
enemy_rightleg_color = "",
enemy_leftarm = "/",
enemy_leftarm_color = "",
enemy_rightarm = "\\",
enemy_rightarm_color = "",
enemy_torso = "|",
enemy_torso_color = "",
}

function color_self_affs()
if snd.have_aff("paralysis") then 
	snd.display.self_paralysis_color = "red" 
elseif snd.have_aff("paresis") then 
	snd.display.self_paralysis_color = "yellow" 
else
	snd.display.self_paralysis_color = "white"
end

if snd.have_aff("asthma") then 
	snd.display.self_asthma_color = "red" 
else
	snd.display.self_asthma_color = "white"
end

if snd.have_aff("slickness") then 
	snd.display.self_slickness_color = "red" 
else
	snd.display.self_slickness_color = "white"
end

if snd.have_aff("anorexia") then 
	snd.display.self_anorexia_color = "red" 
else
	snd.display.self_anorexia_color = "white"
end

local pseudo_check = false
for _, v in ipairs(snd.entangleaffs) do
	if snd.have_aff(v) then
		pseudo_check = true
		break
	end
end

if snd.have_aff("prone") then 
	snd.display.self_prone_color = "red" 
elseif pseudo_check then
	snd.display.self_prone_color = "yellow" 
else
	snd.display.self_prone_color = "white"
end

mystatus:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_paralysis_color.."\"&gt;"..snd.display.self_paralysis.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.self_asthma_color.."\"&gt;"..snd.display.self_asthma.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.self_slickness_color.."\"&gt;"..snd.display.self_slickness.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.self_anorexia_color.."\"&gt;"..snd.display.self_anorexia.."&lt;/span&gt;"..
												"&lt;/center&gt;\n&lt;center&gt;"..
												"&lt;span style=\"color:"..snd.display.self_prone_color.."\"&gt;"..snd.display.self_prone.."&lt;/span&gt;".."&lt;/center&gt;")
												
end

function color_enemy_affs()
if snd.checkAff("paralysis") then 
	snd.display.enemy_paralysis_color = "red" 
elseif snd.checkAff("paresis") then 
	snd.display.enemy_paralysis_color = "yellow" 
else
	snd.display.enemy_paralysis_color = "white"
end

if snd.checkAff("asthma") then 
	snd.display.enemy_asthma_color = "red" 
else
	snd.display.enemy_asthma_color = "white"
end

if snd.checkAff("slickness") then 
	snd.display.enemy_slickness_color = "red" 
else
	snd.display.enemy_slickness_color = "white"
end

if snd.checkAff("anorexia") then 
	snd.display.enemy_anorexia_color = "red" 
else
	snd.display.enemy_anorexia_color = "white"
end

local pseudo_check = false
for _, v in ipairs(snd.entangleaffs) do
	if snd.checkAff(v) then
		pseudo_check = true
		break
	end
end

if snd.checkAff("fallen") then 
	snd.display.enemy_prone_color = "red" 
elseif pseudo_check then
	snd.display.enemy_prone_color = "yellow" 
else
	snd.display.enemy_prone_color = "white"
end


estatus:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_paralysis_color.."\"&gt;"..snd.display.enemy_paralysis.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_asthma_color.."\"&gt;"..snd.display.enemy_asthma.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_slickness_color.."\"&gt;"..snd.display.enemy_slickness.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_anorexia_color.."\"&gt;"..snd.display.enemy_anorexia.."&lt;/span&gt;"..
												"&lt;/center&gt;\n&lt;center&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_prone_color.."\"&gt;"..snd.display.enemy_prone.."&lt;/span&gt;".."&lt;/center&gt;")
												
end

function color_enemy_limbs()

--consider using different symbols for the bruising levels
if snd.limb_status["head"] == "mangled" then 
	snd.display.enemy_head_color = "red" 
elseif snd.limb_status["head"] == "broken" then 
	snd.display.enemy_head_color = "gold" 
else
	snd.display.enemy_head_color = "white"
end

if snd.limb_status["left leg"] == "mangled" then 
	snd.display.enemy_leftleg_color = "red" 
elseif snd.limb_status["left leg"] == "broken" then 
	snd.display.enemy_leftleg_color = "gold" 
elseif snd.checkAff("left_leg_broken") then
	snd.display.enemy_leftleg_color = "green" 
else
	snd.display.enemy_leftleg_color = "white"
end

if snd.limb_status["right leg"] == "mangled" then 
	snd.display.enemy_rightleg_color = "red" 
elseif snd.limb_status["right leg"] == "broken" then 
	snd.display.enemy_rightleg_color = "gold" 
elseif snd.checkAff("right_leg_broken") then
	snd.display.enemy_rightleg_color = "green" 
else
	snd.display.enemy_rightleg_color = "white"
end

if snd.limb_status["left arm"] == "mangled" then 
	snd.display.enemy_leftarm_color = "red" 
elseif snd.limb_status["left arm"] == "broken" then 
	snd.display.enemy_leftarm_color = "gold" 
elseif snd.checkAff("left_arm_broken") then
	snd.display.enemy_leftarm_color = "green" 
else
	snd.display.enemy_leftarm_color = "white"
end

if snd.limb_status["right arm"] == "mangled" then 
	snd.display.enemy_rightarm_color = "red" 
elseif snd.limb_status["right arm"] == "broken" then 
	snd.display.enemy_rightarm_color = "gold" 
elseif snd.checkAff("right_arm_broken") then
	snd.display.enemy_rightarm_color = "green" 
else
	snd.display.enemy_rightarm_color = "white"
end

if snd.limb_status["torso"] == "mangled" then 
	snd.display.enemy_torso_color = "red" 
elseif snd.limb_status["torso"] == "broken" then 
	snd.display.enemy_torso_color = "gold" 
else
	snd.display.enemy_torso_color = "white"
end 
elimbs:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_head_color.."\"&gt;"..snd.display.enemy_head.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;/center&gt;\n&lt;center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_leftarm_color.."\"&gt;"..snd.display.enemy_leftarm.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.enemy_torso_color.."\"&gt;"..snd.display.enemy_torso.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.enemy_rightarm_color.."\"&gt;"..snd.display.enemy_rightarm.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;/center&gt;\n&lt;center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_leftleg_color.."\"&gt;"..snd.display.enemy_leftleg.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.enemy_rightleg_color.."\"&gt;"..snd.display.enemy_rightleg.."&lt;/span&gt;".."&lt;/center&gt;"	
						
				)

end

function color_self_limbs()

--consider using different symbols for the bruising levels
if snd.afflictions.aff_torso_mangled.state == "afflicted" then 
	snd.display.self_torso_color = "red" 
elseif snd.afflictions.aff_torso_damaged.state == "afflicted" then 
	snd.display.self_torso_color = "gold" 
else
	snd.display.self_leftleg_color = "white"
end

if snd.afflictions.aff_left_leg_mangled.state == "afflicted" then 
	snd.display.self_leftleg_color = "red" 
elseif snd.afflictions.aff_left_leg_damaged.state == "afflicted" then 
	snd.display.self_leftleg_color = "gold" 
elseif snd.afflictions.aff_left_leg_broken.state == "afflicted" then
	snd.display.self_leftleg_color = "green" 
else
	snd.display.self_leftleg_color = "white"
end

if snd.afflictions.aff_right_leg_mangled.state == "afflicted" then 
	snd.display.self_rightleg_color = "red" 
elseif snd.afflictions.aff_right_leg_damaged.state == "afflicted" then 
	snd.display.self_rightleg_color = "gold" 
elseif snd.afflictions.aff_right_leg_broken.state == "afflicted" then
	snd.display.self_rightleg_color = "green" 
else
	snd.display.self_rightleg_color = "white"
end

if snd.afflictions.aff_left_arm_mangled.state == "afflicted" then 
	snd.display.self_leftarm_color = "red" 
elseif snd.afflictions.aff_left_arm_damaged.state == "afflicted" then 
	snd.display.self_leftarm_color = "gold" 
elseif snd.afflictions.aff_left_arm_broken.state == "afflicted" then
	snd.display.self_leftarm_color = "green" 
else
	snd.display.self_leftarm_color = "white"
end

if snd.afflictions.aff_right_arm_mangled.state == "afflicted" then 
	snd.display.self_rightarm_color = "red" 
elseif snd.afflictions.aff_right_arm_damaged.state == "afflicted" then 
	snd.display.self_rightarm_color = "gold" 
elseif snd.afflictions.aff_right_arm_broken.state == "afflicted" then
	snd.display.self_rightarm_color = "green" 
else
	snd.display.self_rightarm_color = "white"
end

if snd.afflictions.aff_head_mangled.state == "afflicted" then 
	snd.display.self_head_color = "red" 
elseif snd.afflictions.aff_head_damaged.state == "afflicted" then 
	snd.display.self_head_color = "gold" 
else
	snd.display.self_head_color = "white"
end

mylimbs:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_head_color.."\"&gt;"..snd.display.self_head.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;/center&gt;\n&lt;center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_leftarm_color.."\"&gt;"..snd.display.self_leftarm.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.self_torso_color.."\"&gt;"..snd.display.self_torso.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.self_rightarm_color.."\"&gt;"..snd.display.self_rightarm.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;/center&gt;\n&lt;center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_leftleg_color.."\"&gt;"..snd.display.self_leftleg.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.self_rightleg_color.."\"&gt;"..snd.display.self_rightleg.."&lt;/span&gt;".."&lt;/center&gt;"	
						
				)

end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Aff displays</name>
							<packageName></packageName>
							<script>function display_my_affs()
	
	local self_display_table = {}
	local tally_check = snd.aff_tally()
	local aff_check = ""
  if tally_check &gt; 0 then
		for aff in pairs(snd.afflictions) do
  		if snd.have_aff(aff) then
				aff_check = aff
				aff_check = aff_check:gsub("aff_", "")
				aff_check = aff_check:gsub("_", " ")
				aff_check = aff_check:gsub("left", "L")
				aff_check = aff_check:gsub("right", "R")
				if snd.afflictions[aff]["cures"]["herb"] ~= nil or 
        snd.afflictions[aff]["cures"]["salve"] ~= nil or 
        snd.afflictions[aff]["cures"]["smoke"] ~= nil then
     			table.insert(self_display_table, "&lt;center&gt;"..aff_check.."&lt;/center&gt;")
				end
			end
		end

    myaffs:echo(table.concat(self_display_table))
  else
 		myaffs:echo("&lt;center&gt;my affs&lt;/center&gt;")
	end
	color_self_affs()
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Right</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Chat</name>
							<packageName></packageName>
							<script></script>
							<eventHandlerList />
							<ScriptGroup isActive="yes" isFolder="yes">
								<name>YATCOCONFIG</name>
								<packageName></packageName>
								<script>demonnic = demonnic or {}
demonnic.chat = demonnic.chat or {}
demonnic.chat.config = demonnic.chat.config or {}</script>
								<eventHandlerList />
								<Script isActive="yes" isFolder="no">
									<name>Configuration Options</name>
									<packageName></packageName>
									<script>--[[
This is where all of the configuration options can be set. 
Anything I've put in this script object can be changed, but please do pay attention to what you're doing.
If you change one of the values to something it shouldn't be, you could break it. 
]]

--This is where you tell it to use tabbed chat.
  demonnic.chat.use = true
--[[
This is where you put what container to put the tabbed chat stuff into. Make it
equal to the actual container object you want it in, or false for none. Defaults to false
Which is to say if you want to put the tabbed chat stuff into a container made using 
uiRight = Geyser.Container:new()

you would put

demonnic.chat.useContainer = uiRight

and if you don't want it in a container you would put

demonnic.chat.useContainer = false
]]

demonnic.chat.useContainer = false

--[[
The timestamp option is set here.
Set to false if you do not want any timestamps displayed for chat.
If you do want it displayed, set to the string for the format you wish. 
see http://wiki.mudlet.org/w/Manual:Lua_Functions#getTime for information
how to format the string
]]
--demonnic.chat.config.timestamp = "HH:mm:ss"
demonnic.chat.config.timestamp = false

--[[ Should we use our own colors for the timestamp?
Set to true if you want to specify foreground and background colors
for the timestamp.
Set to false if you want the timestamps background and foreground
colors to match that of the mud output.
]]
demonnic.chat.config.timestampCustomColor = false
--[[
and what foreground color? You can either use one of the 'named' colors
(see http://wiki.mudlet.org/images/c/c3/ShowColors.png for available colors)
demonnic.chat.config.timestampFG = "slate_grey"

Or you can use a table of R,G,B values. 
demonnic.chat.config.timestampFG = {
  255,
    0,
    0,
}
then the foreground for the timestamp would be 255 read, 100 green, and 0 blue
]]
demonnic.chat.config.timestampFG = "red"

--and background? Same rules as for the foreground above
demonnic.chat.config.timestampBG = "blue"

--[[
This is where you say what corner of the screen you want the tabbed chat on
Valid settings are "topright", "topleft", "bottomright", "bottomleft"
]]--
demonnic.chat.config.location = "topright"

--[[
This is a table of channels you would like.
AKA the place you tell the script what tabs you want.
Each entry must be a string. The defaults should be a pretty effective guide.
]]

demonnic.chat.config.channels = {
  "All",
	"Tells",
	"Local",
	"Web",
  "City",
  "Guild",
  "Clans",
	"Order",
  "Misc",
}


--Set this to the name of the channel you want to have everything sent to. 
--Per the default, this would be the "All" channel. If you have a different name for it:
--
--demonnic.chat.config.Alltab = "Bucket"  
--
--And if you don't want it turned on at all:
--
--demonnic.chat.config.Alltab = false

demonnic.chat.config.Alltab = "All"

--Set this to the name of the channel you want to display your map. Set to "" if you
--don't want to display the map in your YATCO tabs
demonnic.chat.config.Maptab = ""


---------------------------------------------------------------------------------
--                                                                             --
--The infamous blinking stuff!!!                                               --
--                                                                             --
---------------------------------------------------------------------------------

--[[
Do you want tabs to blink when you get new messages, until you click on the tab?
True if yes, false if no.
]]
demonnic.chat.config.blink = true

--How long (in seconds) between blinks? For example, 1 would mean a 1 second pause in between blinks.
demonnic.chat.config.blinkTime = 3

--Blink if the bucket tab ("All" by default, but configured above) is in focus?
demonnic.chat.config.blinkFromAll = false




--Font size for the chat messages

demonnic.chat.config.fontSize = 9

--[[
Should we preserve the formatting of the text. 
Or should we set the background of it to match the window color?
Set this to false if you want the background for all chat to match the background of the window.
Useful if you change the background from black, and don't like the way the pasted chat makes blocks in it
]]

demonnic.chat.config.preserveBackground = false

--[[
Gag the chat lines in the main window?
defaults to false, set to true if you want to gag.
]]

demonnic.chat.config.gag = false

--[[
Number of lines of chat visible at once. 
Will determine how tall the window for the chats is.
]]

local x, y = getMainWindowSize()
demonnic.chat.config.lines = ((y/2) / 17)

--[[
Number of characters to wrap the chatlines at.
This will also determine how wide the chat windows are.
]]

demonnic.chat.config.width = 55

--[[
Set the color for the active tab. R,G,B format.
The default here is a brightish green
]]

demonnic.chat.config.activeColors = {
  r = 0,
  g = 180,
  b = 0,
}

--[[
Set the color for the inactive tab. R,G,B format.
The default here is a drab grey
]]

demonnic.chat.config.inactiveColors = {
  r = 60,
  g = 60,
  b = 60,
}

--[[
Set the color for the chat window itself. R,G,B format.
Defaulted to the black of my twisted hardened soul. Or something.
]]

demonnic.chat.config.windowColors = {
  r = 0,
  g = 0,
  b = 0,
}

--[[
Set the color for the text on the active tab. Uses color names.
Set the default to purple. So the tab you're looking at, by default will be purple on bright green. 
Did I mention I'm a bit colorblind?
]]

demonnic.chat.config.activeTabText = "purple"

--[[
Set the color for the text on the inactive tabs. Uses color names.
Defaulted this to white. So the tabs you're not looking at will be white text on boring grey background.
]]

demonnic.chat.config.inactiveTabText = "white"

--[[
have to make sure a currentTab is set... 
so we'll use the one for the bucket, or the first one in the channels table
Or, you know... what it's currently set to, if it's already set.
]]
demonnic.chat.currentTab = demonnic.chat.currentTab or demonnic.chat.config.Alltab or demonnic.chat.config.channels[1]
</script>
									<eventHandlerList />
								</Script>
							</ScriptGroup>
							<ScriptGroup isActive="yes" isFolder="yes">
								<name>Shared</name>
								<packageName></packageName>
								<script>--Bootstrapping variables/etc. Don't touch this unless you really know what you're doing

--I mean it. I'll point. AND laugh. loudly. 
demonnic = demonnic or {}
demonnic.config = demonnic.config or {}
demonnic.balances = demonnic.balances or {}
demonnic.balances.balance = demonnic.balances.balance or 1
demonnic.balances.equilibrium = demonnic.balances.equilibrium or 1
demonnic.debug = demonnic.debug or {}
demonnic.debug.active = demonnic.debug.active or nil
demonnic.debug.categories = demonnic.debug.categories or { }


function demonnic:echo(msg)
 cecho(string.format("\n&lt;blue&gt;(&lt;green&gt;Demonnic&lt;blue&gt;):&lt;white&gt; %s", msg))
end</script>
								<eventHandlerList />
								<Script isActive="yes" isFolder="no">
									<name>Debugging</name>
									<packageName></packageName>
									<script>--Adds debugging functionality 

function demonnic:Debug(category,debugData)
   if category then
      if table.contains(demonnic.debug.categories, category) then
         if type(debugData) == "table" then
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt;")
            display(debugData)
         elseif type(debugData) == "string" or type(debugData) == "number" then
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. debugData .. "\n" )
         else
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. tostring(debugData) .. "\n" )
         end
      end
   else
      if type(debugData) == "table" then
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt;")
         display(debugData)
      elseif type(debugData) == "string" or type(debugData) == "number" then
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. debugData)
      else
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. tostring(debugData))
      end
   end
end

function demonnic:printDebug(category, debugData)
   if not demonnic.debug.active then return end
   demonnic:Debug(category, debugData)
end

function demonnic:toggleDebug()
   if demonnic.debug.active then demonnic.debug.active = nil
   else demonnic.debug.active = true
   end
   demonnic:echo("Debugging is currently " .. (( demonnic.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;"))
end

function demonnic:watchCategory( category )
   if table.contains(demonnic.debug.categories, category) then
      for i,v in ipairs(demonnic.debug.categories) do
         if v == category then
            table.remove(demonnic.debug.categories, i)
         end
      end
      demonnic:echo("No longer watching the '&lt;red&gt;"..category.."&lt;white&gt;' category.") 
   else
      table.insert(demonnic.debug.categories, category)
      demonnic:echo("Now watching the '&lt;red&gt;"..category.."&lt;white&gt;' category.")
   end
   demonnic:echo("Debugging is currently " .. (( demonnic.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;"))
end

function demonnic:listCategories()
   if #demonnic.debug.categories &gt; 0 then
      demonnic:echo("You are currently watching the following categories:\n" .. table.concat(demonnic.debug.categories,", ") )
   else
      demonnic:echo("You are not watching any debugs.")
   end
end
</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>Geyser Additions</name>
									<packageName></packageName>
									<script>function Geyser.MiniConsole:clear()
   clearWindow(self.name)
end

function Geyser.MiniConsole:append()
  appendBuffer(self.name)
end</script>
									<eventHandlerList />
								</Script>
							</ScriptGroup>
							<ScriptGroup isActive="yes" isFolder="yes">
								<name>Tabbed Chat</name>
								<packageName></packageName>
								<script>--Do not remove the following lines. Or change them.
demonnic = demonnic or {}
demonnic.chat = demonnic.chat or {}
demonnic.chat.tabsToBlink = demonnic.chat.tabsToBlink or {}
demonnic.chat.tabs = demonnic.chat.tabs or {}
demonnic.chat.windows = demonnic.chat.windows or {}
if not demonnic.chat.config then
  cecho("&lt;red:white&gt;YOU DO NOT HAVE THE YATCO CONFIG PACKAGE IN PLACE. THINGS WILL NOT WORK AS EXPECTED\n\n")
  demonnic.chat.error = "NO CONFIG"
end</script>
								<eventHandlerList />
								<Script isActive="yes" isFolder="no">
									<name>Code</name>
									<packageName></packageName>
									<script>--[[
If the label callbacks ever decide to start taking a function which is part of a table, 0then this will change.
Or if it's modified to take actual functions. Anonymouse function clickcallback would be awfully nice.
]]

function demonnicChatSwitch(chat)
  local r = demonnic.chat.config.inactiveColors.r
  local g = demonnic.chat.config.inactiveColors.g
  local b = demonnic.chat.config.inactiveColors.b
  local newr = demonnic.chat.config.activeColors.r
  local newg = demonnic.chat.config.activeColors.g
  local newb = demonnic.chat.config.activeColors.b
  local oldchat = demonnic.chat.currentTab
  if demonnic.chat.currentTab ~= chat then
    demonnic.chat.windows[oldchat]:hide()
    demonnic.chat.tabs[oldchat]:setColor(r,g,b)
    demonnic.chat.tabs[oldchat]:echo(oldchat, demonnic.chat.config.inactiveTabText, "c")
    if demonnic.chat.config.blink and demonnic.chat.tabsToBlink[chat] then
      demonnic.chat.tabsToBlink[chat] = nil
    end
    if demonnic.chat.config.blink and chat == demonnic.chat.config.Alltab then
      demonnic.chat.tabsToBlink = {}
    end
  end
  demonnic.chat.tabs[chat]:setColor(newr,newg,newb)
  demonnic.chat.tabs[chat]:echo(chat, demonnic.chat.config.activeTabText, "c")
  demonnic.chat.windows[chat]:show()
  demonnic.chat.currentTab = chat  
end

function demonnic.chat:resetUI()
  demonnic.chat.container = demonnic.chat.useContainer or Geyser.Container:new(demonnic.chat[demonnic.chat.config.location]())
  demonnic.chat.tabBox = Geyser.HBox:new({
    x=0,
    y=0,
    width = "100%",
    height = "25px",
    name = "DemonChatTabs",
  },demonnic.chat.container)

end

function demonnic.chat:create()
  --reset the UI
  demonnic.chat:resetUI()
  --Set some variables locally to increase readability
  local r = demonnic.chat.config.inactiveColors.r
  local g = demonnic.chat.config.inactiveColors.g
  local b = demonnic.chat.config.inactiveColors.b
  local winr = demonnic.chat.config.windowColors.r
  local wing = demonnic.chat.config.windowColors.g
  local winb = demonnic.chat.config.windowColors.b

  --iterate the table of channels and create some windows and tabs
  for i,tab in ipairs(demonnic.chat.config.channels) do
    demonnic.chat.tabs[tab] = Geyser.Label:new({
      name=string.format("tab%s", tab),
    }, demonnic.chat.tabBox)
    demonnic.chat.tabs[tab]:echo(tab, demonnic.chat.config.inactiveTabText, "c")
    demonnic.chat.tabs[tab]:setColor(r,g,b)
    demonnic.chat.tabs[tab]:setClickCallback("demonnicChatSwitch", tab)
    demonnic.chat.windows[tab] = Geyser.MiniConsole:new({
--      fontSize = demonnic.chat.config.fontSize,
      x = 0,
      y = 25,
      height = "100%",
      width = "100%",
      name = string.format("win%s", tab),
    }, demonnic.chat.container)
    demonnic.chat.windows[tab]:setFontSize(demonnic.chat.config.fontSize)
    demonnic.chat.windows[tab]:setColor(winr,wing,winb)
    demonnic.chat.windows[tab]:setWrap(demonnic.chat.config.width)
    demonnic.chat.windows[tab]:hide()
  end
  if demonnic.chat.config.Maptab and demonnic.chat.config.Maptab ~= "" then
    demonnic.chat.mapWindow = Geyser.Mapper:new({
      x = 15,
      y = 0,
      height = "100%",
      width = "100%",
    }, demonnic.chat.windows[demonnic.chat.config.Maptab])
    demonnic.chat.windows[demonnic.chat.config.Maptab]:hide()
  end
  local showme = demonnic.chat.config.Alltab or demonnic.chat.config.channels[1]
  demonnicChatSwitch(showme)
  --start the blink timers, if enabled
  if demonnic.chat.config.blink and not demonnic.chat.blinkTimerOn then
    demonnic.chat:blink()
  end
end

function demonnic.chat:append(chat)

  local r = demonnic.chat.config.windowColors.r
  local g = demonnic.chat.config.windowColors.g
  local b = demonnic.chat.config.windowColors.b
  selectCurrentLine()
  local ofr,ofg,ofb = getFgColor()
  local obr,obg,obb = getBgColor()
  if demonnic.chat.config.preserveBackground then
    setBgColor(r,g,b)
  end
  copy()
  if demonnic.chat.config.timestamp then
    local timestamp = getTime(true, demonnic.chat.config.timestamp)
    local tsfg = {}
    local tsbg = {}
    local colorLeader = ""
    if demonnic.chat.config.timestampCustomColor then
      if type(demonnic.chat.config.timestampFG) == "string" then
        tsfg = color_table[demonnic.chat.config.timestampFG]
      else
        tsfg = demonnic.chat.config.timestampFG
      end
      if type(demonnic.chat.config.timestampBG) == "string" then
        tsbg = color_table[demonnic.chat.config.timestampBG]
      else
        tsbg = demonnic.chat.config.timestampBG
      end
      colorLeader = string.format("&lt;%s,%s,%s:%s,%s,%s&gt;",tsfg[1],tsfg[2],tsfg[3],tsbg[1],tsbg[2],tsbg[3])
    else
      colorLeader = string.format("&lt;%s,%s,%s:%s,%s,%s&gt;",ofr,ofg,ofb,obr,obg,obb)
    end
    local fullstamp = string.format("%s%s",colorLeader,timestamp)
      demonnic.chat.windows[chat]:decho(fullstamp)
      demonnic.chat.windows[chat]:echo(" ")
      if demonnic.chat.config.Alltab then 
        demonnic.chat.windows[demonnic.chat.config.Alltab]:decho(fullstamp)
        demonnic.chat.windows[demonnic.chat.config.Alltab]:echo(" ")
      end
  end
  demonnic.chat.windows[chat]:append()
  if demonnic.chat.config.gag then 
    deleteLine() 
    tempLineTrigger(1,1, [[if isPrompt() then deleteLine() end]])
  end
  if demonnic.chat.config.Alltab then appendBuffer(string.format("win%s", demonnic.chat.config.Alltab)) end
  if demonnic.chat.config.blink and chat ~= demonnic.chat.currentTab then 
    if (demonnic.chat.config.Alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end



function demonnic.chat:blink()
  if demonnic.chat.blinkID then killTimer(demonnic.chat.blinkID) end
  if not demonnic.chat.config.blink then 
    demonnic.chat.blinkTimerOn = false
    return 
  end
  if not demonnic.chat.container.hidden then
    for tab,_ in pairs(demonnic.chat.tabsToBlink) do
      demonnic.chat.tabs[tab]:flash()
    end
  end
  demonnic.chat.blinkID = tempTimer(demonnic.chat.config.blinkTime, function () demonnic.chat:blink() end)
end

function demonnic.chat:topright()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=string.format("-%sc",demonnic.chat.config.width + 2),
    y=0,
    width= "-1px",
    height=string.format("%ic", demonnic.chat.config.lines + 1),
  }
end

function demonnic.chat:topleft()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=0,
    y=0,
    width=string.format("%sc",demonnic.chat.config.width),
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:bottomright()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=string.format("-%sc",demonnic.chat.config.width + 2),
    y=string.format("-%sc",demonnic.chat.config.lines + 2),
    width="-15px",
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:bottomleft()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=0,
    y=string.format("-%sc",demonnic.chat.config.lines + 2),
    width=string.format("%sc",demonnic.chat.config.width),
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>demonnicOnStart</name>
									<packageName></packageName>
									<script>function demonnicOnStart()
  if demonnic.chat.use then
    demonnic.chat:create()
  end
end</script>
									<eventHandlerList>
										<string>sysLoadEvent</string>
									</eventHandlerList>
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>echo functions</name>
									<packageName></packageName>
									<script>
function demonnic.chat:cecho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  cecho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    cecho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:decho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  decho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    decho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:hecho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  hecho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    hecho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:echo(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  echo(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    echo(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>demonnicOnInstall</name>
									<packageName></packageName>
									<script>function demonnicOnInstall(_, package)
  if package:find("YATCO") then
  	demonnicOnStart()
  end
end</script>
									<eventHandlerList>
										<string>sysInstall</string>
									</eventHandlerList>
								</Script>
							</ScriptGroup>
						</ScriptGroup>
						<Script isActive="yes" isFolder="no">
							<name>map window</name>
							<packageName></packageName>
							<script>  mapper = Geyser.Mapper:new({
  name = "mapper",
  x = 0, y = "50%",
  width = "100%", height = "50%",
  }, rightContainer);
</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Updating Functions</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>echoing</name>
							<packageName></packageName>
							<script>
function snd.set_vitals()
 local class = snd.assumed_class or gmcp.Char.Status.class
 local string = "&lt;center&gt;"..gmcp.Char.Status.name.."&lt;/center&gt;\n&lt;center&gt;"..class.."&lt;/center&gt;"
 if snd.gui.enabled then 
  vitals:echo(string)
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Toggles</name>
							<packageName></packageName>
							<script>function snd.updateToggles()

  toggles:clear()
  toggles2:clear()
  
  local tgs = {"attacking", "bashing", "fasthunt", "questing",  "dispersing"}
  
  for tog in pairs(tgs) do
    if snd.toggles[tgs[tog]] then
      if tgs[tog] == "dispersing" then
        if snd.disperse == "callers" then
    			toggles:cecho("\n&lt;yellow&gt;dispersing")
    		elseif snd.disperse == "all" then
    			toggles:cecho("\n&lt;green&gt;dispersing")
        else
          toggles:cecho("\n&lt;red&gt;dispersing")
        end
      else
        toggles:cecho("\n&lt;green&gt;" .. tgs[tog])
      end
    else
      toggles:cecho("\n&lt;red&gt;" .. tgs[tog])
    end
  end
  
  tgs = {"affcalling", "calling", "listening", "chameleon"}
  
  for tog in pairs(tgs) do
    if snd.toggles[tgs[tog]] then
      toggles2:cecho("\n&lt;green&gt;" .. tgs[tog])
    else
      toggles2:cecho("\n&lt;red&gt;" .. tgs[tog])
    end
  end
  
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Healing</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Methods</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>balance</name>
							<packageName></packageName>
							<script>

function snd.do_special(current)
 if snd.afflictions[current] ~= nil then
  if snd.afflictions[current].state == "afflicted" then
   snd.send(snd.afflictions[current].cures.special)
   echo("("..snd.afflictions[current].cures.special..")")
   snd.last_type = "special"
   snd.last_item = snd.afflictions[current].cures.special
   snd.afflictions[current].state = "waiting"
   startStopWatch(snd.afflictions[current].timer)
  end
 elseif snd.defenses[current] ~= nil then
  if current == "def_fangbarrier" and snd.have_aff("slickness") then
	 return
	else
   if snd.defenses[current].state == "down" then
    if current == "def_fangbarrier" then snd.send("outc paste"); snd.send(snd.defenses[current].balance.special) 
    else snd.send(snd.defenses[current].balance.special) end
    echo("("..snd.defenses[current].balance.special..")")
    snd.last_type = "special"
    snd.last_item = snd.defenses[current].balance.special
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
	 end
  end
 end
end

function snd.do_balance_need(current)
 if gmcp.Char.Vitals.balance == "1" and not snd.waiting.balance and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.balanceneed)
  echo("("..snd.defenses[current].balance.balanceneed..")")
  snd.last_type = "balanceneed"
  snd.last_item = snd.defenses[current].balance.balanceneed
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
 end
end

function snd.do_equilibrium_need(current)
 if gmcp.Char.Vitals.equilibrium == "1" and not snd.waiting.equilibrium and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.equilibriumneed)
  echo("("..snd.defenses[current].balance.equilibriumneed..")")
  snd.last_type = "equilibriumneed"
  snd.last_item = snd.defenses[current].balance.equilibriumneed
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
 end
end

function snd.do_balance_equilibrium_need(current)
 if snd.can_cast() then
  if snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" and snd.defenses[current].needit then
    if current:find("chameleon") then
      local chameleon_table = {}
      for k, v in pairs(sndNDB.players) do
        table.insert(chameleon_table, k)
      end
      local cham_check = chameleon_table[math.random(#chameleon_table)]
      snd.send(snd.defenses[current].balance.balanceequilibrium..cham_check..snd.sep.."chameleon "..cham_check)
    else
      snd.send(snd.defenses[current].balance.balanceequilibrium)
    end
    echo("("..snd.defenses[current].balance.balanceequilibrium..")")
    snd.last_type = "balanceequilibrium"
    snd.last_item = snd.defenses[current].balance.balanceequilibrium
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  elseif snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send(snd.afflictions[current].cures.balanceequilibrium)
    echo("("..snd.afflictions[current].cures.balanceequilibrium..")")
    snd.last_type = "balanceequilibrium"
    snd.last_item = snd.afflictions[current].cures.balanceequilibrium
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  end
 end
end

function snd.do_balance_take(current)
 if gmcp.Char.Vitals.balance == "1" and not snd.waiting.balance and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.balancetake)
  echo("("..snd.defenses[current].balance.balancetake..")")
  snd.last_type = "balancetake"
  snd.last_item = snd.defenses[current].balance.balancetake
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end

function snd.do_equilibrium_take(current)
 if gmcp.Char.Vitals.equilibrium == "1" and not snd.waiting.equilibrium and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.equilibriumtake)
  echo("("..snd.defenses[current].balance.equilibriumtake..")")
  snd.last_type = "equilibriumtake"
  snd.last_item = snd.defenses[current].balance.equilibriumtake
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.equilibrium = true
  tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
 end
end

function snd.do_needy_balance_take(current)
  if snd.can_cast() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
    snd.send(snd.defenses[current].balance.needybalancetake)
    echo("("..snd.defenses[current].balance.needybalancetake..")")
    snd.last_type = "needybalancetake"
    snd.last_item = snd.defenses[current].balance.needybalancetake
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
    snd.waiting.balance = true
    tempTimer(snd.delay(), [[snd.waiting.balance = false]])
  end
end

function snd.do_needy_equilibrium_take(current)
 if snd.can_cast() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.needyequilibriumtake)
  echo("("..snd.defenses[current].balance.needyequilibriumtake..")")
  snd.last_type = "needyequilibriumtake"
  snd.last_item = snd.defenses[current].balance.needyequilibriumtake
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.equilibrium = true
  tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
 end
end

function snd.do_balance_equilibrium_take(current)
  if snd.can_cast() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
    
    if snd.class == "Teradrim" and current:find("swelter") then
      if not table.isMember(gmcp.Room.Info.details, "sandy") then
        snd.send("sand flood")
        snd.waiting.balance = true
        tempTimer(snd.delay(), [[snd.waiting.balance = false]])
        snd.waiting.equilibrium = true
        tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
      end
    end
        
    snd.send(snd.defenses[current].balance.balanceequilibriumtake)
    echo("("..snd.defenses[current].balance.balanceequilibriumtake..")")
    snd.last_type = "balanceequilibriumtake"
    snd.last_item = snd.defenses[current].balance.balanceequilibriumtake
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
    snd.waiting.balance = true
    tempTimer(snd.delay(), [[snd.waiting.balance = false]])
    snd.waiting.equilibrium = true
    tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>tattoo</name>
							<packageName></packageName>
							<script>
function snd.do_tattoo(current)
 if snd.can_cast() and snd.can_tattoo() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send("touch "..snd.defenses[current].balance.tattoo.." tattoo")
  echo("(touch "..snd.defenses[current].balance.tattoo.." tattoo)")
  snd.last_type = "tattoo"
  snd.last_item = snd.defenses[current].balance.tattoo
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.equilibrium = true
  tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>eat</name>
							<packageName></packageName>
							<script>
function snd.do_eat(current)
 if snd.defenses[current] ~= nil then
  if snd.defenses[current].state == "down" and snd.defenses[current].needit and snd.can_eat() then
   snd.cur.herb = snd.defenses[current].balance.eat
   if snd.have_slow() then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.eat(current)
     return
    elseif snd.not_entangled() then
     snd.send("outc "..snd.cur.herb)
     return
    else
     return
    end
   elseif snd.not_entangled() then
    if snd.defenses[current] ~= nil then
     snd.send("outc "..snd.cur.herb)
     snd.eat(current)
    end
   else
    if snd.defenses[current] ~= nil then
     if snd.outred[snd.cur.herb] &gt;= 1 then
      snd.eat(current)
     end
    end
   end
  end
 end
end

function snd.eat(current)
 snd.send("eat "..snd.cur.herb)
 echo("(eat "..snd.cur.herb..")")
 snd.defenses[current].state = "waiting"
 startStopWatch(snd.defenses[current].timer)
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>drink</name>
							<packageName></packageName>
							<script>
function snd.do_drink(current)
 if snd.can_eat() then
  if snd.afflictions[current] ~= nil then
   snd.cur.drink = snd.afflictions[current].cures.drink
  else
   snd.cur.drink = snd.defenses[current].balance.drink
  end
  if snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" and snd.defenses[current].needit then
    snd.send("drink "..snd.cur.drink)
    echo(" (drink "..snd.cur.drink..")")
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  elseif snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send("drink "..snd.cur.drink)
    echo(" (drink "..snd.cur.drink..")")
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  end
 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>herb</name>
							<packageName></packageName>
							<script>
function snd.do_herb(current)
 if gmcp.Char.Vitals.herb == "1" and not snd.waiting.herb and snd.can_eat() then
  if snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.cur.herb = snd.afflictions[current].cures.herb
   else
    return
   end
  else
   if snd.defenses[current].state == "down" and snd.defenses[current].needit then
    snd.cur.herb = snd.defenses[current].balance.herb
   else
    return
   end
  end
  if snd.have_slow() then
   if snd.afflictions[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.herb(current)
     return
    elseif snd.not_entangled() then
     snd.send("outr "..snd.cur.herb)
     return
    else
     return
    end
   elseif snd.defenses[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.herb(current)
     return
    elseif snd.not_entangled() then
     snd.send("outr "..snd.cur.herb)
     return
    else
     return
    end
   end
  elseif snd.not_entangled() then
   if snd.afflictions[current] ~= nil then
    snd.send("outr "..snd.cur.herb)
    snd.herb(current)
   elseif snd.defenses[current] ~= nil then
    snd.send("outr "..snd.cur.herb)
    snd.herb(current)
   end
  else
   if snd.afflictions[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.herb(current)
    end
   elseif snd.defenses[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.herb(current)
    end
   end
  end
 end
end

function snd.herb(current)
 if snd.afflictions[current] ~= nil then
  snd.cur.herb = snd.afflictions[current].cures.herb
 else
  snd.cur.herb = snd.defenses[current].balance.herb
 end
 if snd.afflictions[current] ~= nil then
  snd.send("eat "..snd.cur.herb)
  echo("(eat "..snd.cur.herb..")")
  snd.last_type = "herb"
  snd.last_item = snd.cur.herb
  snd.waiting.herb = true
  tempTimer(snd.delay(), [[snd.waiting.herb = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 elseif snd.defenses[current] ~= nil then
  snd.send("eat "..snd.cur.herb)
  echo("(eat "..snd.cur.herb..")")
  snd.last_type = "herb"
  snd.last_item = snd.cur.herb
  snd.waiting.herb = true
  tempTimer(snd.delay(), [[snd.waiting.herb = false]])
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>vial</name>
							<packageName></packageName>
							<script>
function snd.do_vial(current)
 if gmcp.Char.Vitals.elixir == "1" and not snd.waiting.vial and snd.can_eat() then
  if snd.afflictions[current] ~= nil then
   snd.cur.vial = snd.afflictions[current].cures.vial
  else
   snd.cur.vial = snd.defenses[current].balance.vial
  end
  if snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" and snd.defenses[current].needit then
    snd.send("drink "..snd.cur.vial)
    echo(" (drink "..snd.cur.vial..")")
    snd.waiting.vial = true
    tempTimer(snd.delay(), [[snd.waiting.vial = false]])
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  elseif snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send("drink "..snd.cur.vial)
    echo(" (drink "..snd.cur.vial..")")
    snd.waiting.vial = true
    tempTimer(snd.delay(), [[snd.waiting.vial = false]])
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  end
 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>salve</name>
							<packageName></packageName>
							<script>
function snd.do_salve(current)
 if gmcp.Char.Vitals.salve == "1" and not snd.waiting.salve and snd.can_apply() then
  if snd.afflictions[current] ~= nil then
   snd.cur.salve = snd.afflictions[current].cures.salve
  else
   snd.cur.salve = snd.defenses[current].balance.salve
  end
  if snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send("apply "..snd.cur.salve)
    echo("(apply "..snd.cur.salve..")")
    snd.last_type = "salve"
    snd.last_item = snd.cur.salve
    snd.waiting.salve = true
    tempTimer(snd.delay(), [[snd.waiting.salve = false]])
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  elseif snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" then
    snd.send("apply "..snd.cur.salve.." to body")
    echo("(apply "..snd.cur.salve.." to body)")
    snd.last_type = "salve"
    snd.last_item = snd.cur.salve
    snd.waiting.salve = true
    tempTimer(snd.delay(), [[snd.waiting.salve = false]])
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  end
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>elixir</name>
							<packageName></packageName>
							<script>
function snd.do_elixir(current)
 if gmcp.Char.Vitals.elixir == "1" and not snd.waiting.elixir and snd.can_eat() then
  snd.send("sip "..snd.afflictions[current].cures.elixir)
  snd.waiting.elixir = true
  tempTimer(snd.delay(), [[snd.waiting.elixir = false]] )
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>moss</name>
							<packageName></packageName>
							<script>
function snd.do_moss(current)
 if gmcp.Char.Vitals.moss == "1" and not snd.waiting.moss and snd.can_eat() then
  snd.cur.herb = "moss"
  if snd.have_slow() then
   if snd.afflictions[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.send("eat "..snd.cur.herb)
     return
    elseif snd.not_entangled() then
     snd.send("outr "..snd.cur.herb)
     return
    else
     return
    end
   end
  elseif snd.not_entangled() then
   if snd.afflictions[current] ~= nil then
    snd.send("outr "..snd.cur.herb)
    snd.send("eat "..snd.cur.herb)
   elseif snd.defenses[current] ~= nil then
    snd.send("outr "..snd.cur.herb)
    snd.send("eat "..snd.cur.herb)
   end
  else
   if snd.afflictions[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.send("eat "..snd.cur.herb)
    end
   end
  end
  snd.waiting.moss = true
  tempTimer(snd.delay(), [[snd.waiting.moss = false]] )
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>writhe</name>
							<packageName></packageName>
							<script>
function snd.do_writhe(current)
 if snd.afflictions[current].state == "afflicted" and gmcp.Char.Vitals.writhing == "0" and (not snd.waiting.writhe) and (not string.find(current, "impale") or snd.full_balance()) then
  snd.send("writhe")
  echo("(writhe)")
  snd.last_type = "writhe"
  snd.last_item = "send"
  snd.waiting.writhe = true
  tempTimer(snd.delay(), [[snd.waiting.writhe = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>concentrate</name>
							<packageName></packageName>
							<script>
function snd.do_concentrate(current)
 if snd.afflictions[current].state == "afflicted" and not snd.waiting.concentrate then
  snd.send("concentrate")
  echo("(concentrate)")
  snd.last_type = "concentrate"
  snd.last_item = "send"
  snd.waiting.concentrate = true
  tempTimer(snd.delay(), [[snd.waiting.concentrate = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>other</name>
							<packageName></packageName>
							<script>
function snd.do_tree(current)
 limb = false
 if string.find(current, "_broken") then
  x = string.gsub(current, "_broken", "_damaged")
  y = string.gsub(current, "_broken", "_mangled")
  if snd.have_aff(x) or snd.have_aff(y) then
   limb = true
  end
 end
 if not limb and snd.afflictions[current].state == "afflicted" and gmcp.Char.Vitals.tree == "1" and not snd.waiting.tree and snd.can_tattoo() and not snd.have_aff("frostbrand") then
  snd.send("touch tree tattoo")
  echo("(touch tree tattoo)")
  snd.last_type = "tree"
  snd.last_item = "send"
  snd.waiting.tree = true
  tempTimer(snd.delay(), [[snd.waiting.tree = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end

function snd.do_focus(current)
 if snd.afflictions[current].state == "afflicted" and gmcp.Char.Vitals.focus == "1" and not snd.waiting.focus and snd.can_focus() then
  snd.send("focus")
  echo("(focus)")
  snd.last_type = "focus"
  snd.last_item = "send"
  snd.waiting.focus = true
  tempTimer(snd.delay(), [[snd.waiting.focus = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end

function snd.do_clot(current)
 if snd.afflictions[current].state == "afflicted" and not snd.waiting.clot and snd.toggles.clotting then
  mp = gmcp.Char.Vitals.mp
  mid = math.floor((gmcp.Char.Vitals.maxmp/100)*60)
  max = math.floor((mp-mid)/80)
  needed = math.floor(tonumber(gmcp.Char.Vitals.bleeding)/20)
  if max &lt; needed then
   x = max
  else
   x = needed
  end
  if x &gt; 0 then
   snd.send("clot "..x)
   echo("(clot*"..x..")")
   snd.last_type = "clot"
   snd.last_item = "send"
   snd.waiting.focus = true
   tempTimer(snd.delay(), [[snd.waiting.clot = false]])
   snd.afflictions[current].state = "waiting"
   startStopWatch(snd.afflictions[current].timer)
  end
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>smoke</name>
							<packageName></packageName>
							<script>
function snd.do_smoke(current)
 if snd.can_smoke() then
  if snd.pipes_lit or (not snd.toggles.lighting) then
   snd.smoke(current)
  elseif snd.have_slow() then
   if snd.afflictions[current] ~= nil then
    snd.send("light pipes", false)
   elseif snd.defenses[current] ~= nil then
    snd.send("light pipes", false)
    return
   end
  else
   snd.light_up()
   snd.smoke(current)
  end
 end
end

function snd.smoke(current)
 if snd.afflictions[current] ~= nil then
  snd.cur.pipe = snd.afflictions[current].cures.smoke
 else
  snd.cur.pipe = snd.defenses[current].balance.smoke
 end
 if snd.afflictions[current] ~= nil then
  if snd.afflictions[current].state == "afflicted" then
   snd.send("smoke "..snd.cur.pipe)
   echo("(smoke "..snd.cur.pipe..")")
   snd.last_type = "smoke"
   snd.last_item = snd.cur.pipe
   snd.afflictions[current].state = "waiting"
   startStopWatch(snd.afflictions[current].timer)
  end
 elseif snd.defenses[current] ~= nil then
  if snd.defenses[current].state == "down" and snd.defenses[current].needit then
   snd.send("smoke "..snd.cur.pipe)
   echo("(smoke "..snd.cur.pipe..")")
   snd.last_type = "smoke"
   snd.last_item = snd.cur.pipe
   snd.defenses[current].state = "waiting"
   startStopWatch(snd.defenses[current].timer)
  end
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>stand</name>
							<packageName></packageName>
							<script>
function snd.do_stand(current)
 if snd.afflictions[current].state == "afflicted" and snd.toggles.standing and (not snd.waiting.stand) and snd.full_balance() and snd.can_legs() then
  snd.send("stand")
  echo("(stand)")
  snd.last_type = "stand"
  snd.last_item = "send"
  snd.waiting.stand = true
  tempTimer(snd.delay(), [[snd.waiting.stand = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>fitness</name>
							<packageName></packageName>
							<script>
function snd.do_fitness()
 if snd.can_fitness() and snd.need_fitness and snd.full_balance() then
  snd.send("fitness")
  echo("(fitness)")
  snd.last_type = "fitness"
  snd.last_item = "fitness"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>purge</name>
							<packageName></packageName>
							<script>
function snd.do_purge()
 if snd.balance.purge and not snd.waiting.purge then
  if snd.have_aff("paresis") then
	 snd.send("firstaid elevate paresis")
	elseif snd.have_aff("paralysis") then
	 snd.send("firstaid elevate paralysis")
	else
   found_aff = false
   for aff in pairs(snd.physical_affs) do
	  if snd.have_aff(snd.physical_affs[aff]) then
		 if string.find(snd.physical_affs[aff], "_broken") then
		  local string = string.gsub(physical_affs[aff], "_broken")
			if snd.afflictions[string.."_damaged"].state == "healed" then
			 found_aff = true
			end
		 else
	    found_aff = true
		 end
	  end
	 end
	 if found_aff then
    snd.send("soul purge")
    echo("(soul purge)")
    snd.last_type = "purge"
    snd.last_item = "purge"
	 end
	end
	snd.waiting.purge = true
  tempTimer(snd.delay(), [[snd.waiting.purge = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>shrugging</name>
							<packageName></packageName>
							<script>
function snd.do_shrug()
 if snd.full_balance() and snd.need_fitness and snd.can_shrug() then
  snd.send("shrug asthma")
  echo("(shrug asthma)")
  snd.last_type = "shrug"
  snd.last_item = "shrug"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>purify</name>
							<packageName></packageName>
							<script>
function snd.do_purify()
 if snd.balance.purify and not snd.waiting.purify then
  if snd.have_aff("paresis") then
	 snd.send("firstaid elevate paresis")
	elseif snd.have_aff("paralysis") then
	 snd.send("firstaid elevate paralysis")
	else
   found_aff = false
   for aff in pairs(snd.physical_affs) do
	  if snd.have_aff(snd.physical_affs[aff]) then
		 if string.find(snd.physical_affs[aff], "_broken") then
		  local string = string.gsub(physical_affs[aff], "_broken")
			if snd.afflictions[string.."_damaged"].state == "healed" then
			 found_aff = true
			end
		 else
	    found_aff = true
		 end
	  end
	 end
	 if found_aff then
    snd.send("purify blood")
    echo("(purify blood)")
    snd.last_type = "purify"
    snd.last_item = "purify"
	 end
	end
	snd.waiting.purify = true
  tempTimer(snd.delay(), [[snd.waiting.purify = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>scour</name>
							<packageName></packageName>
							<script>
function snd.do_scour()
 if snd.balance.scour and not snd.waiting.scour then
  if snd.have_aff("paresis") then
	 snd.send("firstaid elevate paresis")
	elseif snd.have_aff("paralysis") then
	 snd.send("firstaid elevate paralysis")
	else
   found_aff = false
   for aff in pairs(snd.physical_affs) do
	  if snd.have_aff(snd.physical_affs[aff]) then
		 if string.find(snd.physical_affs[aff], "_broken") then
		  local string = string.gsub(physical_affs[aff], "_broken")
			if snd.afflictions[string.."_damaged"].state == "healed" then
			 found_aff = true
			end
		 else
	    found_aff = true
		 end
	  end
	 end
	 if found_aff then
    snd.send("sand scour")
    echo("(sand scour)")
    snd.last_type = "scour"
    snd.last_item = "scour"
	 end
	end
	snd.waiting.scour = true
  tempTimer(snd.delay(), [[snd.waiting.scour = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>aegis</name>
							<packageName></packageName>
							<script>
function snd.do_aegis()
 if snd.full_balance() then
  snd.send("manipulate pylon for aegis")
  snd.last_type = "aegis"
  snd.last_item = "aegis"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>rage</name>
							<packageName></packageName>
							<script>
function snd.do_rage()
 if snd.rage_check() and snd.can_rage() and snd.balance.rage then
  snd.send("rage")
  echo("(rage)")
  snd.last_type = "rage"
  snd.last_item = "rage"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end

function snd.rage_check()

  if not snd.balance.rage then return false end

  local rage_affs = {
  "aff_hubris",
  "aff_pacifism",
  "aff_peace",
  "aff_soulburn",
  "aff_soulfire",
  "aff_limp_veins",
  "aff_lovers_effect",
  "aff_laxity",
  "aff_superstition",
  "aff_generosity",
  "aff_justice",
  "aff_magnanimity",
  }
  
  for _, v in pairs(rage_affs) do
    if snd.have_aff(v) then
      return true
    end
  end
  return false
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>panacea</name>
							<packageName></packageName>
							<script>
function snd.do_panacea()
 if snd.balance.panacea and not snd.waiting.panacea then
  if snd.have_aff("paresis") then
	 snd.send("firstaid elevate paresis")
	elseif snd.have_aff("paralysis") then
	 snd.send("firstaid elevate paralysis")
	else
   found_aff = false
   for aff in pairs(snd.physical_affs) do
	  if snd.have_aff(snd.physical_affs[aff]) then
		 if string.find(snd.physical_affs[aff], "_broken") then
		  local string = string.gsub(physical_affs[aff], "_broken")
			if snd.afflictions[string.."_damaged"].state == "healed" then
			 found_aff = true
			end
		 else
	    found_aff = true
		 end
	  end
	 end
	 if found_aff then
    snd.send("nature panacea")
    echo("(nature panacea)")
    snd.last_type = "panacea"
    snd.last_item = "panacea"
	 end
	end
	snd.waiting.panacea = true
  tempTimer(snd.delay(), [[snd.waiting.panacea = false]])
 end
end</script>
							<eventHandlerList />
						</Script>
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Firstaid Help</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>Advanced Salve Curing</name>
								<packageName></packageName>
								<script>function snd.firstaidsalve()
	if snd.salvebal and not snd.have_aff("slickness") and not snd.have_aff("sandrot") and not snd.have_aff("void") and not snd.have_aff("weakvoid") and not snd.salveaffflag then
    if sndNDB.players[gmcp.Char.Status.name].tether == "Spirit" then
		  if #snd.shadow_targets &lt; 1 then 
  		  if snd.have_aff("pre_restore_torso") then
  			 snd.send("apply restoration to torso")
  		  elseif snd.have_aff("pre_restore_head") then
  			 snd.send("apply restoration to head")
    		elseif snd.have_aff("pre_restore_right_leg") then
    			snd.send("apply restoration to right leg")
    	 	elseif snd.have_aff("pre_restore_left_leg") then
    	  	snd.send("apply restoration to left leg")
  	   	elseif snd.have_aff("pre_restore_right_arm") then
  			  snd.sendt("apply restoration to right arm")
    		elseif snd.have_aff("pre_restore_left_arm") then
    			snd.send("apply restoration to left arm")
  	   	end
		  elseif #snd.shadow_targets &lt; 2 and not snd.salveaffflag and not snd.have_aff("asthma") and not snd.have_aff("clumsiness") then
  		  if snd.have_aff("pre_restore_torso") then
  			 snd.send("apply restoration to torso")
    		elseif snd.have_aff("pre_restore_head") then
    			snd.send("apply restoration to head")
  	 	  elseif snd.have_aff("pre_restore_right_leg") then
  		  	snd.send("apply restoration to right leg")
    		elseif snd.have_aff("pre_restore_left_leg") then
    			snd.send("apply restoration to left leg")
  	   	elseif snd.have_aff("pre_restore_right_arm") then
  			  snd.sendt("apply restoration to right arm")
  		  elseif snd.have_aff("pre_restore_left_arm") then
  			  snd.send("apply restoration to left arm")
    		end
		  end
    else
      if #snd.spirit_targets &lt; 1 then 
  		  if snd.have_aff("pre_restore_torso") then
  			 snd.send("apply restoration to torso")
  		  elseif snd.have_aff("pre_restore_head") then
  			 snd.send("apply restoration to head")
    		elseif snd.have_aff("pre_restore_right_leg") then
    			snd.send("apply restoration to right leg")
    	 	elseif snd.have_aff("pre_restore_left_leg") then
    	  	snd.send("apply restoration to left leg")
  	   	elseif snd.have_aff("pre_restore_right_arm") then
  			  snd.sendt("apply restoration to right arm")
    		elseif snd.have_aff("pre_restore_left_arm") then
    			snd.send("apply restoration to left arm")
  	   	end
		  elseif #snd.spirit_targets &lt; 2 and not snd.salveaffflag and not snd.have_aff("asthma") and not snd.have_aff("clumsiness") then
  		  if snd.have_aff("pre_restore_torso") then
  			 snd.send("apply restoration to torso")
    		elseif snd.have_aff("pre_restore_head") then
    			snd.send("apply restoration to head")
  	 	  elseif snd.have_aff("pre_restore_right_leg") then
  		  	snd.send("apply restoration to right leg")
    		elseif snd.have_aff("pre_restore_left_leg") then
    			snd.send("apply restoration to left leg")
  	   	elseif snd.have_aff("pre_restore_right_arm") then
  			  snd.sendt("apply restoration to right arm")
  		  elseif snd.have_aff("pre_restore_left_arm") then
  			  snd.send("apply restoration to left arm")
    		end
		  end
    end
	end
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>firstaidprioritylistset</name>
								<packageName></packageName>
								<script>function snd.firstaidprioritylistset()  	-- sets the levels from the initial Aetolia no cureset priority list

	snd.firstaidcuretrack = {}
  -- level 1
  -- pipe
  snd.firstaidcuretrack.aeon = "1"  
  -- salves
	snd.firstaidcuretrack.anorexia = "1"
	snd.firstaidcuretrack.indifference = "1"
	snd.firstaidcuretrack.destroyed_throat = "1"
  -- pills
	snd.firstaidcuretrack.crippled_body = "1"
	snd.firstaidcuretrack.paresis = "1"
	snd.firstaidcuretrack.paralysis = "1"
  -- special
  snd.firstaidcuretrack.asleep = "1"
  snd.firstaidcuretrack.voyria = "1"
	snd.firstaidcuretrack.writhe_gunk = "1"
  snd.firstaidcuretrack.writhe_grappled = "1"
  snd.firstaidcuretrack.writhe_stasis = "1"
  snd.firstaidcuretrack.writhe_web = "1"
  snd.firstaidcuretrack.writhe_vines = "1"
  snd.firstaidcuretrack.writhe_bind = "1"
  snd.firstaidcuretrack.writhe_transfix = "1"
  snd.firstaidcuretrack.writhe_ropes = "1"
  snd.firstaidcuretrack.writhe_impaled = "1"
  snd.firstaidcuretrack.writhe_thighlock = "1"
  snd.firstaidcuretrack.armpitlock = "1"
  snd.firstaidcuretrack.necklock = "1"
  snd.firstaidcuretrack.dazed = "1"
  snd.firstaidcuretrack.writhe_hoist = "1"
  snd.firstaidcuretrack.lure = "1"
  snd.firstaidcuretrack.itchy = "1"

  -- level 2
  -- pipe
	snd.firstaidcuretrack.slickness = "2"
	snd.firstaidcuretrack.hellsight = "2" 
  -- pill
	snd.firstaidcuretrack.asthma = "2"
	snd.firstaidcuretrack.ringing_ears = "2"
  snd.firstaidcuretrack.limp_veins = "2"
	-- salves
  snd.firstaidcuretrack.head_mangled = "2"
	snd.firstaidcuretrack.crushed_chest = "2"
  snd.firstaidcuretrack.burnt_skin = "2"
  snd.firstaidcuretrack.head_bruised_critical = "2"
  -- special
  snd.firstaidcuretrack.disrupted = "2"
  
	-- level 3
  -- pipe
  snd.firstaidcuretrack.withering = "3"
  -- salve
  snd.firstaidcuretrack.left_arm_amputated = "3"
  snd.firstaidcuretrack.right_arm_amputated = "3"
  snd.firstaidcuretrack.left_leg_amputated = "3"
  snd.firstaidcuretrack.right_leg_amputated = "3"
  snd.firstaidcuretrack.left_arm_damaged = "3"
  snd.firstaidcuretrack.right_arm_damaged = "3"
  snd.firstaidcuretrack.left_leg_damaged = "3"		
  snd.firstaidcuretrack.right_leg_damaged = "3"
  snd.firstaidcuretrack.right_leg_mangled = "3"
  snd.firstaidcuretrack.left_leg_mangled = "3"
  snd.firstaidcuretrack.right_arm_mangled = "3"
  snd.firstaidcuretrack.left_arm_mangled = "3"	
  snd.firstaidcuretrack.left_leg_bruised_critical = "3"
  snd.firstaidcuretrack.right_leg_bruised_critical = "3"
  snd.firstaidcuretrack.right_arm_bruised_critical = "3"
  snd.firstaidcuretrack.left_arm_bruised_critical = "3"
  snd.firstaidcuretrack.torso_bruised_critical = "3"	
  snd.firstaidcuretrack.voidgaze = "3"													
  -- pill
	snd.firstaidcuretrack.clumsiness = "3"	
	snd.firstaidcuretrack.sandrot = "3"
	snd.firstaidcuretrack.thin_blood = "3"		
	snd.firstaidcuretrack.nyctophobbia = "3"	
	-- special
  snd.firstaidcuretrack.vinethorns = "3"
  -- level 4
  -- pipe
	snd.firstaidcuretrack.disfigurement = "4"
	snd.firstaidcuretrack.migraine = "4"
  -- salve
  snd.firstaidcuretrack.left_leg_broken = "4"
  snd.firstaidcuretrack.right_leg_broken = "4"
  snd.firstaidcuretrack.right_arm_broken = "4"
  snd.firstaidcuretrack.left_arm_broken = "4"
  snd.firstaidcuretrack.firstaid_predict_arms = "4"
  snd.firstaidcuretrack.firstaid_predict_legs = "4"
  snd.firstaidcuretrack.firstaid_predict_any_limb = "4"
  snd.firstaidcuretrack.torso = "4"
  snd.firstaidcuretrack.pretorso = "1" 
  -- pill
	snd.firstaidcuretrack.baldness = "4"
	snd.firstaidcuretrack.hypochondria = "4"
	snd.firstaidcuretrack.impatience = "4"
	snd.firstaidcuretrack.infested = "4"
	snd.firstaidcuretrack.mirroring = "4"
	snd.firstaidcuretrack.pacifism = "4"
	snd.firstaidcuretrack.patterns = "4"
	snd.firstaidcuretrack.recklessness = "4"
	snd.firstaidcuretrack.weariness = "4"
  
  -- level 5
	-- pipe
  snd.firstaidcuretrack.deadening = "5"
  -- salve
  snd.firstaidcuretrack.spinal_rip = "5"
  snd.firstaidcuretrack.head_damaged = "5"
  snd.firstaidcuretrack.torso_damaged = "5"
  snd.firstaidcuretrack.torso_mangled = "5"
  snd.firstaidcuretrack.left_arm_bruised = "5"
  snd.firstaidcuretrack.right_arm_bruised = "5"
  snd.firstaidcuretrack.left_leg_bruised = "5"
  snd.firstaidcuretrack.right_leg_bruised = "5"
  snd.firstaidcuretrack.head_bruised = "5"
  snd.firstaidcuretrack.torso_bruised = "5"
  snd.firstaidcuretrack.left_leg_bruised_moderate = "5"
  snd.firstaidcuretrack.right_leg_bruised_moderate = "5"
  snd.firstaidcuretrack.right_arm_bruised_moderate = "5"
  snd.firstaidcuretrack.left_arm_bruised_moderate = "5"
  snd.firstaidcuretrack.torso_bruised_moderate = "5"
  snd.firstaidcuretrack.head_bruised_moderate = "5"
  snd.firstaidcuretrack.gloom = "5"
  -- pill
	snd.firstaidcuretrack.blighted = "5"
	snd.firstaidcuretrack.blood_curse = "5"
	snd.firstaidcuretrack.blood_poison = "5"
	snd.firstaidcuretrack.confusion = "5"
	snd.firstaidcuretrack.idiocy = "5"
	snd.firstaidcuretrack.mental_disruption = "5"
	snd.firstaidcuretrack.merciful = "5"
	snd.firstaidcuretrack.physical_disruption = "5"
	snd.firstaidcuretrack.plodding = "5"
	snd.firstaidcuretrack.soulfire = "5"
  snd.firstaidcuretrack.soulburn = "5"	
	--special 
  --none
	
  -- level 6
  -- pipe
  snd.firstaidcuretrack.squelched = "6"
  -- salve
	snd.firstaidcuretrack.shivering = "6"
	snd.firstaidcuretrack.frozen = "6"	  
	snd.firstaidcuretrack.gorged = "6"
  snd.firstaidcuretrack.effused_blood = "6"
  snd.firstaidcuretrack.blurry_vision = "6"
  snd.firstaidcuretrack.smashed_throat = "6"
 	snd.firstaidcuretrack.cracked_ribs = "6"
	snd.firstaidcuretrack.whiplash = "6"
  snd.firstaidcuretrack.backstrain = "6"
	snd.firstaidcuretrack.collapsed_lung = "6"
	snd.firstaidcuretrack.left_arm_dislocated = "6"
	snd.firstaidcuretrack.left_leg_dislocated = "6"
	snd.firstaidcuretrack.right_arm_dislocated = "6"
	snd.firstaidcuretrack.right_leg_dislocated = "6"
	snd.firstaidcuretrack.sore_wrist = "6"
	snd.firstaidcuretrack.sore_ankle = "6"
	snd.firstaidcuretrack.muscle_spasms = "6"
 	snd.firstaidcuretrack.heatspear = "6"     
  -- pill 
  snd.firstaidcuretrack.sensitivity = "6"
  snd.firstaidcuretrack.rend = "6"
  snd.firstaidcuretrack.epilepsy = "6"
  snd.firstaidcuretrack.masochism = "6"
  snd.firstaidcuretrack.loneliness = "6"
  snd.firstaidcuretrack.haemophilia = "6"
  snd.firstaidcuretrack.lethargy = "6"
  snd.firstaidcuretrack.vomiting = "6"
  snd.firstaidcuretrack.impairment = "6"
  snd.firstaidcuretrack.crippled = "6"
	snd.firstaidcuretrack.allergies = "6"
	snd.firstaidcuretrack.shaderot_body = "6"
	snd.firstaidcuretrack.shaderot_benign = "6"
	snd.firstaidcuretrack.shaderot_spirit = "6"
	snd.firstaidcuretrack.shaderot_heat = "6"
	snd.firstaidcuretrack.shaderot_wither = "6"
  -- special none
  
  -- level 7
	-- pipe noen
  -- salve
  snd.firstaidcuretrack.ablaze = "7"
	snd.firstaidcuretrack.hypothermia = "7"	
  snd.firstaidcuretrack.stuttering = "7"
	snd.firstaidcuretrack.crippled_throat = "7"
  snd.firstaidcuretrack.mauled_face = "7"
  snd.firstaidcuretrack.deepwound = "7"
  snd.firstaidcuretrack.stiffness = "7"
  snd.firstaidcuretrack.weak_group = "7"
  snd.firstaidcuretrack.leftarm = "7"
  snd.firstaidcuretrack.preleftarm = "20"
  snd.firstaidcuretrack.rightarm = "7"
  snd.firstaidcuretrack.prerightarm = "20" 
  snd.firstaidcuretrack.rightleg = "7"
  snd.firstaidcuretrack.prerightleg = "20"
  snd.firstaidcuretrack.leftleg = "7"
  snd.firstaidcuretrack.preleftleg = "20"  
  -- pill  
  snd.firstaidcuretrack.stupidity = "7"
  snd.firstaidcuretrack.heartflutter = "7"
  snd.firstaidcuretrack.hallucinations = "7"
  snd.firstaidcuretrack.hypersomnia = "7"
  snd.firstaidcuretrack.hatred = "7"
  snd.firstaidcuretrack.peace = "7"
	snd.firstaidcuretrack.berserking = "7"
  snd.firstaidcuretrack.justice = "7"
  snd.firstaidcuretrack.lovers_effect = "7"
  snd.firstaidcuretrack.laxity = "7"
	snd.firstaidcuretrack.egocentric = "7"
	snd.firstaidcuretrack.exhausted = "7"
	-- special
  snd.firstaidcuretrack.premonition = "7"	
  -- level 8
	-- salves
	snd.firstaidcuretrack.head = "8"
  snd.firstaidcuretrack.prehead = "15"
	snd.firstaidcuretrack.burnt_eyes = "8"	
	snd.firstaidcuretrack.lightwound = "8"
  -- pill  
  snd.firstaidcuretrack.dementia = "8"
  snd.firstaidcuretrack.paranoia = "8"
  snd.firstaidcuretrack.dizziness = "8"
  snd.firstaidcuretrack.shyness = "8"
  snd.firstaidcuretrack.dissonance = "8"
	snd.firstaidcuretrack.agoraphobia = "8"
  snd.firstaidcuretrack.vertigo = "8"
	snd.firstaidcuretrack.claustrophobia = "8"
	snd.firstaidcuretrack.faintness = "8"
	-- special
  snd.firstaidcuretrack.fear = "8"
	
  -- level 9
  -- pill
  snd.firstaidcuretrack.sadness = "9"
  snd.firstaidcuretrack.addiction = "9"
  snd.firstaidcuretrack.self_pity = "9"
	snd.firstaidcuretrack.commitment_fear = "9"
	snd.firstaidcuretrack.hubris = "9"
	snd.firstaidcuretrack.body_odor = "9"
  snd.firstaidcuretrack.magnanimity = "9"
	
  -- level 10	
	-- pill
  snd.firstaidcuretrack.generosity = "10"
  snd.firstaidcuretrack.superstition = "10"
  snd.firstaidcuretrack.blisters = "10"
	-- special
  snd.firstaidcuretrack.oiled = "10"
  -- level 11
  -- salve	
  snd.firstaidcuretrack.void = "11"
  snd.firstaidcuretrack.weakvoid = "11"
  -- Things we don't want cured unless other
  snd.firstaidcuretrack.embedded_axe = "12"
	
end
</script>
								<eventHandlerList />
								<Script isActive="yes" isFolder="no">
									<name>Firstaid class assist</name>
									<packageName></packageName>
									<script>function snd.firstaidassist()

if gmcp.Char.Vitals.equilibrium == "1" and gmcp.Char.Vitals.balance == "1" and gmcp.Char.Vitals.left_arm == "1" and gmcp.Char.Vitals.right_arm == "1" and not snd.have_aff("blackout") then 
	snd.sync = true 
end

if snd.toggles.active then
	if #snd.people_hitting_me &gt; 1 then
		if snd.firstaidcureset ~= "none" then
			send("firstaid cureset switch none")
		end
		if snd.firstaidchangecure then
			snd.firstaidresetlistnone()
		end
	elseif #snd.people_hitting_me == 0 then
		if snd.firstaidcureset ~= "none" then
			send("firstaid cureset switch none")
		end
		if snd.firstaidchangecure then
			snd.firstaidresetlistnone()
		end
	elseif snd.class_hitting == "archivist" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassArchivist()
		
	elseif snd.class_hitting == "luminary" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassLuminary()	
	
	elseif snd.class_hitting == "sentinel" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassSentinel()
	
	elseif snd.class_hitting == "zealot" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidclassZealot()	
		
	elseif snd.class_hitting == "ascendril" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassAscendril()	
		
	elseif snd.class_hitting == "indorani" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassIndorani()	
		
	elseif snd.class_hitting == "monk" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassMonk()		
		
	elseif snd.class_hitting == "teradrim" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassTeradrim()			
		
	elseif snd.class_hitting == "carnifex" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassCarnifex()		
		
	elseif snd.class_hitting == "warden" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassWarden()					
		
	elseif snd.class_hitting == "templar" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassTemplar()				
		
	elseif snd.class_hitting == "sciomancer" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassSciomancer()				
		
	elseif snd.class_hitting == "shifter" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassShifter()				
		
	elseif snd.class_hitting == "praenomen" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassPraenomen()			
		
	elseif snd.class_hitting == "wayfarer" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassWayfarer()			
		
	elseif snd.class_hitting == "shaman" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassShaman()			
		
	elseif snd.class_hitting == "syssin" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassSyssin()				
		
	elseif snd.class_hitting == "revenant" and #snd.people_hitting_me &lt; 2 then
		snd.firstaidassRevenant()	
		
	end

	if not firstaidclassset then
		snd.firstaidclass()
		snd.firstaidclassset = true
	end
	
    if snd.have_aff("left_leg_broken") then
        snd.limbbrokencount = snd.limbbrokencount + 1
    end
    if snd.have_aff("right_leg_broken") then
        snd.limbbrokencount = snd.limbbrokencount + 1
    end
    if snd.have_aff("left_arm_broken") then
        snd.limbbrokencount = snd.limbbrokencount + 1
    end
    if snd.have_aff("right_arm_broken") then
        snd.limbbrokencount = snd.limbbrokencount + 1
    end
    
  if snd.have_aff("ravaged") and snd.firstprerestore then
		send("firstaid prestore off")
	elseif not snd.firstprerestore and not snd.have_aff("ravaged") then
		send("firstaid prestore on")
	end
  
  if snd.salveaffflag then
		if not snd.have_aff("slickness") then
			if not snd.kaicripple and not (snd.have_aff("left_arm_damaged") or snd.have_aff("right_arm_damaged")) then 
				send("queue salve " ..snd.salvapplytype.. " " ..snd.mendingtype.. " arms") 
			elseif not snd.kaicripple and not (snd.have_aff("left_leg_damaged") or snd.have_aff("right_leg_damaged")) then 
				send("queue salve " ..snd.salvapplytype.. " " ..snd.mendingtype.. " legs")
			end
		end
	end
	

	if snd.sync and (snd.have_aff("sandrot") or snd.have_aff("slickness")) and snd.class_hitting == "indorani" and #snd.limbbrokencount &gt; 2 then
		snd.send("qeb restore")
		snd.sync = false
	end

end

end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>Firstaid class being attacked by</name>
									<packageName></packageName>
									<script>function snd.firstaidassArchivist()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.merciful ~= "3" then
		send("firstaid priority merciful 3")
	end	
	if snd.firstaidcuretrack.patterns ~= "2" then
		send("firstaid priority patterns 2")
	end	
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassAscendril()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.anorexia ~= "2" then
		send("firstaid priority anorexia 2")
	end	  
  if snd.firstaidcuretrack.indifference ~= "3" then
		send("firstaid priority indifference 3")
	end	 
  if snd.firstaidcuretrack.gorged ~= "3" then
		send("firstaid priority gorged 3")
	end	 
	if snd.firstaidcuretrack.frozen ~= "4" then
		send("firstaid priority frozen 4")
	end	 
	if snd.firstaidcuretrack.torso ~= "4" and snd.firstaidcuretrack.pretorso ~= "1" then
		 send("FIRSTAID PRIORITY PRESTORE torso 1% 4")
	end  
	if snd.firstaidcuretrack.hypothermia ~= "5" then
		send("firstaid priority hypothermia 5")
	end	
	if snd.firstaidcuretrack.left_leg_broken ~= "5" then
		send("firstaid priority left_leg_broken 5")
	end	
	if snd.firstaidcuretrack.right_leg_broken ~= "5" then
		send("firstaid priority right_leg_broken 5")
	end	
	if snd.firstaidcuretrack.shivering ~= "6" then
		send("FIRSTAID PRIORITY shivering 6")
	end
	if snd.firstaidcuretrack.ablaze ~= "7" then
		send("FIRSTAID PRIORITY ablaze 7")
	end
	if snd.firstaidcuretrack.left_arm_broken ~= "8" then
		send("firstaid priority left_arm_broken 8")
	end	  
	if snd.firstaidcuretrack.right_arm_broken ~= "8" then
		send("firstaid priority right_arm_broken 8")
	end	  
	if snd.firstaidcuretrack.head_damaged ~= "9" then
		send("FIRSTAID PRIORITY head_damaged 9")
	end
	if snd.firstaidcuretrack.head_mangled ~= "9" then
		send("FIRSTAID PRIORITY head_mangled 9")
	end
	if snd.firstaidcuretrack.rightleg ~= "11" and snd.firstaidcuretrack.prerightleg ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE right leg 17% 11")
	end  
	if snd.firstaidcuretrack.leftleg ~= "11" and snd.firstaidcuretrack.preleftleg ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE left leg 17% 11")
	end  
  if snd.firstaidcuretrack.leftarm ~= "12" or snd.firstaidcuretrack.preleftarm ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE left arm 17% 12")
	end
	if snd.firstaidcuretrack.rightarm ~= "12" and snd.firstaidcuretrack.prerightarm ~= "17" then
		send("FIRSTAID PRIORITY PRESTORE right arm 17% 12")
	end
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassIndorani()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "3" then
		send("firstaid priority paresis 3")
	end	
	snd.firstaidchangecure = false  -- keep last	
end


function snd.firstaidassLuminary()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.soulfire ~= "3" then
		send("firstaid priority soulfire 3")
	end	
	if snd.firstaidcuretrack.soulburn ~= "3" then
		send("firstaid priority soulburn 3")
	end	
	if snd.firstaidcuretrack.pacifism ~= "3" then
		send("firstaid priority pacifism 3")
	end	
	if snd.firstaidcuretrack.peace ~= "4" then
		send("firstaid priority peace 4")
	end	
	
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassMonk()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.anorexia ~= "5" then
		send("firstaid priority anorexia 5")
	end	
	Msys.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassSentinel()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "1" then
		send("firstaid priority paresis 1")
	end	
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassZealot()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.heatspear ~= "3" then
		send("firstaid priority heatspear 3")
	end	
	if snd.firstaidcuretrack.ablaze ~= "4" then
		send("firstaid priority ablaze 4")
	end	
	if snd.firstaidcuretrack.torso_damaged ~= "2" then
		send("firstaid priority torso_damaged 2")
	end
  if snd.firstaidcuretrack.crippled_throat ~= "5" then
		send("firstaid priority crippled_throat 5")
	end	
	if snd.firstaidcuretrack.left_arm ~= "7" and snd.firstaidcuretrack.preleftarm ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE left arm 20% 7")
	end
	if snd.firstaidcuretrack.rightarm ~= "7" and snd.firstaidcuretrack.prerightarm ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE right arm 20% 7")
	end
	if snd.firstaidcuretrack.rightleg ~= "7" and snd.firstaidcuretrack.prerightleg ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE right leg 20% 7")
	end
	if snd.firstaidcuretrack.left_leg ~= "7" and snd.firstaidcuretrack.preleftleg ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE left leg 20% 7")
	end
	if snd.firstaidcuretrack.head ~= "8" and snd.firstaidcuretrack.prehead ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE head 20% 8")
	end
	snd.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassShifter()
  if snd.firstaidcuretrack.left_arm ~= "6" and snd.firstaidcuretrack.preleftarm ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE left arm 20% 6")
	end
	if snd.firstaidcuretrack.rightarm ~= "6" and snd.firstaidcuretrack.prerightarm ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE right arm 20% 6")
	end
	if snd.firstaidcuretrack.rightleg ~= "2" and snd.firstaidcuretrack.prerightleg ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE right leg 20% 2")
	end
	if snd.firstaidcuretrack.left_leg ~= "2" and snd.firstaidcuretrack.preleftleg ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE left leg 20% 2")
	end
	if snd.firstaidcuretrack.head ~= "6" and snd.firstaidcuretrack.prehead ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE head 20% 6")
	end
  if snd.firstaidcuretrack.torso ~= "8" and snd.firstaidcuretrack.pretorso ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE torso 20% 6")
	end
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.paresis ~= "3" then
		send("firstaid priority paresis 3")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.impairment ~= "2" then
		send("firstaid priority impairment 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "1" then
		send("firstaid priority anorexia 1")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.plodding ~= "3" then
		send("firstaid priority plodding 3")
	end		
	if snd.firstaidcuretrack.blurry_vision ~= "3" then
		send("firstaid priority blurry_vision 3")
	end		
	if snd.firstaidcuretrack.rend ~= "4" then
		send("firstaid priority rend 4")
	end	
	snd.firstaidchangecure = false  -- keep last
end
function snd.firstaidassWayfarer()
  if snd.firstaidcuretrack.left_arm ~= "6" and snd.firstaidcuretrack.preleftarm ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE left arm 20% 6")
	end
	if snd.firstaidcuretrack.rightarm ~= "6" and snd.firstaidcuretrack.prerightarm ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE right arm 20% 6")
	end
	if snd.firstaidcuretrack.rightleg ~= "2" and snd.firstaidcuretrack.prerightleg ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE right leg 20% 2")
	end
	if snd.firstaidcuretrack.left_leg ~= "2" and snd.firstaidcuretrack.preleftleg ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE left leg 20% 2")
	end
	if snd.firstaidcuretrack.head ~= "6" and snd.firstaidcuretrack.prehead ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE head 20% 6")
	end
  if snd.firstaidcuretrack.torso ~= "8" and snd.firstaidcuretrack.pretorso ~= "20" then
		send("FIRSTAID PRIORITY PRESTORE torso 20% 6")
	end
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.paresis ~= "3" then
		send("firstaid priority paresis 3")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.impairment ~= "2" then
		send("firstaid priority impairment 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "1" then
		send("firstaid priority anorexia 1")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.plodding ~= "3" then
		send("firstaid priority plodding 3")
	end		
	if snd.firstaidcuretrack.blurry_vision ~= "3" then
		send("firstaid priority blurry_vision 3")
	end		
	if snd.firstaidcuretrack.rend ~= "4" then
		send("firstaid priority rend 4")
	end	
  if snd.firstaidcuretrack.exhausted ~= "26" then
		send("firstaid priority exhausted 26")
  end
	snd.firstaidchangecure = false  -- keep last
end

function snd.firstaidassCarnifex()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.left_arm ~= "8" and snd.firstaidcuretrack.preleftarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left arm 19% 8")
	end
	if snd.firstaidcuretrack.rightarm ~= "8" and snd.firstaidcuretrack.prerightarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right arm 19% 8")
	end
	if snd.firstaidcuretrack.rightleg ~= "8" and snd.firstaidcuretrack.prerightleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right leg 19% 8")
	end
	if snd.firstaidcuretrack.left_leg ~= "8" and snd.firstaidcuretrack.preleftleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left leg 19% 8")
	end
	if snd.firstaidcuretrack.head ~= "8" and snd.firstaidcuretrack.prehead ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE head 19% 8")
	end
  if snd.firstaidcuretrack.torso ~= "8" and snd.firstaidcuretrack.pretorso ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE torso 19% 8")
	end	
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.paresis ~= "2" then
		send("firstaid priority paresis 2")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.slickness ~= "2" then
		send("firstaid priority slickness 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "2" then
		send("firstaid priority anorexia 2")
	end	
	if snd.firstaidcuretrack.asthma ~= "2" then
		send("firstaid priority asthma 2")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.crushed_chest ~= "3" then
		send("firstaid priority crushed_chest 3")
	end		
	if snd.firstaidcuretrack.weariness ~= "3" then
		send("firstaid priority weariness 3")
	end		
	if snd.firstaidcuretrack.impairment ~= "3" then
		send("firstaid priority impairment 3")
	end	
	if snd.firstaidcuretrack.hypochondria ~= "3" then
		send("firstaid priority hypochondria 3")
	end
	if snd.firstaidcuretrack.sensitivity ~= "3" then
		send("firstaid priority sensitivity 3")
	end
	if snd.firstaidcuretrack.crippled ~= "3" then
		send("firstaid priority crippled 3")
	end
	Msys.firstaidchangecure = false  -- keep last	
end


function snd.firstaidassWarden()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.left_arm ~= "8" and snd.firstaidcuretrack.preleftarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left arm 19% 8")
	end
	if snd.firstaidcuretrack.rightarm ~= "8" and snd.firstaidcuretrack.prerightarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right arm 19% 8")
	end
	if snd.firstaidcuretrack.rightleg ~= "8" and snd.firstaidcuretrack.prerightleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right leg 19% 8")
	end
	if snd.firstaidcuretrack.left_leg ~= "8" and snd.firstaidcuretrack.preleftleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left leg 19% 8")
	end
	if snd.firstaidcuretrack.head ~= "8" and snd.firstaidcuretrack.prehead ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE head 19% 8")
	end
  if snd.firstaidcuretrack.torso ~= "8" and snd.firstaidcuretrack.pretorso ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE torso 19% 8")
	end	
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.paresis ~= "2" then
		send("firstaid priority paresis 2")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.slickness ~= "2" then
		send("firstaid priority slickness 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "2" then
		send("firstaid priority anorexia 2")
	end	
	if snd.firstaidcuretrack.asthma ~= "2" then
		send("firstaid priority asthma 2")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.crushed_chest ~= "3" then
		send("firstaid priority crushed_chest 3")
	end		
	if snd.firstaidcuretrack.weariness ~= "3" then
		send("firstaid priority weariness 3")
	end		
	if snd.firstaidcuretrack.impairment ~= "3" then
		send("firstaid priority impairment 3")
	end	
	if snd.firstaidcuretrack.hypochondria ~= "3" then
		send("firstaid priority hypochondria 3")
	end
	if snd.firstaidcuretrack.sensitivity ~= "3" then
		send("firstaid priority sensitivity 3")
	end
	if snd.firstaidcuretrack.crippled ~= "3" then
		send("firstaid priority crippled 3")
	end
	Msys.firstaidchangecure = false  -- keep last	
end


function snd.firstaidassTemplar()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.left_arm ~= "8" and snd.firstaidcuretrack.preleftarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left arm 19% 8")
	end
	if snd.firstaidcuretrack.rightarm ~= "8" and snd.firstaidcuretrack.prerightarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right arm 19% 8")
	end
	if snd.firstaidcuretrack.rightleg ~= "8" and snd.firstaidcuretrack.prerightleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right leg 19% 8")
	end
	if snd.firstaidcuretrack.left_leg ~= "8" and snd.firstaidcuretrack.preleftleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left leg 19% 8")
	end
	if snd.firstaidcuretrack.head ~= "8" and snd.firstaidcuretrack.prehead ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE head 19% 8")
	end
  if snd.firstaidcuretrack.torso ~= "8" and snd.firstaidcuretrack.pretorso ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE torso 19% 8")
	end	
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.paresis ~= "2" then
		send("firstaid priority paresis 2")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.slickness ~= "2" then
		send("firstaid priority slickness 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "2" then
		send("firstaid priority anorexia 2")
	end	
	if snd.firstaidcuretrack.asthma ~= "2" then
		send("firstaid priority asthma 2")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.crushed_chest ~= "3" then
		send("firstaid priority crushed_chest 3")
	end		
	if snd.firstaidcuretrack.weariness ~= "3" then
		send("firstaid priority weariness 3")
	end		
	if snd.firstaidcuretrack.impairment ~= "3" then
		send("firstaid priority impairment 3")
	end	
	if snd.firstaidcuretrack.hypochondria ~= "3" then
		send("firstaid priority hypochondria 3")
	end
	if snd.firstaidcuretrack.sensitivity ~= "3" then
		send("firstaid priority sensitivity 3")
	end
	if snd.firstaidcuretrack.crippled ~= "3" then
		send("firstaid priority crippled 3")
	end
	Msys.firstaidchangecure = false  -- keep last	
end


function snd.firstaidassRevenant()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.left_arm ~= "8" and snd.firstaidcuretrack.preleftarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left arm 19% 8")
	end
	if snd.firstaidcuretrack.rightarm ~= "8" and snd.firstaidcuretrack.prerightarm ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right arm 19% 8")
	end
	if snd.firstaidcuretrack.rightleg ~= "8" and snd.firstaidcuretrack.prerightleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE right leg 19% 8")
	end
	if snd.firstaidcuretrack.left_leg ~= "8" and snd.firstaidcuretrack.preleftleg ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE left leg 19% 8")
	end
	if snd.firstaidcuretrack.head ~= "8" and snd.firstaidcuretrack.prehead ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE head 19% 8")
	end
  if snd.firstaidcuretrack.torso ~= "8" and snd.firstaidcuretrack.pretorso ~= "19" then
		send("FIRSTAID PRIORITY PRESTORE torso 19% 8")
	end	
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "2" then
		snd.setting_priority = "left_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "2" then
		snd.setting_priority = "right_leg_bruised_critical 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "2" then
		snd.setting_priority = "left_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "2" then
		snd.setting_priority = "right_arm_bruised_critical 2"
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "2" then
		snd.setting_priority = "torso_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "2" then
		snd.setting_priority = "head_bruised_critical 2"
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "2" then
		snd.setting_priority = "head_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "left_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "2" then
		snd.setting_priority = "right_leg_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "left_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "2" then
		snd.setting_priority = "right_arm_bruised_moderate 2"
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "2" then
		snd.setting_priority = "torso_bruised_moderate 2"
  end
	if snd.firstaidcuretrack.paresis ~= "2" then
		send("firstaid priority paresis 2")
	end	
	if snd.firstaidcuretrack.paralysis ~= "1" then
		send("firstaid priority paralysis 1")
	end	
	if snd.firstaidcuretrack.slickness ~= "2" then
		send("firstaid priority slickness 2")
	end	
	if snd.firstaidcuretrack.anorexia ~= "2" then
		send("firstaid priority anorexia 2")
	end	
	if snd.firstaidcuretrack.asthma ~= "2" then
		send("firstaid priority asthma 2")
	end	
	if snd.firstaidcuretrack.ringing_ears ~= "2" then
		send("firstaid priority ringing_ears 2")
	end	
	if snd.firstaidcuretrack.clumsiness ~= "2" then
		send("firstaid priority clumsiness 2")
	end	
	if snd.firstaidcuretrack.crushed_chest ~= "3" then
		send("firstaid priority crushed_chest 3")
	end		
	if snd.firstaidcuretrack.weariness ~= "3" then
		send("firstaid priority weariness 3")
	end		
	if snd.firstaidcuretrack.impairment ~= "3" then
		send("firstaid priority impairment 3")
	end	
	if snd.firstaidcuretrack.hypochondria ~= "3" then
		send("firstaid priority hypochondria 3")
	end
	if snd.firstaidcuretrack.sensitivity ~= "3" then
		send("firstaid priority sensitivity 3")
	end
	if snd.firstaidcuretrack.crippled ~= "3" then
		send("firstaid priority crippled 3")
	end
	Msys.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassTeradrim()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "1" then
		send("firstaid priority paresis 1")
	end	
	Msys.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassSciomancer()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "1" then
		send("firstaid priority paresis 1")
	end	
	Msys.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassPraenomen()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "1" then
		send("firstaid priority paresis 1")
	end		
	Msys.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassShaman()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "1" then
		send("firstaid priority paresis 1")
	end	
	Msys.firstaidchangecure = false  -- keep last	
end

function snd.firstaidassSyssin()  -- curing based on class being attacked by
	if snd.firstaidcuretrack.paresis ~= "1" then
		send("firstaid priority paresis 1")
	end	
	Msys.firstaidchangecure = false  -- keep last	
end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>Firstaid defense</name>
									<packageName></packageName>
									<script>function snd.firstaiddefenceset()
	tempTimer(2, [[send("firstaid priority defence insulation 7##firstaid priority defence density 1##firstaid priority defence temperance 4##firstaid priority defence levitation 3##firstaid priority defence speed 2##firstaid priority defence venom_resistance 5##firstaid priority defence fangbarrier 1##firstaid priority defence insomnia 1##firstaid priority defence instawake 3##firstaid priority defence waterbreathing 3##firstaid priority defence deafness 4##firstaid priority defence blindness 3")]])	

end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>Class being used</name>
									<packageName></packageName>
									<script>
function snd.firstaidclass()  -- priority based on class being used, must add to firstaidresetlistnone
	if snd.class == "Shaman" and not snd.firstaidclassset then
		send("firstaid priority paresis 1")
		snd.firstaidclassset = true
		
	elseif snd.class == "Archivist" and not snd.firstaidclassset then
		send("firstaid priority paresis 1")
		snd.firstaidclassset = true
		
	elseif snd.class == "Teradrim" and not snd.firstaidclassset then
		if not snd.class_hitting == "indorani" then
      send("firstaid priority paresis 1")
    end
		snd.firstaidclassset = true
	end

end</script>
									<eventHandlerList />
								</Script>
								<Script isActive="yes" isFolder="no">
									<name>firstaidresetlistnone</name>
									<packageName></packageName>
									<script>
function snd.firstaidresetlistnone()

  if snd.firstaidcuretrack.blindness ~= "3" then
    snd.setting_priority = "defence blindness 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.crippled_body ~= "1" then
		snd.setting_priority = "crippled_body 1"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.paralysis ~= "1" then
		snd.setting_priority = "paralysis 1"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.burnt_skin ~= "1" then
		snd.setting_priority = "burnt_skin 1"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_hoist ~= "1" then
    snd.setting_priority = "writhe_hoist 1"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.asthma ~= "2" then
		snd.setting_priority = "asthma 2"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.ringing_ears ~= "2" then
		snd.setting_priority = "ringing_ears 2"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.clumsiness ~= "2" then
		snd.setting_priority = "clumsiness 2"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.destroyed_throat ~= "2" then
		snd.setting_priority = "destroyed_throat 2"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.anorexia ~= "2" then
		snd.setting_priority = "anorexia 2"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_impaled ~= "2" then
    snd.setting_priority = "writhe_impaled 2"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.frozen ~= "3" then
		snd.setting_priority = "frozen 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.indifference ~= "3" then
		snd.setting_priority = "indifference 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.crushed_chest ~= "3" then
		snd.setting_priority = "crushed_chest 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.paresis ~= "3" and not snd.class == "Shaman" and not snd.class == "Archivist" then
		snd.setting_priority = "paresis 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.sandrot ~= "3" then
		snd.setting_priority = "sandrot 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.thin_blood ~= "3" then
		snd.setting_priority = "thin_blood 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.soulfire ~= "3" then
		snd.setting_priority = "soulfire 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.nyctophobia ~= "3" then
		snd.setting_priority = "nyctophobia 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_web ~= "3" then
    snd.setting_priority = "writhe_web 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_armpitlock ~= "3" then
    snd.setting_priority = "writhe_armpitlock 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_necklock ~= "3" then
    snd.setting_priority = "writhe_necklock 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_thighlock ~= "3" then
    snd.setting_priority = "writhe_thighlock 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_transfix ~= "3" then
    snd.setting_priority = "writhe_transfix 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_bind ~= "3" then
    snd.setting_priority = "writhe_bind 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_gunk ~= "3" then
    snd.setting_priority = "writhe_gunk 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_ropes ~= "3" then
    snd.setting_priority = "writhe_ropes 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_vines ~= "3" then
    snd.setting_priority = "writhe_vines 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_grappled ~= "3" then
    snd.setting_priority = "writhe_grappled 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.writhe_stasis ~= "3" then
    snd.setting_priority = "writhe_stasis 3"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.head_mangled ~= "4" then
		snd.setting_priority = "head_mangled 4"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.baldness ~= "4" then
		snd.setting_priority = "baldness 4"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.hypochondria ~= "4" then
		snd.setting_priority = "hypochondria 4"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.impatience ~= "4" then
		snd.setting_priority = "impatience 4"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.infested ~= "4" then
		snd.setting_priority = "infested 4"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.mirroring ~= "4" then
		snd.setting_priority = "mirroring 4"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.pacifism ~= "4" then
		snd.setting_priority = "pacifism 4"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.patterns ~= "4" then
		snd.setting_priority = "patterns 4"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.weariness ~= "4" then
		snd.setting_priority = "weariness 4"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.vinethorns ~= "4" then
    snd.setting_priority = "vinethorns 4"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.left_leg_bruised_critical ~= "5" then
		snd.setting_priority = "left_leg_bruised_critical 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.right_leg_bruised_critical ~= "5" then
		snd.setting_priority = "right_leg_bruised_critical 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.left_arm_bruised_critical ~= "5" then
		snd.setting_priority = "left_arm_bruised_critical 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.right_arm_bruised_critical ~= "5" then
		snd.setting_priority = "right_arm_bruised_critical 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.torso_bruised_critical ~= "5" then
		snd.setting_priority = "torso_bruised_critical 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.head_bruised_critical ~= "5" then
		snd.setting_priority = "head_bruised_critical 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.blighted ~= "5" then
		snd.setting_priority = "blighted 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.blood_curse ~= "5" then
		snd.setting_priority = "blood_curse 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.blood_poison ~= "5" then
		snd.setting_priority = "blood_poison 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.confusion ~= "5" then
		snd.setting_priority = "confusion 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.idiocy ~= "5" then
		snd.setting_priority = "idiocy 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.mental_disruption ~= "5" then
		snd.setting_priority = "mental_disruption 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.merciful ~= "5" then
		snd.setting_priority = "merciful 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.physical_disruption ~= "5" then
		snd.setting_priority = "physical_disruption 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.plodding ~= "5" then
		snd.setting_priority = "plodding 5"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.left_leg_bruised_moderate ~= "6" then
		snd.setting_priority = "left_leg_bruised_moderate 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.right_leg_bruised_moderate ~= "6" then
		snd.setting_priority = "right_leg_bruised_moderate 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.left_arm_bruised_moderate ~= "6" then
		snd.setting_priority = "left_arm_bruised_moderate 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.right_arm_bruised_moderate ~= "6" then
		snd.setting_priority = "right_arm_bruised_moderate 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.torso_bruised_moderate ~= "6" then
		snd.setting_priority = "torso_bruised_moderate 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.head_bruised_moderate ~= "6" then
		snd.setting_priority = "head_bruised_moderate 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.allergies ~= "6" then
		snd.setting_priority = "allergies 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.crippled ~= "6" then
		snd.setting_priority = "crippled 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.epilepsy ~= "6" then
		snd.setting_priority = "epilepsy 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.haemophilia ~= "6" then
		snd.setting_priority = "haemophilia 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.impairment ~= "6" then
		snd.setting_priority = "impairment 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.lethargy ~= "6" then
		snd.setting_priority = "lethargy 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.loneliness ~= "6" then
		snd.setting_priority = "loneliness 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.masochism ~= "6" then
		snd.setting_priority = "masochism 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.recklessness ~= "6" then
		snd.setting_priority = "recklessness 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.rend ~= "6" then
		snd.setting_priority = "rend 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.sensitivity ~= "6" then
		snd.setting_priority = "sensitivity 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.vomiting ~= "6" then
		snd.setting_priority = "vomiting 6"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.left_leg_broken ~= "7" then
		snd.setting_priority = "left_leg_broken 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.right_leg_broken ~= "7" then
		snd.setting_priority = "right_leg_broken 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.left_arm_broken ~= "7" then
		snd.setting_priority = "left_arm_broken 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.right_arm_broken ~= "7" then
		snd.setting_priority = "right_arm_broken 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.firstaid_predict_arms ~= "7" then
		snd.setting_priority = "firstaid_predict_arms 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.firstaid_predict_legs ~= "7" then
		snd.setting_priority = "firstaid_predict_legs 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.firstaid_predict_any_limb ~= "7" then
		snd.setting_priority = "firstaid_predict_any_limb 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.berserking ~= "7" then
		snd.setting_priority = "berserking 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.egocentric ~= "7" then
		snd.setting_priority = "egocentric 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.exhausted ~= "7" then
	  snd.setting_priority = "exhausted 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.hallucinations ~= "7" then
		snd.setting_priority = "hallucinations 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.hatred ~= "7" then
		snd.setting_priority = "hatred 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.heartflutter ~= "7" then
		snd.setting_priority = "heartflutter 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.hypersomnia ~= "7" then
		snd.setting_priority = "hypersomnia 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.justice ~= "7" then
		snd.setting_priority = "justice 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.laxity ~= "7" then
		snd.setting_priority = "laxity 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.lovers_effect ~= "7" then
		snd.setting_priority = "lovers_effect 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.peace ~= "7" then
		snd.setting_priority = "peace 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.stupidity ~= "7" then
		snd.setting_priority = "stupidity 7"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.left_leg_dislocated ~= "8" then
		snd.setting_priority = "left_leg_dislocated 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.right_leg_dislocated ~= "8" then
		snd.setting_priority = "right_leg_dislocated 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.left_arm_dislocated ~= "8" then
		snd.setting_priority = "left_arm_dislocated 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.right_arm_dislocated ~= "8" then
		snd.setting_priority = "right_arm_dislocated 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.agoraphobia ~= "8" then
		snd.setting_priority = "agoraphobia 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.claustrophobia ~= "8" then
		snd.setting_priority = "claustrophobia 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.dementia ~= "8" then
		snd.setting_priority = "dementia 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.dissonance ~= "8" then
		snd.setting_priority = "dissonance 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.dizziness ~= "8" then
		snd.setting_priority = "dizziness 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.faintness ~= "8" then
		snd.setting_priority = "faintness 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.paranoia ~= "8" then
		snd.setting_priority = "paranoia 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.shyness ~= "8" then
		snd.setting_priority = "shyness 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.vertigo ~= "8" then
		snd.setting_priority = "vertigo 8"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.left_leg_damaged ~= "9" then
		snd.setting_priority = "left_leg_damaged 9"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.right_leg_damaged ~= "9" then
		snd.setting_priority = "right_leg_damaged 9"
    snd.update_priority = 1
	end 
	if snd.firstaidcuretrack.left_arm_damaged ~= "9" then
		snd.setting_priority = "left_arm_damaged 9"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.right_arm_damaged ~= "9" then
		snd.setting_priority = "right_arm_damaged 9"
    snd.update_priority = 1
	end  
	if snd.firstaidcuretrack.head_damaged ~= "9" then
		snd.setting_priority = "head_damaged 9"
    snd.update_priority = 1
	end 
	if snd.firstaidcuretrack.torso_damaged ~= "9" then
		snd.setting_priority = "torso_damaged 9"
    snd.update_priority = 1
	end 
  -- pills 9
	if snd.firstaidcuretrack.addiction ~= "9" then
		snd.setting_priority = "addiction 9"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.body_odor ~= "9" then
		snd.setting_priority = "body_odor 9"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.commitment_fear ~= "9" then
		snd.setting_priority = "commitment_fear 9"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.hubris ~= "9" then
		snd.setting_priority = "hubris 9"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.magnanimity ~= "9" then
		snd.setting_priority = "magnanimity 9"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.sadness ~= "9" then
		snd.setting_priority = "sadness 9"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.self_pity ~= "9" then
		snd.setting_priority = "self_pity 9"
    snd.update_priority = 1
	end
  -- salves 10
	if snd.firstaidcuretrack.left_arm_mangled ~= "10" then
		snd.setting_priority = "left_arm_mangled 10"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.right_arm_mangled ~= "10" then
		snd.setting_priority = "right_arm_mangled 10"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.left_leg_mangled ~= "10" then
		snd.setting_priority = "left_leg_mangled 10"
    snd.update_priority = 1
	end   
	if snd.firstaidcuretrack.right_leg_mangled ~= "10" then
		snd.setting_priority = "right_leg_mangled 10"
    snd.update_priority = 1
	end  
	if snd.firstaidcuretrack.torso_mangled ~= "10" then
		snd.setting_priority = "torso_mangled 10"
    snd.update_priority = 1
	end 
  -- pills 10
	if snd.firstaidcuretrack.blisters ~= "10" then
		snd.setting_priority = "blisters 10"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.generosity ~= "10" then
		snd.setting_priority = "generosity 10"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.superstition ~= "10" then
		snd.setting_priority = "superstition 10"
    snd.update_priority = 1
	end
  -- salves 11
	if snd.firstaidcuretrack.left_leg_amputated ~= "11" then
		snd.setting_priority = "left_leg_amputated 11"
    snd.update_priority = 1
	end  
	if snd.firstaidcuretrack.right_leg_amputated ~= "11" then
		snd.setting_priority = "right_leg_amputated 11"
    snd.update_priority = 1
	end    
	if snd.firstaidcuretrack.left_arm_amputated ~= "11" then
		snd.setting_priority = "left_arm_amputated 11"
    snd.update_priority = 1
	end    
	if snd.firstaidcuretrack.right_arm_amputated ~= "11" then
		snd.setting_priority = "right_arm_amputated 11"
    snd.update_priority = 1
	end   
  -- salves 12
	if snd.firstaidcuretrack.spinal_rip ~= "12" then
		snd.setting_priority = "spinal_rip 12"
    snd.update_priority = 1
	end  
  -- salves 13
	if snd.firstaidcuretrack.voidgaze ~= "13" then
		snd.setting_priority = "voidgaze 13"
    snd.update_priority = 1
	end 
  -- salves 14
	if snd.firstaidcuretrack.left_leg_bruised ~= "14" then
		snd.setting_priority = "left_leg_bruised 14"
    snd.update_priority = 1
	end 
	if snd.firstaidcuretrack.right_leg_bruised ~= "14" then
		snd.setting_priority = "right_leg_bruised 14"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.left_arm_bruised ~= "14" then
		snd.setting_priority = "left_arm_bruised 14"
    snd.update_priority = 1
	end
	if snd.firstaidcuretrack.right_arm_bruised ~= "14" then
		snd.setting_priority = "right_arm_bruised 14"
    snd.update_priority = 1
	end  
	if snd.firstaidcuretrack.head_bruised ~= "14" then
		snd.setting_priority = "head_bruised 14"
    snd.update_priority = 1
	end     
	if snd.firstaidcuretrack.torso_bruised ~= "14" then
		snd.setting_priority = "torso_bruised 14"
    snd.update_priority = 1
	end    
  -- salves 15
  if snd.firstaidcuretrack.mauled_face ~= "15" then
		snd.setting_priority = "mauled_face 15"
    snd.update_priority = 1
	end  
  if snd.firstaidcuretrack.heatspear ~= "15" then
		snd.setting_priority = "heatspear 15"
    snd.update_priority = 1
	end 
  -- salves 16
  if snd.firstaidcuretrack.lightwound ~= "16" then
		snd.setting_priority = "lightwound 16"
    snd.update_priority = 1
	end     
  if snd.firstaidcuretrack.ablaze ~= "16" then
		snd.setting_priority = "ablaze 16"
    snd.update_priority = 1
	end   

  -- salves 17
  if snd.firstaidcuretrack.hypothermia ~= "17" then
		snd.setting_priority = "hypothermia 17"
    snd.update_priority = 1
	end
  -- salves 18
  if snd.firstaidcuretrack.shivering ~= "18" then
		snd.setting_priority = "shivering 18"
    snd.update_priority = 1
	end    
  -- salves 19
  if snd.firstaidcuretrack.gloom ~= "19" then
		snd.setting_priority = "gloom 19"
    snd.update_priority = 1
	end 
  if snd.firstaidcuretrack.cracked_ribs ~= "19" then
		snd.setting_priority = "cracked_ribs 19"
    snd.update_priority = 1
	end  
  -- salves 20
  if snd.firstaidcuretrack.deepwound ~= "20" then
		snd.setting_priority = "deepwound 20"
    snd.update_priority = 1
	end 
  -- salves 21
  
  -- salves 22
  if snd.firstaidcuretrack.whiplash ~= "22" then
		snd.setting_priority = "whiplash 22"
    snd.update_priority = 1
	end 
  if snd.firstaidcuretrack.backstrain ~= "22" then
		snd.setting_priority = "backstrain 22"
    snd.update_priority = 1
	end      
  if snd.firstaidcuretrack.sore_wrist ~= "22" then
		snd.setting_priority = "sore_wrist 22"
    snd.update_priority = 1
	end  
  -- salves 23
  if snd.firstaidcuretrack.muscle_spasms ~= "23" then
		snd.setting_priority = "muscle_spasms 23"
    snd.update_priority = 1
	end  
  if snd.firstaidcuretrack.stiffness ~= "23" then
		snd.setting_priority = "stiffness 23"
    snd.update_priority = 1
	end 
  if snd.firstaidcuretrack.collapsed_lung ~= "23" then
		snd.setting_priority = "collapsed_lung 23"
    snd.update_priority = 1
	end 
  if snd.firstaidcuretrack.sore_ankle ~= "23" then
		snd.setting_priority = "sore_ankle 23"
    snd.update_priority = 1
	end   
  if snd.firstaidcuretrack.weak_grip ~= "23" then
		snd.setting_priority = "weak_grip 23"
    snd.update_priority = 1
	end 
  -- salves 24
  if snd.firstaidcuretrack.leftarm ~= "24" or snd.firstaidcuretrack.preleftarm ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE left arm 20% 24" 
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.head ~= "24" or snd.firstaidcuretrack.prehead ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE head 20% 24" 
    snd.update_priority = 1
  end 
  if snd.firstaidcuretrack.torso ~= "24" or snd.firstaidcuretrack.pretorso ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE torso 20% 24" 
    snd.update_priority = 1
  end   
  if snd.firstaidcuretrack.rightarm ~= "24" or snd.firstaidcuretrack.prerightarm ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE right arm 20% 24" 
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.leftleg ~= "24" or snd.firstaidcuretrack.preleftleg ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE left leg 20% 24" 
    snd.update_priority = 1
  end
  
  if snd.firstaidcuretrack.rightleg ~= "24" or snd.firstaidcuretrack.prerightleg ~= "20" and not snd.canprerestorenow then
    snd.setting_priority = "PRESTORE right leg 20% 24" 
    snd.update_priority = 1
  end 
  
  
  -- salves 25
  if snd.firstaidcuretrack.blurry_vision ~= "25" then
		snd.setting_priority = "blurry_vision 25"
    snd.update_priority = 1
	end 
  if snd.firstaidcuretrack.stuttering ~= "25" then
		snd.setting_priority = "stuttering 25"
    snd.update_priority = 1
	end 
  if snd.firstaidcuretrack.crippled_throat ~= "25" then
		snd.setting_priority = "crippled_throat 25"
    snd.update_priority = 1
	end   
  if snd.firstaidcuretrack.burnt_eyes ~= "25" then
		snd.setting_priority = "burnt_eyes 25"
    snd.update_priority = 1
	end 
  if snd.firstaidcuretrack.effused_blood ~= "25" then
		snd.setting_priority = "effused_blood 25"
    snd.update_priority = 1
	end 
  if snd.firstaidcuretrack.smashed_throat ~= "25" then
		snd.setting_priority = "smashed_throat 25"
    snd.update_priority = 1
	end 
  if snd.firstaidcuretrack.void ~= "25" then
		snd.setting_priority = "void 25"
    snd.update_priority = 1
	end 
  if snd.firstaidcuretrack.weakvoid ~= "25" then
		snd.setting_priority = "weakvoid 25"
    snd.update_priority = 1
	end 
  -- 26 things you want off
  if snd.firstaidcuretrack.embedded_axe ~= "26" then
    snd.setting_priority = "embedded_axe 26"
    snd.update_priority = 1
  end
  if snd.firstaidcuretrack.oiled ~= "26" then
    snd.setting_priority = "oiled 26"
    snd.update_priority = 1
  end 
  
  if snd.can_firstaid() then
    if snd.update_priority &gt; 0 then
      snd.send("firstaid priority " ..snd.setting_priority)
      snd.firstaid_go = false
      enableTimer("reset check")
      tempTimer(.1, [[snd.firstaid_go = true]])
    end
  end 
  
	snd.firstaidchangecure = false -- keep last
end</script>
									<eventHandlerList />
								</Script>
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Tree Check</name>
								<packageName></packageName>
								<script>function snd.herbcount()
	snd.herbcountnum = "0"
	for i = 1, tonumber(#snd.aff_list) do
	local affliction = snd.have_aff[i]
		if snd.afflictions[i].cures.herb then
		  snd.herbcountnum = snd.herbcountnum + 1 
		end
	end

end

function snd.salvecount()
	snd.salvecountnum = "0"
	for i = 1, tonumber(#snd.aff_list) do
	local affliction = snd.have_aff[i]
		if snd.afflictions[i].cures.salve then
 		   snd.salvecountnum = snd.salvecountnum + 1 
		end
	end

end

function snd.treecheck()

	snd.herbcount()
	snd.salvecount()
	
	if not snd.have_aff("right_arm_broken") or not snd.have_aff("left_arm_broken") then 
		if snd.tree and not snd.have_aff("paralysis") and not snd.have_aff("paresis") and not snd.have_aff("stun") and not snd.writheaffflag then
			if tonumber(snd.herbcountnum) &gt; 2 then 
				snd.send("touch tree")
				if snd.have_aff("stupidity") then
					snd.send("touch tree")
				end
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.send("touch tree")
				snd.tree == false end)]])
			elseif tonumber(snd.salvecountnum) &gt; 2 then 
				snd.send("touch tree")
				if snd.have_aff("stupidity") then
					snd.send("touch tree")
				end
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.send("touch tree")
				snd.tree == false end)]])
			elseif snd.have_aff("anorexia") then
				if snd.have_aff("stupidity") then
					snd.send("touch tree")
				end
				snd.send("touch tree")
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.send("touch tree")
				snd.tree == false end)]])
			elseif snd.have_aff("confusion") or snd.have_aff("anorexia") or snd.have_aff("asthma") or snd.have_aff("destroyed_throat") or snd.have_aff("unknown") or snd.have_aff("hypochondria") or snd.have_aff("weariness") then
				if snd.have_aff("stupidity") then
					snd.send("touch tree")
				end
				snd.send("touch tree")
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.send("touch tree")
				snd.tree == false end)]])
			elseif snd.have_aff("weariness") and snd.have_aff("clumsiness") then
				if snd.have_aff("stupidity") then
					snd.send("touch tree")
				end
				snd.send("touch tree")
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.send("touch tree")
				snd.tree == false end)]])
			elseif snd.have_aff("unknown") then
				if snd.have_aff("stupidity") then
					snd.send("touch tree")
				end
				snd.send("touch tree")
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.send("touch tree")
				snd.tree == false end)]])

			elseif snd.have_aff("peace") and tonumber(snd.herbcountnum) &gt; 1 then
				if snd.have_aff("stupidity") then
					snd.send("touch tree")
				end
				snd.send("touch tree")
				snd.tree = false
				snd.treerecheck = true
				if treerecheck_timer then killTimer(treerecheck_timer) end
				treerecheck_timer = tempTimer(1,[[if snd.treerecheck then snd.send("touch tree")
				snd.tree == false end)]])
			end
		end
	end
end



</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>endgamecheck</name>
								<packageName></packageName>
								<script>function snd.endgamecheck()
	snd.herbcount()
	snd.salvecount()
	if not snd.beheading and snd.recon then 
		if snd.have_aff("anorexia") or snd.have_aff("destroyed_throat") or snd.have_aff("hellsight") or snd.have_aff("deaf") or snd.have_aff("blind") or snd.have_aff("sandrot") or snd.have_aff("impatience") then 
			snd.send("queue renew " ..snd.endgameuse)
		elseif snd.have_aff("confusion") or snd.have_aff("impatience") or snd.have_aff("asthma") or snd.have_aff("paralysis") or snd.have_aff("paresis") or snd.have_aff("slickness") then
			snd.send("queue renew " ..snd.endgameuse)
		elseif tonumber(snd.herbcountnum) &gt; 2 then 
			snd.send("queue renew " ..snd.endgameuse)			
		elseif tonumber(snd.salvecountnum) &gt; 2 then 
			snd.send("queue renew " ..snd.endgameuse)
		end
	end
end
</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>staonenonbal</name>
								<packageName></packageName>
								<script>function snd.staonenonbal()

	
	if snd.defenses.def_nimbleness.state ~= "deffed" and snd.balance.nimbless and not snd.have_aff("fallen") then
		snd.send("nimbleness " ..snd.sep)
	end 
	
	if snd.class == "Wayfarer" then
		if tonumber(gmcp.Char.Vitals.fury) &lt; 40 and snd.defenses.def_dauntless.state ~= "deffed" and snd.balance.fury then
			snd.send("fury dauntless on " ..snd.sep)
		end
	end 
	
	if gmcp.Char.Vitals.equilibrium == "1" and gmcp.Char.Vitals.balance == "1" and gmcp.Char.Vitals.left_arm == "1" and gmcp.Char.Vitals.right_arm == "1" and not snd.have_aff("blackout")then 
		snd.sync = true 
	end
	
	if snd.hatredcheck then
		snd.hatredcheck = false
		snd.send("order entourage attack me"..snd.sep.."order entourage passive"..snd.sep.."order entourage kill " ..snd.target)
	end
  
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Master curing call</name>
								<packageName></packageName>
								<script>function snd.mastercheck()
	if not gmcp.Room then return end

	if not snd.salveaffflag and not snd.have_aff("slickness") and not snd.have_aff("asthma") and not snd.have_aff("sandrot") and snd.salvebal and (snd.have_aff("void") or snd.have_aff("weakvoid")) then 
		snd.send("apply caloric")
		snd.salvebal = false
		snd.salveretry = true
		if snd.retard == false and not snd.have_aff("aeon") then 
			enableTimer("salveretry") 
		else 
			enableTimer("salveretryretard") 
		end
	end
       
	if snd.sync and (snd.have_aff("sandrot") or snd.have_aff("slickness")) and (snd.class_hitting == "archivist" or snd.class_hitting == "indorani") and #snd.limbbrokencount &gt; 2 then
		snd.send("restore")
		snd.sync = false
	end


end -- function end


function snd.caloricreset()
	snd.aff_remove("frozen")
	snd.aff_remove("shivering")
end

function snd.epidermalreset()
	snd.aff_remove("anorexia")
	snd.aff_remove("blurry_vision")
	snd.aff_remove("stuttering")
	snd.aff_remove("indifference")
	snd.aff_remove("effused_blackbile")
	snd.aff_remove("effused_yellowbile")
	snd.aff_remove("effused_blood")
	snd.aff_remove("effused_phlegm")
	snd.aff_remove("burnt_eyes")
	snd.aff_remove("gorged")
end

</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>staone script</name>
								<packageName></packageName>
								<script>function snd.staone()

  if gmcp.Char.Vitals.equilibrium == "1" and gmcp.Char.Vitals.balance == "1" and gmcp.Char.Vitals.left_arm == "1" and gmcp.Char.Vitals.right_arm == "1" and not snd.have_aff("blackout") then
    snd.sync = true
  end
  if not snd.have_aff("stun") and snd.toggles.active then
    if (tonumber(gmcp.Char.Vitals.hp) &lt; 1350 or tonumber(snd.percentesthealth) &lt; 1350) and snd.endgameuse ~= "none" and gmcp.Char.Vitals.hp ~= "0" and (tonumber(gmcp.Char.Vitals.mp) &gt; 3000 and tonumber(snd.percentestmana) &gt; 3000) and not snd.have_aff("blackout") then
			snd.send(snd.endgamehealth)
    elseif (tonumber(gmcp.Char.Vitals.hp) &lt; 1350 or tonumber(snd.percentesthealth) &lt; 1350) and snd.endgameuse ~= "none" and gmcp.Char.Vitals.hp ~= "0" and not snd.have_aff("stun") and not snd.have_aff("asleep") and (tonumber(gmcp.Char.Vitals.mp) &gt; 3000 and tonumber(snd.percentestmana) &gt; 3000) and not snd.have_aff("blackout") then
			snd.send(snd.endgamehealth)
    elseif snd.have_aff("vinethorns") and not snd.have_aff("stun") and not snd.have_aff("stand") then
			snd.send("pull thorn from body")
    elseif tonumber(snd.unknownquantity) &gt; 2 and not snd.have_aff("hypochondria") and not snd.diag_sent then
			snd.send("qeb diagnose")
      snd.diag_sent = true
      tempTimer(1, [[snd.diag_sent = false]])
    end
  end
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Extra Sipper</name>
								<packageName></packageName>
								<script>function snd.sipfunction()
if not snd.channeling then

if snd.have_aff("recklessness") or snd.have_aff("blackout") or (snd.class == "Carnifex" and snd.defenses.def_reckless.state ~= "deffed") or (snd.class == "Warden" and snd.defenses.def_battleflow.state ~= "deffed") then

	if snd.class == "Archivist" and snd.defenses.def_linked.state ~= "deffed" then
		if tonumber(snd.percentesthealth) &lt; 85 and tonumber(snd.percentestmana) &lt; 100 then
			snd.sipmana()
		elseif tonumber(gmcp.Char.Vitals.hp) == 1 then
			snd.sipmana()
		elseif tonumber(snd.percentesthealth) &lt; 85 then 
			snd.siphealth()
		elseif tonumber(snd.percentestmana) &lt; 85 then 
			snd.sipmana()
		end

	elseif #snd.people_hitting_me &lt; 2 then
		if (snd.class_hitting == "praenomen" or snd.class_hitting == "luminary") then 
			if tonumber(snd.percentesthealth) &gt; 45 and tonumber(snd.percentestmana) &lt; 70 then
				snd.sipmana()
			elseif tonumber(snd.percentesthealth) &gt; 75 and tonumber(snd.percentestmana) &lt; 90 then 
				snd.sipmana()
			elseif tonumber(snd.percentesthealth) &gt; 25 and tonumber(snd.percentestmana) &lt; 60 and snd.class_hitting == "luminary" then
				snd.sipmana()
			elseif tonumber(snd.percentesthealth) &lt; 35 then
				snd.siphealth() 
			elseif tonumber(snd.percentesthealth) &lt; 90 and tonumber(snd.percentestmana) &gt; 69 then
				snd.siphealth()
			elseif tonumber(snd.percentesthealth) &lt; 87 then 
    			snd.siphealth()
			end
		else
			if tonumber(snd.percentesthealth) &lt; 87 and tonumber(snd.percentestmana) &gt; 15 then 
    			snd.siphealth()
			elseif tonumber(snd.percentestmana) &lt; 85 then
				snd.sipmana()
			end
		end

	elseif #snd.people_hitting_me &gt; 1 and (snd.class_hitting == "praenomen" or snd.class_hitting == "luminary") then
			if tonumber(snd.percentesthealth) &lt; 87 and tonumber(snd.percentestmana) &gt; 65 then 
    			snd.siphealth()
			elseif tonumber(snd.percentesthealth) &gt; 45 and tonumber(snd.percentestmana) &lt; 60 and snd.class_hitting == "luminary" then
				snd.sipmana()	
			elseif tonumber(snd.percentesthealth) &gt; 45 and tonumber(snd.percentestmana) &lt; 45 and snd.class_hitting == "praenomen" then
				snd.sipmana()	
			elseif tonumber(snd.percentesthealth) &lt; 35 and tonumber(snd.percentestmana) &gt; 45 then 
    			snd.siphealth()
			elseif tonumber(snd.percentesthealth) &lt; 15 and tonumber(snd.percentestmana) &gt; 10 then 
    			snd.siphealth()
			elseif tonumber(snd.percentesthealth) &lt; 87 then 
    			snd.siphealth()
			end
		
	else
		    snd.siphealth()
	end


else  -- not reckless/blackout

	if snd.class == "Archivist" and snd.defenses.def_linked.state ~= "deffed" then
		if tonumber(snd.percenthealth) &lt; 85 and tonumber(snd.percentmana) &lt; 100 then
			snd.sipmana()
		elseif tonumber(gmcp.Char.Vitals.hp) == 1 then
			snd.sipmana()
		elseif tonumber(snd.percenthealth) &lt; 85 then 
			snd.siphealth()
		elseif tonumber(snd.percentmana) &lt; 85 then 
			snd.sipmana()
		end

	elseif #snd.people_hitting_me &lt; 2 then
		if (snd.class_hitting == "praenomen" or snd.class_hitting == "luminary") then  
			if tonumber(snd.percenthealth) &gt; 45 and tonumber(snd.percentmana) &lt; 70 then
				snd.sipmana()
			elseif tonumber(snd.percenthealth) &gt; 75 and tonumber(snd.percentmana) &lt; 90 then 
				snd.sipmana()
			elseif tonumber(snd.percenthealth) &gt; 25 and tonumber(snd.percentmana) &lt; 60 and snd.class_hitting == "luminary" then
				snd.sipmana()
			elseif tonumber(snd.percenthealth) &lt; 35 then
				snd.siphealth() 
			elseif tonumber(snd.percenthealth) &lt; 90 and tonumber(snd.percentmana) &gt; 69 then
				snd.siphealth()
			elseif tonumber(snd.percenthealth) &lt; 87 then 
    			snd.siphealth()
			end

		else
			if tonumber(snd.percenthealth) &lt; 87 and tonumber(snd.percentmana) &gt; 15 then 
    			snd.siphealth()
			elseif tonumber(snd.percentmana) &lt; 85 then
				snd.sipmana()
			end
		end

	elseif #snd.people_hitting_me &gt; 1 and (snd.class_hitting == "praenomen" or snd.class_hitting == "luminary") then
			if tonumber(snd.percenthealth) &lt; 87 and tonumber(snd.percentmana) &gt; 65 then 
    			snd.siphealth()
			elseif tonumber(snd.percenthealth) &gt; 45 and tonumber(snd.percentmana) &lt; 60 and snd.class_hitting == "luminary" then
				snd.sipmana()	
			elseif tonumber(snd.percenthealth) &gt; 45 and tonumber(snd.percentmana) &lt; 45 and snd.class_hitting == "praenomen" then
				snd.sipmana()	
			elseif tonumber(snd.percenthealth) &lt; 35 and tonumber(snd.percentmana) &gt; 45 then 
    			snd.siphealth()
			elseif tonumber(snd.percenthealth) &lt; 15 and tonumber(snd.percentmana) &gt; 10 then 
    			snd.siphealth()
			elseif tonumber(snd.percenthealth) &lt; 87 then 
    			snd.siphealth()
			end
		
	else
		if tonumber(snd.percenthealth) &lt; 87 and tonumber(snd.percentmana) &gt; 15 then 
    		snd.siphealth()
		elseif tonumber(snd.percentmana) &lt; 85 then
			snd.sipmana()
		end	
	end
end
end
end

function snd.siphealth()
if not snd.channeling then
	snd.send("drink health" ) 
 	snd.healbalance = false
 	snd.healretry = true
 	if not snd.retard and not snd.have_aff("aeon") then enableTimer("healretry") else enableTimer("healretryretard") 
	end
end
end


function snd.sipmana()
if not snd.channeling then
	snd.send("drink mana") 	
	snd.healbalance = false
 	snd.healretry = true
 	if not snd.retard and not snd.have_aff("aeon") then enableTimer("healretry") else enableTimer("healretryretard") 
	end
end
end

function snd.eatmoss()
if not snd.channeling then
	snd.send("eat anabiotic")
	snd.moss = false
end
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Clot Check</name>
								<packageName></packageName>
								<script>function snd.clotcheck()

  if not snd.have_aff("recklessness") then  -- 3
		if tonumber(snd.percentmana) &lt; 60 then -- 4
			if snd.toggles.bashing and snd.firstaidclotlevel ~= "20" then -- 3
    		snd.send("firstaid clot above 40")
			elseif #snd.people_hitting_me &lt; 2 and snd.class_hitting == "praenomen" and tonumber(gmcp.Char.Vitals.bleeding) &gt; 100 and snd.firstaidclotlevel ~= "45" then 
				snd.send("firstaid clot above 45")
			elseif #snd.people_hitting_me &lt; 2 and snd.class_hitting == "luminary"  and tonumber(gmcp.Char.Vitals.bleeding) &gt; 60 and snd.firstaidclotlevel ~= "60" then 
				snd.send("firstaid clot above 60")
			elseif #snd.people_hitting_me &lt; 2 and snd.class_hitting == "sentinel" and tonumber(gmcp.Char.Vitals.bleeding) &gt; 60 and snd.firstaidclotlevel ~= "40" then 
				snd.send("firstaid clot above 40")
			elseif #snd.people_hitting_me &lt; 2 and not (snd.class_hitting == "luminary" or snd.class_hitting == "praenomen") then
				if tonumber(gmcp.Char.Vitals.bleeding) &gt; 200 and snd.firstaidclotlevel ~= "30" then -- 2
					snd.send("firstaid clot above 30")
				elseif tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(gmcp.Char.Vitals.bleeding) &lt; 200 and snd.firstaidclotlevel ~= "20" then 
					snd.send("firstaid clot above 20")
				end   -- 2
			end			-- 3
				-- 4
		elseif tonumber(snd.percentmana) &gt; 59 and snd.firstaidclotlevel ~= "60" then
			snd.send("firstaid clot above 60")
		end
    
 	elseif snd.have_aff("recklessness") then 
		if snd.toggles.bashing and tonumber(snd.percentestmana) &gt; 20 then -- 2
			snd.send("clot 50")
			snd.percentestmana = snd.percentestmana - 200
		elseif #snd.people_hitting_me &lt; 2 and snd.class_hitting == "praenomen" and tonumber(gmcp.Char.Vitals.bleeding) &gt; 100 and tonumber(snd.percentestmana) &gt; 45 then 
			send("clot 80")
			snd.percentestmana = snd.percentestmana - 320
		elseif #snd.people_hitting_me &lt; 2 and snd.class_hitting == "luminary"  and tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(snd.percentestmana) &gt; 60 then 
			send("clot 60")
			snd.percentestmana = snd.percentestmana - 240
		elseif #snd.people_hitting_me &lt; 2 and snd.class_hitting == "sentinel" and tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(snd.percentmana) &gt; 40 then 
			send("clot 60")
			snd.percentestmana = snd.percentestmana - 240
		elseif #snd.people_hitting_me &lt; 2 and not (snd.class_hitting == "luminary" or snd.class_hitting == "praenomen") then
			if tonumber(gmcp.Char.Vitals.bleeding) &gt; 200 and tonumber(snd.percenesttmana) &gt; 30 then 
				send("clot 120")
				snd.percentestmana = snd.percentestmana - 480
			end
		elseif tonumber(gmcp.Char.Vitals.bleeding) &gt; 100 and tonumber(gmcp.Char.Vitals.bleeding) &lt; 200 and tonumber(snd.percentestmana) &gt; 20 then 
			send("clot 40") 
			snd.percentestmana = snd.percentestmana - 160
		elseif tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(gmcp.Char.Vitals.bleeding) &lt; 100 and tonumber(snd.percentestmana) &gt; 20 then 
			send("clot 40")
			snd.percentestmana = snd.percentestmana - 160
		elseif #snd.people_hitting_me &lt; 2 and not (snd.class_hitting == "praenomen" or snd.class_hitting == "luminary")  then
			if tonumber(gmcp.Char.Vitals.bleeding) &gt; 200 and tonumber(snd.percentestmana) &gt; 78 then -- 1
				send("clot 60") 
				snd.percentestmana = snd.percentestmana - 240
			elseif tonumber(gmcp.Char.Vitals.bleeding) &gt; 100 and tonumber(gmcp.Char.Vitals.bleeding) &lt; 200 and tonumber(snd.percentestmana) &gt; 70 then 
				send("clot 40")
				snd.percentestmana = snd.percentestmana - 160
			elseif tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(gmcp.Char.Vitals.bleeding) &lt; 100 and tonumber(snd.percentestmana) &gt; 60 then 
				send("clot 40")
				snd.percentestmana = snd.percentestmana - 160
			elseif #snd.people_hitting_me &lt; 2 and not snd.class_hitting == "praenomen" and not snd.class_hitting == "luminary"  and tonumber(gmcp.Char.Vitals.bleeding) &gt; 70 and tonumber(snd.percentestmana) &gt; 20 then 
				send("clot 40")
				snd.percentestmana = snd.percentestmana - 160
			end  	-- 1
		end			-- 2
  
 	end  			-- 3

	if tonumber(snd.percentestmana) &lt;  0 then 
		snd.percentestmana = 0
	end

end  			-- main function</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Hidden Check</name>
								<packageName></packageName>
								<script>function snd.hiddencheckfunc()
	if snd.hiddentype == "shine" and snd.class_hitting == "luminary" and #snd.people_hitting_me &lt; 2 then  -- Disfigurement, dizziness, stiffness, weariness, and ablaze.
		if not snd.have_aff("hellsight") and not snd.have_aff("slickness") then
			snd.send("smoke yarrow"..snd.sep.."press mending to torso"..snd.sep.."queue poultice press soothing to torso")
		end
		
	elseif snd.hiddentype == "shine" then  -- Disfigurement, dizziness, stiffness, weariness, and ablaze.
 		if not snd.pipeaffflag and not snd.salveaffflag then
			snd.send("smoke yarrow"..snd.sep.."press mending to torso"..snd.sep.."queue poultice press soothing to torso")
		elseif not snd.pipeaffflag and snd.salveaffflag then
			snd.send("smoke yarrow")
		end 
	
	elseif snd.hiddentype == "spiritwrack" then  -- Anorexia, stupidity, impatience, vertigo, sensitivity, self-pity, berserking, or migraine
		if table.isMember(gmcp.Room.Info.details, "indoors") then
			snd.send("qeb fly")
		end
		if not snd.pipeaffflag then
			snd.send("smoke yarrow")
		end
		snd.send("eat vial"..snd.sep.."stand"..snd.sep.."meditate")
	elseif snd.hiddentype ~= "shine" and snd.hiddentype ~= "spiritwrack" then
    if not snd.have_aff("aeon") and not snd.have_aff("hellsight") then
      snd.send("eat vial"..snd.sep.."stand"..snd.sep.."meditate"..snd.sep.."concentrate"..snd.sep.."outc paste"..snd.sep.."apply paste")
			if snd.focus then
				snd.send("point icewall"..snd.sep.."compose"..snd.sep.."smoke pipe"..snd.sep.."focus")
			else
				snd.send("point icewall"..snd.sep.."compose"..snd.sep.."smoke pipe")
			end
    end
    if snd.defenses.def_shielded.state == "deffed" then
    	snd.hatredcheck = true
    end
	end
	snd.hiddentype = "none"
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Avoidance System</name>
								<packageName></packageName>
								<script>function snd.avoidancecheck()
	if snd.toggles.active and snd.have_aff("stun") and snd.have_aff("unconscious") then
		if #snd.people_hitting_me == 0 and snd.avoidanceset ~= "melee"  then 
			snd.send("divert melee")
			snd.send("dodge melee")
			snd.avoidanceset = "melee"
		elseif snd.class_hitting == "wayfarer" and snd.avoidanceset ~= "ranged" and #snd.people_hitting_me &lt; 2 then
			snd.send("divert ranged")
			snd.send("dodge ranged")
			snd.avoidanceset = "ranged"
		elseif snd.class_hitting == "sentinel" and snd.avoidanceset ~= "upsets" and #snd.people_hitting_me &lt; 2 then
			snd.send("dodge upsets") --dodge melee after pets, time?
			snd.send("divert upsets")
			snd.avoidanceset = "upsets"
		-- if indo upset before gremlin (need to time), melee rest of time
		elseif (snd.class_hitting == "shaman" or snd.class_hitting == "archivist") and snd.avoidanceset ~= "upsets" and #snd.people_hitting_me &lt; 2 then
			snd.send("dodge upsets") 
			snd.send("divert upsets")
			snd.avoidanceset = "upsets"		
		elseif #snd.people_hitting_me &gt; 1 and snd.avoidanceset ~= "melee" then
			snd.send("divert melee")
			snd.send("dodge melee")
			snd.avoidanceset = "melee"			
		end
	end
end
</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Unknown script</name>
								<packageName></packageName>
								<script>function snd.unknownafter()
  if snd.have_aff("unknown") or tonumber(snd.unknownquantity) &gt; 0 and not snd.have_aff("tree_seared") then
    snd.send("queue tree touch tree")
  elseif snd.have_aff("unknown") or tonumber(snd.unknownquantity) &gt; 0 and snd.have_aff("tree_seared") then
    snd.send("queue renew " ..snd.endgameuse)  
  
  end

end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Firstaid start</name>
								<packageName></packageName>
								<script>function snd.firstaidstart()
  send("firstaid on##firstaid reporting on##firstaid health 80##firstaid mana 80##firstaid forcehealth 40##firstaid forcemana 60##firstaid anabiotic health 80##firstaid anabiotic mana 75##firstaid vitals priority health##firstaid stop mana below 45##firstaid curing on##firstaid defence on##firstaid heal health on##firstaid heal mana on##firstaid use anabiotic on##firstaid auto stand on")
  tempTimer(.5, [[send("firstaid auto wake on##firstaid use tree on##firstaid use focus on##firstaid use endgame on##firstaid use insomnia on##firstaid use clot on##firstaid clot at 30##firstaid clot above 60##firstaid stupidity double on##firstaid adder 3##firstaid precache 3##firstaid prerestore on##firstaid halt for channel on")]])
  
  --pre-restore set
  tempTimer(.75, [[send("FIRSTAID PRIORITY PRESTORE LEFT LEG 15% 8##FIRSTAID PRIORITY PRESTORE RIGHT LEG 15% 8##FIRSTAID PRIORITY PRESTORE RIGHT ARM 15% 8##FIRSTAID PRIORITY PRESTORE LEFT ARM 15% 8##FIRSTAID PRIORITY PRESTORE torso 15% 8##FIRSTAID PRIORITY PRESTORE head 15% 8")]])
  
  
  -- removes completely from the list: firstaid priority defence insulation reset
  -- puts all priority to game default
  tempTimer(.1, [[send("firstaid priority reset##firstaid priority defence rebounding reset")]])
  
  -- Afflictions devitating from game default
  tempTimer(1.5, [[send("firstaid priority left_arm_bruised_critical 2##firstaid priority right_arm_bruised_critical 2##firstaid priority left_leg_bruised_critical 2##firstaid priority right_leg_bruised_critical 2##firstaid priority torso_bruised_critical 2##firstaid priority left_arm_bruised_moderate 2##firstaid priority right_arm_bruised_moderate 2##firstaid priority left_leg_bruised_moderate 2##firstaid priority right_leg_bruised_moderate 2##firstaid priority torso_bruised_moderate 2##firstaid priority head_bruised_moderate 2##firstaid priority oiled 26")]])
  
  -- FA buggy stuff
  send("firstaid priority nyctophobia 3")
  
  -- reset and set defences
  send("firstaid priority defence reset")
  snd.firstaiddefenceset()
  
  send("firstaid cureset switch none") -- switch to non because multi-users
  
  enableTimer("Firstaidstatustimer")
  
end</script>
								<eventHandlerList />
							</Script>
						</ScriptGroup>
					</ScriptGroup>
					<Script isActive="yes" isFolder="no">
						<name>load defenses</name>
						<packageName></packageName>
						<script>
snd.defenses_loaded = true

function snd.load_def(option)

 if snd.def_options[option] ~= nil then
  snd.message("Loading defense options for: &lt;green&gt;"..option.."&lt;white&gt;.", "echo")
  send(" ")
  snd.less_defs = {}
	if gmcp.Char.Status.race == "Azudim" then
  	snd.def_options[option]["def_miasma"] = "on"
  elseif gmcp.Char.Status.race == "Yeleni" then
  	snd.def_options[option]["def_warmth"] = "on"
  elseif gmcp.Char.Status.race == "Idreth" then
  	snd.def_options[option]["def_safeguard"] = "on"
	end
  
  local my_def_choice_and_generic_defenses = {}
    if option ~= "none" then
       my_def_choice_and_generic_defenses = table.union(snd.def_options.general_defs, snd.def_options[option])
    else
      my_def_choice_and_generic_defenses = {}
    end

  for i in pairs(snd.defenses) do
  
   snd.defenses[i].needit = false
   for h in pairs(my_def_choice_and_generic_defenses) do

      if my_def_choice_and_generic_defenses[h] == "once" and (hasSkill(snd.defenses[h].skill) or snd.assumed_class ~= nil) then
         if h == i then
          if snd.defenses[i].state ~= "deffed" then
           snd.defenses[i].needit = true
           table.insert(snd.less_defs, i)
          end
         end
      elseif my_def_choice_and_generic_defenses[h] == "on" then --and (hasSkill(snd.defenses[h].skill) or snd.assumed_class ~= nil) then
       if h == i then
  		 	if i == "def_vitality" then
  				if snd.balance.vitality then
  					snd.defenses[i].needit = true
  				end
  			else
        	snd.defenses[i].needit = true
  			end
      end
    end
   end
  end
 else
  snd.message("No such defense option as &lt;red&gt;"..option.."&lt;white&gt;!", "echo")
  send(" ")
 end
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>options</name>
						<packageName></packageName>
						<script>snd.def_options = {

none = {

},

general_defs = {
def_thirdeye = "on",
def_mindseye_tattoo = "on",
def_cloak_tattoo = "on",
def_kola = "on",
def_deathsight = "on",
def_insomnia = "on",
def_frost = "on",
def_venom = "on",
def_levitation = "on",
def_speed = "on",
def_caloric = "on",
def_dodge_melee = "on",
def_nightsight = "on",
def_clarity = "once",
--def_heatsight = "once",
def_fangbarrier = "on",
def_thirdeye = "on",
def_lifevision = "on",
def_overwatch = "on",
def_insight = "on",
def_deafness = "on",
def_blindness = "on",
def_divert_melee = "on",
def_waterbreathing = "on",
def_vigor = "on",

},

templar = {
def_gripping = "on",
def_fitness = "once",
def_maingauche = "once",
},

revenant = {
def_gripping = "on",
def_fitness = "once",
def_maingauche = "once",
},

luminary = {
def_lightshield = "once",
def_inspiration = "once",
def_fireblock = "once",
def_constitution = "once",
},

syssin = {
def_warding = "once",
def_finesse = "once",
--def_hiding = "once",
def_shadowsight = "once",
def_ghost = "on",
def_shroud = "on",
def_lipreading = "on",
def_shadowsight = "once",
--def_shadowslip = "once",
},

monk = {
def_weathering = "on",
def_toughness = "on",
def_vitality = "on",
def_kaido_regeneration = "on",
def_resistance = "on",
def_constitution = "on",
def_split_mind = "on",
def_kaido_immunity = "on",
def_boosted_regen = "on",
def_fitness = "once",
},

carnifex = {
def_fearless = "on",
def_reveling = "once",
def_recklessness = "once",
def_soul_harvest = "on",
def_soul_thirst = "on",
def_soul_fortify = "on",
def_soul_fracture = "on",
def_soul_body = "once",
def_gripping = "on",
def_fitness = "once",
def_herculeanrage = "once",
--def_bruteforce = "once",
},

warden = {
def_fearless = "on",
def_initiative = "once",
def_battleflow = "once",
def_ancest_victory = "on",
def_displacement  = "on",
def_ancestral_bolster = "on",
def_invocation  = "on",
def_gripping = "on",
def_fitness = "once",
def_roaring  = "once",
def_intervention = "once",
def_shroud = "once",
},

shapeshifter = {
def_weathering = "on",
def_bodyheat = "once",
def_metabolize = "once",
def_endurance = "once",
def_thickhide = "once",
--def_corner = "once",
--def_harden = "once",
},

wolf = {
def_weathering = "on",
def_bodyheat = "once",
def_metabolism = "once",
def_endurance = "once",
def_thickhide = "once",
def_corner = "once",
def_harden = "once",
--def_stealth = "once",
},

bear = {
def_weathering = "on",
def_bodyheat = "once",
def_metabolism = "once",
def_endurance = "once",
def_thickhide = "once",
def_bracing = "once",
def_harden = "once",
},

sentinel = {
def_gripping = "on",
def_fitness = "once",
def_lifesap = "on",
def_barkskin = "on",
def_hardiness = "on",
def_conceal = "once",
def_maskedscent = "once",
def_vitality = "on",
def_flexibility = "once",
def_foreststride = "once",
},

archivist = {
def_gripping = "on",
def_spheres =  "once",
def_linked = "once",
def_oneness = "once",
def_sublimation = "once",
def_ameliorate = "once",
def_catabolism = "once",
},

indorani = {
def_gripping = "on",
def_deathaura = "once",
def_lifevision = "on",
def_soulmask = "on",
def_gravechill = "on",
def_vengeance = "on",
def_soulcage = "on",
def_shroud = "on",
def_hierophant = "once",
def_chariot = "on",
def_eclipse = "on",
def_devilpact = "on",
},

shaman = {
def_lifevision = "on",
def_spiritbond = "on",
def_protection = "on",
def_shaman_spiritsight = "once",
def_lifebloom = "on",
def_shaman_warding = "on",
def_oath_forestwalker = "on",
def_oath_tranquility = "on",
def_oath_shaman = "on",
def_greenfoot = "on",
},

praenomen = {
def_potence_constitution = "once",
def_fortify = "on",
def_corpus_warding = "on",
def_celerity = "once",
def_lifescent = "once",
def_lifevision = "once",
def_veil = "on",
def_stalk = "once",
def_concentrate = "on",
def_shadowblow = "on",
def_blurred = "on",
def_nightsight = "on",
def_elusion = "on",
def_gripping = "on", --only if you have the gripping racial skill
},

teradrim = {
def_earthenform = "on",
def_entwine = "on",
def_ricochet = "on",
def_twinsoul = "on",
def_earth_resonance = "on",
def_stonebind = "on",
def_imbue_will = "once",
def_imbue_stonefury = "on",
--def_sand_swelter = "once",
},


wayfarer = {
def_brutality = "on",
def_axe_avert = "on",
def_axe_obstruct = "on",
def_axe_repel = "on",
def_weathering = "on",
def_ironskin = "on",
def_bloodtrails = "on",
def_phalanx = "on",
--def_blindsense = "on",
def_greenheart = "on",
--def_endure = "once",
--def_mountaineer = "on",
--def_dustcoat = "on",
--def_resilience = "on",
--def_desolation = "on",
def_circulation = "on",
},


ascendril = {
def_countercurrent = "on",
def_sagacity = "on",
def_arcaneskin = "on",
def_missiles = "on",
},

sciomancer = {	
def_countercurrent = "once",		
def_rigor = "once",		
def_shadow_engulf  = "once",		
def_shadow_mantle = "once",		
def_blurring = "once",		
def_sagacity = "once",

},

zealot = {
def_focalmark = "on",
def_tempered_body = "on",
def_haste = "on",
def_swagger = "once",
def_litheness = "on",
def_bending = "on",
def_disunion = "on",
def_clarity = "on",
def_resurgence = "on",
def_discharge = "on",
def_deflection = "on",
def_mindspark = "on",

},

}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>parrying</name>
						<packageName></packageName>
						<script>
function snd.parry()
	local highest = 0
	if not hasSkill("Parrying") then
		parrying = false
	end
	snd.toparry = "none"
  if snd.class_hitting == "carnifex" or snd.class_hitting == "warden" then
		snd.toparry = "left leg"
  elseif snd.class_hitting == "ascendril" then
    snd.toparry = "torso"
	else
		for limb in pairs(snd.limb_damage) do
			if string.find(limb, " ") then
				x = string.gsub(limb, " ", "_")
				aff = "pre_restore_"..x
			else
				aff = "pre_restore_"..limb
			end
      if (snd.class_hitting == "sentinel" or snd.class_hitting == "monk" or snd.class_hitting == "luminary") then
        if snd.limb_damage[limb] &gt; 22 then
          snd.toparry = limb
        else
          snd.toparry = "head"
        end
      elseif (snd.class_hitting == "teradrim" or snd.class_hitting == "templar"or snd.class_hitting == "revenant") then
        if (snd.have_aff("left_leg_bruised") or snd.have_aff("left_leg_bruised_moderate") or snd.have_aff("left_leg_bruised_critical")) then
          snd.toparry = "left leg"
        elseif (snd.have_aff("right_leg_bruised") or snd.have_aff("right_leg_bruised_moderate") or snd.have_aff("right_leg_bruised_critical")) then
          snd.toparry = "right leg"
        elseif (snd.have_aff("left_arm_bruised") or snd.have_aff("left_arm_bruised_moderate") or snd.have_aff("left_arm_bruised_critical")) then
          snd.toparry = "left arm"
        elseif (snd.have_aff("right_arm_bruised") or snd.have_aff("right_arm_bruised_moderate") or snd.have_aff("right_arm_bruised_critical")) then
          snd.toparry = "right arm"
        elseif (snd.have_aff("head_bruised") or snd.have_aff("head_bruised_moderate") or snd.have_aff("head_bruised_critical")) then
          snd.toparry = "head"
        elseif (snd.have_aff("torso_bruised") or snd.have_aff("torso_bruised_moderate") or snd.have_aff("torso_bruised_critical")) then
          snd.toparry = "torso"
        else
          snd.toparry = "left leg"
        end
      elseif snd.class_hitting == "shifter" then
        if snd.have_aff("left_leg_mangled") then
          snd.toparry = "left leg"
        elseif snd.have_aff("right_leg_mangled") then
          snd.toparry = "right leg"
        elseif snd.have_aff("left_arm_mangled") then
          snd.toparry = "left arm"
        elseif snd.have_aff("right_arm_mangled") then
          snd.toparry = "right arm"
        elseif snd.have_aff("head_mangled") then
          snd.toparry = "head"
        elseif snd.have_aff("torso_mangled") then
          snd.toparry = "torso"
        elseif snd.limb_damage[limb] &gt; 27 then
          snd.toparry = limb
        elseif snd.limb_damage[limb] &gt; 33 then
          snd.toparry = limb
        else
          snd.toparry = "left arm"
        end
      elseif snd.class_hitting == "wayfarer" then
        if snd.limb_damage[limb] &gt; 25 then
          snd.toparry = limb
        elseif snd.limb_damage[limb] &gt; 33 then
          snd.toparry = limb
        else
          snd.toparry = "right arm"
        end
      elseif snd.class_hitting == "zealot" then
        if snd.parry.heelrush ~= snd.toparry then
          snd.toparry = snd.parry.heelrush
        elseif snd.limb_damage["torso"] &gt; 16 and snd.toparry ~= "torso" then
          snd.toparry = "torso"
        else
          if snd.limb_damage[limb] &gt; highest and snd.limb_damage[limb] &lt; 33.33 then
				    highest = snd.limb_damage[limb]
				    snd.toparry = limb
			    end
        end
      else
        if snd.limb_damage[limb] &gt; highest and snd.limb_damage[limb] &lt; 33.33 then
				  highest = snd.limb_damage[limb]
				  snd.toparry = limb
			  end
      end
			if snd.limb_damage[limb] &gt; 25 then
				snd.aff_have(aff)
			else
				snd.aff_remove(aff)
			end
		end
	end
	if snd.toparry ~= "none" and snd.toparry ~= snd.parrying and snd.full_balance() and not snd.waiting.parry then
		if snd.class == "Zealot" and hasSkill("Fending") then
			snd.send("fend "..snd.toparry)
		elseif snd.class == "Monk" and hasSkill("Guarding") then
			snd.send("guard "..snd.toparry)
		elseif hasSkill("Parrying") then
      if not (snd.class == "Zealot" or snd.class == "Monk") then
			  snd.send("parry "..snd.toparry)
      elseif snd.class == "Zealot" then
        snd.send("fend "..snd.toparry)
      elseif snd.class == "Monk" then
        snd.send("guard "..snd.toparry)
      end
		end
		snd.waiting.parry = true
		tempTimer(snd.delay(), [[snd.waiting.parry = false]])
	end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Offense</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>PvP variables</name>
						<packageName></packageName>
						<script>snd.channeling = false
snd.offense_loaded = true
snd.enemies = {}
snd.allies = {}
snd.hitting = "none"
snd.aff_list = {}

snd.firstaidchangecure = false
snd.firstaidprioritylistset()
snd.firstaidclassset = false
snd.sync = true
snd.limbbrokencount = 0
snd.firstaidcureset = "none"
snd.firstaidpredict = {}
snd.pushattack = false
snd.spectype = ""
snd.parried = false
snd.percentesthealth = 100
snd.percentestmana = 100
snd.waking = false
snd.queuerenew = false
snd.recon = false
snd.endgamerecheck = false
snd.endgamequeue = false
snd.restand = true
snd.equilibrium = true
snd.focusrecheck = false
snd.nextcurecheck = true
snd.herbaffflag = false
snd.herbalance = true
snd.herbretry = false
snd.salvebal = true
snd.salveaffflag = false
snd.salveretry = false
snd.firstaid = true
snd.statustimer = true
snd.eyewait = false
snd.lonelinesscheck = false
snd.hatredcheck = false
snd.clottime = true
snd.firstaidclotlevel = "60"
snd.herbalance = true
snd.salvebal = true
snd.focus = true
snd.tree = true
snd.pipebalance = true
snd.recon = true
snd.moss = true
snd.healbalance = true
snd.enemylist = false
snd.stunrecheck = false
snd.enemycansalve = true
snd.kipup = false
snd.limblist_leftleg = 0
snd.limblist_rightleg = 0
snd.limblist_rightarm = 0
snd.limblist_leftarm = 0
snd.limblist_torso = 0
snd.limblist_head = 0
snd.avoidanceset = "none"
snd.limb_dmg_done = 0
snd.firstaid_go = true
snd.update_priority = 0
snd.unknownquantity = 0
snd.firstaidtrack = ""
snd.counttimes = 0

snd.templar_weapon_one = "shortsword" -- used for Templar offenses
snd.templar_weapon_two = "shortsword" -- used for Templar offenses

snd.current_offense = ""

--Sciomancer
snd.gravity = 0
snd.reflection_charge = 3
snd.repay = 0
snd.firefly_down = false
snd.shadeling = false
snd.reflected = false

--Sentinel
snd.my_raloth = ""

--Archivist
snd.my_token = ""
snd.empowerready = false
snd.geoinvert = false
snd.geotrace = false
snd.madnessused = false
snd.empowerready = false
snd.empowertype = "nil"
snd.my_mutagen = false
snd.their_mutagen = false
snd.my_incite = "nil"
snd.my_impress = ""
snd.squareseal = false
snd.triangleseal = false
snd.circleseal = false
snd.conjoin = false
snd.tree_used = false
snd.knit = false
snd.balance.ethereal = false

--Shaman
snd.shamanpet = ""
snd.morphpet = true
snd.panacea = true
snd.stormcloud = false
snd.incomingomen = false
snd.familiar = false

--Wayfarer
snd.highjumped = false
snd.enraged = false

--Indorani
snd.adder_attached = false
snd.adder_ready = false
snd.target_has_aura = true
snd.need_leech_aura = true

--Monk
snd.target_numbed = false
snd.mindlocked = false
snd.mindclamped = false
snd.hardenBonesProc = false
snd.kaistrikelimb = ""
snd.balance.mindcommand = false
snd.mindAffliction = snd.mindAffliction or "paralyse"
snd.stance = ""
snd.numbness_used = false

--Zealot
snd.zenith = false
snd.zenith_coming = false
snd.zenith_nope = false
snd.firefist = false
snd.firefist_cooldown = true
snd.swagger = 0
snd.welt_ready = "none"
snd.flamestack = 0

--Ascendril
snd.flamewreathed_limb = ""
snd.glimpse = "none"
snd.gorged = ""
snd.glimpsing = false
snd.reflection_charge = 3

--Teradrim
templimbscourge = "none"
snd.lev_gone = false

--Praenomen
snd.runeused = false

--Shapeshifter
  Salivating = false
  salveFail = false


snd.callers = {}
snd.defended = false
snd.last_attack = "none"
snd.last_affs = {}
snd.last_cure = ""
snd.last_cured = ""
snd.mana_percent = 100
snd.health_percent = 100
snd.blazing = false
snd.waze = false
snd.jawlocked = false
snd.soul = 100
snd.implant = "none"
snd.active_hound = "none"
snd.hypno = "none"
snd.last_hypno = 0
snd.hyp = 0
snd.sleight = "void"
snd.battle_aff = "none"
snd.chasten_aff = "none"
snd.flayingfang = false
snd.class_hitting = "none"
snd.person_hitting = "none"
snd.people_hitting_me = {}
snd.players_here = {}
snd.maybe_affs = {}
snd.cureset = "none"
snd.alert_tick = 0
snd.alerts = {}
snd.oldalerts = {}
snd.panic = false
snd.alertness = {}
snd.alertnessDir = "none"
snd.firefly_bal = false
theytumbling = false -- start system with them not being recognized as tumbling
theyran = false -- start system for if they fled and we want to try a quick grab
snd.theyrandir = "none"
snd.neckdragdir = "none"
snd.enemy_restoration_balance = true
snd.enemy_used_regenerate = false
snd.disperse = "none" -- Can be set to none, callers or all.

snd.limbs = {}
snd.parried_limb = "none"
snd.last_hit_limb = "none"
snd.last_limb_dmg = 0
snd.resto_limb = "none"
snd.current_restoration_aff = ""
snd.limb_targeting = {
left = "none",
right = "none"
}
snd.limb_dmg = {
head = 0,
torso = 0,
["left arm"] = 0,
["right arm"] = 0,
["left leg"] = 0,
["right leg"] = 0,
total = 0,
}
snd.limb_status = {
head = "healed",
torso = "healed",
["left arm"] = "healed",
["right arm"] = "healed",
["left leg"] = "healed",
["right leg"] = "healed"
}
snd.limb_bruising = {
head = 0,
torso = 0,
["left arm"] = 0,
["right arm"] = 0,
["left leg"] = 0,
["right leg"] = 0
}
snd.broken_limbs = 0

snd.use_hourglass_on_prismatic = false
snd.giving = {}
snd.hound_queue = {}
snd.target_has = {}
snd.rebounded = false
snd.target_impaled = false


snd.effects = {
--venoms
sight = "oculus",
hearing = "prefarar",
asthma = "kalmia", --kelp
paresis = "curare", --bloodroot
clumsiness = "xentio", --kelp
sensitivity = "prefarar", --kelp
vomiting = "euphorbia", --ginseng
allergies = "darkshade", --ginseng
colocasia = "colocasia", --kelp
haemophilia = "hepafarin", --ginseng
peace = "ouabain", --bellwort

stupidity = "aconite", --goldenseal, focus
weariness = "vernalius", --kelp, focus
recklessness = "eurypteria", --lobelia, focus
dizziness = "larkspur", --goldenseal, focus
shyness = "digitalis", --goldenseal, focus

anorexia = "slike",
belonephobia = "araceae",
slickness = "gecko",

voyria = "voyria", --immunity

squelched = "selarnia",
disfigurement = "monkshood",

thin_blood = "scytherus",
left_leg_broken = "epseth",
right_leg_broken = "epseth",
left_arm_broken = "epteth",
right_arm_broken = "epteth",

rend = "rend",

}

snd.spirituality_attacks = {
paresis = "shield strike",
sight = "shield brilliance",
berserking = "shield facesmash",
weariness = "shield punch",
asthma = "shield slam",
haemophilia = "shield slam",
confusion = "perform dazzle",
writhe_transfix = "evoke transfixion",
}

snd.hound_attacks = {
  ["Carnifex"] = {
    recklessness = "growl",
    dizziness = "growl",
    berserking = "stare",
    impairment = "stare",
    weariness = "acidspit",
    crippled = "acidspit",
    epilepsy = "shock",
    hallucinations = "shock",
    blisters = "poisonclaw",
    limp_veins = "poisonclaw",
    frozen = "tundralhowl"
              },
  ["Warden"] = {
    recklessness = "chant",
    dizziness = "chant",
    berserking = "incite",
    impairment = "incite",
    weariness = "harry",
    crippled = "harry",
    epilepsy = "shock",
    hallucinations = "shock",
    blisters = "poison",
    limp_veins = "poison",
    frozen = "freeze"
  }
}

snd.cures = {

amaurosis = {
"sight",
},

ototoxin = {
"hearing",
},

panacea = {
"patterns",
"shaderot_body",
"shaderot_wither",
"shaderot_heat",
"shaderot_spirit",
"shaderot_benign",
},

anabiotic = {
"plodding",
"idiocy",
},

opiate = {
"paralysis",
"paresis",
"mirroring",
"crippled body",
"crippled",
"blisters",
"slickness",
"heartflutter",
"sandrot",
},

steroid = {
"hubris",
"pacifism",
"peace",
"soulfire",
"soulburn",
"limp_veins",
"lovers_effect",
"laxity",
"supersition",
"generosity",
"justice",
"magnanimity",
},

coagulation = {
"body_odor",
"lethargy",
"allergies",
"mental_disruption",
"physical disruption",
"vomiting",
"exhausted",
"thin_blood",
"rend",
"haemophilia",
},

depressant = {
"commitment_fear",
"merciful",
"recklessness",
"egocentric",
"masochism",
"agoraphobia",
"loneliness",
"berserking",
"vertigo",
"claustrophobia",
"nyctophobia",
},

decongestant = {
"baldness",
"clumsiness",
"hypochondria",
"weariness",
"asthma",
"sensitivity",
"ringing_ears",
"impairment",
"blood_poison",
},

euphoriant = {
"self-pity",
"stupidity",
"dizziness",
"faintness",
"shyness",
"epilepsy",
"impatience",
"dissonance",
"infested",
},

antipsychotic = {
"sadness",
"confusion",
"dementia",
"hallucinations",
"paranoia",
"hatred",
"addiction",
"hypersomnia",
"blood_curse",
"blighted",
},

willow = {
"aeon",
"hellsight",
"deadening"
},

yarrow = {
"slickness",
"withering",
"disfigurement",
"migraine",
"squelched"
},

epidermal = {
"anorexia",
"gorged",
"effused_blood",
"indifference",
"stuttering",
"blurry vision",
"blindness",
"deafness"
},

caloric = {
"hypothermia",
"ice_encased",
"frozen",
"shivering",
"no_caloric"
},

focus = {
"egocentric",
"stupidity",
"anorexia",
"epilepsy",
"mirroring",
"mental disruption",
"peace",
"paranoia",
"hallucinations",
"stuttering",
"dizziness",
"indifference",
"berserking",
"pacifism",
"lovers effect",
"laxity",
"hatred",
"generosity",
"claustrophobia",
"vertigo",
"faintness",
"loneliness",
"agoraphobia",
"masochism",
"recklessness",
"weariness",
"impatience",
"confusion",
"dementia",
"nyctophobia",
"premonition"
}

}

snd.entangleaffs = {
  "writhe_transfix",
	"writhe_impaled",
	"writhe_web",
	"writhe_thighlock",
	"writhe_armpitlock",
	"writhe_necklock",
  "writhe_ropes",
  "writhe_vines",
 }


snd.cureset_skills = {
ascendril = {"Elemancy", "Arcanism", "Thaumaturgy"},
sciomancer = {"Sciomancy", "Sorcery", "Gravitation"},
indorani = {"Necromancy", "Tarot", "Domination"},
praenomen = {"Corpus", "Mentis", "Sanguis"},
archivist = {"Geometrics", "Numerology", "Bioessence"},
teradrim = {"Terramancy", "Animation", "Desiccation"},
luminary = {"Spirituality", "Devotation", "Illumination"},
zealot = {"Zeal", "Purification", "Psionics"},
sentinel = {"Dhuriv", "Woodlore", "Tracking"},
shaman = {"Primality", "Shamanism", "Naturalism"},
monk = {"Tekura", "Kaido", "Telepathy"},
syssin = {"Assassination", "Subterfuge", "Hypnosis"},
shifter = {"Ferality", "Shapeshifting", "Vocalizing"},
wayfarer = {"Tenacity", "Wayfaring", "Fury"},
templar = {"Battlefury", "Righteousness", "Bladefire"},
carnifex = {"Savagery", "Deathlore", "Warhounds"},
revenant = {"Riving", "Manifestation", "Chirography"},
warden = {"Warding", "Ancestry", "Communion"},
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>tracking functions</name>
						<packageName></packageName>
						<script>snd.shadow_targets = {}
snd.spirit_targets = {}
snd.are_we_checking_ql = false

function snd.get_new_target()
  if snd.toggles.calling then
    local new_target = "nil"
    if #snd.players_here ~= 0 and (not table.contains(snd.players_here, snd.target:title()) or snd.targeting.skip) then
    	for _, tar in ipairs(snd.targeting.list) do
    		if table.contains(snd.players_here, tar) and snd.target:title() ~= tar then
          new_target = tar
          snd.target_gone = false
    			expandAlias("t " .. tar)
    			break
        end
    	end
      if new_target == "nil" then
        if sndNDB.players[gmcp.Char.Status.name].tether == "Shadow" then check = snd.spirit_targets else check = snd.shadow_targets end
        for _, tar in ipairs(check) do
      		if table.contains(snd.players_here, tar) then
            new_target = tar
            snd.target_gone = false
      			expandAlias("t " .. tar)
      			break
          end
        end
    	end
    end
  end
   if snd.targeting.skip then snd.targeting.skip = false end
end

function snd.took_limb_dmg(limb, amount)
  if limb and amount then
    if snd.checkAff("assault_damage") and amount &gt; 0 then amount = amount + 3 end
    snd.limb_dmg[limb] = snd.limb_dmg[limb] + amount
    if snd.limb_dmg[limb] &lt; 0 then
      snd.limb_dmg[limb] = 0
    end
    if amount &gt; 0 then cecho("&lt;green&gt; " .. limb .. ": " .. snd.limb_dmg[limb])
    else cecho("&lt;red&gt; " .. limb .. ": " .. snd.limb_dmg[limb])
    end
    if limb == snd.resto_limb and amount == -30 then
      snd.resto_limb = "none"
    end
    if snd.limb_status[limb] ~= "healed" then
      if snd.limb_dmg[limb] &gt;= 66.66 then
        snd.limb_status[limb] = "mangled"
      elseif snd.limb_dmg[limb] &gt;= 33.33 then
        snd.limb_status[limb] = "broken"
      else
        snd.limb_status[limb] = "healed"
      end
    end
    
    local totaldmg = 0
  	snd.limb_dmg.total = 0
    for k, v in pairs(snd.limb_dmg) do
  		if v ~= "total" then
  	    totaldmg = totaldmg + v
    	end
  	end
    snd.limb_dmg.total = totaldmg
    if snd.gui.enabled then
      color_enemy_limbs()
    end
  end
end

function snd.target_got(affliction)
  local target_display_table = {}
  affliction = snd.affNameCheck(affliction)

  if snd.checkAff(affliction) and affliction ~= "a broken leg" and affliction ~= "a broken arm" then
    return
  end
  if snd.defended then
    return
  end
  
  if affliction == "cold" then
    if not snd.checkAff("no_caloric") then affliction = "no_caloric"
    elseif not snd.checkAff("shivering") then affliction = "shivering"
    elseif not snd.checkAff("frozen") then affliction = "frozen"
    elseif not snd.checkAff("ice_encased") and snd.checkAff("frostbrand") then affliction = "ice_encased"
    else return
    end
  end
  
  if affliction == "a broken leg" and snd.checkAff("a broken leg") then
    snd.target_cured("a broken leg")
    affliction = "right_leg_broken"
    snd.target_got("left_leg_broken")
  end
  
  if affliction == "a broken leg" and snd.checksomeAffs({"left_leg_broken", "right_leg_broken"},1) then
    if snd.checkAff("right_leg_broken") then
      affliction = "left_leg_broken"
    else
      affliction = "right_leg_broken"
    end
  end
  
  if affliction == "a broken arm" and snd.checkAff("a broken arm") then
    snd.target_cured("a broken arm")
    affliction = "right_arm_broken"
    snd.target_got("left_arm_broken")
  end
  
  if affliction == "a broken arm" and snd.checksomeAffs({"left_arm_broken", "right_arm_broken"},1) then
    if snd.checkAff("right_arm_broken") then
      affliction = "left_arm_broken"
    else
      affliction = "right_arm_broken"
    end
  end

  if affliction == "crippled_body" then
    snd.target_cured("crippled")
  end
  
  table.insert(snd.target_has, affliction)
  -- add affliction before displaying in pane, used to be below the gui update
    if snd.gui.enabled then
      if #snd.target_has &gt;= 1 then
        for _, v in ipairs(snd.target_has) do
          if v:find("broken") then
            v = v:gsub("a ", "")
            v = v:gsub("left", "L")
            v = v:gsub("right", "R")
          end
          table.insert(target_display_table, "&lt;center&gt;" .. v .. "&lt;/center&gt;")
        end
        eaffs:echo(table.concat(target_display_table))
        --color_enemy_affs()
        color_enemy_limbs()
      else
        eaffs:echo("&lt;center&gt;enemy affs&lt;/center&gt;")
      end
    end
  cecho("&lt;green&gt; " .. affliction)
  snd.waiting.queue = false
end

function snd.target_cured(affliction)

  local target_display_table = {}
  local target_aff_check = {}
  
  affliction = snd.affNameCheck(affliction)

  if affliction == "paralysis" then
    snd.target_cured("paresis")
  end
  --if affliction == "anorexia" then
  --  snd.target_cured("voyria")
  --end
  if affliction == "shivering" then
    snd.target_cured("frozen")
  end
  if affliction == "soulfire" then
    snd.target_cured("soulburn")
  end
  
  if affliction == "cold" then
    if snd.checkAff("ice_encased") then snd.target_cured("ice_encased")
    elseif snd.checkAff("frozen") then snd.target_cured("frozen")
    elseif snd.checkAff("shivering") then snd.target_cured("shivering")
    elseif snd.checkAff("no_caloric") then snd.target_cured("no_caloric")
    end
  end 
  
	if snd.checkAff("a broken arm") and (affliction == "right_arm_broken" or affliction == "left_arm_broken") and not snd.checkAff(affliction) then
		affliction = "a broken arm"
	end
	if snd.checkAff("a broken leg") and (affliction == "right_leg_broken" or affliction == "left_leg_broken") and not snd.checkAff(affliction) then
		affliction = "a broken leg"
	end
  
  for i in pairs(snd.target_has) do
    if snd.target_has[i] == affliction then
      table.remove(snd.target_has, i)
      cecho("&lt;red&gt; " .. affliction)
      snd.last_cured = affliction
      if affliction == "gorged" then
        snd.gorged = ""
      end
    end
  end
  if snd.gui.enabled then
    if #snd.target_has &gt;= 1 then
      for _, i in ipairs(snd.target_has) do
        table.insert(target_display_table, "&lt;center&gt;" .. i .. "&lt;/center&gt;")
      end
      eaffs:echo(table.concat(target_display_table))
      --color_enemy_affs()
    else
      eaffs:echo("&lt;center&gt;enemy affs&lt;/center&gt;")
      color_enemy_limbs()
    end
  end
  if not snd.target_gone then
    snd.waiting.queue = false
  end
end

function snd.target_used(curative)
  if snd.cures[curative] ~= nil then
    aff_found = false
    for affliction in pairs(snd.cures[curative]) do
      for i in pairs(snd.target_has) do
        if snd.target_has[i] == snd.cures[curative][affliction] and not aff_found then
          if curative == "panacea" then
            if snd.cures[curative][affliction] == "shaderot_body" then
              snd.target_cured("shaderot_wither")
            elseif snd.cures[curative][affliction] == "shaderot_wither" then
              snd.target_cured("shaderot_heat")
            elseif snd.cures[curative][affliction] == "shaderot_heat" then
              snd.target_cured("shaderot_spirit")
            elseif snd.cures[curative][affliction] == "shaderot_spirit" then
              snd.target_cured("shaderot_benign")
            end
            snd.target_cured(snd.cures[curative][affliction])
            aff_found = true
					elseif snd.target_has[i] == "blighted" or snd.target_has[i] == "infested" then
						if not snd.checkAff("premonition") then
            	snd.target_cured(snd.cures[curative][affliction])
           		aff_found = true
						end					
          else
            snd.target_cured(snd.cures[curative][affliction])
            aff_found = true
          end
        end
      end
    end
  end
  snd.last_cure = curative
end

function snd.vital_change(vital, amount)
  if vital == "health" then
    snd.health_percent = snd.health_percent + amount
    if snd.health_percent &gt; 100 then
      snd.health_percent = 100
    end
    if snd.health_percent &lt; 0 then
      snd.health_percent = 0
    end
  elseif vital == "mana" then
    snd.mana_percent = snd.mana_percent + amount
    if snd.mana_percent &gt; 100 then
      snd.mana_percent = 100
    end
    if snd.mana_percent &lt; 0 then
      snd.mana_percent = 0
    end
  end
end

function snd.alertnessHit(dir, name, type)
  if snd.alertnessDir ~= "none" and snd.alertnessDir ~= dir then
    snd.alertness = {}
  end
  if sndNDB.players[gmcp.Char.Status.name].tether ~= nil and sndNDB.players[name].tether ~= nil then
    if sndNDB.players[gmcp.Char.Status.name].tether ~= sndNDB.players[name].tether then
      table.insert(snd.alertness, name)
      snd.alertnessDir = dir
      snd.alertType = type
    end
  end
end

function Reverse(arr)
  local i, j = 1, #arr
  while i &lt; j do
    arr[i], arr[j] = arr[j], arr[i]
    i = i + 1
    j = j - 1
  end
end

function snd.onHit()
  if snd.toggles.atkecho and snd.gui.enabled then
    deleteLine()
    snd.message(snd.hitting .. " hit: " .. snd.getting_hit .. ".")
  end
  snd.last_affs = {}

  if #snd.maybe_affs &gt;= 1 and (snd.getting_hit == snd.target) then
    if snd.maybe_affs[1] == "blaze" then
      snd.used.rebounding = false
      table.remove(snd.maybe_affs, 1)
    else
      local aff = ""
      aff = snd.venomEffect(snd.maybe_affs[1]) 
      
      if snd.maybe_affs[1] == "placeholder" then
        snd.last_aff = ""
        table.remove(snd.maybe_affs, 1)
      elseif snd.maybe_affs[1]:find("broken") then
        snd.target_got(snd.maybe_affs[1])
        table.remove(snd.maybe_affs, 1)
        table.insert(snd.last_affs, aff)
      elseif aff ~= "" then
        snd.target_got(aff)
        table.remove(snd.maybe_affs, 1)
        table.insert(snd.last_affs, aff)
      end
    end
  end
end

function snd.onHit2(checks, conditional)
  snd.last_affs = {}
  local aff = ""
  if (#snd.maybe_affs &gt;= 1 or snd.last_limb_dmg ~= 0) then -- Make sure affs or limb damage are populated
    if snd.maybe_affs[1] == "blaze" then -- take care of rebounding
      snd.used.rebounding = false
    else 
      if #snd.maybe_affs &gt; 0 and not (snd.checkAff(snd.venomEffect(snd.maybe_affs[1])) or snd.checkAff(snd.maybe_affs[1])) then -- if its an aff and
        if snd.venomEffect(snd.maybe_affs[1]) == "" then                                                                        -- not an aff/venom already
          aff = snd.maybe_affs[1]                                                                                               -- on them, populate aff
        else
          aff = snd.venomEffect(snd.maybe_affs[1])
        end
        snd.target_got(aff)
        table.insert(snd.last_affs, aff)
      end
    end

     if aff == "" and snd.last_limb_dmg == 0 then 
      if #snd.maybe_affs &gt;0 then
        table.remove(snd.maybe_affs, 1) 
      end
      return  -- at this point, if aff is empty and there's no limb dmg just abort mission captain
     else -- otherwise, something is populated and we need to turn on dodging/rebounding/parrying
      if checks ~= {} then
        for _, v in pairs(checks) do
            enableTrigger("Sunder "..v)
        end
      end
     end 
      -- With the way it's set up to handle only 1 aff, there's no easy way to account for 2 affs in 1 attack.
      -- Might look into it more later, this'll work for now.
      if aff == "laxity" and conditional == "Sentinel Slam" and snd.maybe_affs[2] == "epilepsy" then
        snd.target_got("epilepsy")
        table.insert(snd.last_affs, "epilepsy")
        table.remove(snd.maybe_affs, 2) 
      end

      if aff == "stupidity" and conditional == "Zealot Sunkick" and snd.maybe_affs[2] == "dizziness" then
        snd.target_got("dizziness")
        table.insert(snd.last_affs, "dizziness")
        table.remove(snd.maybe_affs, 2) 
      end
      
      if aff == "asthma" and conditional == "Luminary Slam" and snd.maybe_affs[2] == "haemophilia" then
        snd.target_got("haemophilia")
        table.insert(snd.last_affs, "haemophilia")
        table.remove(snd.maybe_affs, 2) 
      end      
      
      if aff == "berserking" and conditional == "Luminary Facesmash" and snd.maybe_affs[2] == "sight" then
        snd.target_got("sight")
        table.insert(snd.last_affs, "sight")
        table.remove(snd.maybe_affs, 2) 
      end

      if conditional == "Teradrim Skullbash" and #snd.maybe_affs &gt; 1 then
        if snd.maybe_affs[3] ~= nil and not snd.checkAff(snd.maybe_affs[3]) then
          snd.target_got(snd.maybe_affs[3])
          table.insert(snd.last_affs, snd.maybe_affs[3])
        end
        if not snd.checkAff(snd.maybe_affs[2]) then
          snd.target_got(snd.maybe_affs[2])
          table.insert(snd.last_affs, snd.maybe_affs[2])
        end
      end
      
      -- Need a way to handle 2handed attacks (Sentinel, Templar DSW, Carnifex, etc)
      
      if conditional == "Sentinel Slash" or conditional == "Carnifex" or conditional == "Warden" then
        if snd.using_both_hands == 1 then
          snd.using_both_hands = 2
        else
          snd.using_both_hands = 1
        end
      end
  end

  table.remove(snd.maybe_affs, 1) 

  if conditional == "Templar" and #snd.maybe_affs &lt; 1 then --also works for revenant since same messages
      disableTrigger("Weapon Hit Confirmation") 
  end
  if conditional == "Syssin" and #snd.maybe_affs &lt; 1 then
    disableTrigger("Syssin Hit Confirmation")
  end
end


function snd.checkAff(affliction)

  if affliction == "paresis" then
    if table.contains(snd.target_has, affliction) or table.contains(snd.target_has, "paralysis") then
      return true
    else
      return false
    end
  elseif affliction == "anorexia" then
    if table.contains(snd.target_has, affliction) or table.contains(snd.target_has, "destroyed_throat") then
      return true
    else
      return false
    end
  else
    affliction = snd.affNameCheck(affliction)
    if table.contains(snd.target_has, affliction) then
      return true
    else
      return false
    end
  end
end

function snd.checksomeAffs(afflictions, number)
  if number == 0 then
    return true
  end
  if number == nil then
    number = 1
  end
  if type(afflictions) == "string" then
    return snd.checkAff(afflictions)
  elseif type(afflictions) == "table" then
    local count = 0
    for i, v in ipairs(afflictions) do
      if snd.checkAff(v) then
        count = count + 1
        if count &gt;= number then
          return true
        end
      end
    end
    -- if the count of how many returned true didn't meet or exceed the number given, return false
    return false
  end
end

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>attack function</name>
						<packageName></packageName>
						<script>
function snd.attack_function()
 echo("\nYou haven't set up an attack alias yet!")
end

function snd.attack(attack)

  local string = ""
  if snd.can_fitness() and snd.need_fitness then
 	 string = "fitness"
  elseif snd.can_shrug() and snd.need_fitness then
 	 string = "shrug asthma"
  else
 	 string = attack
  end
 	 string = "stand"..snd.sep.."g body"..snd.sep.."g husk"..snd.sep..string
  if snd.toggles.parrying and snd.toparry ~= "none" and snd.toparry ~= snd.parrying then
 	 string = "parry "..snd.toparry..snd.sep..string
  end

  if snd.emptypipe ~= "none" then
 	 string = "outc "..snd.emptypipe..snd.sep.."put "..snd.emptypipe.." in emptypipe"..snd.sep..string
  end
  if not snd.pipes_lit and snd.toggles.lighting then
 	 string = "light pipes"..snd.sep..string
  end
	if string:find("slaughter") then
    snd.send("qeb")
		snd.send("queue axes "..string)
	else
		snd.send("queue axes")
		snd.send("qeb "..string)
	end
end

function snd.starting_attack()
 snd.send("target nothing with left"..snd.sep.."target nothing with right")
 snd.send("leading off")
 snd.toggles.attacking = true
 snd.class_hitting = "none"
 snd.person_hitting = "none"
 snd.active_hound = "none"
 snd.implant = "none"
end

function snd.handle_hounds()
 if snd.balance.hound and not snd.waiting.hound and gmcp.Char.Vitals.balance == "1" then

 local class = {["Carnifex"] = "hound", ["Warden"] = "simulacrum"}
  local string = ""
  local hound_aff = "none"
	if (snd.class == "Carnifex" and snd.defenses.def_houndmark.state ~= "deffed") 
  or (snd.class == "Warden" and snd.defenses.def_tacticianmark.state ~= "deffed") then
		--hound_aff = "mark"
	end

  for i in pairs(snd.hound_queue) do
    if not snd.checkAff(snd.hound_queue[i]) then
      if hound_aff == "none" then
        hound_aff = snd.hound_attacks[snd.class][snd.hound_queue[i]]
      end
    end
  end
  if hound_aff == "none" then 
    if snd.class == "Carnifex" then 
      hound_aff = "contagion"
    else
      hound_aff = "sabotage" 
    end
  end
  
	if hound_aff ~= "none" then
   
	 snd.send(string..class[snd.class].." "..hound_aff.." "..snd.target)
	 snd.waiting.hound = true
	 tempTimer(snd.delay(), [[snd.waiting.hound = false]])
	end
  
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>alerts</name>
						<packageName></packageName>
						<script>
function snd.run_alerts()
 local string = ""
 if snd.alert_tick &gt;= 5 then
  snd.alert_tick = 0
	snd.oldalerts = snd.alerts
  snd.alerts = {}
	snd.panic = false
  if snd.have_aff("sapped_stats") then
   table.insert(snd.alerts, "\n&lt;white&gt;         SAPPED STATS GTFO")
  end
	if snd.have_aff("hypertension") then
	 table.insert(snd.alerts, "\n&lt;white&gt;         HYPERTENSION GTFO")
	end
	if snd.have_aff("soul_poison") then
	 table.insert(snd.alerts, "\n&lt;white&gt;         SOUL POISON GTFO")
	end
	--if tonumber(gmcp.Char.Vitals.soul) &lt; 50 then
	-- table.insert(snd.alerts, "\n&lt;white&gt;        SOUL LOW, SOUL LOW")
	--end
  if snd.have_aff("anorexia") and snd.have_aff("asthma") and snd.have_aff("slickness") then
   table.insert(snd.alerts, "\n&lt;yellow&gt;        YOU ARE VENOM LOCKED")
  end
  if snd.aff_tally() &gt;= 8 then
   table.insert(snd.alerts, "\n&lt;blue&gt;       YOU HAVE TOO MANY AFFS")
  end
  if (100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)) &lt;= 40 then
	 if snd.have_aff("sensitivity") then
	  snd.send("firstaid elevate sensitivity")
	 end
   table.insert(snd.alerts, "\n&lt;brown&gt;      YOUR HEALTH IS LOW")
  end
	if (100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)) &lt;= 40 then
	 table.insert(snd.alerts, "\n&lt;brown&gt;       YOUR MANA IS LOW")
	end
	if tonumber(gmcp.Char.Vitals.madness) &gt;= 60 then
	 table.insert(snd.alerts, "\n&lt;red&gt;      THE MADNESS IS COMING, EAT UP")
	end
  if #snd.alerts &gt;= 1 then
   border = "\n&lt;red&gt;*************************************"
	 string = ""
	 for i in pairs(snd.alerts) do
	  string = string..snd.alerts[i]
		if table.contains(snd.oldalerts, snd.alerts[i]) and not string.find(snd.alerts[i], "MADNESS") then
		 snd.panic = true
		end
	 end
	 string = border..string..border
	 cecho(string)
	 if snd.panic and snd.toggles.affcalling and not snd.waiting.melting then
	  if snd.toggles.attacking or (snd.toggles.bashing and #snd.group &gt;= 1) then
	   if snd.faction == "spirit" then
	    snd.send("wt I'm melting! I'm melting!")
		 elseif snd.faction == "shadow" then
		  snd.send("wt I'm really close to death.")
		 end
		 snd.waiting.melting = true
		 tempTimer(5, [[snd.waiting.melting = false]])
		end
	 end
  end
 else
  snd.alert_tick = snd.alert_tick + 1
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>misc</name>
						<packageName></packageName>
						<script>

function snd.reset_target()
 snd.target_has = {}
 for limb in pairs(snd.limb_dmg) do
  snd.limb_dmg[limb] = 0
 end
 for limb in pairs(snd.limb_status) do
  snd.limb_status[limb] = "healed"
 end
 for limb in pairs(snd.limb_bruising) do
  snd.limb_bruising[limb] = 0
 end
 snd.hypno = "none"
 snd.hyp = 0
 snd.last_hypno = 0
 if restoration_timer then killTimer(restoration_timer) end
 snd.current_restoration_aff = ""
 snd.resto_limb = "none"
 --snd.used.rebounding = false
 snd.used.shield = false
 snd.used.paste = true
 snd.target_impaled = false
 snd.jawlocked = false
 snd.last_attack = "none"
 snd.target_gone = false
 snd.implant = "none"
 snd.mana_percent = 100
 snd.health_percent = 100
 snd.target_numbed = false
 snd.target_has_aura = true
 snd.need_leech_aura = true
 snd.flamewreathed_limb = ""
 snd.gorged = ""
 snd.gravity = 0
  if snd.gui.enabled then 
    color_enemy_affs()
    color_enemy_limbs()
  end
end

function snd.target_locked()
 local lock_affs = {
  "slickness",
	"anorexia",
	"asthma",
	"paresis"
 }
 
 local locked = true
 
	for aff in pairs(lock_affs) do
		if not snd.checkAff(lock_affs[aff]) then
			locked = false
		end
	end
	
	if not snd.checkAff("stupidity") and not (snd.checkAff("impatience") or snd.checkAff("destroyed_throat")) then
		locked = false
	end
	
	return locked
end


function snd.missingAff(list, separator)
	local list = string.split(list, separator)
	local tab = {}
	for k, v in pairs(list) do
		if v == "stupidity" then
			if not snd.checkAff(v) and not snd.checkAff("impatience") then
				table.insert(tab, v)
			end
			elseif not snd.checkAff(v) then
				table.insert(tab, v)
			end
		end
	return tab
end

function snd.no_parry()
 local no_parry = false
 local noparryaffs = {
  "distortion",
  "frozen",
  "punished_arms",
  "paresis",
  "paralysis",
  "asleep",
	"writhe_transfix",
	"writhe_web",
  "writhe_feed",
	"writhe_impaled",
	"writhe_thighlock",
	"writhe_armpitlock",
	"writhe_necklock",
  "writhe_ropes",
  "writhe_vines",
 }
 if not snd.checksomeAffs(noparryaffs, 1) then no_parry = true end
 
 if (snd.limb_dmg["left arm"] &gt;= 33.33) and (snd.limb_dmg["right arm"] &gt;= 33.33) then
  no_parry = true
 end
 return no_parry
end

function snd.proned()
 local prone = false
 local proneaffs = {
  "frozen",
  "indifference",
  "paralysis",
	"writhe_transfix",
	"writhe_web",
  "writhe_feed",
	"writhe_impaled",
	"writhe_thighlock",
	"writhe_armpitlock",
	"writhe_necklock",
  "writhe_ropes",
  "writhe_vines",
  "fallen",
  "asleep",
 }
 if snd.checksomeAffs(proneaffs, 1) then prone = true end
 return prone
end

function snd.venomEffect(venom)
	local aff = ""
	if venom == "epseth" then
		if snd.checkAff("left_leg_broken") then
			aff = "right_leg_broken"
		else
			aff = "left_leg_broken"
		end
	elseif venom == "epteth" then
		if snd.checkAff("left_arm_broken") then
			aff = "right_arm_broken"
		else
			aff = "left_arm_broken"
		end
	elseif venom == "prefarar" then
		if snd.checkAff("hearing") then
			aff = "sensitivity"
		else
			aff = "hearing"
		end
	elseif venom == "oculus" then
		if snd.checkAff("sight") then
			aff = "blurry_vision"
		else
			aff = "sight"
		end
	elseif venom == "cripple" then
		if snd.checkAff("crippled") then
			aff = "crippled body"
		else
			aff = "crippled"
		end
	elseif venom == "azu" then
		if snd.checkAff("crippled") then
			aff = "crippled body"
		else
			aff = "crippled"
		end
	elseif venom == "disrupt" then
		if snd.checkAff("mental disruption") then
			aff = "physical disruption"
		else
			aff = "mental disruption"
		end
	elseif venom == "dirne" then
		if snd.checkAff("mental disruption") then
			aff = "physical disruption"
		else
			aff = "mental disruption"
		end
	elseif venom == "curare" then
    if snd.checkAff("paresis") then
      aff = "paresis"
    end
	else
		for i in pairs(snd.effects) do
			if snd.effects[i] == venom then
				aff = i
			end
		end
	end
	return aff
end

function snd.check_aegis()

	local reserves = tonumber(gmcp.Char.Vitals.residual)
	
	if reserves &gt;= 60 then
		return true
	else
		return false
	end

end

function snd.affNameCheck(x)

local aff = x
local affs_to_change = {
  ["limp veins"] = "limp_veins",
  ["thin blood"] = "thin_blood",
  ["heart flutter"] = "heartflutter",
  ["self-pity"] = "self_pity",
  ["mental disruption"] = "mental_disruption",
  ["physical disruption"] = "physical_disruption",
  ["blurry vision"] = "blurry_vision",
  ["destroyed throat"] = "destroyed_throat",
}
  
  if affs_to_change[aff] then
    return affs_to_change[aff]
  else
    return aff:gsub(" ", "_")
  end

end

function snd.removeProneStates(all) -- Reset a target back to standing w/no writhes or other affs
  local writhe_table = {
  	"writhe_transfix",
  	"writhe_web",
  	"writhe_impaled",
  	"writhe_thighlock",
  	"writhe_armpitlock",
  	"writhe_necklock",
    "writhe_ropes",
    "writhe_vines",
   }
   
   local other_prones = {
    "frozen",
    "indifference",
    "asleep",
    "paralysis",
    }
    
    local removals = {}
    if all then removals = table.n_union(writhe_table, other_prones)
    else removals = writhe_table
    end
  for _, v in pairs(removals) do snd.target_cured(v) end
  
  snd.jawlocked = false
  snd.target_impaled = false
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>All attacks</name>
						<packageName></packageName>
						<script>-- In an effort to help cut down on the amount of triggers, we will transition to using a table of attacks/effects.
-- Let's just blame Bulrok if it turns out worse, yes? We won't even call this one a tie.
-- Sending the target of the ability to each isn't necessary but may be utilized later on if we changed the aff giving function.

snd.all_class_attacks = {

--Luminary
  ["Spirituality"] = {
  
  Crush = function(target, limb)
            snd.last_hit_limb = limb
            enableTrigger("Luminary Crush Confirmation")
          end,
  
  Smash = function(target, limb)
           	snd.last_hit_limb = limb
          	snd.last_limb_dmg = 25
          	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Parry", "Dodge"})
          end,
  
  Aura = function(target)
           snd.used.shield = true
         end,
  
  Sear = function(target)
           snd.target_got("ablaze")
           snd.target_got("angel_seared")
           tempTimer(15, [[snd.target_cured("angel_seared")]])
         end,
  
  Strip = function(target, defense)
            snd.used.rebounding = false
          end,
          
  Raze = function(target, defense)
            if defense == "shield" then snd.used.shield = false
            elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
            end
          end,
          
  Chasten = function(target)
             if snd.battle_aff ~= "none" then
              snd.target_got(snd.battle_aff)
            	table.insert(snd.last_affs, snd.battle_aff)
             end
             if snd.chasten_aff ~= "none" then
              snd.target_got(snd.chasten_aff)
            	table.insert(snd.last_affs, snd.chasten_aff)
             end
            end,
  
  Strike = function(target)
            table.insert(snd.maybe_affs, "paresis")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  Punch = function(target)
            table.insert(snd.maybe_affs, "weariness")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  Facesmash = function(target)
                if not snd.checksomeAffs({"berserking", "sight"}, 1) then
                  table.insert(snd.maybe_affs, 1, "berserking")
                  table.insert(snd.maybe_affs, 2, "sight")
                elseif snd.checkAff("berserking") then
                  table.insert(snd.maybe_affs, 1, "sight")
                else
                  table.insert(snd.maybe_affs, 1, "berserking")
                end
                snd.onHit2({"Dodge", "Rebounding"}, "Luminary Facesmash")
              end,
  Slam = function(target)
                if not snd.checksomeAffs({"asthma", "haemophilia"}, 1) then
                  table.insert(snd.maybe_affs, 1, "asthma")
                  table.insert(snd.maybe_affs, 2, "haemophilia")
                elseif snd.checkAff("asthma") then
                  table.insert(snd.maybe_affs, 1, "haemophilia")
                else
                  table.insert(snd.maybe_affs, 1, "asthma")
                end
                snd.onHit2({"Dodge", "Rebounding"}, "Luminary Slam")
              end,
  Brilliance = function(target)
            table.insert(snd.maybe_affs, "sight")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  
  },
  
  ["Devotion"] = {
    Dazzle = function(target)
               snd.target_got("confusion")
               snd.target_got("dizziness")
             end,
    Peace = function(target)
               snd.target_got("peace")
             end,
    Hellsight = function(target)
                  snd.target_got("hellsight")
                end,

  },
  
  ["Illumination"] = {
    Lightning = function(target)
                 snd.target_got("epilepsy")
                end,
                
    Transfixion = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                  end,
    Heatwave = function(target)
                snd.target_got("berserking")
                snd.target_got("hallucinations")
              end,
    Sear = function(target)
             snd.target_got("tree_seared")
             tempTimer(19, [[snd.target_cured("tree_seared")]])
           end,
    Fire = function(target)
             snd.target_got("ablaze")
             enableTrigger("Illumination Fire")
           end,
  },
  
--Zealot
  ["Zeal"] = {
    Swagger = function(target)
               snd.target_cured("paresis")
             end,
    Anklepin = function(target)
               snd.target_got("sore_ankle")
             end,
    Jawcrack = function(target)
               snd.target_got("stuttering")
               snd.target_got("blurry_vision")
             end,
    Descent = function(target)
               snd.target_got("backstrain")
             end,                          
    Wristlash = function(target)
               snd.target_got("sore_wrist")
             end,
    Uprise = function(target)
               snd.target_got("whiplash")
             end,
    Blitz = function(target, conditional)
              if conditional == "start" then
                enableTrigger("Blitz Affs")
              else
                disableTrigger("Blitz Affs")
              end
            end,
    Palmforce = function(target)
                  snd.target_got("fallen")
                end,       
    Dislocate = function(target, limb)
                  table.insert(snd.maybe_affs, 1, limb.."_dislocated")
                  snd.onHit2({"Dodge", "Parry"})
                end,
    Twinpress = function(target)
                	table.insert(snd.maybe_affs, "stiffness")
                	table.insert(snd.maybe_affs, "muscle_spasms")
                  snd.onHit2({"Dodge"})
                end,
    Clawtwist = function(target)
                    snd.last_hit_limb = "torso"
                    snd.last_limb_dmg = 14
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Pummel = function(target, limb)
                    snd.last_hit_limb = limb
                    snd.last_limb_dmg = 9.5
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Wanekick = function(target, limb)
                    snd.last_hit_limb = limb
                    snd.last_limb_dmg = 9
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Risekick = function(target)
                	snd.last_hit_limb = "torso"
                	snd.last_limb_dmg = 5
                	snd.took_limb_dmg("torso", snd.last_limb_dmg)
                  snd.onHit2({"Parry", "Dodge"})
                end,
    Edgekick = function(target)
                 	snd.last_hit_limb = "head"
                	snd.last_limb_dmg = 3.49
                	snd.took_limb_dmg("head", snd.last_limb_dmg)
                  table.insert(snd.maybe_affs, 1, "crippled_throat")
                  snd.onHit2({"Parry", "Dodge"})
                end,
    Sunkick = function(target)
                snd.last_hit_limb = "head"
              	snd.last_limb_dmg = 6
              	snd.took_limb_dmg("head", snd.last_limb_dmg)
                if not snd.checksomeAffs({"stupidity", "dizziness"}, 1) then
                  table.insert(snd.maybe_affs, 1, "stupidity")
                  table.insert(snd.maybe_affs, 2, "dizziness")
                elseif snd.checkAff("stupidity") then
                  table.insert(snd.maybe_affs, 1, "dizziness")
                else
                  table.insert(snd.maybe_affs, 1, "stupidity")
                end
                snd.onHit2({"Dodge", "Parry"}, "Sunkick")    
              end,
    Direblow = function(target)
                -- enableTrigger("Direblow Hit Confirmation")
                end,
    Heelrush = function(target)
                 enableTrigger("Heelrush")
               end,
                
  },
  
  ["Purification"] = {
  
  Heatspear = function(target)
                snd.target_got("heatspear")
              end,

  Scorch = function(target)
             snd.target_got("ablaze")
           end,
  Rejection = function(target)
                snd.used.rebounding = true
              end,
  Quicken = function(target)
            snd.target_got("ablaze")
            snd.flamestack = snd.flamestack + 3
            becho(""..target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
            end,
  Pendulum = function(target, direction)
              local pendulum_table = {--Create the table showing what limb references what
              ["left arm"] = {["clockwise"] = "right arm", ["anti-clockwise"] = "left leg"},
              ["right arm"] = {["clockwise"] = "right leg", ["anti-clockwise"] = "left arm"},
              ["right leg"] = {["clockwise"] = "left leg", ["anti-clockwise"] = "right arm"},
              ["left leg"] = {["clockwise"] = "left arm", ["anti-clockwise"] = "right leg"},
              }
              local limb_damage_copy = mmp.deepcopy(snd.limb_dmg) -- copy limb damage table so we can manipulate values while iterating current unchanged values
              
              for k, v in pairs(limb_damage_copy) do
                if k ~= "total" and k ~= "head" and k ~= "torso" and v &gt; 0 then -- only check appendages and ones with damage
                  snd.took_limb_dmg(pendulum_table[k][direction], v) -- add limb damage to new limb
                  snd.took_limb_dmg(k, -v) -- remove damage from current limb

                  local x = snd.limb_dmg[pendulum_table[k][direction]] -- check current amount of limb dmg
                  if x &gt; 33.33 then -- check if its got a damage break
                    if x &gt; 66.66 then -- check if its gotten mangled
                      snd.limb_status[pendulum_table[k][direction]] = "mangled" -- if it has, update our snd.limb_status map
                    else
                      snd.limb_status[pendulum_table[k][direction]] = "broken" -- as above
                    end
                  end
                  
                  if snd.checkAff(k:gsub(" ", "_").."_broken") then -- we need to check for level one breaks as well
                    snd.target_got(pendulum_table[k][direction]:gsub(" ", "_").."_broken")--add new limb break
                    snd.target_cured(k:gsub(" ", "_").."_broken")--remove old
                  end
                end
              end
            end,
  },
  
  ["Psionics"] = {
        Neutralise = function(target)
                       snd.target_got("no_speed")
                     end,
                    
        Deprival = function(target)
                    snd.target_got("merciful")
                    snd.target_got("dementia")
                    snd.target_got("paranoia")
                  end,
  },
  
--Ascendril
  ["Elemancy"] = {
  
    Thunder = function(target)
                snd.target_got("dizziness")
                snd.target_got("stupidity")
  	          end,
    Direfrost = function(target)
                  snd.target_got("direfrost")
                end,
    Ignite = function(target, conditional)
               if conditional == "Ablaze" then
                 snd.target_got("ablaze")
               end
             end,
    Firelash = function(target, element, conditional)
                	snd.last_hit_limb = conditional
                	snd.last_limb_dmg = 12
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Parry", "Dodge"})
                	if snd.flamewreathed_limb == "" and element == "Fire" then
                		snd.flamewreathed_limb = conditional
                	end
                end,
    Scorch = function(target, element, conditional)
            	if element == "Water" then
            		snd.target_got("slickness")
            	elseif element == "Air" then
            		snd.target_got("asthma")
            	end
              if conditional == "Arms" then
                if snd.checkAff("ablaze") then
                  snd.target_got("left_arm_broken")
                  snd.target_got("right_arm_broken")
                else
                  snd.target_got("a broken arm")
                end
              else
                if snd.checkAff("ablaze") then
                  snd.target_got("left_leg_broken")
                  snd.target_got("right_leg_broken")
                else
                  snd.target_got("a broken leg")
                end
              end
            end,
    Hailstorm = function(target, element)
                	if element == "Air" then
                  		snd.target_got("lethargy")
                      snd.target_got("cold")
                  		if snd.proned() then
                  			snd.target_got("confusion")
                  		end
                  	else
                  		snd.target_got("dizziness")
                  	end
                  end,
    Windlance = function(target, element)
                	snd.used.shield = false
                	if melement == "Air" then
                		if snd.checkAff("clumsiness") then
                			snd.target_got("dizziness")
                		else
                	 		snd.target_got("clumsiness")
                		end
                	end
                end,
    Pressurize = function(target, element)
                	if snd.checkAff("vertigo") then
                		snd.target_got("confusion")
                	else
                 		snd.target_got("vertigo")
                	end
                	if element == "Water" then
                		snd.target_got("weariness")
                	elseif element == "Fire" then
                		snd.target_got("clumsiness")
                	end
                end,
      Coldsnap = function(target, element)
                   	snd.target_got("stupidity")
                  	if element == "Fire" then
                  		snd.target_got("recklessness")
                  	elseif element == "Air" then
                  		snd.target_got("masochism")
                  	end
                  end,
      Mistral = function(target, element)
                  snd.target_got("cold")
                	if element == "Water" then
                    snd.target_got("cold")
                	elseif element == "Fire" then
                		snd.target_got("sensitivity")
                	end
                end,
      Lightning = function(target, element)
                  	snd.target_got("paresis")
                  	if element == "Fire" then
                  		snd.target_got("vertigo")
                  	elseif element == "Water" then
                  		snd.target_got("epilepsy")
                  	end
                  end,
      Frostblade = function(target, element, venom)
                     local aff = snd.venomEffect(venom)
                     snd.target_got(aff)
                     table.insert(snd.last_affs, aff)
                     if element == "Water" then
                   	  snd.target_got("hypothermia")
                     end
                   end,
      Gorge = function(target, element, pill)
              	snd.target_got("gorged")
              	if element == "Fire" then
              		snd.target_got("anorexia")
              	elseif element == "Air" then
              		snd.target_got("indifference")
              	end
                if pill ~= nil then snd.gorged = pill end
              end,
      Icicle = function(target, failed)
                 if failed then
                   snd.removeProneStates(true)
                 else
                   snd.target_got("writhe_impaled")
                   if snd.hitting == "You" then
                    snd.target_impaled = true
                   end
                end
              end,
  },
  
  ["Arcanism"] = {
    Transfix = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                  end,

  },
  
  ["Thaumaturgy"] = {
    Flare = function(target)
            if snd.glimpse == "air" then
              if snd.checkAff("vertigo") then
             		snd.target_got("muddled")
              else
             		snd.target_got("vertigo")
              end
            end
          
            if snd.glimpse == "water" then
              if snd.checkAff("hypothermia") then
                snd.target_got("cold")  
          		else
             	 snd.target_got("hypothermia")
              end
            end
          	
            if snd.glimpse == "fire" then
              snd.target_got("ablaze")
          	end
          end,       

  },
  
--Sentinel
  ["Dhuriv"] = {
    
  Impale = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
            end
          end,
   Throatcrush = function(target)
                    table.insert(snd.maybe_affs, "destroyed_throat")
                    snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Sentinel")
                  end,
   Gouge = function(target)
              table.insert(snd.maybe_affs, "impatience")
              snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Sentinel")
            end,
   Heartbreaker = function(target)
                    table.insert(snd.maybe_affs, "heartflutter")
                    snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Sentinel")
                  end,
   Twirl = function(target)
              table.insert(snd.maybe_affs, 1, "confusion")
              snd.onHit2({"Dodge",}, "Sentinel")
            end,
   Trip = function(target)
            table.insert(snd.maybe_affs, 1, "fallen")
            snd.onHit2({"Dodge"}, "Sentinel")
          end,
   Flourish = function(target)
                  snd.onHit2({"Dodge", "Rebounding"}, "Sentinel")
                end,
   Slash = function(target)
              snd.onHit2({"Dodge", "Rebounding"}, "Sentinel Slash")
            end,
   Stab = function(target)
            snd.onHit2({"Dodge", "Rebounding"}, "Sentinel")
          end,
   Weaken = function(target)
              enableTrigger("Weaken arms or legs")
              snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
            end,
   Crosscut = function(target)
                if snd.checkAff("impairment") then
                  table.insert(snd.maybe_affs, 1, "addiction")
                else
                 table.insert(snd.maybe_affs, 1, "impairment")
                end
                  snd.onHit2({"Dodge", "Rebounding"}, "Sentinel")
                end,
   Reave = function(target, conditional)
          	if conditional == "shield" then
          		snd.used.shield = false
          	else
          		snd.used.shield = false
          		snd.used.rebounding = false
          	end
          end,           
   Slam = function(target)
            if not snd.checksomeAffs({"laxity", "epilepsy"}, 1) then
              table.insert(snd.maybe_affs, 1, "laxity")
              table.insert(snd.maybe_affs, 2, "epilepsy")
            elseif snd.checkAff("laxity") then
              table.insert(snd.maybe_affs, 1, "epilepsy")
            else
              table.insert(snd.maybe_affs, 1, "laxity")
            end
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel Slam")
          end,      
   Blind = function(target)
                if snd.checkAff("sight") then
                  table.insert(snd.maybe_affs, 1, "blurry_vision")
                else
                 table.insert(snd.maybe_affs, 1, "sight")
                end
                  snd.onHit2({"Dodge", "Rebounding"}, "Sentinel")
                end,            
   Slice = function(target)
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
          end,
   Thrust = function(target)
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
          end,  
   Slit = function(target)
            table.insert(snd.maybe_affs, "crippled_throat")
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
          end,
   Dualraze = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
              end,
  Pierce = function(target)
            enableTrigger("Dhuriv Pierce/Sever")
           end,
  Sever = function(target)
            enableTrigger("Dhuriv Pierce/Sever")
           end,
  },
  
  ["Woodlore"] = {
    Fitness = function(target)
                snd.handleFitness()
              end,
    Daunt = function(target, animal)
              local daunt_list = {
              	["direwolf"] = "claustrophobia",
              	["raloth"] = "agoraphobia",
              	["crocodile"] = "loneliness",
                ["cockatrice"] = "berserking",
              }
	           snd.target_got(daunt_list[animal])
    end,
    
    Icebreath = function(target)
                  snd.target_got("cold")
                end,
  },
  
  ["Tracking"] = {
        

  },
  
--Templar
  ["Battlefury"] = {
  
    Doublestrike = function(target)
                    enableTrigger("Weapon Hit Confirmation")
                   end,
                   
    Rend = function(target)
            if #snd.maybe_affs == 0 then
              table.insert(snd.maybe_affs, "rend")
            end
            snd.onHit2({"Rebounding", "Dodge"})
           end,
    Rage = function(target)
             snd.handleRage()
           end,
    Fitness = function(target)
                snd.handleFitness()
              end,
    Impale = function(target, failed)
               if failed then
                 snd.removeProneStates(true)
               else
                 snd.target_got("writhe_impaled")
                 if snd.hitting == "You" then
                  snd.target_impaled = true
                 end
              end
            end,
    Disembowel = function(target)
                   snd.target_impaled = false
                   snd.target_cured("writhe_impaled")
                 end,
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,
   Razestrike = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                enableTrigger("Weapon Hit Confirmation")
              end,
    Lunge = function(target, what)
              if what == "impale" then
                snd.target_got("writhe_impaled")
              end
              snd.target_got("fallen")
            end,
    Charge = function(target)
               snd.target_got("fallen")
             end,
  },
  
  ["Righteousness"] = {
      Withering = function()
                    snd.target_got("withering")
                  end

  },
  
  ["Bladefire"] = {
      Vorpal = function()
                 enableTrigger("vorpal confirmation")
               end,        

  },
  
--Shaman
  ["Primality"] = {
  
    Slam = function(target, boosted)
             if not boosted then
               snd.target_got("fallen")
             end
           end,
             
    Infest = function(target, boosted)
             if not boosted then
               snd.target_got("infested")
             end
           end,
    Spines = function(target, boosted)
             if not boosted then
               snd.target_got("blighted")
             end
           end,
    Overload = function(target, boosted)
                snd.target_got("paresis")
                snd.target_got("stupidity")
              end,
    Vitiate = function(target, boosted)
             if boosted then
               snd.target_got("plodding")
             end
             snd.target_got("lifebane")
           end,
    Strangle = function(target, boosted)
                snd.target_got("writhe_vines")
              end,

    Vinelash = function(target, boosted)
                  if #snd.maybe_affs &gt;= 1 then
                    snd.onHit2({})
                  end
                end,
    Leafstorm  = function(target, boosted)
                  snd.used.shield = false
                end,
    Scourge = function(target, boosted)
             if boosted then
               snd.target_got("idiocy")
             end
             snd.target_got("vitalbane")
           end,  
    Stormbolt = function(target, boosted)
                  if boosted then
                    snd.target_got("stormbolt_cloud")
                  end
                end,
    Sporulation = function(target)
    --This never shows boosted message.
                snd.target_got("impatience")
                snd.target_got("confusion")
              end,
    Effusion = function(target)
                snd.target_got("sight")
                snd.target_got("hearing")
                snd.target_got("sensitivity")
              end,
    Equivalence = function(target, boosted)
    --This might be hidden from all except the Shaman, not sure
             if boosted then
               snd.target_got("justice")
             end
           end,  
  },
  
  ["Shamanism"] = {
    Premonition = function(target)
                    snd.target_got("premonition")
                  end,
        

  },
  
  ["Naturalism"] = {
        

  },  
  
--Indorani
  ["Necromancy"] = {
        Screech = function(target)
                    snd.target_got("hearing")
                  end,
        Belch = function(target)
        --not used by Sunder but some may want it
                 end,
        Leech = function(target)
                   snd.target_has_aura = true
                   snd.need_leech_aura = false
                end,                 
        Shrivel = function(target, where)
                    if where == "arms" then snd.target_got("a broken arm")
                    elseif where == "legs" then snd.target_got("a broken leg")
                    elseif where == "throat" then snd.target_got("crippled_throat")
                    else snd.target_got(where.." broken")
                    end
                  end, 
        Deform = function(target)
        -- Kept for purposes of those who want to track if they've hit deform and to damage kill off of it
                 end,                
        Bonedagger = function(target)
                      if #snd.maybe_affs == 1 then
                        snd.onHit2({"Rebounding", "Dodge"})
                      end
                     end,
  },
  
  ["Tarot"] = {
        Sun = function(target, dodge)
                if not dodge and #snd.maybe_affs &gt; 0 then
                  local aff = snd.maybe_affs[1]
                  if snd.indorani_cards[aff].card == "sun" then
                    snd.target_got(aff)
                  end
                  table.remove(snd.maybe_affs, 1)
                end
              end,
        Moon = function(target, dodge)
                if not dodge and #snd.maybe_affs &gt; 0 then
                  local aff = snd.maybe_affs[1]
                  if snd.indorani_cards[aff].card == "moon" then
                    snd.target_got(aff)
                  end
                  table.remove(snd.maybe_affs, 1)
                end
              end,
        Hangedman = function(target, conditional)
                        if conditional ~= "prone" then
                          snd.target_got("writhe_ropes")
                        end
                        snd.target_got("fallen")
                    end,             
        Lovers = function(target)
                   snd.target_got("lovers_effect")  
                 end,

        Aeon = function(target, speed)
                if not speed then
                  snd.target_got("aeon")
                end
                snd.target_got("no_speed")  
        end,
        
        Justice = function(target)
                   snd.target_got("justice") 
                 end,
                 
        Despair = function(target)
                   snd.target_got("despair")
                   tempTimer(15.75, [[snd.target_cured("despair")]])  
                 end,        
        Warrior = function(target, limb)
                     snd.last_hit_limb = limb
                     snd.last_limb_dmg = 12.50
                     snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                     enableTrigger("Sunder Parry")
                   end,
        Sandman = function(target)
                   --currently unused but if I want to add insomnia/sleep tracking it'll be here.
                 end,
        Adder = function(target)
            		  snd.target_got("haemophilia")
            	    if snd.hitting == "You" then
            	      snd.adder_attached = true
            		    snd.adder_ready = false
            	    end
                 end, 
  },
  
  ["Domination"] = {
    Slime = function(target)
              snd.balance.envelop = false
            end,        

  },
  
--Praenomen
  ["Corpus"] = {
  
    Deadbreath = function(target)
                snd.target_got("slickness")
                snd.used.paste = false
              end,
    Frenzy = function(target, sunder)
               if sunder then
                 snd.used.shield = false
               end
            end,
    Reconstruct = function(target, limb)
                    snd.took_limb_dmg(-15, limb)
                  end,
    Gash = function(target, lightly)
            snd.onHit2({"Dodge", "Rebounding"})
           end,
    
    Clawing = function(target)
                snd.target_got("rend")
              end,
  
  },
  
  ["Mentis"] = {
    Mesmerize = function(target)
                 snd.target_got("writhe_transfix")
                end,
    Confusion = function(target)
                 snd.target_got("confusion")
                end,
    Impatience = function(target)
                 snd.target_got("impatience")
                end,
    Paranoia = function(target)
                 snd.target_got("paranoia")
                end,
    Stupidity = function(target)
                 snd.target_got("stupidity")
                end,
    Agoraphobia = function(target)
                 snd.target_got("agoraphobia")
                end,
    Masochism = function(target)
                 snd.target_got("masochism")
                end,
    Loneliness = function(target)
                 snd.target_got("loneliness")
                end,
    Epilepsy = function(target)
                 snd.target_got("epilepsy")
                end,
    Anorexia = function(target)
                 snd.target_got("anorexia")
                end,
    Peace = function(target)
                 snd.target_got("peace")
                end,
    Dementia = function(target)
                 snd.target_got("dementia")
                end,
    Berserking = function(target)
                 snd.target_got("berserking")
                end,
    Indifference = function(target)
                 snd.target_got("indifference")
                end,
    Vertigo = function(target)
                 snd.target_got("vertigo")
                end,
    Recklessness = function(target)
                 snd.target_got("recklessness")
                end,
    Seduction = function(target)
                 snd.target_got("seduction")
                end,
    Temptation = function(target)
                 snd.target_got("temptation")
                end,
    Disrupt = function(target, failure)
                if not failure then
                  snd.target_got("disrupted")
                end
              end,
  },
  
  ["Sanguis"] = {
  
  Curse = function(target)
            snd.target_got("blood_curse")
          end,

  Spew = function(target)
           snd.target_got("hearing")
           snd.target_got("sight")
         end,
         
  Feast = function(target)
      		  snd.target_got("feast")
      		  tempTimer(19.5, [[snd.target_cured("feast")]])
      	    snd.used.paste = false
          end,
          
  Poison = function(target)
             snd.target_got("blood_poison")
          end,
          
  Rune = function(target)
            snd.target_got("blood_rune")
        end,
    },
--Archivist
  ["Geometrics"] = {
    Pattern = function(target)
                snd.target_got("patterns")
              end,
              
    Lemniscate = function(target)
                   snd.target_got("lemniscate")
                 end,
    Matrix = function(target)
               snd.target_got("matrix")
               matrix_timer = tempTimer(20.0,[[snd.target_cured("matrix")]])
             end,

    Circle = function(target)
              local t = {"merciful", "masochism", "berserking", "recklessness"} -- initialize table with circle affs
              for _, v in pairs(t) do -- iterate circle affs
                if not snd.checkAff(v) then -- check if they have it
                  snd.target_got(v) -- if they don't have it, add it
                  break -- if we added an aff, break out of the loop
                end -- end if
              end -- end for
             end,
                      
    Triangle = function(target)
              local t = {"laxity", "lovers_effect", "peace", "magnanimity"} 
              for _, v in pairs(t) do
                if not snd.checkAff(v) then
                  snd.target_got(v)
                  break 
                end 
              end
             end,
                
    Square = function(target)
              local t = {"dizziness", "faintness", "epilepsy", "shyness"} 
              for _, v in pairs(t) do
                if not snd.checkAff(v) then
                  snd.target_got(v)
                  break 
                end 
              end
             end,
    Sealing = function(target, shape)
                snd.target_got(shape.."_sealed")
                if shape == "square" then
                  tempTimer(6, [[snd.target_cured("square_sealed")]])
                elseif shape == "circle" then
                  tempTimer(6, [[snd.target_cured("circle_sealed")]])
                elseif shape == "triangle" then
                  tempTimer(6, [[snd.target_cured("triangle_sealed")]])
                end
              end,
    Fork = function(target)
             snd.used.shield = false
           end,
  },
  
  ["Numerology"] = {
        
    Madness = function(target)
               snd.target_got("dementia")
               snd.target_got("paranoia")
               snd.target_got("hallucinations")
               if snd.hitting == "You" then snd.balance.madness = false end
              end,
    Affliction = function(target)
                   enableTrigger("Elicit Affliction")
                 end,

  },
  
  ["Bioessence"] = {
          Infection = function(target)
                        snd.target_got("mutagen")
                        if snd.hitting == "You" then
                          snd.my_mutagen = true
                          snd.their_mutagen = false
                        else
                          snd.my_mutagen = false
                          snd.their_mutagen = true
                        end
             end,
          Advance = function(target)
                        snd.target_got("mutagen")
                        if snd.hitting == "You" then
                          snd.my_mutagen = true
                          snd.their_mutagen = false
                        else
                          snd.my_mutagen = false
                          snd.their_mutagen = true
                        end
             end,
          Jolt = function(target)
                   snd.target_cured("no_speed")
                 end,
          Preserve = function(target, level)
                       if level == "severe" then
                        snd.target_got("cold")
                        snd.target_got("cold")
                       elseif level == "moderate" then
                        snd.target_got("cold")
                       end
                       snd.target_got("cold")
                      end,

  },
  
--Sciomancer
  ["Sciomancy"] = {
      Chill = function(target, shadowprice)
                snd.target_got("cold")
                if shadowprice ~= nil then
                  snd.target_got("cold")
                end
              end,
      Hew = function(target, fail)
              snd.used.shield = false
            end,
      Ruin = function(target, shadowprice)
              local afflist = {"clumsiness", "weariness", "lethargy", "paresis"}
              local affcount = 0
              for _, v in pairs(afflist) do if not snd.checkAff(v) then
                snd.target_got(v)
                affcount = affcount + 1
                if not shadowprice or affcount == 2 then break end
                end
              end
            end,
      Scourge = function(target, shadowprice)
                  if snd.checksomeAffs({"dizziness", "nyctophobia", "confusion", "dementia"}, 4) then
                    snd.target_got("faintness")
                  end
                end,
      Gloom = function(target)
                snd.target_got("gloom")
              	if table.contains(gmcp.Room.Info.details, "darkness") == true then
              		snd.target_got("nyctophobia")
                end  
              end,
      Shaderot = function(target, shadowprice)
                   snd.target_got("shaderot_benign")
                   if shadowprice then snd.target_got("shaderot_spirit") end
                  end,         
      Voidgaze = function(target, shadowprice)
                   snd.target_got("voidgaze")
                   if shadowprice then snd.target_got("sight") end
                  end, 
      Fever = function(target, shadowprice)
                   snd.target_got("vomiting")
                   snd.target_got("haemophilia")
                  end,                   
      Shadowsphere = function(target, shadowprice)
                      if snd.hitting == "You" then snd.balance.shadowsphere = false end
                     	snd.target_got("shadowsphere")
                      if shadowprice then snd.target_got("nyctophobia")	end
                    end,                   
      Falter = function(target, shadowprice)
                	if snd.checkAff("dizziness") then snd.target_got("dementia")
                  elseif snd.checkAff("weariness") then snd.target_got("exhaustion") end
                end,
  },
  
  ["Sorcery"] = {
    Transfix = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                  end,   

  },
  
  ["Gravitation"] = {
    Erupt = function(target, limb)
              snd.last_hit_limb = limb
              local dmg = { [0] = 4, [1] = 8, [2] = 13, [3] = 19, [4] = 25, [5] = 33}
              snd.took_limb_dmg(snd.last_hit_limb, dmg[snd.gravity])
              snd.gravity = 0
              if snd.class == "Sciomancer" then
              	snd.message("&lt;red&gt;Gravity Total: &lt;white&gt;"..snd.gravity)
              end
            end,
    Impede = function(target)
               snd.target_got("impede")
            end,
    Grip = function(target)
          	snd.target_got("paresis")
          	snd.target_got("fallen")
          	
          	if snd.hitting == "You" then
          		if snd.gravity &gt;= 0 then
          			snd.gravity = snd.gravity+1
          		end
          	end

            if snd.class == "Sciomancer" then
            	snd.message("&lt;red&gt;Gravity Total: &lt;white&gt;"..snd.gravity)
            end
          end,
    Imbue = function(target)
               snd.target_got("imbued")
             end,
  },
  
--Teradrim
  ["Terramancy"] = {
    Gutsmash = function(target)
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 12
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Facesmash = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 13
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Shred = function(target, where)
                snd.last_hit_limb = where
                snd.last_limb_dmg = 10
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Overhand = function(target)
                 snd.target_got("fallen")
               end,
    Batter = function(target, where)
               snd.last_hit_limb = where
               snd.last_limb_dmg = 13.75
               snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
               snd.onHit2({"Dodge", "Parry", "Rebounding"})
              end,
    Shockwave = function(target)
                  snd.target_got("prone")
                  enableTrigger("Shockwave limb breaks")
                end,
    Furor = function(target, where)
             	snd.last_hit_limb = where
            	snd.last_limb_dmg = 7.8
            	snd.took_limb_dmg(where, snd.last_limb_dmg)
              snd.onHit2({"Dodge", "Parry", "Rebounding"})
            end,
    Stoneblast = function(target)
                  if snd.used.rebounding then
                    snd.used.rebounding = false
                  else
                    snd.used.shield = false
                  end
                end,
    Fracture = function(target, where)
                 table.insert(snd.maybe_affs, where.."_broken")
                 	snd.last_hit_limb = where
                	snd.last_limb_dmg = 12
                  if snd.limb_bruising[snd.last_hit_limb] ~= 0 then
                    snd.last_limb_dmg = 12 + (snd.limb_bruising[snd.last_hit_limb]*4)
                  end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,  
    Skullbash = function(target)
                 	snd.last_hit_limb = "head"
                	snd.last_limb_dmg = 17.65
                  local afflist = {"stupidity", "indifference", "impatience"}
                  local check = 0
                  for _, v in pairs(afflist) do if snd.limb_bruising["head"] &gt; check then
                    table.insert(snd.maybe_affs, v)
                    check = check + 1 
                    end
                  end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Teradrim Skullbash")
               end,
    Pulp = function(target)
           	snd.last_hit_limb = "torso"
          	snd.last_limb_dmg = 8.6
          	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Dodge", "Rebounding"})
         end, 
  Impale = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
            end
          end,
  Stonevice = function(target)
                snd.target_cured("writhe_impaled")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 10
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
              end,
  Barrage = function(target)
              enableTrigger("Barrage hit confirmation")
            end,
  },
  
  ["Desiccation"] = {
    Shred = function(target, where)
                snd.last_hit_limb = where:gsub(" storm", "")
                snd.last_limb_dmg = 7
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Shield = function(target)
              snd.used.shield = true
             end,
    Curse = function(target)
              snd.target_got("sandrot")
            end,
    Scourge = function(target, where)
                snd.target_got(where.."_broken")
              end,

  },
  
  ["Animation"] = {
        
  },
--Carnifex
  ["Savagery"] = {
  
  Skewer = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
            end
          end,
    Fitness = function(target)
                snd.handleFitness()
              end,
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,
    Crush = function(target, conditional)
              local aff = {["knees"] = "crushed_kneecaps", ["elbows"] = "crushed_elbows", ["chest"] = "cracked_ribs"}
              if conditional == "chest" and snd.checkAff("cracked_ribs") then
                table.insert(snd.maybe_affs, "crushed_chest")
              else
                table.insert(snd.maybe_affs, aff[conditional])
              end
              snd.onHit2({"Rebounding", "Dodge"}, "Carnifex")
              if conditional == "knees" then tempTimer(11.5, [[snd.target_cured("crushed_kneecaps")]]) end
              if conditional == "elbows" then tempTimer(7.5, [[snd.target_cured("crushed_elbows")]]) end
            end,
    Doublebash = function(target)
                   enableTrigger("Doublebash Hit Confirmation")
                 end,
    Batter = function(target)
               table.insert(snd.maybe_affs, "blurry_vision")
               snd.onHit2({"Rebounding", "Dodge"})
              end,
    Hook = function(target)
              snd.target_got("fallen")
            end,
   Razehack = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                snd.onHit2({"Dodge", "Rebounding"})
              end,
    Spinning = function(target)
                  enableTrigger("Spinslash 2nd half")
                  snd.onHit2({"Dodge", "Rebounding"}, "Carnifex")
                end,
  },
  
  ["Deathlore"] = {
        
    Shield = function(target)
               snd.used.shield = true
             end,
    Frailty = function(target)
                snd.target_got("glasslimb")
              end,
    Distortion = function(target)
                   snd.target_got("distortion")
                 end,   
    Wither = function(target)
               enableTrigger("Wither Limb Messages")
             end,
    Wraith = function(target)
               snd.target_got("soul_wraith")
             end,
    Poison = function(target)
               snd.target_got("soul_poison")
               if snd.hitting == "You" then
                 snd.balance.soulpoison = false
               end
             end,
    Disease = function(target)
                snd.target_got("soul_disease")
              end,
    Implant = function(target)
                enableTrigger("Soul Implant Give")
                snd.target_got("soul_implant")
              end,
    
  },
  
  ["Warhounds"] = {
        
 Acidspit = function(target)
              if snd.checkAff("weariness") then
                snd.target_got("crippled")
              else
                snd.target_got("weariness")
              end
            end,

 Poisonclaw = function(target)
                if snd.checkAff("blisters") then
                  snd.target_got("limp_veins")
                else
                  snd.target_got("blisters")
                end
              end,

 Shock = function(target)
            if snd.checkAff("epilepsy") then
              snd.target_got("hallucinations")
            else
              snd.target_got("epilepsy")
            end
          end,
 Stare = function(target)
            if snd.checkAff("berserking") then
              snd.target_got("impairment")
            else
              snd.target_got("berserking")
            end
          end,

 Growl = function(target)
            if snd.checkAff("dizziness") then
              snd.target_got("recklessness")
            else
              snd.target_got("dizziness")
            end
          end,
  
  Shatter = function(target)
              snd.used.shield = false
            end,
  Bite = function(target, limb)
                 snd.last_hit_limb = limb
                 snd.last_limb_dmg = 2.49
                 snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                 enableTrigger("Sunder Parry")
               end,
  Contagion = function(target)
              --loki
              end,
  Tundralhowl = function(target)
                  snd.target_got("cold")
                end,
  Firebreath = function(target)
                 snd.target_got("ablaze")
               end,
  },
  
--Monk
  ["Tekura"] = {

    Kipup = function(target)
               snd.target_cured("fallen")
             end,
             
    Sidekick = function(target)
              	snd.last_limb_dmg = 9
                enableTrigger("Monk Hit Tracking")
              end,
    Snapkick = function(target)
              	snd.last_limb_dmg = 9
                enableTrigger("Monk Hit Tracking")
              end,
    Moonkick = function(target)
              	snd.last_limb_dmg = 9
                enableTrigger("Monk Hit Tracking")
              end,
    Whirlwind = function(target)
              	snd.last_limb_dmg = 9
                if snd.checkAff("fallen") then snd.last_limb_dmg = 12 end
                enableTrigger("Monk Hit Tracking")
              end,
    Axe = function(target)
              	snd.last_limb_dmg = 9
                enableTrigger("Monk Hit Tracking")
              end,
    Sweepkick = function(target)
              	snd.target_got("fallen")
              end,
    Scythekick = function(target)
              	snd.used.shield = false
              end,
    Cometkick = function(target)
              	snd.last_limb_dmg = 5.5
                enableTrigger("Monk Hit Tracking")
              end,
    Hook = function(target)
              	snd.last_limb_dmg = 5.5
                enableTrigger("Monk Hit Tracking")
              end,
    Uppercut = function(target)
              	snd.last_limb_dmg = 5.5
                enableTrigger("Monk Hit Tracking")
              end,
    Hammerfist = function(target)
              	snd.last_limb_dmg = 5.5
                enableTrigger("Monk Hit Tracking")
              end,
    Spear = function(target)
              	snd.last_limb_dmg = 5.5
                enableTrigger("Monk Hit Tracking")
              end,
    Palmstrike = function(target)
              	snd.target_got("blurry_vision")
              end,
    Jab = function(target)
              	snd.last_limb_dmg = 5
                enableTrigger("Monk Hit Tracking")
              end,
    Throatstrike = function(target)
                enableTrigger("Throatstrike confirmation hit")
              end,
    Bladehand = function(target)
                enableTrigger("Turmoil confirmation hit")
              end,
    Slam = function(target)
             snd.target_got("fallen") --Just incase
           end,
    Feint = function(target, limb)
             snd.parried_limb = limb
            end,
    Wrench = function(target)
               enableTrigger("Wrench confirmation hit")
             end,

  },
  
  ["Kaido"] = {
    Fitness = function(target)
                snd.handleFitness()
              end,
    Cripple = function(target)
               --
              end,
              
    Restoration = function(target)
                    snd.handleRestore()
                  end,

  },
  
  ["Telepathy"] = {
  
    Disrupt = function(target, fail)
                if not fail then
                  snd.target_got("disrupted")
                end
              end,
        

  },
  
--Syssin
  ["Assassination"] = {
    Bind = function(target)
             snd.target_got("writhe_bind")
           end,
    Doublestab = function(target)
                  enableTrigger("Syssin Hit Confirmation")
                 end,
    Flay = function(target, condition)
             enableTrigger("Syssin Hit Confirmation")
             snd.used.shield = false
             if condition:find("rebounding") then
                snd.used.rebounding = false
             end
             if condition:find("fangbarrier") then
                snd.used.rebounding = false
                snd.used.paste = false
             end
             if condition:find("speed") then
                snd.used.rebounding = false
                snd.used.paste = false
                snd.target_got("no_speed")
             end
            end,
    Slit = function(target)
                  enableTrigger("Syssin Hit Confirmation")
                 end,
                 
    Bite = function(target, venom)
            snd.used.paste = false
            if venom ~= "camus" then
             snd.target_got(snd.venomEffect(venom))
            end
          end,

  },
  
  ["Subterfuge"] = {
    -- Nothing currently necessary

  },
  
  ["Hypnosis"] = {
    Sleight = function(target, conditional)
                if conditional == "Void" then
                  snd.target_got("void")
                end
    end,     
    Marks = function(target, conditional)
                if conditional == "Numbness" then
                  snd.target_got("numbed_skin")
                  if not table.isMember(gmcp.Room.Info.details, "darkness") then
                    tempTimer(9.5, [[snd.target_cured("numbed_skin")]])
                  end
                end
    end,   
  },
  
--Shapeshifter
  ["Shapeshifting"] = {
    Swipe = function(target) 
              snd.target_got("hearing")
            end,
    Pounce = function(target, shield)
               if shield then
                snd.used.shield = false
               end
             end,
    Charge = function(target)
               snd.target_got("fallen")
             end,
    Rage = function(target)
             snd.handleRage()
           end,
    Shed = function(target)
             snd.target_cured("slickness")
           end,
  },
  
  ["Ferality"] = {
    Bite = function(target, limb)
            snd.last_hit_limb = limb
            snd.last_limb_dmg = 9
            snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Dodge", "Parry"})
          end,
    Gut = function(target)
          --not necessary since it gives mangled line 
          --keeping incase someone needs it for something
          end,
    Lacerate = function(target)
                table.insert(snd.maybe_affs, "rend")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 11.4
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,        
    Facemaul = function(target)
                table.insert(snd.maybe_affs, "mauled_face")
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 14
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Jugular = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Skullwhack = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Throatslice = function(target)
                table.insert(snd.maybe_affs, "crippled_throat")
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Skullcrush = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 66.67-snd.limb_dmg["head"]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Parry"})
               end,
    Spinalcrack = function(target)
                table.insert(snd.maybe_affs, "paresis")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 10
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,      
    Slash = function(target, limb)
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Rend = function(target, limb)
                table.insert(snd.maybe_affs, limb:gsub(" ", "_").."_broken")
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 5.6
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Hamstring = function(target, limb)
                table.insert(snd.maybe_affs, limb:gsub(" ", "_").."_broken")
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 5.6
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end, 
   Faceslash = function(target)
                table.insert(snd.maybe_affs, "blurry_vision")
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
   Bodypunch = function(target)
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 7
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
   Armpitlock = function(target)
                  snd.target_got("writhe_armpitlock")
                end,
   Thighlock = function(target)
                  snd.target_got("writhe_thighlock")
                end,
   Necklock = function(target)
                  snd.target_got("writhe_necklock")
                end,
   Spleenrip = function(target)
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 15
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.target_cured("writhe_armpitlock")
                --snd.onHit2({"Dodge", "Parry"}) don't believe it can be missed
               end, 
   Groinrip = function(target)
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 15
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.target_cured("writhe_thighlock")
                --snd.onHit2({"Dodge", "Parry"}) don't believe it can be missed
               end, 
   Throatrip = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 10
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.target_cured("writhe_necklock")
                --snd.onHit2({"Dodge", "Parry"}) don't believe it can be missed
               end,
   Mangle = function(target, limb)
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 33.33 - snd.limb_dmg[limb]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
   Destroy = function(target, limb)
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 66.67 - snd.limb_dmg[limb]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end, 
   Leapslash = function(target, limb)
                snd.target_got("fallen")
               end,
   Deathroll = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,
   Rupture = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,
   Buffet = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,
   Gore = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,                
   Spinalrip = function(target)
                table.insert(snd.maybe_affs, "spinal_rip")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 13.75
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end, 
   Headdrop = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 33.34 - snd.limb_dmg["head"]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end, 
  },
  
  ["Vocalizing"] = {
    Baying = function(target, conditional)
    
              if howl_conversion[conditional] == nil then return end
          
              local howl_conversion = {
              ["paralyzing"] = "paresis",
              ["baleful"] = "impairment",
              ["rousing"] = "bravado",
              ["distasteful"] = "anorexia",
              ["forceful"] = "prone",
              ["mind-numbing"] = "stupidity",
              ["stomach-turning"] = "vomiting",
              ["claustrophobic"] = "claustraphobia",
              ["muddling"] = "peace",
              ["hypnotic"] = "hypersomnia",
              ["deranged"] = "hallucination",
              ["lethargic"] = "lethargy",
              ["ringing"] = "tinnitus",
              ["blurring"] = "blurry_vision",
              ["debilitating"] = "weariness",
              ["berserking"] = "berserking",
              ["angry"] = "hatred",
              ["befuddling"] = "confusion",
              ["deep"] = "plodding",
              ["dumbing"] = "idiocy",
              }
                snd.target_got(howl_conversion[conditional])
              end,
  },
  
--Wayfarer
  ["Tenacity"] = {
    Sweep = function(target)
              snd.target_got("fallen")
            end,
    Obstruct = function(target)
                 snd.target_got("fallen")
               end,
    Devastate = function(target)
                  enableTrigger("Tenacity Devastate")
                  --Has specific lines for all cases, safer to use those than presume tracking is 100% right always
                end,
    Lob = function(target)
            snd.onHit2({"Dodge"}, "Wayfarer")
          end,
    Bash = function(target)
            if snd.checkAff("hearing") then
               table.insert(snd.maybe_affs, "dizziness")
          	else
               table.insert(snd.maybe_affs, "hearing")
          	end
            snd.last_hit_limb = "head"
            snd.last_limb_dmg = 9
            snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Rebounding", "Dodge", "Parry"})
          end,
    Slaughter = function(target)
                table.insert(snd.maybe_affs, 1, snd.maybe_affs[2])
                  snd.onHit2({"Dodge"})
                  snd.onHit2({"Dodge"})
                end,
    Carve = function(target)
            if snd.checkAff("vomiting") then
               snd.target_got("fallen")
          	end
           table.insert(snd.maybe_affs, "vomiting")

            snd.last_hit_limb = "torso"
            snd.last_limb_dmg = 14
            snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Parry", "Rebounding", "Dodge"})
          end,
    Lacerate = function(target)
                 table.insert(snd.maybe_affs, "haemophilia")
                 snd.onHit2({"Rebounding", "Dodge", "Parry"})
                end,
    Chop = function(target)
            enableTrigger("Tenacity Chop")
             snd.onHit2({"Parry", "Rebounding", "Dodge"})
          end,
    Cripple = function(target)
            enableTrigger("Tenacity Cripple")
            snd.onHit2({"Parry", "Dodge"})
          end,
    Assault = function(target)
            enableTrigger("Tenacity Assault")
            snd.target_got("assault_damage")
            tempTimer(2, [[snd.target_cured("assault_damage")]])
            snd.onHit2({"Parry", "Dodge"})
            table.insert(snd.last_affs, "assault_damage")
          end,
    Punish = function(target)
                  enableTrigger("Tenacity Punish")
                  --If only tenacity lines had targetting like others in the combat message
                end,
  },
  ["Wayfaring"] = {
        

  },
  
  ["Fury"] = {
    Warcry = function(target, boosted)
                snd.target_got("hearing")
                if boosted then snd.target_got("ringing ears") end
             end,

    Threaten = function(target, boosted)
                snd.target_got("hatred")
                if boosted then snd.target_got("masochism") end
             end,

    Shake = function(target, boosted)
                snd.target_got("weariness")
             end,

    Halt = function(target, boosted)
                snd.target_got("lethargy")
             end,

    Exhaust = function(target, boosted)
                snd.target_got("exhausted")
             end,
             
    Expunge = function(target, boosted)
                snd.handleExpunge()
              end,
    Shatter = function(target, boosted)
             enableTrigger("Fury Shatter Second Aff")
             if boosted then
               snd.target_got("muddled")
               tempTimer(4.9, [[if snd.checkAff("muddled") then snd.target_cured("muddled") end]])
             end
           end,
    Distract = function(target, boosted)
                 snd.parried_limb = "none"
              end,
  },
  
  --Random stuff
  
  ["Tattoos"] = {
  
    Shield = function(target)
               snd.used.shield = true
             end,
  
  },
  
  ["Research"] = {
  
    Disperse = function(target)
                snd.removeProneStates()
              end  
  
  },
  ["Survival"] = {
  
    Restoration = function(target)
                    snd.handleRestore()
                  end  
  
  },
    ["Raloth"] = {

      Trample = function(target)
                enableTrigger("Raloth Trample")
              end,
  },
    ["Relic"] = {

      Entangle = function(target)
                  snd.target_got("writhe_web")
                end,
      Webspray = function(target)
                  snd.target_got("writhe_web")
                end,
  },
  
--Revenant
  ["Riving"] = {
    Rage = function(target)  
             snd.handleRage()
           end,
    Duplicity = function(target)
                    enableTrigger("Weapon Hit Confirmation")
                   end,
    Gouge = function(target)
            if #snd.maybe_affs == 0 then
              table.insert(snd.maybe_affs, "rend")
            end
            snd.onHit2({"Rebounding", "Dodge"})
           end,
    Fitness = function(target)
                snd.handleFitness()
              end,       
    Transpierce = function(target, failed)
               if failed then
                 snd.removeProneStates(true)
               else
                 snd.target_got("writhe_impaled")
                 if snd.hitting == "You" then
                  snd.target_impaled = true
                 end
              end
            end,      
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,
   Deceive = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                enableTrigger("Weapon Hit Confirmation")
              end,
    Extirpate = function(target)
                   snd.target_impaled = false
                   snd.target_cured("writhe_impaled")
                 end,
    Jumpcut = function(target, what)
              if what == "impale" then
                snd.target_got("writhe_impaled")
              end
              snd.target_got("fallen")
            end,
    Initiate = function(target)
               snd.target_got("fallen")
             end,    
  },
  
  ["Manifestation"] = {
      Parasite = function()
                    snd.target_got("withering")
                  end

  },
  
  ["Chirography"] = {
      Atdum = function()
           enableTrigger("atdum confirmation")
         end,      

  },
--Warden
  ["Warding"] = {
    Lacerate = function(target)
                  enableTrigger("Spinslash 2nd half")
                  snd.onHit2({"Dodge", "Rebounding"}, "Warden")
                end,
   Bypass = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                snd.onHit2({"Dodge", "Rebounding"})
              end,
    Terrorize = function(target)
              snd.target_got("fallen")
            end,
    Maim = function(target)
               table.insert(snd.maybe_affs, "blurry_vision")
               snd.onHit2({"Rebounding", "Dodge"})
              end,
    Pummel = function(target, conditional)
              local aff = {["knees"] = "crushed_kneecaps", ["elbows"] = "crushed_elbows", ["chest"] = "cracked_ribs"}
              if conditional == "chest" and snd.checkAff("cracked_ribs") then
                table.insert(snd.maybe_affs, "crushed_chest")
              else
                table.insert(snd.maybe_affs, aff[conditional])
              end
              snd.onHit2({"Rebounding", "Dodge"}, "Warden")
              if conditional == "knees" then tempTimer(11.5, [[snd.target_cured("crushed_kneecaps")]]) end
              if conditional == "elbows" then tempTimer(7.5, [[snd.target_cured("crushed_elbows")]]) end
            end,          
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,   
    Fitness = function(target)
                snd.handleFitness()
              end,        
  Constrict = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
            end
          end,
    Maul = function(target)
                   enableTrigger("Maul Hit Confirmation")
                 end,
     
  },
  
  ["Ancestry"] = {
    Inhibit = function(target)
               snd.target_got("inhibited")
             end,    
    Spear = function(target)
               enableTrigger("Spear Limb Messages")
             end,
    Intercept = function(target)
               snd.used.shield = true
             end,
    Ambush = function(target)
               snd.target_got("ancestral_ambush")
               if snd.hitting == "You" then
                 snd.balance.soulpoison = false
               end
             end,
    Portent = function(target)
                snd.target_got("ancestral_portent")
              end,
    Debilitate = function(target)
                snd.target_got("debilitated")
              end,
    Attune = function(target)
                enableTrigger("Ancestor Attune give")
                snd.target_got("ancestor_implant")
              end,
    Elude = function(target)
                   snd.target_got("eluded")
                 end,   
              
  },
  
  ["Communion"] = {
  Advance = function(target)
              snd.used.shield = false
            end,
  Saboteur = function(target)
              --loki
              end,
 Stormwarden = function(target)
            if snd.checkAff("epilepsy") then
              snd.target_got("hallucinations")
            else
              snd.target_got("epilepsy")
            end
          end,
  Snowdancer = function(target)
                  snd.target_got("cold")
                end,
  Firekeeper = function(target)
                 snd.target_got("ablaze")
               end,    
 Harrier = function(target)
              if snd.checkAff("weariness") then
                snd.target_got("crippled")
              else
                snd.target_got("weariness")
              end
            end,
  Chanter = function(target)
            if snd.checkAff("dizziness") then
              snd.target_got("recklessness")
            else
              snd.target_got("dizziness")
            end
          end,
 Inciter = function(target)
            if snd.checkAff("berserking") then
              snd.target_got("impairment")
            else
              snd.target_got("berserking")
            end
          end,  
 Toxicologist = function(target)
                if snd.checkAff("blisters") then
                  snd.target_got("limp_veins")
                else
                  snd.target_got("blisters")
                end
              end,         
  Assault = function(target, limb)
              if limb ~= nil then
               snd.last_hit_limb = limb
               snd.last_limb_dmg = 2.49
               snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
               enableTrigger("Sunder Parry")
              end
            end,

  },
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>randoms</name>
						<packageName></packageName>
						<script>snd.randomspirit = {}
snd.randomshadow = {}</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Class specific stuff</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Archivist aff picking</name>
							<packageName></packageName>
							<script>snd.shape_affs = {
		"merciful",
		"masochism",
		"berserking",
		"recklessness",
		"laxity",
		"lovers_effect",
		"peace",
		"magnanimity",
		"dizziness",
		"faintness",
		"epilepsy",
		"shyness",
}

snd.mutagen_affs = {
		"addiction",
		"allergies",
		"blisters",
		"lethargy",
}

snd.impress_affs = {
		"mental_disruption",
		"vomiting",
		"egocentric",
		"hypochondria",
		"paresis",
}

snd.shape_attacks = {
		merciful = "circle",
		masochism = "circle",
		berserking = "circle",
		recklessness = "circle",
		laxity = "triangle",
		lovers_effect = "triangle",
		peace = "triangle",
		magnanimity = "triangle",
		dizziness = "square",
		faintness = "square",
		epilepsy = "square",
		shyness = "square",
}

snd.mutagen_attacks = {
		addiction = "phys",
		allergies = "one",
		blisters = "phys4",
		lethargy = "phys3",
}

snd.impress_attacks = {
		mental_disruption = "swirl",
		vomiting = "bloom",
		egocentric = "crescent",
		hypochondria = "hex",
		paresis = "star",
}
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Sentinel Scripts and Tables</name>
							<packageName></packageName>
							<script>snd.dhuriv_affs = {
		"impatience",
		"destroyed_throat",
		"heartflutter",
		"confusion",
		"lethargy",
		"prone",
		"impairment",
		"reave",
		"claustrophobia",
		"agoraphobia",
		"loneliness",
		"berserking",
		"frozen",
		"shivering",
    "ambush",
}

snd.dhuriv_first = {
		"reave",
		"slash",
		"twirl",
		"weaken", 
		"trip",
		"slam",
		"crosscut",
		"throatcrush",
		"daunt",
		"icewyrm",
    "ambush",
}

snd.dhuriv_second = {
		"stab",
		"heartbreaker",
		"gouge",
		"thrust",
		"flourish",
}

snd.dhuriv_attacks = {
		reave = "reave",
		impatience = "gouge",
		destroyed_throat = "throatcrush",
		heartflutter = "heartbreaker",
		confusion = "twirl",
		lethargy = "weaken left leg",
		prone = "trip",
		epilepsy = "slam",
		impairment = "crosscut",
		claustrophobia = "daunt",
		agoraphobia = "daunt",
		loneliness = "daunt",
		berserking = "daunt",
		frozen = "icewyrm",
		shivering = "icewyrm",
    ambush = "ambush",
}

snd.daunt_animals = {
		["claustrophobia"] = "order direwolf daunt ",
		["agoraphobia"] = "order raloth daunt ",
		["loneliness"] = "order crocodile daunt ",
		["berserking"] = "order cockatrice daunt ",
		["frozen"] = "order icewyrm icebreath ",
		["shivering"] = "order icewyrm icebreath ",
		
}

function Sentinel_Attack_Choice(giving, left, right) -- requires to be sent a list of affs and 2 variables for 
																										 -- it to fill and send back with choices.

	  if snd.parried_limb == "left leg" then snd.dhuriv_attacks["lethargy"] = "weaken right leg" end --check if parrying

		local right_venom_only = false -- used for when we choose a daunt aff
		
----------An example of how you might change your aff list. If current offense mode is mental affs, we want to make sure
----------they have impatience, so check if they have impatience and paresis. If no to both, add paresis to top of stack.
	
		if not snd.checksomeAffs({"paresis", "impatience"}, 1) and snd.current_offense == "SentMental" then
			table.insert(giving, 1, "paresis")
		end
		
		if snd.current_offense == "SentVLock" then
		
			local missing = snd.missingAff("asthma/slickness", "/")
		
  		if #missing == 0 and snd.no_parry() and snd.checksomeAffs({"weariness", "clumsiness", "hypochondria"}, 1) then
  			table.insert(giving, 1, "destroyed_throat")
  		end
			
			if not snd.checkAff("destroyed_throat") and snd.checkAff("anorexia") then
				table.insert(giving, 1, "impatience")
				table.insert(giving, 1, "stupidity")
			end
	
		end
		
		if snd.current_offense == "SentImpale" or snd.current_offense == "SentSalve" then
				
			if not snd.enemy_restoration_balance and snd.no_parry() then
				table.insert(giving, 1, "destroyed_throat")
			end
		
		end
    
    if snd.current_offense == "SentLumiSupport" then
			if not snd.checkAff("destroyed_throat") and snd.checkAff("anorexia") then
				table.insert(giving, 1, "impatience")
				table.insert(giving, 1, "stupidity")
			end   

		end
    
    

		
		
----------Below here the function picks affs for you based on your aff list sent over and any changes made by checks above.

		for i, v in pairs(giving) do
			if not table.contains(snd.target_has, giving[i]) then
				if left == "none" then
					if snd.used.shield or snd.used.rebounding then
						left = "reave"
					elseif table.contains(snd.dhuriv_first, snd.dhuriv_attacks[v]) then
			  			left = v
							if left == "destroyed_throat" then right = nil end
							if (snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm") then right_venom_only = true end

					elseif table.contains(snd.dhuriv_second, snd.dhuriv_attacks[v]) and right == "none" then
						right = v
						
					elseif table.contains(snd.effects, i) and not snd.checkAff(giving[i]) then
						if left == "none" and right ~= giving[i] then
							left = giving[i]
						end
					elseif not snd.checkAff(giving[i]) then
						left = v
					end
				end

				if right == "none" then
					if not right_venom_only and table.contains(snd.dhuriv_first, snd.dhuriv_attacks[v]) and table.contains(snd.effects, left) and left ~= "paresis" and v~= "destroyed_throat" then
						right = left
			  			left = v
								
					elseif not right_venom_only and table.contains(snd.dhuriv_second, snd.dhuriv_attacks[v]) then
						right = v
						
					elseif table.contains(snd.effects, v) and not snd.checkAff(giving[i]) then
						if left ~= giving[i] then
							right = giving[i]
						end
						
					end
				end
			end
		end
			
		return left, right ---- Return our attack choices back to the main alias.
	end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Indorani card table</name>
							<packageName></packageName>
							<script>--Nested tables incase someone wants to add a devil y/n field to cards and change picking based on it, though so few use it that it may not come to fruition.

snd.indorani_cards = { 
	stupidity = {card = "moon"},
	confusion = {card = "moon"},
	epilepsy = {card = "moon"},
	anorexia = {card = "moon"},
	berserking = {card = "moon"},
	weariness = {card = "moon"},
	impatience = {card = "moon"},
	recklessness = {card = "moon"},

	paresis = {card = "sun"},
	asthma = {card = "sun"},
	clumsiness = {card = "sun"},
	vomiting = {card = "sun"},
	lethargy = {card = "sun"},
	sensitivity = {card = "sun"},
	hearing = {card = "sun"},
	hypersomnia = {card = "sun"},
	superstition = {card = "sun"},
  
  prone = {card = "hangedman"},
  writhe_ropes = {card = "hangedman"},
	
  justice = {card = "justice"},
  
  lovers_effect = {card = "lovers"},
  
  wheel = {card = "wheel"},
  
  slickness = {card = "adder"},
  haemophilia = {card = "adder"},
  
  aeon = {card = "aeon"},
}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Scourge Affs</name>
							<packageName></packageName>
							<script>snd.scourge_affs = {
		"dizziness",
		"nyctophobia",
		"confusion",
		"dementia",
		"faintness",
}</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Templar Tracking</name>
							<packageName></packageName>
							<script>snd.empower_affs = {
		"conviction",
		"mental_disruption",
		"physical disruption",
		"crippled",
		"crippled body",
    "paresis",
}

snd.empower_attacks = {
		["conviction"] = "conviction",
		["mental disruption"] = "disrupt",
		["physical disruption"] = "disrupt",
		["crippled"] = "cripple",
		["crippled body"] = "cripple",
    ["paresis"] = "curare",
    ["hemorrhage"] = "hemorrhage",
}
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Revenant Tracking</name>
							<packageName></packageName>
							<script>snd.actuate_affs = {
		"mortalterror",
		"mental_disruption",
		"physical disruption",
		"crippled",
		"crippled body",
}

snd.actuate_attacks = {
		["mortalterror"] = "bimre",
		["mental disruption"] = "dirne",
		["physical disruption"] = "dirne",
		["crippled"] = "azu",
		["crippled body"] = "azu",
    ["paresis"] = "curare",
    ["hemorrhage"] = "wilave",
    ["wilave"] = "wilave",
}
</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Target calling</name>
						<packageName></packageName>
						<script>
snd.targeting = {
	auto = false,
	list = {},
  burst = false,
  skip = false
}

snd.e = {
	echo	= function (str, lnb, lna)
		if lnb then echo("\n") end
		cecho(string.format("%s", "&lt;aquamarine&gt;Target Update: &lt;grey&gt;") .. str:title())
		if lna then echo("\n") end
	end,

	warn	= function (str, lnb, lna)
		if lnb then echo("\n") end
		cecho(string.format("%s", "&lt;orange_red&gt;Warning:&lt;navajo_white&gt; ") .. str:title())
		if lna then echo("\n") end
	end,
	}</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Functions for calling</name>
							<packageName></packageName>
							<script>function snd.removeTarget(tar)

	local who = tar:title()

	for k, v in pairs(snd.targeting.list) do
		if v == who then
			table.remove(snd.targeting.list, k)
			snd.e.echo("Removed " .. who .. " from targeting list!", true, true)
			break
		end
	end

end


function snd.addTargetList(str)

	local targets = string.split(str, ", ")
	
	for _, v in ipairs(targets) do
		if table.contains(snd.targeting.list, v) then
		else
			v = v:title()
			table.insert(snd.targeting.list, v)
		end
	end

	snd.displayTargetList()

end


function snd.addSingleTarget(tar, pos)

	if not pos then pos = 1 end
	
	tar = tar:title()
	
	if table.contains(snd.targeting.list, tar) then --! just tidying so we don't end up with the same name in a bunch of places
		for k, v in pairs(snd.targeting.list) do
			if v == tar then
				table.remove(snd.targeting.list, k)
				break
			end
		end
	end
	table.insert(snd.targeting.list, pos, tar)

	snd.displayTargetList()

end


function snd.displayTargetList()

	local string = "Targeting order is "
	
	if #snd.targeting.list == 0 then
		string = "Targeting list is empty!"
	else
		for k,v in ipairs(snd.targeting.list) do
			if k &lt; #snd.targeting.list then
				string = string .. v .. ", "
			elseif #snd.targeting.list == 1 then
				string = string .. v .. "."
			else
				string = string .. v .. "."
			end
		end
	end

	snd.e.echo(string, true, true)

end


function snd.callTargetList()

	if not snd.toggles.calling then return end 
                                          
	local string = "Target list: "
	
	if #snd.targeting.list == 0 then
		string = "Out of targets!"
	else
		for k,v in ipairs(snd.targeting.list) do
			if k &lt; #snd.targeting.list then
				string = string .. v .. ", "
			elseif #snd.targeting.list == 1 then
				string = string .. v .. "."
			else
				string = string .. v .. "."
			end
		end
	end
	
	send("wt " .. string)

end


function snd.clearTargetList()

	snd.targeting.list = {}
	snd.e.echo("Target list cleared!", true, true)
	
	if snd.toggles.calling and snd.toggles.calling then 
		send("wt Target list cleared.")
	end

end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Special Cures</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Expunge</name>
							<packageName></packageName>
							<script>function snd.handleExpunge()
  for aff in pairs(snd.physical_affs) do
    if snd.checkAff(snd.physical_affs[aff]) then
      if string.find(snd.physical_affs[aff], "_broken") then
        local string = string.gsub(snd.physical_affs[aff], "_broken", "")
        string = string:gsub("_", " ")
        if snd.limb_status[string] == "healed" then
          snd.target_cured(snd.physical_affs[aff])
          break
        end
      else
        snd.target_cured(snd.physical_affs[aff])
        break
      end
    end
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Rage</name>
							<packageName></packageName>
							<script>function snd.handleRage()
  for _,aff in pairs(snd.cures.steroid) do
    if snd.checkAff(aff) then
      snd.target_cured(aff)
      break
    end
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Fitness</name>
							<packageName></packageName>
							<script>function snd.handleFitness()
 snd.target_cured("asthma")
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Restore</name>
							<packageName></packageName>
							<script>function snd.handleRestore()
  local limbs = {"right arm", "left arm", "left leg", "right leg"}
 
  for _, v in pairs(limbs) do

    if snd.checkAff(v:gsub(" ", "_").."_broken") and snd.limb_status[v] == "healed" then
		  snd.target_cured(v:gsub(" ", "_").."_broken")
    end
  end
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Ylem</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>ylem variables</name>
						<packageName></packageName>
						<script>
snd.ylem_loaded = true

ylm = ylm or {}

ylm.active = false
ylm.next_zone = "none"
ylm.foci = 0
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>path</name>
						<packageName></packageName>
						<script>
ylm.path = {

v1680 = "20389",
v20389 = "13253",
v13253 = "60762",
v60762 = "26690",
v26690 = "26668",
v26668 = "10041",
v10041 = "35117",
v35117 = "62223",
v62223 = "26920",
v26920 = "35217",
v35217 = "60845",
v60845 = "46341",
v46341 = "32704",
v32704 = "45483",
v45483 = "14729",
v14729 = "1644",
v1644 = "56942",
v56942 = "62798",
v62798 = "1433",
v1433 = "3018",
v3018 = "36865",
v36865 = "6",
v6 = "32237",
v32237 = "26841",
v26841 = "38090",
v38090 = "26994",
v26994 = "11326",
v11326 = "11311",
v11311 = "25738",
v25738 = "19602",
v19602 = "53444",
v53444 = "3430",
v3430 = "5598",
v5598 = "32908",
v32908 = "23899",
v23899 = "5692",
v5692 = "21001",
v21001 = "59979",
v59979 = "19323",
v19323 = "42831",
v42831 = "768",
v768 = "973",
v973 = "59912",
v59912 = "19810",
v19810 = "31552",
v31552 = "19987",
v19987 = "64288",
v64288 = "55101",
v55101 = "17034",
v17034 = "18462",
v18462 = "62996",
v62996 = "25671",
v25671 = "19562",
v19562 = "4163",
v4163 = "3276",
v3276 = "63351",
v63351 = "19311",
v19311 = "20932",
v20932 = "20281",
v20281 = "15820",
v15820 = "21908",
v21908 = "53660",
v53660 = "51157",
v51157 = "62383",
v62383 = "18082",
v18082 = "49875",
v49875 = "25969",
v25969 = "44816",
v44816 = "18601",
v18601 = "22477",
v22477 = "4078",
v4078 = "8854",
v8854 = "14430",
v14430 = "14439",
v14439 = "63730",
v63730 = "20855",
v20855 = "8795",
v8795 = "8703",
v8703 = "33348",
v33348 = "58675",
v58675 = "54699",
v54699 = "13425",
v13425 = "59187",
v59187 = "22824",
v22824 = "23791",
v23791 = "23140",
v23140 = "22702",
v22702 = "16282",
v16282 = "19626",
v19626 = "47147",
v47147 = "1288",
v1288 = "19814",
v19814 = "56648",
v56648 = "4740",
v4740 = "61928",
v61928 = "4808",
v4808 = "65189",
v65189 = "49749",
v49749 = "11830",
v11830 = "60181",
v60181 = "36271",
v36271 = "36677",
v36677 = "18968",
v18968 = "1012",
v1012 = "20450",
v20450 = "58789",
v58789 = "17612",
v17612 = "62102",
v62102 = "64479",
v64479 = "64370",
v64370 = "276",
v276 = "16426",
v16426 = "10812",
v10812 = "34760",
v34760 = "1000",
v1000 = "1773",
v1773 = "3106",
v3106 = "11634",
v11634 = "11988",
v11988 = "11994",
v11994 = "56435",
v56435 = "25408",
v25408 = "59862",
v59862 = "18434",
v18434 = "334",
v334 = "11412",
v11412 = "19854",
v19854 = "31576",
v31576 = "60142",
v60142 = "55276",
v55276 = "58912",
v58912 = "20835",
v20835 = "21286",
v21286 = "22866",
v22866 = "23202",
v23202 = "24628",
v24628 = "57559",
v57559 = "4964",
v4964 = "2036",
v2036 = "38894",
v38894 = "16274",
v16274 = "18415",
v18415 = "19320",
v19320 = "24548",
v24548 = "5028",
v5028 = "3887",
v3887 = "57334",
v57334 = "9853",
v9853 = "15761",
v15761 = "59609",
v59609 = "10086",
v10086 = "16584",
v16584 = "16706",
v16706 = "17069",
v17069 = "60726",
v60726 = "15344",
v15344 = "city"

}</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Questing</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>quest variables</name>
						<packageName></packageName>
						<script>
snd.questing_loaded = true

snd.quest_items = {
["Three Widows"] = {"a handful of hay", "a packet of seeds", "a simple net", "a simple pickaxe", "a small grey rock"},
["Mount Humgurd"] = {"a chunk of mixed ore"},
["the Siroccian Mountains"] = {"a lump of flaking coal", "a rock of silver ore", "a hematite ore of iron", "a gold nugget"},
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>run quests</name>
						<packageName></packageName>
						<script>
function snd.runQuests()
	if snd.toggles.questing then
 		if snd.quest_items[snd.my.area] then
  		local need_items = {}
  		for item in pairs(snd.items) do
	 			if table.contains(snd.quest_items[snd.my.area], item) then
	  			for id in pairs(snd.items[item]) do
		 				table.insert(need_items, snd.items[item][id])
					end
	 			end
			end
			if #need_items &gt;= 1 and not snd.waiting.quest_get then
	 			snd.send("qeb get "..table.concat(need_items, snd.sep.."get "))
	 			snd.waiting.quest_get = true
	 			tempTimer(snd.delay(), [[snd.waiting.quest_get = false]])
			end
 		end
 		if snd.my.area == "the mines of Mount Helba" then
			if snd.items["a rich vein of iron ore"] or snd.items["a vein of iron ore"] then
	 			snd.send("qeb mine vein")
				--elseif snd.items["a pile of rubble"] then
  			-- snd.send("dig rubble")
  		end
 		end
	end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Fishing</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>GetFishingHoles</name>
						<packageName></packageName>
						<script>function get_fishing_holes(search_string, display_results, display_full_results)

	if not fishing_holes then
		load_fishing_db()
	end

	search_string = search_string:lower()
	local results = {}
	local result_strings = {}

	for k,v in pairs(fishing_holes) do 

		v.fish = v.fish or {}
		local matched_room = false
		-- Look for typetext.
		if v.type:lower():find(search_string) then
			table.insert(results, v) 
			result_strings[v.name] = v.type
			matched_room = true
		end

		-- Look for nametext.
		if not matched_room and k:lower():find(search_string) then
			table.insert(results, v) 
			result_strings[v.name] = k
			matched_room = true
		end
	
		-- Look for fish.
		if not matched_room then
			for _, fishtype in pairs(v.fish) do
				if fishtype:lower():find(search_string) then
					local found = false
					for _, j in pairs(results) do
						if j.name == v.name and j.fish == fishtype then 
							found = true
							break
						end
					end
					if not found then 
						table.insert(results, v) 
						result_strings[v.name] = fishtype
					end
				end
			end
		end
	end

	if display_results then
		if #results == 0 then
			hecho("|cccccccNo results for '" .. search_string .. "'.\n")
		else
	
			for k,v in pairs(result_strings) do
				local startstr, endstr = result_strings[k]:lower():find(search_string)
				result_strings[k] = result_strings[k]:sub(1, startstr-1) .. "|cff0000" .. result_strings[k]:sub(startstr, endstr) .. "|ccccccc" .. result_strings[k]:sub(endstr+1)
			end

			hecho("|cccccccResults for '" .. search_string .. "':\n")
			for k,v in pairs(results) do
				if display_full_results then
					hecho("   " .. v.name:title() .. string.rep(" ", 30 - v.name:len()) .. "(" .. result_strings[v.name] .. ")\n")
					hecho("     " .. v.type:title() .. ", " .. #v.fish .. " type(s) of fish, fishing vnum v" .. v.rooms[1] .. ".\n\n")
				else
					hecho("   " .. v.name:title() .. string.rep(" ", 30 - v.name:len()) .. "(" .. result_strings[v.name] .. ")\n")
				end
			end
			echo("\n")
		end
	end

	return results
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>SaveLoad</name>
						<packageName></packageName>
						<script>function load_fishing_db()
	local path = getMudletHomeDir().."/aetoliaFishingDB.sav"
	fishing_holes = {}
	if io.exists(path) then
		table.load(path,fishing_holes)
	end
end

function save_fishing_db()
  if not fishing_holes then return false end
  table.save(getMudletHomeDir().."/aetoliaFishingDB.sav", fishing_holes)
end
</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
